use serde::{Deserialize, Serialize};
use indexmap::IndexMap;
use super::*;

// From https://spec.openapis.org/oas/v3.0.3#security-scheme-object
/// Defines a security scheme that can be used by the operations. Supported schemes are HTTP
/// authentication, an API key (either as a header or as a query parameter), OAuth2's common flows
/// (implicit, client credentials, password and authorization code) as defined in
/// [RFC6749](https://tools.ietf.org/html/rfc6749), and [OpenID Connect
/// Discovery](https://tools.ietf.org/html/draft-ietf-oauth-discovery-06).
#[derive(Debug, Serialize, Deserialize, PartialEq)]
pub struct SecurityScheme {
    /// The type of the security scheme. Valid values are "apiKey", "http", "oauth2",
    /// "openIdConnect".
    #[serde(rename = "type")]
    pub scheme_type: SecuritySchemeType,
    /// A short description for security scheme. CommonMark syntax MAY be used for rich text
    /// representation.
    pub description: Option<String>,
    /// The name of the header, query or cookie parameter to be used.
    #[serde(rename = "name")]
    pub name: Option<String>,
    /// The location of the API key. Valid values are "query" or "header" or "cookie".
    #[serde(rename = "in")]
    pub location: Option<Location>,
    /// The name of the HTTP Authorization scheme to be used in the Authorization header as defined
    /// in RFC7235.
    #[serde(rename = "scheme")]
    pub scheme: Option<String>,
    /// A hint to the client to identify how the bearer token is formatted. Bearer tokens are
    /// usually generated by an authorization server, so this information is primarily for
    /// documentation purposes.
    #[serde(rename = "bearerFormat")]
    pub bearer_format: Option<String>,
    /// An object containing configuration information for the flow types supported.
    pub flows: Option<OAuthFlows>,
    /// The OpenID Connect URL to discover OAuth2 configuration values. This MUST be in the form of
    /// a URL.
    #[serde(rename = "openIdConnectUrl")]
    pub open_id_connect_url: Option<String>,
    /// Spec Extensions
    #[serde(flatten)]
    pub extensions: IndexMap<String, serde_json::Value>,
}

// From https://spec.openapis.org/oas/v3.0.3#security-scheme-type
/// The type of the security scheme. Valid values are "apiKey", "http", "oauth2", "openIdConnect".
#[derive(Debug, Serialize, Deserialize, PartialEq)]
pub enum SecuritySchemeType {
    /// API key
    #[serde(rename = "apiKey")]
    ApiKey,
    /// HTTP
    #[serde(rename = "http")]
    Http,
    /// OAuth2
    #[serde(rename = "oauth2")]
    OAuth2,
    /// OpenID Connect
    #[serde(rename = "openIdConnect")]
    OpenIdConnect,
    /// Other type not known by this library
    #[serde(untagged)]
    Other(String),
}

// From https://spec.openapis.org/oas/v3.0.3#oauth-flows-object
/// Allows configuration of the supported OAuth Flows.
#[derive(Debug, Serialize, Deserialize, PartialEq)]
pub struct OAuthFlows {
    /// Configuration for the OAuth Implicit flow
    #[serde(rename = "implicit")]
    pub implicit: Option<OAuthFlow>,
    /// Configuration for the OAuth Resource Owner Password flow
    #[serde(rename = "password")]
    pub password: Option<OAuthFlow>,
    /// Configuration for the OAuth Client Credentials flow. Previously called application in
    /// OpenAPI 2.0.
    #[serde(rename = "clientCredentials")]
    pub client_credentials: Option<OAuthFlow>,
    /// Configuration for the OAuth Authorization Code flow. Previously called accessCode in OpenAPI
    /// 2.0.
    #[serde(rename = "authorizationCode")]
    pub authorization_code: Option<OAuthFlow>,
    /// Spec Extensions
    #[serde(flatten)]
    pub extensions: IndexMap<String, serde_json::Value>,
}

// From https://spec.openapis.org/oas/v3.0.3#oauth-flow-object
/// Configuration details for a supported OAuth Flow
#[derive(Debug, Serialize, Deserialize, PartialEq)]
pub struct OAuthFlow {
    /// The authorization URL to be used for this flow. This MUST be in the form of a URL. This is
    /// required for "implicit" and "authorizationCode" flows.
    #[serde(rename = "authorizationUrl")]
    pub authorization_url: Option<String>,
    /// The token URL to be used for this flow. This MUST be in the form of a URL. This is required
    /// for "password", "clientCredentials" and "authorizationCode" flows.
    #[serde(rename = "tokenUrl")]
    pub token_url: Option<String>,
    /// The URL to be used for obtaining refresh tokens. This MUST be in the form of a URL.
    #[serde(rename = "refreshUrl")]
    pub refresh_url: Option<String>,
    /// The available scopes for the OAuth2 security scheme. A map between the scope name and a
    /// short description for it. The map MAY be empty.
    pub scopes: Option<IndexMap<String, String>>,
    /// Spec Extensions
    #[serde(flatten)]
    pub extensions: IndexMap<String, serde_json::Value>,
}

// From https://spec.openapis.org/oas/v3.0.3#security-requirement-object
/// Lists the required security schemes to execute this operation. The name used for each property
/// MUST correspond to a security scheme declared in the Security Schemes under the Components
/// Object.
///
/// Security Requirement Objects that contain multiple schemes require that all schemes MUST be
/// satisfied for a request to be authorized. This enables support for scenarios where multiple
/// query parameters or HTTP headers are required to convey security information.
///
/// When a list of Security Requirement Objects is defined on the OpenAPI Object or Operation
/// Object, only one of Security Requirement Objects in the list needs to be satisfied to authorize
/// the request.
#[derive(Debug, Serialize, Deserialize, PartialEq)]
pub struct SecurityRequirement {
    /// Each name MUST correspond to a security scheme which is declared in the Security Schemes
    /// under the Components Object.
    #[serde(flatten)]
    pub requirements: IndexMap<String, Vec<String>>,
}