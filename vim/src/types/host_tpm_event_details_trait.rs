use super::vim_object_trait::VimObjectTrait;
use super::dyn_serialize;
use super::convert::CastFrom;
use super::struct_enum::StructType;
use super::structs::*;
use serde::de;
use super::vim_any::VimAny;

/// This is a base data object for describing an event generated by
/// Trusted Platform Module (TPM).
/// 
/// It contains parameters common to
/// all TPM event types.
pub trait HostTpmEventDetailsTrait : super::data_object_trait::DataObjectTrait {
    /// Value of the Platform Configuration Register (PCR) for this event.
    fn get_data_hash(&self) -> &Vec<i8>;
    /// Method in which the digest hash is calculated.
    /// 
    /// The set of possible
    /// values is described in *HostDigestInfoDigestMethodType_enum*.
    fn get_data_hash_method(&self) -> &Option<String>;
}
impl<'s> serde::Serialize for dyn HostTpmEventDetailsTrait + 's {
            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
            where
                S: serde::Serializer,
            {
                dyn_serialize::serialize_polymorphic(self.as_vim_object_ref(), serializer)
            }
        }
impl<'de> serde::Deserialize<'de> for Box<dyn HostTpmEventDetailsTrait> {
            fn deserialize<D: serde::Deserializer<'de>>(deserializer: D) -> Result<Self, D::Error> {
                deserializer.deserialize_map(HostTpmEventDetailsVisitor)
            }
        }

struct HostTpmEventDetailsVisitor;

impl<'de> de::Visitor<'de> for HostTpmEventDetailsVisitor {
    type Value = Box<dyn HostTpmEventDetailsTrait>;

    fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
        formatter.write_str("a valid HostTpmEventDetailsTrait JSON object with a _typeName field")
    }

    fn visit_map<A>(self, mut map: A) -> Result<Self::Value, A::Error>
    where
        A: de::MapAccess<'de>,
    {
        let deserializer = de::value::MapAccessDeserializer::new(&mut map);
        let any: VimAny = de::Deserialize::deserialize(deserializer)?;
        match any {
            VimAny::Object(obj) => Ok(CastFrom::from_box(obj)
                .map_err(|_| de::Error::custom("Internal error converting to trait type"))?),
            VimAny::Value(value) => Err(de::Error::custom(format!(
                "expected object not wrapped value: {:?}",
                value))),
        }
    }
}

impl HostTpmEventDetailsTrait for HostTpmEventDetails {
    fn get_data_hash(&self) -> &Vec<i8> { &self.data_hash }
    fn get_data_hash_method(&self) -> &Option<String> { &self.data_hash_method }
}
impl HostTpmEventDetailsTrait for HostTpmBootCompleteEventDetails {
    fn get_data_hash(&self) -> &Vec<i8> { &self.data_hash }
    fn get_data_hash_method(&self) -> &Option<String> { &self.data_hash_method }
}
impl HostTpmEventDetailsTrait for HostTpmBootSecurityOptionEventDetails {
    fn get_data_hash(&self) -> &Vec<i8> { &self.data_hash }
    fn get_data_hash_method(&self) -> &Option<String> { &self.data_hash_method }
}
impl HostTpmEventDetailsTrait for HostTpmNvTagEventDetails {
    fn get_data_hash(&self) -> &Vec<i8> { &self.data_hash }
    fn get_data_hash_method(&self) -> &Option<String> { &self.data_hash_method }
}
impl HostTpmEventDetailsTrait for HostTpmSignerEventDetails {
    fn get_data_hash(&self) -> &Vec<i8> { &self.data_hash }
    fn get_data_hash_method(&self) -> &Option<String> { &self.data_hash_method }
}
impl HostTpmEventDetailsTrait for HostTpmCommandEventDetails {
    fn get_data_hash(&self) -> &Vec<i8> { &self.data_hash }
    fn get_data_hash_method(&self) -> &Option<String> { &self.data_hash_method }
}
impl HostTpmEventDetailsTrait for HostTpmOptionEventDetails {
    fn get_data_hash(&self) -> &Vec<i8> { &self.data_hash }
    fn get_data_hash_method(&self) -> &Option<String> { &self.data_hash_method }
}
impl HostTpmEventDetailsTrait for HostTpmSoftwareComponentEventDetails {
    fn get_data_hash(&self) -> &Vec<i8> { &self.data_hash }
    fn get_data_hash_method(&self) -> &Option<String> { &self.data_hash_method }
}
impl HostTpmEventDetailsTrait for HostTpmVersionEventDetails {
    fn get_data_hash(&self) -> &Vec<i8> { &self.data_hash }
    fn get_data_hash_method(&self) -> &Option<String> { &self.data_hash_method }
}
impl<From: VimObjectTrait + ?Sized + 'static> CastFrom<From> for dyn HostTpmEventDetailsTrait {
    fn from_ref<'a>(from: &'a From) -> Option<&'a Self> {
        let data_type = from.data_type();
        match data_type {
            StructType::HostTpmEventDetails => Some(from.as_any_ref().downcast_ref::<HostTpmEventDetails>()?),
            StructType::HostTpmBootCompleteEventDetails => Some(from.as_any_ref().downcast_ref::<HostTpmBootCompleteEventDetails>()?),
            StructType::HostTpmBootSecurityOptionEventDetails => Some(from.as_any_ref().downcast_ref::<HostTpmBootSecurityOptionEventDetails>()?),
            StructType::HostTpmNvTagEventDetails => Some(from.as_any_ref().downcast_ref::<HostTpmNvTagEventDetails>()?),
            StructType::HostTpmSignerEventDetails => Some(from.as_any_ref().downcast_ref::<HostTpmSignerEventDetails>()?),
            StructType::HostTpmCommandEventDetails => Some(from.as_any_ref().downcast_ref::<HostTpmCommandEventDetails>()?),
            StructType::HostTpmOptionEventDetails => Some(from.as_any_ref().downcast_ref::<HostTpmOptionEventDetails>()?),
            StructType::HostTpmSoftwareComponentEventDetails => Some(from.as_any_ref().downcast_ref::<HostTpmSoftwareComponentEventDetails>()?),
            StructType::HostTpmVersionEventDetails => Some(from.as_any_ref().downcast_ref::<HostTpmVersionEventDetails>()?),
            _ => None,
        }
    }
    
    fn from_box(from: Box<From>) -> Result<Box<Self>, Box<dyn std::any::Any + 'static>> {
        let data_type = from.data_type();
        match data_type {
            StructType::HostTpmEventDetails => Ok(from.as_any_box().downcast::<HostTpmEventDetails>()?),
            StructType::HostTpmBootCompleteEventDetails => Ok(from.as_any_box().downcast::<HostTpmBootCompleteEventDetails>()?),
            StructType::HostTpmBootSecurityOptionEventDetails => Ok(from.as_any_box().downcast::<HostTpmBootSecurityOptionEventDetails>()?),
            StructType::HostTpmNvTagEventDetails => Ok(from.as_any_box().downcast::<HostTpmNvTagEventDetails>()?),
            StructType::HostTpmSignerEventDetails => Ok(from.as_any_box().downcast::<HostTpmSignerEventDetails>()?),
            StructType::HostTpmCommandEventDetails => Ok(from.as_any_box().downcast::<HostTpmCommandEventDetails>()?),
            StructType::HostTpmOptionEventDetails => Ok(from.as_any_box().downcast::<HostTpmOptionEventDetails>()?),
            StructType::HostTpmSoftwareComponentEventDetails => Ok(from.as_any_box().downcast::<HostTpmSoftwareComponentEventDetails>()?),
            StructType::HostTpmVersionEventDetails => Ok(from.as_any_box().downcast::<HostTpmVersionEventDetails>()?),
            _ => Err(from.as_any_box()),
        }
    }
}
