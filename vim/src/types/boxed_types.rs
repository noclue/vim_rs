use serde::ser::SerializeStruct;
use super::vim_any::VimAny;
use super::structs::*;

#[derive(Debug, serde::Deserialize)]
#[serde(tag = "_typeName", content = "_value")]
pub enum ValueElements {
    /// A boxed array of *Any*. To be used in *Any* placeholders.
    ArrayOfAnyType(Vec<VimAny>),
    /// A boxed array of *ManagedObjectReference*. To be used in *Any* placeholders.
    ArrayOfManagedObjectReference(Vec<ManagedObjectReference>),
    /// A boxed Boolean primitive. To be used in *Any* placeholders.
    #[serde(rename = "boolean")]
    PrimitiveBoolean(bool),
    /// A boxed array of *PrimitiveBoolean*. To be used in *Any* placeholders.
    ArrayOfBoolean(Vec<bool>),
    /// A boxed Byte primitive. To be used in *Any* placeholders.
    #[serde(rename = "byte")]
    PrimitiveByte(i8),
    /// A boxed array of *PrimitiveByte*. To be used in *Any* placeholders.
    ArrayOfByte(Vec<i8>),
    /// A boxed Short primitive. To be used in *Any* placeholders.
    #[serde(rename = "short")]
    PrimitiveShort(i16),
    /// A boxed array of *PrimitiveShort*. To be used in *Any* placeholders.
    ArrayOfShort(Vec<i16>),
    /// A boxed Int primitive. To be used in *Any* placeholders.
    #[serde(rename = "int")]
    PrimitiveInt(i32),
    /// A boxed array of *PrimitiveInt*. To be used in *Any* placeholders.
    ArrayOfInt(Vec<i32>),
    /// A boxed Long primitive. To be used in *Any* placeholders.
    #[serde(rename = "long")]
    PrimitiveLong(i64),
    /// A boxed array of *PrimitiveLong*. To be used in *Any* placeholders.
    ArrayOfLong(Vec<i64>),
    /// A boxed Float primitive. To be used in *Any* placeholders.
    #[serde(rename = "float")]
    PrimitiveFloat(f32),
    /// A boxed array of *PrimitiveFloat*. To be used in *Any* placeholders.
    ArrayOfFloat(Vec<f32>),
    /// A boxed Double primitive. To be used in *Any* placeholders.
    #[serde(rename = "double")]
    PrimitiveDouble(f64),
    /// A boxed array of *PrimitiveDouble*. To be used in *Any* placeholders.
    ArrayOfDouble(Vec<f64>),
    /// A boxed String primitive. To be used in *Any* placeholders.
    #[serde(rename = "string")]
    PrimitiveString(String),
    /// A boxed array of *PrimitiveString*. To be used in *Any* placeholders.
    ArrayOfString(Vec<String>),
    /// A boxed DateTime primitive. To be used in *Any* placeholders.
    #[serde(rename = "dateTime")]
    PrimitiveDateTime(String),
    /// A boxed array of *PrimitiveDateTime*. To be used in *Any* placeholders.
    ArrayOfDateTime(Vec<String>),
    /// A boxed URI primitive. To be used in *Any* placeholders.
    #[serde(rename = "anyURI")]
    PrimitiveUri(String),
    /// A boxed array of *PrimitiveURI*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfAnyURI")]
    ArrayOfUri(Vec<String>),
    /// A boxed Binary primitive. To be used in *Any* placeholders.
    #[serde(rename = "base64Binary")]
    PrimitiveBinary(Vec<u8>),
    /// A boxed array of *PrimitiveBinary*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfBase64Binary")]
    ArrayOfBinary(Vec<Vec<u8>>),
    /// A boxed TypeName primitive. To be used in *Any* placeholders.
    #[serde(rename = "TypeName")]
    PrimitiveTypeName(String),
    /// A boxed array of *PrimitiveTypeName*. To be used in *Any* placeholders.
    ArrayOfTypeName(Vec<String>),
    /// A boxed PropPath primitive. To be used in *Any* placeholders.
    #[serde(rename = "PropertyPath")]
    PrimitivePropPath(String),
    /// A boxed array of *PrimitivePropPath*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfPropertyPath")]
    ArrayOfPropPath(Vec<String>),
    /// A boxed MethodName primitive. To be used in *Any* placeholders.
    #[serde(rename = "MethodName")]
    PrimitiveMethodName(String),
    /// A boxed array of *PrimitiveMethodName*. To be used in *Any* placeholders.
    ArrayOfMethodName(Vec<String>),
    /// A boxed array of *AboutInfo*. To be used in *Any* placeholders.
    ArrayOfAboutInfo(Vec<AboutInfo>),
    /// A boxed array of *AuthorizationDescription*. To be used in *Any* placeholders.
    ArrayOfAuthorizationDescription(Vec<AuthorizationDescription>),
    /// A boxed array of *EntityPrivilege*. To be used in *Any* placeholders.
    ArrayOfEntityPrivilege(Vec<EntityPrivilege>),
    /// A boxed array of *Permission*. To be used in *Any* placeholders.
    ArrayOfPermission(Vec<Permission>),
    /// A boxed array of *AuthorizationPrivilege*. To be used in *Any* placeholders.
    ArrayOfAuthorizationPrivilege(Vec<AuthorizationPrivilege>),
    /// A boxed array of *PrivilegeAvailability*. To be used in *Any* placeholders.
    ArrayOfPrivilegeAvailability(Vec<PrivilegeAvailability>),
    /// A boxed array of *AuthorizationRole*. To be used in *Any* placeholders.
    ArrayOfAuthorizationRole(Vec<AuthorizationRole>),
    /// A boxed array of *UserPrivilegeResult*. To be used in *Any* placeholders.
    ArrayOfUserPrivilegeResult(Vec<UserPrivilegeResult>),
    /// A boxed array of *BatchResult*. To be used in *Any* placeholders.
    ArrayOfBatchResult(Vec<BatchResult>),
    /// A boxed array of *BoolPolicy*. To be used in *Any* placeholders.
    ArrayOfBoolPolicy(Vec<BoolPolicy>),
    /// A boxed array of *Capability*. To be used in *Any* placeholders.
    ArrayOfCapability(Vec<Capability>),
    /// A boxed array of *ClusterComputeResourceClusterConfigResult*. To be used in *Any* placeholders.
    ArrayOfClusterComputeResourceClusterConfigResult(Vec<ClusterComputeResourceClusterConfigResult>),
    /// A boxed array of *ClusterComputeResourceDVSConfigurationValidation*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfClusterComputeResourceDVSConfigurationValidation")]
    ArrayOfClusterComputeResourceDvsConfigurationValidation(Vec<ClusterComputeResourceDvsConfigurationValidation>),
    /// A boxed array of *ClusterComputeResourceDVSSetting*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfClusterComputeResourceDVSSetting")]
    ArrayOfClusterComputeResourceDvsSetting(Vec<ClusterComputeResourceDvsSetting>),
    /// A boxed array of *ClusterComputeResourceDVSSettingDVPortgroupToServiceMapping*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfClusterComputeResourceDVSSettingDVPortgroupToServiceMapping")]
    ArrayOfClusterComputeResourceDvsSettingDvPortgroupToServiceMapping(Vec<ClusterComputeResourceDvsSettingDvPortgroupToServiceMapping>),
    /// A boxed array of *ClusterComputeResourceDvsProfile*. To be used in *Any* placeholders.
    ArrayOfClusterComputeResourceDvsProfile(Vec<ClusterComputeResourceDvsProfile>),
    /// A boxed array of *ClusterComputeResourceDvsProfileDVPortgroupSpecToServiceMapping*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfClusterComputeResourceDvsProfileDVPortgroupSpecToServiceMapping")]
    ArrayOfClusterComputeResourceDvsProfileDvPortgroupSpecToServiceMapping(Vec<ClusterComputeResourceDvsProfileDvPortgroupSpecToServiceMapping>),
    /// A boxed array of *ClusterComputeResourceHCIConfigInfo*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfClusterComputeResourceHCIConfigInfo")]
    ArrayOfClusterComputeResourceHciConfigInfo(Vec<ClusterComputeResourceHciConfigInfo>),
    /// A boxed array of *ClusterComputeResourceHCIConfigSpec*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfClusterComputeResourceHCIConfigSpec")]
    ArrayOfClusterComputeResourceHciConfigSpec(Vec<ClusterComputeResourceHciConfigSpec>),
    /// A boxed array of *ClusterComputeResourceHostConfigurationInput*. To be used in *Any* placeholders.
    ArrayOfClusterComputeResourceHostConfigurationInput(Vec<ClusterComputeResourceHostConfigurationInput>),
    /// A boxed array of *ClusterComputeResourceHostConfigurationProfile*. To be used in *Any* placeholders.
    ArrayOfClusterComputeResourceHostConfigurationProfile(Vec<ClusterComputeResourceHostConfigurationProfile>),
    /// A boxed array of *ClusterComputeResourceHostConfigurationValidation*. To be used in *Any* placeholders.
    ArrayOfClusterComputeResourceHostConfigurationValidation(Vec<ClusterComputeResourceHostConfigurationValidation>),
    /// A boxed array of *ClusterComputeResourceHostVmkNicInfo*. To be used in *Any* placeholders.
    ArrayOfClusterComputeResourceHostVmkNicInfo(Vec<ClusterComputeResourceHostVmkNicInfo>),
    /// A boxed array of *ClusterComputeResourceSummary*. To be used in *Any* placeholders.
    ArrayOfClusterComputeResourceSummary(Vec<ClusterComputeResourceSummary>),
    /// A boxed array of *ClusterComputeResourceVCProfile*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfClusterComputeResourceVCProfile")]
    ArrayOfClusterComputeResourceVcProfile(Vec<ClusterComputeResourceVcProfile>),
    /// A boxed array of *ClusterComputeResourceValidationResultBase*. To be used in *Any* placeholders.
    ArrayOfClusterComputeResourceValidationResultBase(Vec<Box<dyn super::traits::ClusterComputeResourceValidationResultBaseTrait>>),
    /// A boxed array of *ClusterComputeResourceVcsSlots*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 7.0.1.1
    ArrayOfClusterComputeResourceVcsSlots(Vec<ClusterComputeResourceVcsSlots>),
    /// A boxed array of *ComputeResourceConfigInfo*. To be used in *Any* placeholders.
    ArrayOfComputeResourceConfigInfo(Vec<Box<dyn super::traits::ComputeResourceConfigInfoTrait>>),
    /// A boxed array of *ComputeResourceConfigSpec*. To be used in *Any* placeholders.
    ArrayOfComputeResourceConfigSpec(Vec<Box<dyn super::traits::ComputeResourceConfigSpecTrait>>),
    /// A boxed array of *ComputeResourceHostSPBMLicenseInfo*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfComputeResourceHostSPBMLicenseInfo")]
    ArrayOfComputeResourceHostSpbmLicenseInfo(Vec<ComputeResourceHostSpbmLicenseInfo>),
    /// A boxed array of *ComputeResourceSummary*. To be used in *Any* placeholders.
    ArrayOfComputeResourceSummary(Vec<Box<dyn super::traits::ComputeResourceSummaryTrait>>),
    /// A boxed array of *CustomFieldDef*. To be used in *Any* placeholders.
    ArrayOfCustomFieldDef(Vec<CustomFieldDef>),
    /// A boxed array of *CustomFieldStringValue*. To be used in *Any* placeholders.
    ArrayOfCustomFieldStringValue(Vec<CustomFieldStringValue>),
    /// A boxed array of *CustomFieldValue*. To be used in *Any* placeholders.
    ArrayOfCustomFieldValue(Vec<Box<dyn super::traits::CustomFieldValueTrait>>),
    /// A boxed array of *CustomizationSpecInfo*. To be used in *Any* placeholders.
    ArrayOfCustomizationSpecInfo(Vec<CustomizationSpecInfo>),
    /// A boxed array of *CustomizationSpecItem*. To be used in *Any* placeholders.
    ArrayOfCustomizationSpecItem(Vec<CustomizationSpecItem>),
    /// A boxed array of *DatacenterBasicConnectInfo*. To be used in *Any* placeholders.
    ArrayOfDatacenterBasicConnectInfo(Vec<DatacenterBasicConnectInfo>),
    /// A boxed array of *DatacenterConfigInfo*. To be used in *Any* placeholders.
    ArrayOfDatacenterConfigInfo(Vec<DatacenterConfigInfo>),
    /// A boxed array of *DatacenterConfigSpec*. To be used in *Any* placeholders.
    ArrayOfDatacenterConfigSpec(Vec<DatacenterConfigSpec>),
    /// A boxed array of *DatastoreCapability*. To be used in *Any* placeholders.
    ArrayOfDatastoreCapability(Vec<DatastoreCapability>),
    /// A boxed array of *DatastoreHostMount*. To be used in *Any* placeholders.
    ArrayOfDatastoreHostMount(Vec<DatastoreHostMount>),
    /// A boxed array of *DatastoreInfo*. To be used in *Any* placeholders.
    ArrayOfDatastoreInfo(Vec<Box<dyn super::traits::DatastoreInfoTrait>>),
    /// A boxed array of *DatastoreMountPathDatastorePair*. To be used in *Any* placeholders.
    ArrayOfDatastoreMountPathDatastorePair(Vec<DatastoreMountPathDatastorePair>),
    /// A boxed array of *DatastoreSummary*. To be used in *Any* placeholders.
    ArrayOfDatastoreSummary(Vec<DatastoreSummary>),
    /// A boxed array of *DatastoreVVolContainerFailoverPair*. To be used in *Any* placeholders.
    ArrayOfDatastoreVVolContainerFailoverPair(Vec<DatastoreVVolContainerFailoverPair>),
    /// A boxed array of *DatastoreNamespaceManagerDirectoryInfo*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 8.0.1.0
    ArrayOfDatastoreNamespaceManagerDirectoryInfo(Vec<DatastoreNamespaceManagerDirectoryInfo>),
    /// A boxed array of *Description*. To be used in *Any* placeholders.
    ArrayOfDescription(Vec<Box<dyn super::traits::DescriptionTrait>>),
    /// A boxed array of *DesiredSoftwareSpec*. To be used in *Any* placeholders.
    ArrayOfDesiredSoftwareSpec(Vec<DesiredSoftwareSpec>),
    /// A boxed array of *DesiredSoftwareSpecBaseImageSpec*. To be used in *Any* placeholders.
    ArrayOfDesiredSoftwareSpecBaseImageSpec(Vec<DesiredSoftwareSpecBaseImageSpec>),
    /// A boxed array of *DesiredSoftwareSpecComponentSpec*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 7.0.2.0
    ArrayOfDesiredSoftwareSpecComponentSpec(Vec<DesiredSoftwareSpecComponentSpec>),
    /// A boxed array of *DesiredSoftwareSpecVendorAddOnSpec*. To be used in *Any* placeholders.
    ArrayOfDesiredSoftwareSpecVendorAddOnSpec(Vec<DesiredSoftwareSpecVendorAddOnSpec>),
    /// A boxed array of *DiagnosticManagerAuditRecordResult*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 7.0.3.0
    ArrayOfDiagnosticManagerAuditRecordResult(Vec<DiagnosticManagerAuditRecordResult>),
    /// A boxed array of *DiagnosticManagerBundleInfo*. To be used in *Any* placeholders.
    ArrayOfDiagnosticManagerBundleInfo(Vec<DiagnosticManagerBundleInfo>),
    /// A boxed array of *DiagnosticManagerLogDescriptor*. To be used in *Any* placeholders.
    ArrayOfDiagnosticManagerLogDescriptor(Vec<DiagnosticManagerLogDescriptor>),
    /// A boxed array of *DiagnosticManagerLogHeader*. To be used in *Any* placeholders.
    ArrayOfDiagnosticManagerLogHeader(Vec<DiagnosticManagerLogHeader>),
    /// A boxed array of *DVSBackupRestoreCapability*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfDVSBackupRestoreCapability")]
    ArrayOfDvsBackupRestoreCapability(Vec<DvsBackupRestoreCapability>),
    /// A boxed array of *DVSCapability*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfDVSCapability")]
    ArrayOfDvsCapability(Vec<DvsCapability>),
    /// A boxed array of *DVSConfigInfo*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfDVSConfigInfo")]
    ArrayOfDvsConfigInfo(Vec<Box<dyn super::traits::DvsConfigInfoTrait>>),
    /// A boxed array of *DVSConfigSpec*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfDVSConfigSpec")]
    ArrayOfDvsConfigSpec(Vec<Box<dyn super::traits::DvsConfigSpecTrait>>),
    /// A boxed array of *DVSContactInfo*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfDVSContactInfo")]
    ArrayOfDvsContactInfo(Vec<DvsContactInfo>),
    /// A boxed array of *DVSCreateSpec*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfDVSCreateSpec")]
    ArrayOfDvsCreateSpec(Vec<DvsCreateSpec>),
    /// A boxed array of *DVSFeatureCapability*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfDVSFeatureCapability")]
    ArrayOfDvsFeatureCapability(Vec<Box<dyn super::traits::DvsFeatureCapabilityTrait>>),
    /// A boxed array of *DVSHealthCheckConfig*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfDVSHealthCheckConfig")]
    ArrayOfDvsHealthCheckConfig(Vec<Box<dyn super::traits::DvsHealthCheckConfigTrait>>),
    /// A boxed array of *DVSHealthCheckCapability*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfDVSHealthCheckCapability")]
    ArrayOfDvsHealthCheckCapability(Vec<Box<dyn super::traits::DvsHealthCheckCapabilityTrait>>),
    /// A boxed array of *DvsHostInfrastructureTrafficResource*. To be used in *Any* placeholders.
    ArrayOfDvsHostInfrastructureTrafficResource(Vec<DvsHostInfrastructureTrafficResource>),
    /// A boxed array of *DvsHostInfrastructureTrafficResourceAllocation*. To be used in *Any* placeholders.
    ArrayOfDvsHostInfrastructureTrafficResourceAllocation(Vec<DvsHostInfrastructureTrafficResourceAllocation>),
    /// A boxed array of *DVSNameArrayUplinkPortPolicy*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfDVSNameArrayUplinkPortPolicy")]
    ArrayOfDvsNameArrayUplinkPortPolicy(Vec<DvsNameArrayUplinkPortPolicy>),
    /// A boxed array of *DVSNetworkResourceManagementCapability*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfDVSNetworkResourceManagementCapability")]
    ArrayOfDvsNetworkResourceManagementCapability(Vec<DvsNetworkResourceManagementCapability>),
    /// A boxed array of *DvsResourceRuntimeInfo*. To be used in *Any* placeholders.
    ArrayOfDvsResourceRuntimeInfo(Vec<DvsResourceRuntimeInfo>),
    /// A boxed array of *DVSRollbackCapability*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfDVSRollbackCapability")]
    ArrayOfDvsRollbackCapability(Vec<DvsRollbackCapability>),
    /// A boxed array of *DVSRuntimeInfo*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfDVSRuntimeInfo")]
    ArrayOfDvsRuntimeInfo(Vec<DvsRuntimeInfo>),
    /// A boxed array of *DVSSummary*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfDVSSummary")]
    ArrayOfDvsSummary(Vec<DvsSummary>),
    /// A boxed array of *DVSPolicy*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfDVSPolicy")]
    ArrayOfDvsPolicy(Vec<DvsPolicy>),
    /// A boxed array of *DVSUplinkPortPolicy*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfDVSUplinkPortPolicy")]
    ArrayOfDvsUplinkPortPolicy(Vec<Box<dyn super::traits::DvsUplinkPortPolicyTrait>>),
    /// A boxed array of *EVCMode*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfEVCMode")]
    ArrayOfEvcMode(Vec<EvcMode>),
    /// A boxed array of *ElementDescription*. To be used in *Any* placeholders.
    ArrayOfElementDescription(Vec<Box<dyn super::traits::ElementDescriptionTrait>>),
    /// A boxed array of *EnumDescription*. To be used in *Any* placeholders.
    ArrayOfEnumDescription(Vec<EnumDescription>),
    /// A boxed array of *EnvironmentBrowserConfigOptionQuerySpec*. To be used in *Any* placeholders.
    ArrayOfEnvironmentBrowserConfigOptionQuerySpec(Vec<EnvironmentBrowserConfigOptionQuerySpec>),
    /// A boxed array of *ExtendedDescription*. To be used in *Any* placeholders.
    ArrayOfExtendedDescription(Vec<ExtendedDescription>),
    /// A boxed array of *ExtendedElementDescription*. To be used in *Any* placeholders.
    ArrayOfExtendedElementDescription(Vec<ExtendedElementDescription>),
    /// A boxed array of *Extension*. To be used in *Any* placeholders.
    ArrayOfExtension(Vec<Extension>),
    /// A boxed array of *ExtensionClientInfo*. To be used in *Any* placeholders.
    ArrayOfExtensionClientInfo(Vec<ExtensionClientInfo>),
    /// A boxed array of *ExtensionEventTypeInfo*. To be used in *Any* placeholders.
    ArrayOfExtensionEventTypeInfo(Vec<ExtensionEventTypeInfo>),
    /// A boxed array of *ExtensionFaultTypeInfo*. To be used in *Any* placeholders.
    ArrayOfExtensionFaultTypeInfo(Vec<ExtensionFaultTypeInfo>),
    /// A boxed array of *ExtensionHealthInfo*. To be used in *Any* placeholders.
    ArrayOfExtensionHealthInfo(Vec<ExtensionHealthInfo>),
    /// A boxed array of *ExtensionOvfConsumerInfo*. To be used in *Any* placeholders.
    ArrayOfExtensionOvfConsumerInfo(Vec<ExtensionOvfConsumerInfo>),
    /// A boxed array of *ExtensionPrivilegeInfo*. To be used in *Any* placeholders.
    ArrayOfExtensionPrivilegeInfo(Vec<ExtensionPrivilegeInfo>),
    /// A boxed array of *ExtensionResourceInfo*. To be used in *Any* placeholders.
    ArrayOfExtensionResourceInfo(Vec<ExtensionResourceInfo>),
    /// A boxed array of *ExtensionServerInfo*. To be used in *Any* placeholders.
    ArrayOfExtensionServerInfo(Vec<ExtensionServerInfo>),
    /// A boxed array of *ExtensionTaskTypeInfo*. To be used in *Any* placeholders.
    ArrayOfExtensionTaskTypeInfo(Vec<ExtensionTaskTypeInfo>),
    /// A boxed array of *ExtensionManagerIpAllocationUsage*. To be used in *Any* placeholders.
    ArrayOfExtensionManagerIpAllocationUsage(Vec<ExtensionManagerIpAllocationUsage>),
    /// A boxed array of *FaultsByHost*. To be used in *Any* placeholders.
    ArrayOfFaultsByHost(Vec<FaultsByHost>),
    /// A boxed array of *FaultsByVM*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfFaultsByVM")]
    ArrayOfFaultsByVm(Vec<FaultsByVm>),
    /// A boxed array of *FeatureEVCMode*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 7.0.1.0
    #[serde(rename = "ArrayOfFeatureEVCMode")]
    ArrayOfFeatureEvcMode(Vec<FeatureEvcMode>),
    /// A boxed array of *FileLockInfo*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 8.0.2.0
    ArrayOfFileLockInfo(Vec<FileLockInfo>),
    /// A boxed array of *FileLockInfoResult*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 8.0.2.0
    ArrayOfFileLockInfoResult(Vec<FileLockInfoResult>),
    /// A boxed array of *FolderBatchAddHostsToClusterResult*. To be used in *Any* placeholders.
    ArrayOfFolderBatchAddHostsToClusterResult(Vec<FolderBatchAddHostsToClusterResult>),
    /// A boxed array of *FolderBatchAddStandaloneHostsResult*. To be used in *Any* placeholders.
    ArrayOfFolderBatchAddStandaloneHostsResult(Vec<FolderBatchAddStandaloneHostsResult>),
    /// A boxed array of *FolderFailedHostResult*. To be used in *Any* placeholders.
    ArrayOfFolderFailedHostResult(Vec<FolderFailedHostResult>),
    /// A boxed array of *FolderNewHostSpec*. To be used in *Any* placeholders.
    ArrayOfFolderNewHostSpec(Vec<FolderNewHostSpec>),
    /// A boxed array of *HbrManagerReplicationVmInfo*. To be used in *Any* placeholders.
    ArrayOfHbrManagerReplicationVmInfo(Vec<HbrManagerReplicationVmInfo>),
    /// A boxed array of *ReplicationVmProgressInfo*. To be used in *Any* placeholders.
    ArrayOfReplicationVmProgressInfo(Vec<ReplicationVmProgressInfo>),
    /// A boxed array of *HbrManagerVmReplicationCapability*. To be used in *Any* placeholders.
    ArrayOfHbrManagerVmReplicationCapability(Vec<HbrManagerVmReplicationCapability>),
    /// A boxed array of *HealthUpdate*. To be used in *Any* placeholders.
    ArrayOfHealthUpdate(Vec<HealthUpdate>),
    /// A boxed array of *HealthUpdateInfo*. To be used in *Any* placeholders.
    ArrayOfHealthUpdateInfo(Vec<HealthUpdateInfo>),
    /// A boxed array of *PerfInterval*. To be used in *Any* placeholders.
    ArrayOfPerfInterval(Vec<PerfInterval>),
    /// A boxed array of *HostServiceTicket*. To be used in *Any* placeholders.
    ArrayOfHostServiceTicket(Vec<HostServiceTicket>),
    /// A boxed array of *HostSystemComplianceCheckState*. To be used in *Any* placeholders.
    ArrayOfHostSystemComplianceCheckState(Vec<HostSystemComplianceCheckState>),
    /// A boxed array of *HostSystemReconnectSpec*. To be used in *Any* placeholders.
    ArrayOfHostSystemReconnectSpec(Vec<HostSystemReconnectSpec>),
    /// A boxed array of *HostSystemRemediationState*. To be used in *Any* placeholders.
    ArrayOfHostSystemRemediationState(Vec<HostSystemRemediationState>),
    /// A boxed array of *HttpNfcLeaseCapabilities*. To be used in *Any* placeholders.
    ArrayOfHttpNfcLeaseCapabilities(Vec<HttpNfcLeaseCapabilities>),
    /// A boxed array of *HttpNfcLeaseDatastoreLeaseInfo*. To be used in *Any* placeholders.
    ArrayOfHttpNfcLeaseDatastoreLeaseInfo(Vec<HttpNfcLeaseDatastoreLeaseInfo>),
    /// A boxed array of *HttpNfcLeaseDeviceUrl*. To be used in *Any* placeholders.
    ArrayOfHttpNfcLeaseDeviceUrl(Vec<HttpNfcLeaseDeviceUrl>),
    /// A boxed array of *HttpNfcLeaseHostInfo*. To be used in *Any* placeholders.
    ArrayOfHttpNfcLeaseHostInfo(Vec<HttpNfcLeaseHostInfo>),
    /// A boxed array of *HttpNfcLeaseInfo*. To be used in *Any* placeholders.
    ArrayOfHttpNfcLeaseInfo(Vec<HttpNfcLeaseInfo>),
    /// A boxed array of *HttpNfcLeaseManifestEntry*. To be used in *Any* placeholders.
    ArrayOfHttpNfcLeaseManifestEntry(Vec<HttpNfcLeaseManifestEntry>),
    /// A boxed array of *HttpNfcLeaseProbeResult*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 7.0.2.0
    ArrayOfHttpNfcLeaseProbeResult(Vec<HttpNfcLeaseProbeResult>),
    /// A boxed array of *HttpNfcLeaseSourceFile*. To be used in *Any* placeholders.
    ArrayOfHttpNfcLeaseSourceFile(Vec<HttpNfcLeaseSourceFile>),
    /// A boxed array of *ImportSpec*. To be used in *Any* placeholders.
    ArrayOfImportSpec(Vec<Box<dyn super::traits::ImportSpecTrait>>),
    /// A boxed array of *InheritablePolicy*. To be used in *Any* placeholders.
    ArrayOfInheritablePolicy(Vec<Box<dyn super::traits::InheritablePolicyTrait>>),
    /// A boxed array of *IntExpression*. To be used in *Any* placeholders.
    ArrayOfIntExpression(Vec<IntExpression>),
    /// A boxed array of *IntPolicy*. To be used in *Any* placeholders.
    ArrayOfIntPolicy(Vec<IntPolicy>),
    /// A boxed array of *ClusterIoFilterInfo*. To be used in *Any* placeholders.
    ArrayOfClusterIoFilterInfo(Vec<ClusterIoFilterInfo>),
    /// A boxed array of *HostIoFilterInfo*. To be used in *Any* placeholders.
    ArrayOfHostIoFilterInfo(Vec<HostIoFilterInfo>),
    /// A boxed array of *IoFilterInfo*. To be used in *Any* placeholders.
    ArrayOfIoFilterInfo(Vec<Box<dyn super::traits::IoFilterInfoTrait>>),
    /// A boxed array of *IoFilterQueryIssueResult*. To be used in *Any* placeholders.
    ArrayOfIoFilterQueryIssueResult(Vec<IoFilterQueryIssueResult>),
    /// A boxed array of *IoFilterHostIssue*. To be used in *Any* placeholders.
    ArrayOfIoFilterHostIssue(Vec<IoFilterHostIssue>),
    /// A boxed array of *IpAddress*. To be used in *Any* placeholders.
    ArrayOfIpAddress(Vec<Box<dyn super::traits::IpAddressTrait>>),
    /// A boxed array of *IpPoolManagerIpAllocation*. To be used in *Any* placeholders.
    ArrayOfIpPoolManagerIpAllocation(Vec<IpPoolManagerIpAllocation>),
    /// A boxed array of *IpRange*. To be used in *Any* placeholders.
    ArrayOfIpRange(Vec<IpRange>),
    /// A boxed array of *KeyValue*. To be used in *Any* placeholders.
    ArrayOfKeyValue(Vec<KeyValue>),
    /// A boxed array of *LatencySensitivity*. To be used in *Any* placeholders.
    ArrayOfLatencySensitivity(Vec<LatencySensitivity>),
    /// A boxed array of *LicenseAssignmentManagerLicenseAssignment*. To be used in *Any* placeholders.
    ArrayOfLicenseAssignmentManagerLicenseAssignment(Vec<LicenseAssignmentManagerLicenseAssignment>),
    /// A boxed array of *LicenseAvailabilityInfo*. To be used in *Any* placeholders.
    ArrayOfLicenseAvailabilityInfo(Vec<LicenseAvailabilityInfo>),
    /// A boxed array of *LicenseDiagnostics*. To be used in *Any* placeholders.
    ArrayOfLicenseDiagnostics(Vec<LicenseDiagnostics>),
    /// A boxed array of *LicenseManagerEvaluationInfo*. To be used in *Any* placeholders.
    ArrayOfLicenseManagerEvaluationInfo(Vec<LicenseManagerEvaluationInfo>),
    /// A boxed array of *EvaluationLicenseSource*. To be used in *Any* placeholders.
    ArrayOfEvaluationLicenseSource(Vec<EvaluationLicenseSource>),
    /// A boxed array of *LicenseFeatureInfo*. To be used in *Any* placeholders.
    ArrayOfLicenseFeatureInfo(Vec<LicenseFeatureInfo>),
    /// A boxed array of *HostLicensableResourceInfo*. To be used in *Any* placeholders.
    ArrayOfHostLicensableResourceInfo(Vec<HostLicensableResourceInfo>),
    /// A boxed array of *LicenseManagerLicenseInfo*. To be used in *Any* placeholders.
    ArrayOfLicenseManagerLicenseInfo(Vec<LicenseManagerLicenseInfo>),
    /// A boxed array of *LicenseServerSource*. To be used in *Any* placeholders.
    ArrayOfLicenseServerSource(Vec<LicenseServerSource>),
    /// A boxed array of *LicenseSource*. To be used in *Any* placeholders.
    ArrayOfLicenseSource(Vec<Box<dyn super::traits::LicenseSourceTrait>>),
    /// A boxed array of *LicenseUsageInfo*. To be used in *Any* placeholders.
    ArrayOfLicenseUsageInfo(Vec<LicenseUsageInfo>),
    /// A boxed array of *LocalLicenseSource*. To be used in *Any* placeholders.
    ArrayOfLocalLicenseSource(Vec<LocalLicenseSource>),
    /// A boxed array of *LicenseReservationInfo*. To be used in *Any* placeholders.
    ArrayOfLicenseReservationInfo(Vec<LicenseReservationInfo>),
    /// A boxed array of *LocalizationManagerMessageCatalog*. To be used in *Any* placeholders.
    ArrayOfLocalizationManagerMessageCatalog(Vec<LocalizationManagerMessageCatalog>),
    /// A boxed array of *LongPolicy*. To be used in *Any* placeholders.
    ArrayOfLongPolicy(Vec<LongPolicy>),
    /// A boxed array of *MacAddress*. To be used in *Any* placeholders.
    ArrayOfMacAddress(Vec<Box<dyn super::traits::MacAddressTrait>>),
    /// A boxed array of *MacRange*. To be used in *Any* placeholders.
    ArrayOfMacRange(Vec<MacRange>),
    /// A boxed array of *MethodDescription*. To be used in *Any* placeholders.
    ArrayOfMethodDescription(Vec<MethodDescription>),
    /// A boxed array of *NegatableExpression*. To be used in *Any* placeholders.
    ArrayOfNegatableExpression(Vec<Box<dyn super::traits::NegatableExpressionTrait>>),
    /// A boxed array of *NetworkSummary*. To be used in *Any* placeholders.
    ArrayOfNetworkSummary(Vec<Box<dyn super::traits::NetworkSummaryTrait>>),
    /// A boxed array of *NumericRange*. To be used in *Any* placeholders.
    ArrayOfNumericRange(Vec<NumericRange>),
    /// A boxed array of *OpaqueNetworkCapability*. To be used in *Any* placeholders.
    ArrayOfOpaqueNetworkCapability(Vec<OpaqueNetworkCapability>),
    /// A boxed array of *OpaqueNetworkSummary*. To be used in *Any* placeholders.
    ArrayOfOpaqueNetworkSummary(Vec<OpaqueNetworkSummary>),
    /// A boxed array of *OvfConsumerOstNode*. To be used in *Any* placeholders.
    ArrayOfOvfConsumerOstNode(Vec<OvfConsumerOstNode>),
    /// A boxed array of *OvfConsumerOvfSection*. To be used in *Any* placeholders.
    ArrayOfOvfConsumerOvfSection(Vec<OvfConsumerOvfSection>),
    /// A boxed array of *OvfManagerCommonParams*. To be used in *Any* placeholders.
    ArrayOfOvfManagerCommonParams(Vec<Box<dyn super::traits::OvfManagerCommonParamsTrait>>),
    /// A boxed array of *OvfCreateDescriptorParams*. To be used in *Any* placeholders.
    ArrayOfOvfCreateDescriptorParams(Vec<OvfCreateDescriptorParams>),
    /// A boxed array of *OvfCreateDescriptorResult*. To be used in *Any* placeholders.
    ArrayOfOvfCreateDescriptorResult(Vec<OvfCreateDescriptorResult>),
    /// A boxed array of *OvfCreateImportSpecParams*. To be used in *Any* placeholders.
    ArrayOfOvfCreateImportSpecParams(Vec<OvfCreateImportSpecParams>),
    /// A boxed array of *OvfCreateImportSpecResult*. To be used in *Any* placeholders.
    ArrayOfOvfCreateImportSpecResult(Vec<OvfCreateImportSpecResult>),
    /// A boxed array of *OvfDeploymentOption*. To be used in *Any* placeholders.
    ArrayOfOvfDeploymentOption(Vec<OvfDeploymentOption>),
    /// A boxed array of *OvfFileItem*. To be used in *Any* placeholders.
    ArrayOfOvfFileItem(Vec<OvfFileItem>),
    /// A boxed array of *OvfNetworkInfo*. To be used in *Any* placeholders.
    ArrayOfOvfNetworkInfo(Vec<OvfNetworkInfo>),
    /// A boxed array of *OvfNetworkMapping*. To be used in *Any* placeholders.
    ArrayOfOvfNetworkMapping(Vec<OvfNetworkMapping>),
    /// A boxed array of *OvfFile*. To be used in *Any* placeholders.
    ArrayOfOvfFile(Vec<OvfFile>),
    /// A boxed array of *OvfOptionInfo*. To be used in *Any* placeholders.
    ArrayOfOvfOptionInfo(Vec<OvfOptionInfo>),
    /// A boxed array of *OvfParseDescriptorParams*. To be used in *Any* placeholders.
    ArrayOfOvfParseDescriptorParams(Vec<OvfParseDescriptorParams>),
    /// A boxed array of *OvfParseDescriptorResult*. To be used in *Any* placeholders.
    ArrayOfOvfParseDescriptorResult(Vec<OvfParseDescriptorResult>),
    /// A boxed array of *OvfResourceMap*. To be used in *Any* placeholders.
    ArrayOfOvfResourceMap(Vec<OvfResourceMap>),
    /// A boxed array of *OvfValidateHostParams*. To be used in *Any* placeholders.
    ArrayOfOvfValidateHostParams(Vec<OvfValidateHostParams>),
    /// A boxed array of *OvfValidateHostResult*. To be used in *Any* placeholders.
    ArrayOfOvfValidateHostResult(Vec<OvfValidateHostResult>),
    /// A boxed array of *PasswordField*. To be used in *Any* placeholders.
    ArrayOfPasswordField(Vec<PasswordField>),
    /// A boxed array of *PerformanceDescription*. To be used in *Any* placeholders.
    ArrayOfPerformanceDescription(Vec<PerformanceDescription>),
    /// A boxed array of *PerfCompositeMetric*. To be used in *Any* placeholders.
    ArrayOfPerfCompositeMetric(Vec<PerfCompositeMetric>),
    /// A boxed array of *PerfCounterInfo*. To be used in *Any* placeholders.
    ArrayOfPerfCounterInfo(Vec<PerfCounterInfo>),
    /// A boxed array of *PerformanceManagerCounterLevelMapping*. To be used in *Any* placeholders.
    ArrayOfPerformanceManagerCounterLevelMapping(Vec<PerformanceManagerCounterLevelMapping>),
    /// A boxed array of *PerfEntityMetric*. To be used in *Any* placeholders.
    ArrayOfPerfEntityMetric(Vec<PerfEntityMetric>),
    /// A boxed array of *PerfEntityMetricBase*. To be used in *Any* placeholders.
    ArrayOfPerfEntityMetricBase(Vec<Box<dyn super::traits::PerfEntityMetricBaseTrait>>),
    /// A boxed array of *PerfEntityMetricCSV*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfPerfEntityMetricCSV")]
    ArrayOfPerfEntityMetricCsv(Vec<PerfEntityMetricCsv>),
    /// A boxed array of *PerfMetricIntSeries*. To be used in *Any* placeholders.
    ArrayOfPerfMetricIntSeries(Vec<PerfMetricIntSeries>),
    /// A boxed array of *PerfMetricId*. To be used in *Any* placeholders.
    ArrayOfPerfMetricId(Vec<PerfMetricId>),
    /// A boxed array of *PerfMetricSeries*. To be used in *Any* placeholders.
    ArrayOfPerfMetricSeries(Vec<Box<dyn super::traits::PerfMetricSeriesTrait>>),
    /// A boxed array of *PerfMetricSeriesCSV*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfPerfMetricSeriesCSV")]
    ArrayOfPerfMetricSeriesCsv(Vec<PerfMetricSeriesCsv>),
    /// A boxed array of *PerfProviderSummary*. To be used in *Any* placeholders.
    ArrayOfPerfProviderSummary(Vec<PerfProviderSummary>),
    /// A boxed array of *PerfQuerySpec*. To be used in *Any* placeholders.
    ArrayOfPerfQuerySpec(Vec<PerfQuerySpec>),
    /// A boxed array of *PerfSampleInfo*. To be used in *Any* placeholders.
    ArrayOfPerfSampleInfo(Vec<PerfSampleInfo>),
    /// A boxed array of *PosixUserSearchResult*. To be used in *Any* placeholders.
    ArrayOfPosixUserSearchResult(Vec<PosixUserSearchResult>),
    /// A boxed array of *PrivilegePolicyDef*. To be used in *Any* placeholders.
    ArrayOfPrivilegePolicyDef(Vec<PrivilegePolicyDef>),
    /// A boxed array of *ResourceAllocationInfo*. To be used in *Any* placeholders.
    ArrayOfResourceAllocationInfo(Vec<ResourceAllocationInfo>),
    /// A boxed array of *ResourceAllocationOption*. To be used in *Any* placeholders.
    ArrayOfResourceAllocationOption(Vec<ResourceAllocationOption>),
    /// A boxed array of *ResourceConfigOption*. To be used in *Any* placeholders.
    ArrayOfResourceConfigOption(Vec<ResourceConfigOption>),
    /// A boxed array of *ResourceConfigSpec*. To be used in *Any* placeholders.
    ArrayOfResourceConfigSpec(Vec<ResourceConfigSpec>),
    /// A boxed array of *DatabaseSizeEstimate*. To be used in *Any* placeholders.
    ArrayOfDatabaseSizeEstimate(Vec<DatabaseSizeEstimate>),
    /// A boxed array of *DatabaseSizeParam*. To be used in *Any* placeholders.
    ArrayOfDatabaseSizeParam(Vec<DatabaseSizeParam>),
    /// A boxed array of *InventoryDescription*. To be used in *Any* placeholders.
    ArrayOfInventoryDescription(Vec<InventoryDescription>),
    /// A boxed array of *PerformanceStatisticsDescription*. To be used in *Any* placeholders.
    ArrayOfPerformanceStatisticsDescription(Vec<PerformanceStatisticsDescription>),
    /// A boxed array of *ResourcePoolResourceUsage*. To be used in *Any* placeholders.
    ArrayOfResourcePoolResourceUsage(Vec<ResourcePoolResourceUsage>),
    /// A boxed array of *ResourcePoolRuntimeInfo*. To be used in *Any* placeholders.
    ArrayOfResourcePoolRuntimeInfo(Vec<ResourcePoolRuntimeInfo>),
    /// A boxed array of *ResourcePoolSummary*. To be used in *Any* placeholders.
    ArrayOfResourcePoolSummary(Vec<Box<dyn super::traits::ResourcePoolSummaryTrait>>),
    /// A boxed array of *ResourcePoolQuickStats*. To be used in *Any* placeholders.
    ArrayOfResourcePoolQuickStats(Vec<ResourcePoolQuickStats>),
    /// A boxed array of *SDDCBase*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfSDDCBase")]
    ArrayOfSddcBase(Vec<SddcBase>),
    /// A boxed array of *SelectionSet*. To be used in *Any* placeholders.
    ArrayOfSelectionSet(Vec<Box<dyn super::traits::SelectionSetTrait>>),
    /// A boxed array of *HostVMotionCompatibility*. To be used in *Any* placeholders.
    ArrayOfHostVMotionCompatibility(Vec<HostVMotionCompatibility>),
    /// A boxed array of *ProductComponentInfo*. To be used in *Any* placeholders.
    ArrayOfProductComponentInfo(Vec<ProductComponentInfo>),
    /// A boxed array of *ServiceContent*. To be used in *Any* placeholders.
    ArrayOfServiceContent(Vec<ServiceContent>),
    /// A boxed array of *ServiceLocator*. To be used in *Any* placeholders.
    ArrayOfServiceLocator(Vec<ServiceLocator>),
    /// A boxed array of *ServiceLocatorCredential*. To be used in *Any* placeholders.
    ArrayOfServiceLocatorCredential(Vec<Box<dyn super::traits::ServiceLocatorCredentialTrait>>),
    /// A boxed array of *ServiceLocatorNamePassword*. To be used in *Any* placeholders.
    ArrayOfServiceLocatorNamePassword(Vec<ServiceLocatorNamePassword>),
    /// A boxed array of *ServiceLocatorSAMLCredential*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfServiceLocatorSAMLCredential")]
    ArrayOfServiceLocatorSamlCredential(Vec<ServiceLocatorSamlCredential>),
    /// A boxed array of *ServiceManagerServiceInfo*. To be used in *Any* placeholders.
    ArrayOfServiceManagerServiceInfo(Vec<ServiceManagerServiceInfo>),
    /// A boxed array of *SessionManagerGenericServiceTicket*. To be used in *Any* placeholders.
    ArrayOfSessionManagerGenericServiceTicket(Vec<SessionManagerGenericServiceTicket>),
    /// A boxed array of *SessionManagerHttpServiceRequestSpec*. To be used in *Any* placeholders.
    ArrayOfSessionManagerHttpServiceRequestSpec(Vec<SessionManagerHttpServiceRequestSpec>),
    /// A boxed array of *SessionManagerLocalTicket*. To be used in *Any* placeholders.
    ArrayOfSessionManagerLocalTicket(Vec<SessionManagerLocalTicket>),
    /// A boxed array of *SessionManagerServiceRequestSpec*. To be used in *Any* placeholders.
    ArrayOfSessionManagerServiceRequestSpec(Vec<Box<dyn super::traits::SessionManagerServiceRequestSpecTrait>>),
    /// A boxed array of *SessionManagerVmomiServiceRequestSpec*. To be used in *Any* placeholders.
    ArrayOfSessionManagerVmomiServiceRequestSpec(Vec<SessionManagerVmomiServiceRequestSpec>),
    /// A boxed array of *SharesInfo*. To be used in *Any* placeholders.
    ArrayOfSharesInfo(Vec<SharesInfo>),
    /// A boxed array of *SharesOption*. To be used in *Any* placeholders.
    ArrayOfSharesOption(Vec<SharesOption>),
    /// A boxed array of *SingleIp*. To be used in *Any* placeholders.
    ArrayOfSingleIp(Vec<SingleIp>),
    /// A boxed array of *SingleMac*. To be used in *Any* placeholders.
    ArrayOfSingleMac(Vec<SingleMac>),
    /// A boxed array of *SiteInfo*. To be used in *Any* placeholders.
    ArrayOfSiteInfo(Vec<SiteInfo>),
    /// A boxed array of *StoragePodSummary*. To be used in *Any* placeholders.
    ArrayOfStoragePodSummary(Vec<StoragePodSummary>),
    /// A boxed array of *StorageIOAllocationInfo*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfStorageIOAllocationInfo")]
    ArrayOfStorageIoAllocationInfo(Vec<StorageIoAllocationInfo>),
    /// A boxed array of *StorageIOAllocationOption*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfStorageIOAllocationOption")]
    ArrayOfStorageIoAllocationOption(Vec<StorageIoAllocationOption>),
    /// A boxed array of *StorageIORMInfo*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfStorageIORMInfo")]
    ArrayOfStorageIormInfo(Vec<StorageIormInfo>),
    /// A boxed array of *StorageIORMConfigOption*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfStorageIORMConfigOption")]
    ArrayOfStorageIormConfigOption(Vec<StorageIormConfigOption>),
    /// A boxed array of *StorageIORMConfigSpec*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfStorageIORMConfigSpec")]
    ArrayOfStorageIormConfigSpec(Vec<StorageIormConfigSpec>),
    /// A boxed array of *PodStorageDrsEntry*. To be used in *Any* placeholders.
    ArrayOfPodStorageDrsEntry(Vec<PodStorageDrsEntry>),
    /// A boxed array of *StoragePerformanceSummary*. To be used in *Any* placeholders.
    ArrayOfStoragePerformanceSummary(Vec<StoragePerformanceSummary>),
    /// A boxed array of *StorageResourceManagerStorageProfileStatistics*. To be used in *Any* placeholders.
    ArrayOfStorageResourceManagerStorageProfileStatistics(Vec<StorageResourceManagerStorageProfileStatistics>),
    /// A boxed array of *StringExpression*. To be used in *Any* placeholders.
    ArrayOfStringExpression(Vec<StringExpression>),
    /// A boxed array of *StringPolicy*. To be used in *Any* placeholders.
    ArrayOfStringPolicy(Vec<StringPolicy>),
    /// A boxed array of *Tag*. To be used in *Any* placeholders.
    ArrayOfTag(Vec<Tag>),
    /// A boxed array of *TaskDescription*. To be used in *Any* placeholders.
    ArrayOfTaskDescription(Vec<TaskDescription>),
    /// A boxed array of *TaskFilterSpec*. To be used in *Any* placeholders.
    ArrayOfTaskFilterSpec(Vec<TaskFilterSpec>),
    /// A boxed array of *TaskFilterSpecByEntity*. To be used in *Any* placeholders.
    ArrayOfTaskFilterSpecByEntity(Vec<TaskFilterSpecByEntity>),
    /// A boxed array of *TaskFilterSpecByTime*. To be used in *Any* placeholders.
    ArrayOfTaskFilterSpecByTime(Vec<TaskFilterSpecByTime>),
    /// A boxed array of *TaskFilterSpecByUsername*. To be used in *Any* placeholders.
    ArrayOfTaskFilterSpecByUsername(Vec<TaskFilterSpecByUsername>),
    /// A boxed array of *TaskInfo*. To be used in *Any* placeholders.
    ArrayOfTaskInfo(Vec<TaskInfo>),
    /// A boxed array of *TaskReason*. To be used in *Any* placeholders.
    ArrayOfTaskReason(Vec<Box<dyn super::traits::TaskReasonTrait>>),
    /// A boxed array of *TaskReasonAlarm*. To be used in *Any* placeholders.
    ArrayOfTaskReasonAlarm(Vec<TaskReasonAlarm>),
    /// A boxed array of *TaskReasonSchedule*. To be used in *Any* placeholders.
    ArrayOfTaskReasonSchedule(Vec<TaskReasonSchedule>),
    /// A boxed array of *TaskReasonSystem*. To be used in *Any* placeholders.
    ArrayOfTaskReasonSystem(Vec<TaskReasonSystem>),
    /// A boxed array of *TaskReasonUser*. To be used in *Any* placeholders.
    ArrayOfTaskReasonUser(Vec<TaskReasonUser>),
    /// A boxed array of *TypeDescription*. To be used in *Any* placeholders.
    ArrayOfTypeDescription(Vec<Box<dyn super::traits::TypeDescriptionTrait>>),
    /// A boxed array of *UpdateVirtualMachineFilesResult*. To be used in *Any* placeholders.
    ArrayOfUpdateVirtualMachineFilesResult(Vec<UpdateVirtualMachineFilesResult>),
    /// A boxed array of *UpdateVirtualMachineFilesResultFailedVmFileInfo*. To be used in *Any* placeholders.
    ArrayOfUpdateVirtualMachineFilesResultFailedVmFileInfo(Vec<UpdateVirtualMachineFilesResultFailedVmFileInfo>),
    /// A boxed array of *UserSearchResult*. To be used in *Any* placeholders.
    ArrayOfUserSearchResult(Vec<Box<dyn super::traits::UserSearchResultTrait>>),
    /// A boxed array of *UserSession*. To be used in *Any* placeholders.
    ArrayOfUserSession(Vec<UserSession>),
    /// A boxed array of *VVolVmConfigFileUpdateResult*. To be used in *Any* placeholders.
    ArrayOfVVolVmConfigFileUpdateResult(Vec<VVolVmConfigFileUpdateResult>),
    /// A boxed array of *VVolVmConfigFileUpdateResultFailedVmConfigFileInfo*. To be used in *Any* placeholders.
    ArrayOfVVolVmConfigFileUpdateResultFailedVmConfigFileInfo(Vec<VVolVmConfigFileUpdateResultFailedVmConfigFileInfo>),
    /// A boxed array of *VASAStorageArray*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVASAStorageArray")]
    ArrayOfVasaStorageArray(Vec<VasaStorageArray>),
    /// A boxed array of *VASAStorageArrayDiscoveryFcTransport*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 8.0.0.0
    #[serde(rename = "ArrayOfVASAStorageArrayDiscoveryFcTransport")]
    ArrayOfVasaStorageArrayDiscoveryFcTransport(Vec<VasaStorageArrayDiscoveryFcTransport>),
    /// A boxed array of *VASAStorageArrayDiscoveryIpTransport*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 8.0.0.0
    #[serde(rename = "ArrayOfVASAStorageArrayDiscoveryIpTransport")]
    ArrayOfVasaStorageArrayDiscoveryIpTransport(Vec<VasaStorageArrayDiscoveryIpTransport>),
    /// A boxed array of *VASAStorageArrayDiscoverySvcInfo*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 8.0.0.0
    #[serde(rename = "ArrayOfVASAStorageArrayDiscoverySvcInfo")]
    ArrayOfVasaStorageArrayDiscoverySvcInfo(Vec<VasaStorageArrayDiscoverySvcInfo>),
    /// A boxed array of *VasaProviderContainerSpec*. To be used in *Any* placeholders.
    ArrayOfVasaProviderContainerSpec(Vec<VasaProviderContainerSpec>),
    /// A boxed array of *VimVasaProvider*. To be used in *Any* placeholders.
    ArrayOfVimVasaProvider(Vec<VimVasaProvider>),
    /// A boxed array of *VimVasaProviderStatePerArray*. To be used in *Any* placeholders.
    ArrayOfVimVasaProviderStatePerArray(Vec<VimVasaProviderStatePerArray>),
    /// A boxed array of *VimVasaProviderVirtualHostConfig*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 8.0.1.0
    ArrayOfVimVasaProviderVirtualHostConfig(Vec<VimVasaProviderVirtualHostConfig>),
    /// A boxed array of *VimVasaProviderInfo*. To be used in *Any* placeholders.
    ArrayOfVimVasaProviderInfo(Vec<VimVasaProviderInfo>),
    /// A boxed array of *VirtualAppLinkInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualAppLinkInfo(Vec<VirtualAppLinkInfo>),
    /// A boxed array of *VirtualAppSummary*. To be used in *Any* placeholders.
    ArrayOfVirtualAppSummary(Vec<VirtualAppSummary>),
    /// A boxed array of *DeviceBackedVirtualDiskSpec*. To be used in *Any* placeholders.
    ArrayOfDeviceBackedVirtualDiskSpec(Vec<DeviceBackedVirtualDiskSpec>),
    /// A boxed array of *FileBackedVirtualDiskSpec*. To be used in *Any* placeholders.
    ArrayOfFileBackedVirtualDiskSpec(Vec<Box<dyn super::traits::FileBackedVirtualDiskSpecTrait>>),
    /// A boxed array of *SeSparseVirtualDiskSpec*. To be used in *Any* placeholders.
    ArrayOfSeSparseVirtualDiskSpec(Vec<SeSparseVirtualDiskSpec>),
    /// A boxed array of *VirtualDiskSpec*. To be used in *Any* placeholders.
    ArrayOfVirtualDiskSpec(Vec<Box<dyn super::traits::VirtualDiskSpecTrait>>),
    /// A boxed array of *VirtualMachineConnection*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 7.0.1.0
    ArrayOfVirtualMachineConnection(Vec<Box<dyn super::traits::VirtualMachineConnectionTrait>>),
    /// A boxed array of *DiskChangeInfo*. To be used in *Any* placeholders.
    ArrayOfDiskChangeInfo(Vec<DiskChangeInfo>),
    /// A boxed array of *DiskChangeExtent*. To be used in *Any* placeholders.
    ArrayOfDiskChangeExtent(Vec<DiskChangeExtent>),
    /// A boxed array of *VirtualMachineDisplayTopology*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineDisplayTopology(Vec<VirtualMachineDisplayTopology>),
    /// A boxed array of *VirtualMachineMksConnection*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 7.0.1.0
    ArrayOfVirtualMachineMksConnection(Vec<VirtualMachineMksConnection>),
    /// A boxed array of *VirtualMachineMksTicket*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineMksTicket(Vec<VirtualMachineMksTicket>),
    /// A boxed array of *StorageRequirement*. To be used in *Any* placeholders.
    ArrayOfStorageRequirement(Vec<StorageRequirement>),
    /// A boxed array of *VirtualMachineTicket*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineTicket(Vec<VirtualMachineTicket>),
    /// A boxed array of *VirtualMachineWipeResult*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineWipeResult(Vec<VirtualMachineWipeResult>),
    /// A boxed array of *VsanUpgradeSystemAPIBrokenIssue*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVsanUpgradeSystemAPIBrokenIssue")]
    ArrayOfVsanUpgradeSystemApiBrokenIssue(Vec<VsanUpgradeSystemApiBrokenIssue>),
    /// A boxed array of *VsanUpgradeSystemAutoClaimEnabledOnHostsIssue*. To be used in *Any* placeholders.
    ArrayOfVsanUpgradeSystemAutoClaimEnabledOnHostsIssue(Vec<VsanUpgradeSystemAutoClaimEnabledOnHostsIssue>),
    /// A boxed array of *VsanUpgradeSystemHostsDisconnectedIssue*. To be used in *Any* placeholders.
    ArrayOfVsanUpgradeSystemHostsDisconnectedIssue(Vec<VsanUpgradeSystemHostsDisconnectedIssue>),
    /// A boxed array of *VsanUpgradeSystemMissingHostsInClusterIssue*. To be used in *Any* placeholders.
    ArrayOfVsanUpgradeSystemMissingHostsInClusterIssue(Vec<VsanUpgradeSystemMissingHostsInClusterIssue>),
    /// A boxed array of *VsanUpgradeSystemNetworkPartitionInfo*. To be used in *Any* placeholders.
    ArrayOfVsanUpgradeSystemNetworkPartitionInfo(Vec<VsanUpgradeSystemNetworkPartitionInfo>),
    /// A boxed array of *VsanUpgradeSystemNetworkPartitionIssue*. To be used in *Any* placeholders.
    ArrayOfVsanUpgradeSystemNetworkPartitionIssue(Vec<VsanUpgradeSystemNetworkPartitionIssue>),
    /// A boxed array of *VsanUpgradeSystemNotEnoughFreeCapacityIssue*. To be used in *Any* placeholders.
    ArrayOfVsanUpgradeSystemNotEnoughFreeCapacityIssue(Vec<VsanUpgradeSystemNotEnoughFreeCapacityIssue>),
    /// A boxed array of *VsanUpgradeSystemPreflightCheckIssue*. To be used in *Any* placeholders.
    ArrayOfVsanUpgradeSystemPreflightCheckIssue(Vec<Box<dyn super::traits::VsanUpgradeSystemPreflightCheckIssueTrait>>),
    /// A boxed array of *VsanUpgradeSystemPreflightCheckResult*. To be used in *Any* placeholders.
    ArrayOfVsanUpgradeSystemPreflightCheckResult(Vec<VsanUpgradeSystemPreflightCheckResult>),
    /// A boxed array of *VsanUpgradeSystemRogueHostsInClusterIssue*. To be used in *Any* placeholders.
    ArrayOfVsanUpgradeSystemRogueHostsInClusterIssue(Vec<VsanUpgradeSystemRogueHostsInClusterIssue>),
    /// A boxed array of *VsanUpgradeSystemUpgradeHistoryDiskGroupOp*. To be used in *Any* placeholders.
    ArrayOfVsanUpgradeSystemUpgradeHistoryDiskGroupOp(Vec<VsanUpgradeSystemUpgradeHistoryDiskGroupOp>),
    /// A boxed array of *VsanUpgradeSystemUpgradeHistoryItem*. To be used in *Any* placeholders.
    ArrayOfVsanUpgradeSystemUpgradeHistoryItem(Vec<Box<dyn super::traits::VsanUpgradeSystemUpgradeHistoryItemTrait>>),
    /// A boxed array of *VsanUpgradeSystemUpgradeHistoryPreflightFail*. To be used in *Any* placeholders.
    ArrayOfVsanUpgradeSystemUpgradeHistoryPreflightFail(Vec<VsanUpgradeSystemUpgradeHistoryPreflightFail>),
    /// A boxed array of *VsanUpgradeSystemUpgradeStatus*. To be used in *Any* placeholders.
    ArrayOfVsanUpgradeSystemUpgradeStatus(Vec<VsanUpgradeSystemUpgradeStatus>),
    /// A boxed array of *VsanUpgradeSystemV2ObjectsPresentDuringDowngradeIssue*. To be used in *Any* placeholders.
    ArrayOfVsanUpgradeSystemV2ObjectsPresentDuringDowngradeIssue(Vec<VsanUpgradeSystemV2ObjectsPresentDuringDowngradeIssue>),
    /// A boxed array of *VsanUpgradeSystemWrongEsxVersionIssue*. To be used in *Any* placeholders.
    ArrayOfVsanUpgradeSystemWrongEsxVersionIssue(Vec<VsanUpgradeSystemWrongEsxVersionIssue>),
    /// A boxed array of *Action*. To be used in *Any* placeholders.
    ArrayOfAction(Vec<Box<dyn super::traits::ActionTrait>>),
    /// A boxed array of *CreateTaskAction*. To be used in *Any* placeholders.
    ArrayOfCreateTaskAction(Vec<CreateTaskAction>),
    /// A boxed array of *MethodAction*. To be used in *Any* placeholders.
    ArrayOfMethodAction(Vec<MethodAction>),
    /// A boxed array of *MethodActionArgument*. To be used in *Any* placeholders.
    ArrayOfMethodActionArgument(Vec<MethodActionArgument>),
    /// A boxed array of *RunScriptAction*. To be used in *Any* placeholders.
    ArrayOfRunScriptAction(Vec<RunScriptAction>),
    /// A boxed array of *SendEmailAction*. To be used in *Any* placeholders.
    ArrayOfSendEmailAction(Vec<SendEmailAction>),
    /// A boxed array of *SendSNMPAction*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfSendSNMPAction")]
    ArrayOfSendSnmpAction(Vec<SendSnmpAction>),
    /// A boxed array of *AlarmAction*. To be used in *Any* placeholders.
    ArrayOfAlarmAction(Vec<Box<dyn super::traits::AlarmActionTrait>>),
    /// A boxed array of *AlarmDescription*. To be used in *Any* placeholders.
    ArrayOfAlarmDescription(Vec<AlarmDescription>),
    /// A boxed array of *AlarmExpression*. To be used in *Any* placeholders.
    ArrayOfAlarmExpression(Vec<Box<dyn super::traits::AlarmExpressionTrait>>),
    /// A boxed array of *AlarmFilterSpec*. To be used in *Any* placeholders.
    ArrayOfAlarmFilterSpec(Vec<AlarmFilterSpec>),
    /// A boxed array of *AlarmInfo*. To be used in *Any* placeholders.
    ArrayOfAlarmInfo(Vec<AlarmInfo>),
    /// A boxed array of *AlarmSetting*. To be used in *Any* placeholders.
    ArrayOfAlarmSetting(Vec<AlarmSetting>),
    /// A boxed array of *AlarmSpec*. To be used in *Any* placeholders.
    ArrayOfAlarmSpec(Vec<Box<dyn super::traits::AlarmSpecTrait>>),
    /// A boxed array of *AlarmState*. To be used in *Any* placeholders.
    ArrayOfAlarmState(Vec<AlarmState>),
    /// A boxed array of *AlarmTriggeringAction*. To be used in *Any* placeholders.
    ArrayOfAlarmTriggeringAction(Vec<AlarmTriggeringAction>),
    /// A boxed array of *AlarmTriggeringActionTransitionSpec*. To be used in *Any* placeholders.
    ArrayOfAlarmTriggeringActionTransitionSpec(Vec<AlarmTriggeringActionTransitionSpec>),
    /// A boxed array of *AndAlarmExpression*. To be used in *Any* placeholders.
    ArrayOfAndAlarmExpression(Vec<AndAlarmExpression>),
    /// A boxed array of *EventAlarmExpression*. To be used in *Any* placeholders.
    ArrayOfEventAlarmExpression(Vec<EventAlarmExpression>),
    /// A boxed array of *EventAlarmExpressionComparison*. To be used in *Any* placeholders.
    ArrayOfEventAlarmExpressionComparison(Vec<EventAlarmExpressionComparison>),
    /// A boxed array of *GroupAlarmAction*. To be used in *Any* placeholders.
    ArrayOfGroupAlarmAction(Vec<GroupAlarmAction>),
    /// A boxed array of *MetricAlarmExpression*. To be used in *Any* placeholders.
    ArrayOfMetricAlarmExpression(Vec<MetricAlarmExpression>),
    /// A boxed array of *OrAlarmExpression*. To be used in *Any* placeholders.
    ArrayOfOrAlarmExpression(Vec<OrAlarmExpression>),
    /// A boxed array of *StateAlarmExpression*. To be used in *Any* placeholders.
    ArrayOfStateAlarmExpression(Vec<StateAlarmExpression>),
    /// A boxed array of *ClusterAction*. To be used in *Any* placeholders.
    ArrayOfClusterAction(Vec<Box<dyn super::traits::ClusterActionTrait>>),
    /// A boxed array of *ClusterActionHistory*. To be used in *Any* placeholders.
    ArrayOfClusterActionHistory(Vec<ClusterActionHistory>),
    /// A boxed array of *ClusterAffinityRuleSpec*. To be used in *Any* placeholders.
    ArrayOfClusterAffinityRuleSpec(Vec<ClusterAffinityRuleSpec>),
    /// A boxed array of *ClusterAntiAffinityRuleSpec*. To be used in *Any* placeholders.
    ArrayOfClusterAntiAffinityRuleSpec(Vec<ClusterAntiAffinityRuleSpec>),
    /// A boxed array of *ClusterAttemptedVmInfo*. To be used in *Any* placeholders.
    ArrayOfClusterAttemptedVmInfo(Vec<ClusterAttemptedVmInfo>),
    /// A boxed array of *ClusterClusterInitialPlacementAction*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 8.0.0.1
    ArrayOfClusterClusterInitialPlacementAction(Vec<ClusterClusterInitialPlacementAction>),
    /// A boxed array of *ClusterConfigInfo*. To be used in *Any* placeholders.
    ArrayOfClusterConfigInfo(Vec<ClusterConfigInfo>),
    /// A boxed array of *ClusterConfigInfoEx*. To be used in *Any* placeholders.
    ArrayOfClusterConfigInfoEx(Vec<ClusterConfigInfoEx>),
    /// A boxed array of *ClusterConfigSpec*. To be used in *Any* placeholders.
    ArrayOfClusterConfigSpec(Vec<ClusterConfigSpec>),
    /// A boxed array of *ClusterConfigSpecEx*. To be used in *Any* placeholders.
    ArrayOfClusterConfigSpecEx(Vec<ClusterConfigSpecEx>),
    /// A boxed array of *ClusterCryptoConfigInfo*. To be used in *Any* placeholders.
    ArrayOfClusterCryptoConfigInfo(Vec<ClusterCryptoConfigInfo>),
    /// A boxed array of *ClusterDasAamHostInfo*. To be used in *Any* placeholders.
    ArrayOfClusterDasAamHostInfo(Vec<ClusterDasAamHostInfo>),
    /// A boxed array of *ClusterDasAamNodeState*. To be used in *Any* placeholders.
    ArrayOfClusterDasAamNodeState(Vec<ClusterDasAamNodeState>),
    /// A boxed array of *ClusterDasAdmissionControlInfo*. To be used in *Any* placeholders.
    ArrayOfClusterDasAdmissionControlInfo(Vec<Box<dyn super::traits::ClusterDasAdmissionControlInfoTrait>>),
    /// A boxed array of *ClusterDasAdmissionControlPolicy*. To be used in *Any* placeholders.
    ArrayOfClusterDasAdmissionControlPolicy(Vec<Box<dyn super::traits::ClusterDasAdmissionControlPolicyTrait>>),
    /// A boxed array of *ClusterDasAdvancedRuntimeInfo*. To be used in *Any* placeholders.
    ArrayOfClusterDasAdvancedRuntimeInfo(Vec<Box<dyn super::traits::ClusterDasAdvancedRuntimeInfoTrait>>),
    /// A boxed array of *DasHeartbeatDatastoreInfo*. To be used in *Any* placeholders.
    ArrayOfDasHeartbeatDatastoreInfo(Vec<DasHeartbeatDatastoreInfo>),
    /// A boxed array of *ClusterDasAdvancedRuntimeInfoVmcpCapabilityInfo*. To be used in *Any* placeholders.
    ArrayOfClusterDasAdvancedRuntimeInfoVmcpCapabilityInfo(Vec<ClusterDasAdvancedRuntimeInfoVmcpCapabilityInfo>),
    /// A boxed array of *ClusterDasConfigInfo*. To be used in *Any* placeholders.
    ArrayOfClusterDasConfigInfo(Vec<ClusterDasConfigInfo>),
    /// A boxed array of *ClusterDasData*. To be used in *Any* placeholders.
    ArrayOfClusterDasData(Vec<Box<dyn super::traits::ClusterDasDataTrait>>),
    /// A boxed array of *ClusterDasDataSummary*. To be used in *Any* placeholders.
    ArrayOfClusterDasDataSummary(Vec<ClusterDasDataSummary>),
    /// A boxed array of *ClusterDasFailoverLevelAdvancedRuntimeInfo*. To be used in *Any* placeholders.
    ArrayOfClusterDasFailoverLevelAdvancedRuntimeInfo(Vec<ClusterDasFailoverLevelAdvancedRuntimeInfo>),
    /// A boxed array of *ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots*. To be used in *Any* placeholders.
    ArrayOfClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots(Vec<ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots>),
    /// A boxed array of *ClusterDasFailoverLevelAdvancedRuntimeInfoSlotInfo*. To be used in *Any* placeholders.
    ArrayOfClusterDasFailoverLevelAdvancedRuntimeInfoSlotInfo(Vec<ClusterDasFailoverLevelAdvancedRuntimeInfoSlotInfo>),
    /// A boxed array of *ClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots*. To be used in *Any* placeholders.
    ArrayOfClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots(Vec<ClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots>),
    /// A boxed array of *ClusterDasFdmHostState*. To be used in *Any* placeholders.
    ArrayOfClusterDasFdmHostState(Vec<ClusterDasFdmHostState>),
    /// A boxed array of *ClusterDasHostInfo*. To be used in *Any* placeholders.
    ArrayOfClusterDasHostInfo(Vec<Box<dyn super::traits::ClusterDasHostInfoTrait>>),
    /// A boxed array of *ClusterDasHostRecommendation*. To be used in *Any* placeholders.
    ArrayOfClusterDasHostRecommendation(Vec<ClusterDasHostRecommendation>),
    /// A boxed array of *ClusterDasVmConfigInfo*. To be used in *Any* placeholders.
    ArrayOfClusterDasVmConfigInfo(Vec<ClusterDasVmConfigInfo>),
    /// A boxed array of *ClusterDasVmConfigSpec*. To be used in *Any* placeholders.
    ArrayOfClusterDasVmConfigSpec(Vec<ClusterDasVmConfigSpec>),
    /// A boxed array of *ClusterDasVmSettings*. To be used in *Any* placeholders.
    ArrayOfClusterDasVmSettings(Vec<ClusterDasVmSettings>),
    /// A boxed array of *ClusterDatastoreUpdateSpec*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 7.0.3.0
    ArrayOfClusterDatastoreUpdateSpec(Vec<ClusterDatastoreUpdateSpec>),
    /// A boxed array of *ClusterDependencyRuleInfo*. To be used in *Any* placeholders.
    ArrayOfClusterDependencyRuleInfo(Vec<ClusterDependencyRuleInfo>),
    /// A boxed array of *ClusterDpmConfigInfo*. To be used in *Any* placeholders.
    ArrayOfClusterDpmConfigInfo(Vec<ClusterDpmConfigInfo>),
    /// A boxed array of *ClusterDpmHostConfigInfo*. To be used in *Any* placeholders.
    ArrayOfClusterDpmHostConfigInfo(Vec<ClusterDpmHostConfigInfo>),
    /// A boxed array of *ClusterDpmHostConfigSpec*. To be used in *Any* placeholders.
    ArrayOfClusterDpmHostConfigSpec(Vec<ClusterDpmHostConfigSpec>),
    /// A boxed array of *ClusterDrsConfigInfo*. To be used in *Any* placeholders.
    ArrayOfClusterDrsConfigInfo(Vec<ClusterDrsConfigInfo>),
    /// A boxed array of *ClusterDrsFaults*. To be used in *Any* placeholders.
    ArrayOfClusterDrsFaults(Vec<ClusterDrsFaults>),
    /// A boxed array of *ClusterDrsFaultsFaultsByVirtualDisk*. To be used in *Any* placeholders.
    ArrayOfClusterDrsFaultsFaultsByVirtualDisk(Vec<ClusterDrsFaultsFaultsByVirtualDisk>),
    /// A boxed array of *ClusterDrsFaultsFaultsByVm*. To be used in *Any* placeholders.
    ArrayOfClusterDrsFaultsFaultsByVm(Vec<Box<dyn super::traits::ClusterDrsFaultsFaultsByVmTrait>>),
    /// A boxed array of *ClusterDrsMigration*. To be used in *Any* placeholders.
    ArrayOfClusterDrsMigration(Vec<ClusterDrsMigration>),
    /// A boxed array of *ClusterDrsRecommendation*. To be used in *Any* placeholders.
    ArrayOfClusterDrsRecommendation(Vec<ClusterDrsRecommendation>),
    /// A boxed array of *ClusterDrsVmConfigInfo*. To be used in *Any* placeholders.
    ArrayOfClusterDrsVmConfigInfo(Vec<ClusterDrsVmConfigInfo>),
    /// A boxed array of *ClusterDrsVmConfigSpec*. To be used in *Any* placeholders.
    ArrayOfClusterDrsVmConfigSpec(Vec<ClusterDrsVmConfigSpec>),
    /// A boxed array of *ClusterEVCManagerCheckResult*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfClusterEVCManagerCheckResult")]
    ArrayOfClusterEvcManagerCheckResult(Vec<ClusterEvcManagerCheckResult>),
    /// A boxed array of *ClusterEVCManagerEVCState*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfClusterEVCManagerEVCState")]
    ArrayOfClusterEvcManagerEvcState(Vec<ClusterEvcManagerEvcState>),
    /// A boxed array of *ClusterEnterMaintenanceResult*. To be used in *Any* placeholders.
    ArrayOfClusterEnterMaintenanceResult(Vec<ClusterEnterMaintenanceResult>),
    /// A boxed array of *ClusterFailoverHostAdmissionControlInfo*. To be used in *Any* placeholders.
    ArrayOfClusterFailoverHostAdmissionControlInfo(Vec<ClusterFailoverHostAdmissionControlInfo>),
    /// A boxed array of *ClusterFailoverHostAdmissionControlInfoHostStatus*. To be used in *Any* placeholders.
    ArrayOfClusterFailoverHostAdmissionControlInfoHostStatus(Vec<ClusterFailoverHostAdmissionControlInfoHostStatus>),
    /// A boxed array of *ClusterFailoverHostAdmissionControlPolicy*. To be used in *Any* placeholders.
    ArrayOfClusterFailoverHostAdmissionControlPolicy(Vec<ClusterFailoverHostAdmissionControlPolicy>),
    /// A boxed array of *ClusterFailoverLevelAdmissionControlInfo*. To be used in *Any* placeholders.
    ArrayOfClusterFailoverLevelAdmissionControlInfo(Vec<ClusterFailoverLevelAdmissionControlInfo>),
    /// A boxed array of *ClusterFailoverLevelAdmissionControlPolicy*. To be used in *Any* placeholders.
    ArrayOfClusterFailoverLevelAdmissionControlPolicy(Vec<ClusterFailoverLevelAdmissionControlPolicy>),
    /// A boxed array of *ClusterFailoverResourcesAdmissionControlInfo*. To be used in *Any* placeholders.
    ArrayOfClusterFailoverResourcesAdmissionControlInfo(Vec<ClusterFailoverResourcesAdmissionControlInfo>),
    /// A boxed array of *ClusterFailoverResourcesAdmissionControlPolicy*. To be used in *Any* placeholders.
    ArrayOfClusterFailoverResourcesAdmissionControlPolicy(Vec<ClusterFailoverResourcesAdmissionControlPolicy>),
    /// A boxed array of *ClusterFixedSizeSlotPolicy*. To be used in *Any* placeholders.
    ArrayOfClusterFixedSizeSlotPolicy(Vec<ClusterFixedSizeSlotPolicy>),
    /// A boxed array of *ClusterGroupInfo*. To be used in *Any* placeholders.
    ArrayOfClusterGroupInfo(Vec<Box<dyn super::traits::ClusterGroupInfoTrait>>),
    /// A boxed array of *ClusterGroupSpec*. To be used in *Any* placeholders.
    ArrayOfClusterGroupSpec(Vec<ClusterGroupSpec>),
    /// A boxed array of *ClusterHostGroup*. To be used in *Any* placeholders.
    ArrayOfClusterHostGroup(Vec<ClusterHostGroup>),
    /// A boxed array of *ClusterHostInfraUpdateHaModeAction*. To be used in *Any* placeholders.
    ArrayOfClusterHostInfraUpdateHaModeAction(Vec<ClusterHostInfraUpdateHaModeAction>),
    /// A boxed array of *ClusterHostPowerAction*. To be used in *Any* placeholders.
    ArrayOfClusterHostPowerAction(Vec<ClusterHostPowerAction>),
    /// A boxed array of *ClusterHostRecommendation*. To be used in *Any* placeholders.
    ArrayOfClusterHostRecommendation(Vec<ClusterHostRecommendation>),
    /// A boxed array of *ClusterInfraUpdateHaConfigInfo*. To be used in *Any* placeholders.
    ArrayOfClusterInfraUpdateHaConfigInfo(Vec<ClusterInfraUpdateHaConfigInfo>),
    /// A boxed array of *ClusterInitialPlacementAction*. To be used in *Any* placeholders.
    ArrayOfClusterInitialPlacementAction(Vec<ClusterInitialPlacementAction>),
    /// A boxed array of *ClusterMigrationAction*. To be used in *Any* placeholders.
    ArrayOfClusterMigrationAction(Vec<ClusterMigrationAction>),
    /// A boxed array of *ClusterNotAttemptedVmInfo*. To be used in *Any* placeholders.
    ArrayOfClusterNotAttemptedVmInfo(Vec<ClusterNotAttemptedVmInfo>),
    /// A boxed array of *ClusterOrchestrationInfo*. To be used in *Any* placeholders.
    ArrayOfClusterOrchestrationInfo(Vec<ClusterOrchestrationInfo>),
    /// A boxed array of *PlacementAction*. To be used in *Any* placeholders.
    ArrayOfPlacementAction(Vec<PlacementAction>),
    /// A boxed array of *PlacementResult*. To be used in *Any* placeholders.
    ArrayOfPlacementResult(Vec<PlacementResult>),
    /// A boxed array of *PlacementSpec*. To be used in *Any* placeholders.
    ArrayOfPlacementSpec(Vec<PlacementSpec>),
    /// A boxed array of *ClusterPowerOnVmResult*. To be used in *Any* placeholders.
    ArrayOfClusterPowerOnVmResult(Vec<ClusterPowerOnVmResult>),
    /// A boxed array of *ClusterPreemptibleVmPairInfo*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 8.0.0.1
    ArrayOfClusterPreemptibleVmPairInfo(Vec<ClusterPreemptibleVmPairInfo>),
    /// A boxed array of *ClusterPreemptibleVmPairSpec*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 8.0.0.1
    ArrayOfClusterPreemptibleVmPairSpec(Vec<ClusterPreemptibleVmPairSpec>),
    /// A boxed array of *ClusterProactiveDrsConfigInfo*. To be used in *Any* placeholders.
    ArrayOfClusterProactiveDrsConfigInfo(Vec<ClusterProactiveDrsConfigInfo>),
    /// A boxed array of *ClusterRecommendation*. To be used in *Any* placeholders.
    ArrayOfClusterRecommendation(Vec<ClusterRecommendation>),
    /// A boxed array of *ClusterResourceUsageSummary*. To be used in *Any* placeholders.
    ArrayOfClusterResourceUsageSummary(Vec<ClusterResourceUsageSummary>),
    /// A boxed array of *ClusterRuleInfo*. To be used in *Any* placeholders.
    ArrayOfClusterRuleInfo(Vec<Box<dyn super::traits::ClusterRuleInfoTrait>>),
    /// A boxed array of *ClusterRuleSpec*. To be used in *Any* placeholders.
    ArrayOfClusterRuleSpec(Vec<ClusterRuleSpec>),
    /// A boxed array of *ClusterSlotPolicy*. To be used in *Any* placeholders.
    ArrayOfClusterSlotPolicy(Vec<Box<dyn super::traits::ClusterSlotPolicyTrait>>),
    /// A boxed array of *ClusterSystemVMsConfigInfo*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 7.0.3.0
    ArrayOfClusterSystemVMsConfigInfo(Vec<ClusterSystemVMsConfigInfo>),
    /// A boxed array of *ClusterSystemVMsConfigSpec*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 7.0.3.0
    ArrayOfClusterSystemVMsConfigSpec(Vec<ClusterSystemVMsConfigSpec>),
    /// A boxed array of *ClusterTagCategoryUpdateSpec*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 7.0.3.0
    ArrayOfClusterTagCategoryUpdateSpec(Vec<ClusterTagCategoryUpdateSpec>),
    /// A boxed array of *ClusterUsageSummary*. To be used in *Any* placeholders.
    ArrayOfClusterUsageSummary(Vec<ClusterUsageSummary>),
    /// A boxed array of *ClusterVmComponentProtectionSettings*. To be used in *Any* placeholders.
    ArrayOfClusterVmComponentProtectionSettings(Vec<ClusterVmComponentProtectionSettings>),
    /// A boxed array of *ClusterVmGroup*. To be used in *Any* placeholders.
    ArrayOfClusterVmGroup(Vec<ClusterVmGroup>),
    /// A boxed array of *ClusterVmHostRuleInfo*. To be used in *Any* placeholders.
    ArrayOfClusterVmHostRuleInfo(Vec<ClusterVmHostRuleInfo>),
    /// A boxed array of *ClusterVmOrchestrationInfo*. To be used in *Any* placeholders.
    ArrayOfClusterVmOrchestrationInfo(Vec<ClusterVmOrchestrationInfo>),
    /// A boxed array of *ClusterVmOrchestrationSpec*. To be used in *Any* placeholders.
    ArrayOfClusterVmOrchestrationSpec(Vec<ClusterVmOrchestrationSpec>),
    /// A boxed array of *ClusterVmReadiness*. To be used in *Any* placeholders.
    ArrayOfClusterVmReadiness(Vec<ClusterVmReadiness>),
    /// A boxed array of *ClusterVmToolsMonitoringSettings*. To be used in *Any* placeholders.
    ArrayOfClusterVmToolsMonitoringSettings(Vec<ClusterVmToolsMonitoringSettings>),
    /// A boxed array of *DistributedVirtualPort*. To be used in *Any* placeholders.
    ArrayOfDistributedVirtualPort(Vec<DistributedVirtualPort>),
    /// A boxed array of *DVPortConfigInfo*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfDVPortConfigInfo")]
    ArrayOfDvPortConfigInfo(Vec<DvPortConfigInfo>),
    /// A boxed array of *DVPortConfigSpec*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfDVPortConfigSpec")]
    ArrayOfDvPortConfigSpec(Vec<DvPortConfigSpec>),
    /// A boxed array of *DvsFilterConfig*. To be used in *Any* placeholders.
    ArrayOfDvsFilterConfig(Vec<Box<dyn super::traits::DvsFilterConfigTrait>>),
    /// A boxed array of *DvsFilterConfigSpec*. To be used in *Any* placeholders.
    ArrayOfDvsFilterConfigSpec(Vec<DvsFilterConfigSpec>),
    /// A boxed array of *DvsFilterParameter*. To be used in *Any* placeholders.
    ArrayOfDvsFilterParameter(Vec<DvsFilterParameter>),
    /// A boxed array of *DvsFilterPolicy*. To be used in *Any* placeholders.
    ArrayOfDvsFilterPolicy(Vec<DvsFilterPolicy>),
    /// A boxed array of *DVSHostLocalPortInfo*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfDVSHostLocalPortInfo")]
    ArrayOfDvsHostLocalPortInfo(Vec<DvsHostLocalPortInfo>),
    /// A boxed array of *DVPortStatus*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfDVPortStatus")]
    ArrayOfDvPortStatus(Vec<DvPortStatus>),
    /// A boxed array of *DVPortSetting*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfDVPortSetting")]
    ArrayOfDvPortSetting(Vec<Box<dyn super::traits::DvPortSettingTrait>>),
    /// A boxed array of *DVPortState*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfDVPortState")]
    ArrayOfDvPortState(Vec<DvPortState>),
    /// A boxed array of *DvsTrafficFilterConfig*. To be used in *Any* placeholders.
    ArrayOfDvsTrafficFilterConfig(Vec<Box<dyn super::traits::DvsTrafficFilterConfigTrait>>),
    /// A boxed array of *DvsTrafficFilterConfigSpec*. To be used in *Any* placeholders.
    ArrayOfDvsTrafficFilterConfigSpec(Vec<DvsTrafficFilterConfigSpec>),
    /// A boxed array of *DVSTrafficShapingPolicy*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfDVSTrafficShapingPolicy")]
    ArrayOfDvsTrafficShapingPolicy(Vec<DvsTrafficShapingPolicy>),
    /// A boxed array of *DVSVendorSpecificConfig*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfDVSVendorSpecificConfig")]
    ArrayOfDvsVendorSpecificConfig(Vec<DvsVendorSpecificConfig>),
    /// A boxed array of *DVPortgroupConfigInfo*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfDVPortgroupConfigInfo")]
    ArrayOfDvPortgroupConfigInfo(Vec<DvPortgroupConfigInfo>),
    /// A boxed array of *DVPortgroupConfigSpec*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfDVPortgroupConfigSpec")]
    ArrayOfDvPortgroupConfigSpec(Vec<DvPortgroupConfigSpec>),
    /// A boxed array of *DistributedVirtualPortgroupNsxPortgroupOperationResult*. To be used in *Any* placeholders.
    ArrayOfDistributedVirtualPortgroupNsxPortgroupOperationResult(Vec<DistributedVirtualPortgroupNsxPortgroupOperationResult>),
    /// A boxed array of *DVPortgroupPolicy*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfDVPortgroupPolicy")]
    ArrayOfDvPortgroupPolicy(Vec<Box<dyn super::traits::DvPortgroupPolicyTrait>>),
    /// A boxed array of *DistributedVirtualPortgroupProblem*. To be used in *Any* placeholders.
    ArrayOfDistributedVirtualPortgroupProblem(Vec<DistributedVirtualPortgroupProblem>),
    /// A boxed array of *DistributedVirtualPortgroupInfo*. To be used in *Any* placeholders.
    ArrayOfDistributedVirtualPortgroupInfo(Vec<DistributedVirtualPortgroupInfo>),
    /// A boxed array of *DVPortgroupSelection*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfDVPortgroupSelection")]
    ArrayOfDvPortgroupSelection(Vec<DvPortgroupSelection>),
    /// A boxed array of *DistributedVirtualSwitchInfo*. To be used in *Any* placeholders.
    ArrayOfDistributedVirtualSwitchInfo(Vec<DistributedVirtualSwitchInfo>),
    /// A boxed array of *DistributedVirtualSwitchManagerCompatibilityResult*. To be used in *Any* placeholders.
    ArrayOfDistributedVirtualSwitchManagerCompatibilityResult(Vec<DistributedVirtualSwitchManagerCompatibilityResult>),
    /// A boxed array of *DVSManagerDvsConfigTarget*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfDVSManagerDvsConfigTarget")]
    ArrayOfDvsManagerDvsConfigTarget(Vec<DvsManagerDvsConfigTarget>),
    /// A boxed array of *DistributedVirtualSwitchManagerDvsProductSpec*. To be used in *Any* placeholders.
    ArrayOfDistributedVirtualSwitchManagerDvsProductSpec(Vec<DistributedVirtualSwitchManagerDvsProductSpec>),
    /// A boxed array of *DistributedVirtualSwitchManagerHostArrayFilter*. To be used in *Any* placeholders.
    ArrayOfDistributedVirtualSwitchManagerHostArrayFilter(Vec<DistributedVirtualSwitchManagerHostArrayFilter>),
    /// A boxed array of *DistributedVirtualSwitchManagerHostContainer*. To be used in *Any* placeholders.
    ArrayOfDistributedVirtualSwitchManagerHostContainer(Vec<DistributedVirtualSwitchManagerHostContainer>),
    /// A boxed array of *DistributedVirtualSwitchManagerHostContainerFilter*. To be used in *Any* placeholders.
    ArrayOfDistributedVirtualSwitchManagerHostContainerFilter(Vec<DistributedVirtualSwitchManagerHostContainerFilter>),
    /// A boxed array of *DistributedVirtualSwitchManagerHostDvsFilterSpec*. To be used in *Any* placeholders.
    ArrayOfDistributedVirtualSwitchManagerHostDvsFilterSpec(Vec<Box<dyn super::traits::DistributedVirtualSwitchManagerHostDvsFilterSpecTrait>>),
    /// A boxed array of *DistributedVirtualSwitchManagerHostDvsMembershipFilter*. To be used in *Any* placeholders.
    ArrayOfDistributedVirtualSwitchManagerHostDvsMembershipFilter(Vec<DistributedVirtualSwitchManagerHostDvsMembershipFilter>),
    /// A boxed array of *DistributedVirtualSwitchManagerImportResult*. To be used in *Any* placeholders.
    ArrayOfDistributedVirtualSwitchManagerImportResult(Vec<DistributedVirtualSwitchManagerImportResult>),
    /// A boxed array of *DVSManagerPhysicalNicsList*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 8.0.0.1
    #[serde(rename = "ArrayOfDVSManagerPhysicalNicsList")]
    ArrayOfDvsManagerPhysicalNicsList(Vec<DvsManagerPhysicalNicsList>),
    /// A boxed array of *DVSSelection*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfDVSSelection")]
    ArrayOfDvsSelection(Vec<DvsSelection>),
    /// A boxed array of *EntityBackup*. To be used in *Any* placeholders.
    ArrayOfEntityBackup(Vec<EntityBackup>),
    /// A boxed array of *EntityBackupConfig*. To be used in *Any* placeholders.
    ArrayOfEntityBackupConfig(Vec<EntityBackupConfig>),
    /// A boxed array of *DistributedVirtualSwitchHostMember*. To be used in *Any* placeholders.
    ArrayOfDistributedVirtualSwitchHostMember(Vec<DistributedVirtualSwitchHostMember>),
    /// A boxed array of *DistributedVirtualSwitchHostMemberBacking*. To be used in *Any* placeholders.
    ArrayOfDistributedVirtualSwitchHostMemberBacking(Vec<Box<dyn super::traits::DistributedVirtualSwitchHostMemberBackingTrait>>),
    /// A boxed array of *DistributedVirtualSwitchHostMemberConfigInfo*. To be used in *Any* placeholders.
    ArrayOfDistributedVirtualSwitchHostMemberConfigInfo(Vec<DistributedVirtualSwitchHostMemberConfigInfo>),
    /// A boxed array of *DistributedVirtualSwitchHostMemberConfigSpec*. To be used in *Any* placeholders.
    ArrayOfDistributedVirtualSwitchHostMemberConfigSpec(Vec<DistributedVirtualSwitchHostMemberConfigSpec>),
    /// A boxed array of *HostMemberHealthCheckResult*. To be used in *Any* placeholders.
    ArrayOfHostMemberHealthCheckResult(Vec<Box<dyn super::traits::HostMemberHealthCheckResultTrait>>),
    /// A boxed array of *DistributedVirtualSwitchHostMemberPnicBacking*. To be used in *Any* placeholders.
    ArrayOfDistributedVirtualSwitchHostMemberPnicBacking(Vec<DistributedVirtualSwitchHostMemberPnicBacking>),
    /// A boxed array of *DistributedVirtualSwitchHostMemberPnicSpec*. To be used in *Any* placeholders.
    ArrayOfDistributedVirtualSwitchHostMemberPnicSpec(Vec<DistributedVirtualSwitchHostMemberPnicSpec>),
    /// A boxed array of *HostMemberRuntimeInfo*. To be used in *Any* placeholders.
    ArrayOfHostMemberRuntimeInfo(Vec<HostMemberRuntimeInfo>),
    /// A boxed array of *DistributedVirtualSwitchHostMemberRuntimeState*. To be used in *Any* placeholders.
    ArrayOfDistributedVirtualSwitchHostMemberRuntimeState(Vec<DistributedVirtualSwitchHostMemberRuntimeState>),
    /// A boxed array of *DistributedVirtualSwitchHostMemberTransportZoneInfo*. To be used in *Any* placeholders.
    ArrayOfDistributedVirtualSwitchHostMemberTransportZoneInfo(Vec<DistributedVirtualSwitchHostMemberTransportZoneInfo>),
    /// A boxed array of *HostMemberUplinkHealthCheckResult*. To be used in *Any* placeholders.
    ArrayOfHostMemberUplinkHealthCheckResult(Vec<Box<dyn super::traits::HostMemberUplinkHealthCheckResultTrait>>),
    /// A boxed array of *DistributedVirtualSwitchHostProductSpec*. To be used in *Any* placeholders.
    ArrayOfDistributedVirtualSwitchHostProductSpec(Vec<DistributedVirtualSwitchHostProductSpec>),
    /// A boxed array of *DistributedVirtualSwitchKeyedOpaqueBlob*. To be used in *Any* placeholders.
    ArrayOfDistributedVirtualSwitchKeyedOpaqueBlob(Vec<DistributedVirtualSwitchKeyedOpaqueBlob>),
    /// A boxed array of *DistributedVirtualSwitchNetworkOffloadSpec*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 8.0.0.1
    ArrayOfDistributedVirtualSwitchNetworkOffloadSpec(Vec<DistributedVirtualSwitchNetworkOffloadSpec>),
    /// A boxed array of *DVSNetworkResourcePool*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfDVSNetworkResourcePool")]
    ArrayOfDvsNetworkResourcePool(Vec<DvsNetworkResourcePool>),
    /// A boxed array of *DVSNetworkResourcePoolAllocationInfo*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfDVSNetworkResourcePoolAllocationInfo")]
    ArrayOfDvsNetworkResourcePoolAllocationInfo(Vec<DvsNetworkResourcePoolAllocationInfo>),
    /// A boxed array of *DVSNetworkResourcePoolConfigSpec*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfDVSNetworkResourcePoolConfigSpec")]
    ArrayOfDvsNetworkResourcePoolConfigSpec(Vec<DvsNetworkResourcePoolConfigSpec>),
    /// A boxed array of *DistributedVirtualSwitchPortConnectee*. To be used in *Any* placeholders.
    ArrayOfDistributedVirtualSwitchPortConnectee(Vec<DistributedVirtualSwitchPortConnectee>),
    /// A boxed array of *DistributedVirtualSwitchPortConnection*. To be used in *Any* placeholders.
    ArrayOfDistributedVirtualSwitchPortConnection(Vec<DistributedVirtualSwitchPortConnection>),
    /// A boxed array of *DistributedVirtualSwitchPortCriteria*. To be used in *Any* placeholders.
    ArrayOfDistributedVirtualSwitchPortCriteria(Vec<DistributedVirtualSwitchPortCriteria>),
    /// A boxed array of *DistributedVirtualSwitchPortStatistics*. To be used in *Any* placeholders.
    ArrayOfDistributedVirtualSwitchPortStatistics(Vec<DistributedVirtualSwitchPortStatistics>),
    /// A boxed array of *DistributedVirtualSwitchProductSpec*. To be used in *Any* placeholders.
    ArrayOfDistributedVirtualSwitchProductSpec(Vec<DistributedVirtualSwitchProductSpec>),
    /// A boxed array of *DvsTrafficRule*. To be used in *Any* placeholders.
    ArrayOfDvsTrafficRule(Vec<DvsTrafficRule>),
    /// A boxed array of *DvsAcceptNetworkRuleAction*. To be used in *Any* placeholders.
    ArrayOfDvsAcceptNetworkRuleAction(Vec<DvsAcceptNetworkRuleAction>),
    /// A boxed array of *DvsNetworkRuleAction*. To be used in *Any* placeholders.
    ArrayOfDvsNetworkRuleAction(Vec<Box<dyn super::traits::DvsNetworkRuleActionTrait>>),
    /// A boxed array of *DvsCopyNetworkRuleAction*. To be used in *Any* placeholders.
    ArrayOfDvsCopyNetworkRuleAction(Vec<DvsCopyNetworkRuleAction>),
    /// A boxed array of *DvsDropNetworkRuleAction*. To be used in *Any* placeholders.
    ArrayOfDvsDropNetworkRuleAction(Vec<DvsDropNetworkRuleAction>),
    /// A boxed array of *DvsGreEncapNetworkRuleAction*. To be used in *Any* placeholders.
    ArrayOfDvsGreEncapNetworkRuleAction(Vec<DvsGreEncapNetworkRuleAction>),
    /// A boxed array of *DvsIpPort*. To be used in *Any* placeholders.
    ArrayOfDvsIpPort(Vec<Box<dyn super::traits::DvsIpPortTrait>>),
    /// A boxed array of *DvsIpPortRange*. To be used in *Any* placeholders.
    ArrayOfDvsIpPortRange(Vec<DvsIpPortRange>),
    /// A boxed array of *DvsIpNetworkRuleQualifier*. To be used in *Any* placeholders.
    ArrayOfDvsIpNetworkRuleQualifier(Vec<DvsIpNetworkRuleQualifier>),
    /// A boxed array of *DvsLogNetworkRuleAction*. To be used in *Any* placeholders.
    ArrayOfDvsLogNetworkRuleAction(Vec<DvsLogNetworkRuleAction>),
    /// A boxed array of *DvsMacNetworkRuleQualifier*. To be used in *Any* placeholders.
    ArrayOfDvsMacNetworkRuleQualifier(Vec<DvsMacNetworkRuleQualifier>),
    /// A boxed array of *DvsMacRewriteNetworkRuleAction*. To be used in *Any* placeholders.
    ArrayOfDvsMacRewriteNetworkRuleAction(Vec<DvsMacRewriteNetworkRuleAction>),
    /// A boxed array of *DvsPuntNetworkRuleAction*. To be used in *Any* placeholders.
    ArrayOfDvsPuntNetworkRuleAction(Vec<DvsPuntNetworkRuleAction>),
    /// A boxed array of *DvsNetworkRuleQualifier*. To be used in *Any* placeholders.
    ArrayOfDvsNetworkRuleQualifier(Vec<Box<dyn super::traits::DvsNetworkRuleQualifierTrait>>),
    /// A boxed array of *DvsRateLimitNetworkRuleAction*. To be used in *Any* placeholders.
    ArrayOfDvsRateLimitNetworkRuleAction(Vec<DvsRateLimitNetworkRuleAction>),
    /// A boxed array of *DvsSingleIpPort*. To be used in *Any* placeholders.
    ArrayOfDvsSingleIpPort(Vec<DvsSingleIpPort>),
    /// A boxed array of *DvsSystemTrafficNetworkRuleQualifier*. To be used in *Any* placeholders.
    ArrayOfDvsSystemTrafficNetworkRuleQualifier(Vec<DvsSystemTrafficNetworkRuleQualifier>),
    /// A boxed array of *DvsUpdateTagNetworkRuleAction*. To be used in *Any* placeholders.
    ArrayOfDvsUpdateTagNetworkRuleAction(Vec<DvsUpdateTagNetworkRuleAction>),
    /// A boxed array of *DvsTrafficRuleset*. To be used in *Any* placeholders.
    ArrayOfDvsTrafficRuleset(Vec<DvsTrafficRuleset>),
    /// A boxed array of *DVSVmVnicNetworkResourcePool*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfDVSVmVnicNetworkResourcePool")]
    ArrayOfDvsVmVnicNetworkResourcePool(Vec<DvsVmVnicNetworkResourcePool>),
    /// A boxed array of *DvsVmVnicResourcePoolConfigSpec*. To be used in *Any* placeholders.
    ArrayOfDvsVmVnicResourcePoolConfigSpec(Vec<DvsVmVnicResourcePoolConfigSpec>),
    /// A boxed array of *DvsVmVnicResourceAllocation*. To be used in *Any* placeholders.
    ArrayOfDvsVmVnicResourceAllocation(Vec<DvsVmVnicResourceAllocation>),
    /// A boxed array of *DvsVmVnicNetworkResourcePoolRuntimeInfo*. To be used in *Any* placeholders.
    ArrayOfDvsVmVnicNetworkResourcePoolRuntimeInfo(Vec<DvsVmVnicNetworkResourcePoolRuntimeInfo>),
    /// A boxed array of *DvsVnicAllocatedResource*. To be used in *Any* placeholders.
    ArrayOfDvsVnicAllocatedResource(Vec<DvsVnicAllocatedResource>),
    /// A boxed array of *VMwareDVSConfigInfo*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVMwareDVSConfigInfo")]
    ArrayOfVMwareDvsConfigInfo(Vec<VMwareDvsConfigInfo>),
    /// A boxed array of *VMwareDVSConfigSpec*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVMwareDVSConfigSpec")]
    ArrayOfVMwareDvsConfigSpec(Vec<VMwareDvsConfigSpec>),
    /// A boxed array of *VMwareDvsDpuCapability*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 8.0.0.1
    ArrayOfVMwareDvsDpuCapability(Vec<VMwareDvsDpuCapability>),
    /// A boxed array of *DVSFailureCriteria*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfDVSFailureCriteria")]
    ArrayOfDvsFailureCriteria(Vec<DvsFailureCriteria>),
    /// A boxed array of *VMwareDVSFeatureCapability*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVMwareDVSFeatureCapability")]
    ArrayOfVMwareDvsFeatureCapability(Vec<VMwareDvsFeatureCapability>),
    /// A boxed array of *VMwareIpfixConfig*. To be used in *Any* placeholders.
    ArrayOfVMwareIpfixConfig(Vec<VMwareIpfixConfig>),
    /// A boxed array of *VMwareDvsIpfixCapability*. To be used in *Any* placeholders.
    ArrayOfVMwareDvsIpfixCapability(Vec<VMwareDvsIpfixCapability>),
    /// A boxed array of *VMwareDvsLacpCapability*. To be used in *Any* placeholders.
    ArrayOfVMwareDvsLacpCapability(Vec<VMwareDvsLacpCapability>),
    /// A boxed array of *VMwareDvsLacpGroupConfig*. To be used in *Any* placeholders.
    ArrayOfVMwareDvsLacpGroupConfig(Vec<VMwareDvsLacpGroupConfig>),
    /// A boxed array of *VMwareDvsLacpGroupSpec*. To be used in *Any* placeholders.
    ArrayOfVMwareDvsLacpGroupSpec(Vec<VMwareDvsLacpGroupSpec>),
    /// A boxed array of *VMwareDvsLagIpfixConfig*. To be used in *Any* placeholders.
    ArrayOfVMwareDvsLagIpfixConfig(Vec<VMwareDvsLagIpfixConfig>),
    /// A boxed array of *VMwareDvsLagVlanConfig*. To be used in *Any* placeholders.
    ArrayOfVMwareDvsLagVlanConfig(Vec<VMwareDvsLagVlanConfig>),
    /// A boxed array of *DVSMacLearningPolicy*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfDVSMacLearningPolicy")]
    ArrayOfDvsMacLearningPolicy(Vec<DvsMacLearningPolicy>),
    /// A boxed array of *DVSMacManagementPolicy*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfDVSMacManagementPolicy")]
    ArrayOfDvsMacManagementPolicy(Vec<DvsMacManagementPolicy>),
    /// A boxed array of *VMwareDvsMtuCapability*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 7.0.2.0
    ArrayOfVMwareDvsMtuCapability(Vec<VMwareDvsMtuCapability>),
    /// A boxed array of *VMwareDVSMtuHealthCheckResult*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVMwareDVSMtuHealthCheckResult")]
    ArrayOfVMwareDvsMtuHealthCheckResult(Vec<VMwareDvsMtuHealthCheckResult>),
    /// A boxed array of *VMwareDVSPvlanConfigSpec*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVMwareDVSPvlanConfigSpec")]
    ArrayOfVMwareDvsPvlanConfigSpec(Vec<VMwareDvsPvlanConfigSpec>),
    /// A boxed array of *VMwareDVSPvlanMapEntry*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVMwareDVSPvlanMapEntry")]
    ArrayOfVMwareDvsPvlanMapEntry(Vec<VMwareDvsPvlanMapEntry>),
    /// A boxed array of *VmwareDistributedVirtualSwitchPvlanSpec*. To be used in *Any* placeholders.
    ArrayOfVmwareDistributedVirtualSwitchPvlanSpec(Vec<VmwareDistributedVirtualSwitchPvlanSpec>),
    /// A boxed array of *DVSSecurityPolicy*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfDVSSecurityPolicy")]
    ArrayOfDvsSecurityPolicy(Vec<DvsSecurityPolicy>),
    /// A boxed array of *VMwareDVSTeamingHealthCheckConfig*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVMwareDVSTeamingHealthCheckConfig")]
    ArrayOfVMwareDvsTeamingHealthCheckConfig(Vec<VMwareDvsTeamingHealthCheckConfig>),
    /// A boxed array of *VMwareDVSTeamingHealthCheckResult*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVMwareDVSTeamingHealthCheckResult")]
    ArrayOfVMwareDvsTeamingHealthCheckResult(Vec<VMwareDvsTeamingHealthCheckResult>),
    /// A boxed array of *VmwareDistributedVirtualSwitchTrunkVlanSpec*. To be used in *Any* placeholders.
    ArrayOfVmwareDistributedVirtualSwitchTrunkVlanSpec(Vec<VmwareDistributedVirtualSwitchTrunkVlanSpec>),
    /// A boxed array of *VMwareUplinkLacpPolicy*. To be used in *Any* placeholders.
    ArrayOfVMwareUplinkLacpPolicy(Vec<VMwareUplinkLacpPolicy>),
    /// A boxed array of *VMwareUplinkPortOrderPolicy*. To be used in *Any* placeholders.
    ArrayOfVMwareUplinkPortOrderPolicy(Vec<VMwareUplinkPortOrderPolicy>),
    /// A boxed array of *VmwareUplinkPortTeamingPolicy*. To be used in *Any* placeholders.
    ArrayOfVmwareUplinkPortTeamingPolicy(Vec<VmwareUplinkPortTeamingPolicy>),
    /// A boxed array of *VMwareDVSPortgroupPolicy*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVMwareDVSPortgroupPolicy")]
    ArrayOfVMwareDvsPortgroupPolicy(Vec<VMwareDvsPortgroupPolicy>),
    /// A boxed array of *VMwareDVSVlanHealthCheckResult*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVMwareDVSVlanHealthCheckResult")]
    ArrayOfVMwareDvsVlanHealthCheckResult(Vec<VMwareDvsVlanHealthCheckResult>),
    /// A boxed array of *VmwareDistributedVirtualSwitchVlanIdSpec*. To be used in *Any* placeholders.
    ArrayOfVmwareDistributedVirtualSwitchVlanIdSpec(Vec<VmwareDistributedVirtualSwitchVlanIdSpec>),
    /// A boxed array of *VMwareDVSVlanMtuHealthCheckConfig*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVMwareDVSVlanMtuHealthCheckConfig")]
    ArrayOfVMwareDvsVlanMtuHealthCheckConfig(Vec<VMwareDvsVlanMtuHealthCheckConfig>),
    /// A boxed array of *VmwareDistributedVirtualSwitchVlanSpec*. To be used in *Any* placeholders.
    ArrayOfVmwareDistributedVirtualSwitchVlanSpec(Vec<Box<dyn super::traits::VmwareDistributedVirtualSwitchVlanSpecTrait>>),
    /// A boxed array of *VMwareDVSHealthCheckConfig*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVMwareDVSHealthCheckConfig")]
    ArrayOfVMwareDvsHealthCheckConfig(Vec<Box<dyn super::traits::VMwareDvsHealthCheckConfigTrait>>),
    /// A boxed array of *VMwareDVSHealthCheckCapability*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVMwareDVSHealthCheckCapability")]
    ArrayOfVMwareDvsHealthCheckCapability(Vec<VMwareDvsHealthCheckCapability>),
    /// A boxed array of *VMwareDVSPortSetting*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVMwareDVSPortSetting")]
    ArrayOfVMwareDvsPortSetting(Vec<VMwareDvsPortSetting>),
    /// A boxed array of *VMwareDVSVspanConfigSpec*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVMwareDVSVspanConfigSpec")]
    ArrayOfVMwareDvsVspanConfigSpec(Vec<VMwareDvsVspanConfigSpec>),
    /// A boxed array of *VMwareDVSVspanCapability*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVMwareDVSVspanCapability")]
    ArrayOfVMwareDvsVspanCapability(Vec<VMwareDvsVspanCapability>),
    /// A boxed array of *VMwareVspanPort*. To be used in *Any* placeholders.
    ArrayOfVMwareVspanPort(Vec<VMwareVspanPort>),
    /// A boxed array of *VMwareVspanSession*. To be used in *Any* placeholders.
    ArrayOfVMwareVspanSession(Vec<VMwareVspanSession>),
    /// A boxed array of *CryptoKeyId*. To be used in *Any* placeholders.
    ArrayOfCryptoKeyId(Vec<CryptoKeyId>),
    /// A boxed array of *CryptoKeyPlain*. To be used in *Any* placeholders.
    ArrayOfCryptoKeyPlain(Vec<CryptoKeyPlain>),
    /// A boxed array of *CryptoKeyResult*. To be used in *Any* placeholders.
    ArrayOfCryptoKeyResult(Vec<CryptoKeyResult>),
    /// A boxed array of *CryptoManagerHostKeyStatus*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 8.0.1.0
    ArrayOfCryptoManagerHostKeyStatus(Vec<CryptoManagerHostKeyStatus>),
    /// A boxed array of *CryptoManagerKmipCertSignRequest*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 8.0.1.0
    ArrayOfCryptoManagerKmipCertSignRequest(Vec<CryptoManagerKmipCertSignRequest>),
    /// A boxed array of *CryptoManagerKmipCertificateInfo*. To be used in *Any* placeholders.
    ArrayOfCryptoManagerKmipCertificateInfo(Vec<CryptoManagerKmipCertificateInfo>),
    /// A boxed array of *CryptoManagerKmipClusterStatus*. To be used in *Any* placeholders.
    ArrayOfCryptoManagerKmipClusterStatus(Vec<CryptoManagerKmipClusterStatus>),
    /// A boxed array of *CryptoManagerKmipCryptoKeyStatus*. To be used in *Any* placeholders.
    ArrayOfCryptoManagerKmipCryptoKeyStatus(Vec<CryptoManagerKmipCryptoKeyStatus>),
    /// A boxed array of *CryptoManagerKmipCustomAttributeSpec*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 8.0.1.0
    ArrayOfCryptoManagerKmipCustomAttributeSpec(Vec<CryptoManagerKmipCustomAttributeSpec>),
    /// A boxed array of *CryptoManagerKmipServerCertInfo*. To be used in *Any* placeholders.
    ArrayOfCryptoManagerKmipServerCertInfo(Vec<CryptoManagerKmipServerCertInfo>),
    /// A boxed array of *CryptoManagerKmipServerStatus*. To be used in *Any* placeholders.
    ArrayOfCryptoManagerKmipServerStatus(Vec<CryptoManagerKmipServerStatus>),
    /// A boxed array of *CryptoSpec*. To be used in *Any* placeholders.
    ArrayOfCryptoSpec(Vec<Box<dyn super::traits::CryptoSpecTrait>>),
    /// A boxed array of *CryptoSpecDecrypt*. To be used in *Any* placeholders.
    ArrayOfCryptoSpecDecrypt(Vec<CryptoSpecDecrypt>),
    /// A boxed array of *CryptoSpecDeepRecrypt*. To be used in *Any* placeholders.
    ArrayOfCryptoSpecDeepRecrypt(Vec<CryptoSpecDeepRecrypt>),
    /// A boxed array of *CryptoSpecEncrypt*. To be used in *Any* placeholders.
    ArrayOfCryptoSpecEncrypt(Vec<CryptoSpecEncrypt>),
    /// A boxed array of *CryptoSpecNoOp*. To be used in *Any* placeholders.
    ArrayOfCryptoSpecNoOp(Vec<Box<dyn super::traits::CryptoSpecNoOpTrait>>),
    /// A boxed array of *CryptoSpecRegister*. To be used in *Any* placeholders.
    ArrayOfCryptoSpecRegister(Vec<CryptoSpecRegister>),
    /// A boxed array of *CryptoSpecShallowRecrypt*. To be used in *Any* placeholders.
    ArrayOfCryptoSpecShallowRecrypt(Vec<CryptoSpecShallowRecrypt>),
    /// A boxed array of *KeyProviderId*. To be used in *Any* placeholders.
    ArrayOfKeyProviderId(Vec<KeyProviderId>),
    /// A boxed array of *KmipClusterInfo*. To be used in *Any* placeholders.
    ArrayOfKmipClusterInfo(Vec<KmipClusterInfo>),
    /// A boxed array of *KmipServerInfo*. To be used in *Any* placeholders.
    ArrayOfKmipServerInfo(Vec<KmipServerInfo>),
    /// A boxed array of *KmipServerSpec*. To be used in *Any* placeholders.
    ArrayOfKmipServerSpec(Vec<KmipServerSpec>),
    /// A boxed array of *KmipServerStatus*. To be used in *Any* placeholders.
    ArrayOfKmipServerStatus(Vec<KmipServerStatus>),
    /// A boxed array of *AccountCreatedEvent*. To be used in *Any* placeholders.
    ArrayOfAccountCreatedEvent(Vec<AccountCreatedEvent>),
    /// A boxed array of *AccountRemovedEvent*. To be used in *Any* placeholders.
    ArrayOfAccountRemovedEvent(Vec<AccountRemovedEvent>),
    /// A boxed array of *AccountUpdatedEvent*. To be used in *Any* placeholders.
    ArrayOfAccountUpdatedEvent(Vec<AccountUpdatedEvent>),
    /// A boxed array of *AdminPasswordNotChangedEvent*. To be used in *Any* placeholders.
    ArrayOfAdminPasswordNotChangedEvent(Vec<AdminPasswordNotChangedEvent>),
    /// A boxed array of *AlarmAcknowledgedEvent*. To be used in *Any* placeholders.
    ArrayOfAlarmAcknowledgedEvent(Vec<AlarmAcknowledgedEvent>),
    /// A boxed array of *AlarmActionTriggeredEvent*. To be used in *Any* placeholders.
    ArrayOfAlarmActionTriggeredEvent(Vec<AlarmActionTriggeredEvent>),
    /// A boxed array of *AlarmClearedEvent*. To be used in *Any* placeholders.
    ArrayOfAlarmClearedEvent(Vec<AlarmClearedEvent>),
    /// A boxed array of *AlarmCreatedEvent*. To be used in *Any* placeholders.
    ArrayOfAlarmCreatedEvent(Vec<AlarmCreatedEvent>),
    /// A boxed array of *AlarmEmailCompletedEvent*. To be used in *Any* placeholders.
    ArrayOfAlarmEmailCompletedEvent(Vec<AlarmEmailCompletedEvent>),
    /// A boxed array of *AlarmEmailFailedEvent*. To be used in *Any* placeholders.
    ArrayOfAlarmEmailFailedEvent(Vec<AlarmEmailFailedEvent>),
    /// A boxed array of *AlarmEvent*. To be used in *Any* placeholders.
    ArrayOfAlarmEvent(Vec<Box<dyn super::traits::AlarmEventTrait>>),
    /// A boxed array of *AlarmEventArgument*. To be used in *Any* placeholders.
    ArrayOfAlarmEventArgument(Vec<AlarmEventArgument>),
    /// A boxed array of *AlarmReconfiguredEvent*. To be used in *Any* placeholders.
    ArrayOfAlarmReconfiguredEvent(Vec<AlarmReconfiguredEvent>),
    /// A boxed array of *AlarmRemovedEvent*. To be used in *Any* placeholders.
    ArrayOfAlarmRemovedEvent(Vec<AlarmRemovedEvent>),
    /// A boxed array of *AlarmScriptCompleteEvent*. To be used in *Any* placeholders.
    ArrayOfAlarmScriptCompleteEvent(Vec<AlarmScriptCompleteEvent>),
    /// A boxed array of *AlarmScriptFailedEvent*. To be used in *Any* placeholders.
    ArrayOfAlarmScriptFailedEvent(Vec<AlarmScriptFailedEvent>),
    /// A boxed array of *AlarmSnmpCompletedEvent*. To be used in *Any* placeholders.
    ArrayOfAlarmSnmpCompletedEvent(Vec<AlarmSnmpCompletedEvent>),
    /// A boxed array of *AlarmSnmpFailedEvent*. To be used in *Any* placeholders.
    ArrayOfAlarmSnmpFailedEvent(Vec<AlarmSnmpFailedEvent>),
    /// A boxed array of *AlarmStatusChangedEvent*. To be used in *Any* placeholders.
    ArrayOfAlarmStatusChangedEvent(Vec<AlarmStatusChangedEvent>),
    /// A boxed array of *AllVirtualMachinesLicensedEvent*. To be used in *Any* placeholders.
    ArrayOfAllVirtualMachinesLicensedEvent(Vec<AllVirtualMachinesLicensedEvent>),
    /// A boxed array of *AlreadyAuthenticatedSessionEvent*. To be used in *Any* placeholders.
    ArrayOfAlreadyAuthenticatedSessionEvent(Vec<AlreadyAuthenticatedSessionEvent>),
    /// A boxed array of *AuthorizationEvent*. To be used in *Any* placeholders.
    ArrayOfAuthorizationEvent(Vec<Box<dyn super::traits::AuthorizationEventTrait>>),
    /// A boxed array of *BadUsernameSessionEvent*. To be used in *Any* placeholders.
    ArrayOfBadUsernameSessionEvent(Vec<BadUsernameSessionEvent>),
    /// A boxed array of *CanceledHostOperationEvent*. To be used in *Any* placeholders.
    ArrayOfCanceledHostOperationEvent(Vec<CanceledHostOperationEvent>),
    /// A boxed array of *ChangesInfoEventArgument*. To be used in *Any* placeholders.
    ArrayOfChangesInfoEventArgument(Vec<ChangesInfoEventArgument>),
    /// A boxed array of *ClusterComplianceCheckedEvent*. To be used in *Any* placeholders.
    ArrayOfClusterComplianceCheckedEvent(Vec<ClusterComplianceCheckedEvent>),
    /// A boxed array of *ClusterCreatedEvent*. To be used in *Any* placeholders.
    ArrayOfClusterCreatedEvent(Vec<ClusterCreatedEvent>),
    /// A boxed array of *ClusterDestroyedEvent*. To be used in *Any* placeholders.
    ArrayOfClusterDestroyedEvent(Vec<ClusterDestroyedEvent>),
    /// A boxed array of *ClusterEvent*. To be used in *Any* placeholders.
    ArrayOfClusterEvent(Vec<Box<dyn super::traits::ClusterEventTrait>>),
    /// A boxed array of *ClusterOvercommittedEvent*. To be used in *Any* placeholders.
    ArrayOfClusterOvercommittedEvent(Vec<Box<dyn super::traits::ClusterOvercommittedEventTrait>>),
    /// A boxed array of *ClusterReconfiguredEvent*. To be used in *Any* placeholders.
    ArrayOfClusterReconfiguredEvent(Vec<ClusterReconfiguredEvent>),
    /// A boxed array of *ClusterStatusChangedEvent*. To be used in *Any* placeholders.
    ArrayOfClusterStatusChangedEvent(Vec<Box<dyn super::traits::ClusterStatusChangedEventTrait>>),
    /// A boxed array of *ComputeResourceEventArgument*. To be used in *Any* placeholders.
    ArrayOfComputeResourceEventArgument(Vec<ComputeResourceEventArgument>),
    /// A boxed array of *CustomFieldDefAddedEvent*. To be used in *Any* placeholders.
    ArrayOfCustomFieldDefAddedEvent(Vec<CustomFieldDefAddedEvent>),
    /// A boxed array of *CustomFieldDefEvent*. To be used in *Any* placeholders.
    ArrayOfCustomFieldDefEvent(Vec<Box<dyn super::traits::CustomFieldDefEventTrait>>),
    /// A boxed array of *CustomFieldDefRemovedEvent*. To be used in *Any* placeholders.
    ArrayOfCustomFieldDefRemovedEvent(Vec<CustomFieldDefRemovedEvent>),
    /// A boxed array of *CustomFieldDefRenamedEvent*. To be used in *Any* placeholders.
    ArrayOfCustomFieldDefRenamedEvent(Vec<CustomFieldDefRenamedEvent>),
    /// A boxed array of *CustomFieldEvent*. To be used in *Any* placeholders.
    ArrayOfCustomFieldEvent(Vec<Box<dyn super::traits::CustomFieldEventTrait>>),
    /// A boxed array of *CustomFieldValueChangedEvent*. To be used in *Any* placeholders.
    ArrayOfCustomFieldValueChangedEvent(Vec<CustomFieldValueChangedEvent>),
    /// A boxed array of *CustomizationEvent*. To be used in *Any* placeholders.
    ArrayOfCustomizationEvent(Vec<Box<dyn super::traits::CustomizationEventTrait>>),
    /// A boxed array of *CustomizationFailed*. To be used in *Any* placeholders.
    ArrayOfCustomizationFailed(Vec<Box<dyn super::traits::CustomizationFailedTrait>>),
    /// A boxed array of *CustomizationLinuxIdentityFailed*. To be used in *Any* placeholders.
    ArrayOfCustomizationLinuxIdentityFailed(Vec<CustomizationLinuxIdentityFailed>),
    /// A boxed array of *CustomizationNetworkSetupFailed*. To be used in *Any* placeholders.
    ArrayOfCustomizationNetworkSetupFailed(Vec<CustomizationNetworkSetupFailed>),
    /// A boxed array of *CustomizationStartedEvent*. To be used in *Any* placeholders.
    ArrayOfCustomizationStartedEvent(Vec<CustomizationStartedEvent>),
    /// A boxed array of *CustomizationSucceeded*. To be used in *Any* placeholders.
    ArrayOfCustomizationSucceeded(Vec<CustomizationSucceeded>),
    /// A boxed array of *CustomizationSysprepFailed*. To be used in *Any* placeholders.
    ArrayOfCustomizationSysprepFailed(Vec<CustomizationSysprepFailed>),
    /// A boxed array of *CustomizationUnknownFailure*. To be used in *Any* placeholders.
    ArrayOfCustomizationUnknownFailure(Vec<CustomizationUnknownFailure>),
    /// A boxed array of *DVPortgroupCreatedEvent*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfDVPortgroupCreatedEvent")]
    ArrayOfDvPortgroupCreatedEvent(Vec<DvPortgroupCreatedEvent>),
    /// A boxed array of *DVPortgroupDestroyedEvent*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfDVPortgroupDestroyedEvent")]
    ArrayOfDvPortgroupDestroyedEvent(Vec<DvPortgroupDestroyedEvent>),
    /// A boxed array of *DVPortgroupEvent*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfDVPortgroupEvent")]
    ArrayOfDvPortgroupEvent(Vec<Box<dyn super::traits::DvPortgroupEventTrait>>),
    /// A boxed array of *DVPortgroupReconfiguredEvent*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfDVPortgroupReconfiguredEvent")]
    ArrayOfDvPortgroupReconfiguredEvent(Vec<DvPortgroupReconfiguredEvent>),
    /// A boxed array of *DVPortgroupRenamedEvent*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfDVPortgroupRenamedEvent")]
    ArrayOfDvPortgroupRenamedEvent(Vec<DvPortgroupRenamedEvent>),
    /// A boxed array of *DasAdmissionControlDisabledEvent*. To be used in *Any* placeholders.
    ArrayOfDasAdmissionControlDisabledEvent(Vec<DasAdmissionControlDisabledEvent>),
    /// A boxed array of *DasAdmissionControlEnabledEvent*. To be used in *Any* placeholders.
    ArrayOfDasAdmissionControlEnabledEvent(Vec<DasAdmissionControlEnabledEvent>),
    /// A boxed array of *DasAgentFoundEvent*. To be used in *Any* placeholders.
    ArrayOfDasAgentFoundEvent(Vec<DasAgentFoundEvent>),
    /// A boxed array of *DasAgentUnavailableEvent*. To be used in *Any* placeholders.
    ArrayOfDasAgentUnavailableEvent(Vec<DasAgentUnavailableEvent>),
    /// A boxed array of *DasClusterIsolatedEvent*. To be used in *Any* placeholders.
    ArrayOfDasClusterIsolatedEvent(Vec<DasClusterIsolatedEvent>),
    /// A boxed array of *DasDisabledEvent*. To be used in *Any* placeholders.
    ArrayOfDasDisabledEvent(Vec<DasDisabledEvent>),
    /// A boxed array of *DasEnabledEvent*. To be used in *Any* placeholders.
    ArrayOfDasEnabledEvent(Vec<DasEnabledEvent>),
    /// A boxed array of *DasHostFailedEvent*. To be used in *Any* placeholders.
    ArrayOfDasHostFailedEvent(Vec<DasHostFailedEvent>),
    /// A boxed array of *DasHostIsolatedEvent*. To be used in *Any* placeholders.
    ArrayOfDasHostIsolatedEvent(Vec<DasHostIsolatedEvent>),
    /// A boxed array of *DatacenterCreatedEvent*. To be used in *Any* placeholders.
    ArrayOfDatacenterCreatedEvent(Vec<DatacenterCreatedEvent>),
    /// A boxed array of *DatacenterEvent*. To be used in *Any* placeholders.
    ArrayOfDatacenterEvent(Vec<Box<dyn super::traits::DatacenterEventTrait>>),
    /// A boxed array of *DatacenterEventArgument*. To be used in *Any* placeholders.
    ArrayOfDatacenterEventArgument(Vec<DatacenterEventArgument>),
    /// A boxed array of *DatacenterRenamedEvent*. To be used in *Any* placeholders.
    ArrayOfDatacenterRenamedEvent(Vec<DatacenterRenamedEvent>),
    /// A boxed array of *DatastoreCapacityIncreasedEvent*. To be used in *Any* placeholders.
    ArrayOfDatastoreCapacityIncreasedEvent(Vec<DatastoreCapacityIncreasedEvent>),
    /// A boxed array of *DatastoreDestroyedEvent*. To be used in *Any* placeholders.
    ArrayOfDatastoreDestroyedEvent(Vec<DatastoreDestroyedEvent>),
    /// A boxed array of *DatastoreDiscoveredEvent*. To be used in *Any* placeholders.
    ArrayOfDatastoreDiscoveredEvent(Vec<DatastoreDiscoveredEvent>),
    /// A boxed array of *DatastoreDuplicatedEvent*. To be used in *Any* placeholders.
    ArrayOfDatastoreDuplicatedEvent(Vec<DatastoreDuplicatedEvent>),
    /// A boxed array of *DatastoreEvent*. To be used in *Any* placeholders.
    ArrayOfDatastoreEvent(Vec<Box<dyn super::traits::DatastoreEventTrait>>),
    /// A boxed array of *DatastoreEventArgument*. To be used in *Any* placeholders.
    ArrayOfDatastoreEventArgument(Vec<DatastoreEventArgument>),
    /// A boxed array of *DatastoreFileCopiedEvent*. To be used in *Any* placeholders.
    ArrayOfDatastoreFileCopiedEvent(Vec<DatastoreFileCopiedEvent>),
    /// A boxed array of *DatastoreFileDeletedEvent*. To be used in *Any* placeholders.
    ArrayOfDatastoreFileDeletedEvent(Vec<DatastoreFileDeletedEvent>),
    /// A boxed array of *DatastoreFileEvent*. To be used in *Any* placeholders.
    ArrayOfDatastoreFileEvent(Vec<Box<dyn super::traits::DatastoreFileEventTrait>>),
    /// A boxed array of *DatastoreFileMovedEvent*. To be used in *Any* placeholders.
    ArrayOfDatastoreFileMovedEvent(Vec<DatastoreFileMovedEvent>),
    /// A boxed array of *DatastoreIORMReconfiguredEvent*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfDatastoreIORMReconfiguredEvent")]
    ArrayOfDatastoreIormReconfiguredEvent(Vec<DatastoreIormReconfiguredEvent>),
    /// A boxed array of *DatastorePrincipalConfigured*. To be used in *Any* placeholders.
    ArrayOfDatastorePrincipalConfigured(Vec<DatastorePrincipalConfigured>),
    /// A boxed array of *DatastoreRemovedOnHostEvent*. To be used in *Any* placeholders.
    ArrayOfDatastoreRemovedOnHostEvent(Vec<DatastoreRemovedOnHostEvent>),
    /// A boxed array of *DatastoreRenamedEvent*. To be used in *Any* placeholders.
    ArrayOfDatastoreRenamedEvent(Vec<DatastoreRenamedEvent>),
    /// A boxed array of *DatastoreRenamedOnHostEvent*. To be used in *Any* placeholders.
    ArrayOfDatastoreRenamedOnHostEvent(Vec<DatastoreRenamedOnHostEvent>),
    /// A boxed array of *DrsDisabledEvent*. To be used in *Any* placeholders.
    ArrayOfDrsDisabledEvent(Vec<DrsDisabledEvent>),
    /// A boxed array of *DrsEnabledEvent*. To be used in *Any* placeholders.
    ArrayOfDrsEnabledEvent(Vec<DrsEnabledEvent>),
    /// A boxed array of *DrsEnteredStandbyModeEvent*. To be used in *Any* placeholders.
    ArrayOfDrsEnteredStandbyModeEvent(Vec<DrsEnteredStandbyModeEvent>),
    /// A boxed array of *DrsEnteringStandbyModeEvent*. To be used in *Any* placeholders.
    ArrayOfDrsEnteringStandbyModeEvent(Vec<DrsEnteringStandbyModeEvent>),
    /// A boxed array of *DrsExitStandbyModeFailedEvent*. To be used in *Any* placeholders.
    ArrayOfDrsExitStandbyModeFailedEvent(Vec<DrsExitStandbyModeFailedEvent>),
    /// A boxed array of *DrsExitedStandbyModeEvent*. To be used in *Any* placeholders.
    ArrayOfDrsExitedStandbyModeEvent(Vec<DrsExitedStandbyModeEvent>),
    /// A boxed array of *DrsExitingStandbyModeEvent*. To be used in *Any* placeholders.
    ArrayOfDrsExitingStandbyModeEvent(Vec<DrsExitingStandbyModeEvent>),
    /// A boxed array of *DrsInvocationFailedEvent*. To be used in *Any* placeholders.
    ArrayOfDrsInvocationFailedEvent(Vec<DrsInvocationFailedEvent>),
    /// A boxed array of *DrsRecoveredFromFailureEvent*. To be used in *Any* placeholders.
    ArrayOfDrsRecoveredFromFailureEvent(Vec<DrsRecoveredFromFailureEvent>),
    /// A boxed array of *DrsResourceConfigureFailedEvent*. To be used in *Any* placeholders.
    ArrayOfDrsResourceConfigureFailedEvent(Vec<DrsResourceConfigureFailedEvent>),
    /// A boxed array of *DrsResourceConfigureSyncedEvent*. To be used in *Any* placeholders.
    ArrayOfDrsResourceConfigureSyncedEvent(Vec<DrsResourceConfigureSyncedEvent>),
    /// A boxed array of *DrsRuleComplianceEvent*. To be used in *Any* placeholders.
    ArrayOfDrsRuleComplianceEvent(Vec<DrsRuleComplianceEvent>),
    /// A boxed array of *DrsRuleViolationEvent*. To be used in *Any* placeholders.
    ArrayOfDrsRuleViolationEvent(Vec<DrsRuleViolationEvent>),
    /// A boxed array of *DrsSoftRuleViolationEvent*. To be used in *Any* placeholders.
    ArrayOfDrsSoftRuleViolationEvent(Vec<DrsSoftRuleViolationEvent>),
    /// A boxed array of *DrsVmMigratedEvent*. To be used in *Any* placeholders.
    ArrayOfDrsVmMigratedEvent(Vec<DrsVmMigratedEvent>),
    /// A boxed array of *DrsVmPoweredOnEvent*. To be used in *Any* placeholders.
    ArrayOfDrsVmPoweredOnEvent(Vec<DrsVmPoweredOnEvent>),
    /// A boxed array of *DuplicateIpDetectedEvent*. To be used in *Any* placeholders.
    ArrayOfDuplicateIpDetectedEvent(Vec<DuplicateIpDetectedEvent>),
    /// A boxed array of *DvpgImportEvent*. To be used in *Any* placeholders.
    ArrayOfDvpgImportEvent(Vec<DvpgImportEvent>),
    /// A boxed array of *DvpgRestoreEvent*. To be used in *Any* placeholders.
    ArrayOfDvpgRestoreEvent(Vec<DvpgRestoreEvent>),
    /// A boxed array of *DvsCreatedEvent*. To be used in *Any* placeholders.
    ArrayOfDvsCreatedEvent(Vec<DvsCreatedEvent>),
    /// A boxed array of *DvsDestroyedEvent*. To be used in *Any* placeholders.
    ArrayOfDvsDestroyedEvent(Vec<DvsDestroyedEvent>),
    /// A boxed array of *DvsEvent*. To be used in *Any* placeholders.
    ArrayOfDvsEvent(Vec<Box<dyn super::traits::DvsEventTrait>>),
    /// A boxed array of *DvsEventArgument*. To be used in *Any* placeholders.
    ArrayOfDvsEventArgument(Vec<DvsEventArgument>),
    /// A boxed array of *DvsHealthStatusChangeEvent*. To be used in *Any* placeholders.
    ArrayOfDvsHealthStatusChangeEvent(Vec<Box<dyn super::traits::DvsHealthStatusChangeEventTrait>>),
    /// A boxed array of *DvsHostBackInSyncEvent*. To be used in *Any* placeholders.
    ArrayOfDvsHostBackInSyncEvent(Vec<DvsHostBackInSyncEvent>),
    /// A boxed array of *DvsHostJoinedEvent*. To be used in *Any* placeholders.
    ArrayOfDvsHostJoinedEvent(Vec<DvsHostJoinedEvent>),
    /// A boxed array of *DvsHostLeftEvent*. To be used in *Any* placeholders.
    ArrayOfDvsHostLeftEvent(Vec<DvsHostLeftEvent>),
    /// A boxed array of *DvsHostStatusUpdated*. To be used in *Any* placeholders.
    ArrayOfDvsHostStatusUpdated(Vec<DvsHostStatusUpdated>),
    /// A boxed array of *DvsHostWentOutOfSyncEvent*. To be used in *Any* placeholders.
    ArrayOfDvsHostWentOutOfSyncEvent(Vec<DvsHostWentOutOfSyncEvent>),
    /// A boxed array of *DvsImportEvent*. To be used in *Any* placeholders.
    ArrayOfDvsImportEvent(Vec<DvsImportEvent>),
    /// A boxed array of *DvsMergedEvent*. To be used in *Any* placeholders.
    ArrayOfDvsMergedEvent(Vec<DvsMergedEvent>),
    /// A boxed array of *DvsOutOfSyncHostArgument*. To be used in *Any* placeholders.
    ArrayOfDvsOutOfSyncHostArgument(Vec<DvsOutOfSyncHostArgument>),
    /// A boxed array of *DvsPortBlockedEvent*. To be used in *Any* placeholders.
    ArrayOfDvsPortBlockedEvent(Vec<DvsPortBlockedEvent>),
    /// A boxed array of *DvsPortConnectedEvent*. To be used in *Any* placeholders.
    ArrayOfDvsPortConnectedEvent(Vec<DvsPortConnectedEvent>),
    /// A boxed array of *DvsPortCreatedEvent*. To be used in *Any* placeholders.
    ArrayOfDvsPortCreatedEvent(Vec<DvsPortCreatedEvent>),
    /// A boxed array of *DvsPortDeletedEvent*. To be used in *Any* placeholders.
    ArrayOfDvsPortDeletedEvent(Vec<DvsPortDeletedEvent>),
    /// A boxed array of *DvsPortDisconnectedEvent*. To be used in *Any* placeholders.
    ArrayOfDvsPortDisconnectedEvent(Vec<DvsPortDisconnectedEvent>),
    /// A boxed array of *DvsPortEnteredPassthruEvent*. To be used in *Any* placeholders.
    ArrayOfDvsPortEnteredPassthruEvent(Vec<DvsPortEnteredPassthruEvent>),
    /// A boxed array of *DvsPortExitedPassthruEvent*. To be used in *Any* placeholders.
    ArrayOfDvsPortExitedPassthruEvent(Vec<DvsPortExitedPassthruEvent>),
    /// A boxed array of *DvsPortJoinPortgroupEvent*. To be used in *Any* placeholders.
    ArrayOfDvsPortJoinPortgroupEvent(Vec<DvsPortJoinPortgroupEvent>),
    /// A boxed array of *DvsPortLeavePortgroupEvent*. To be used in *Any* placeholders.
    ArrayOfDvsPortLeavePortgroupEvent(Vec<DvsPortLeavePortgroupEvent>),
    /// A boxed array of *DvsPortLinkDownEvent*. To be used in *Any* placeholders.
    ArrayOfDvsPortLinkDownEvent(Vec<DvsPortLinkDownEvent>),
    /// A boxed array of *DvsPortLinkUpEvent*. To be used in *Any* placeholders.
    ArrayOfDvsPortLinkUpEvent(Vec<DvsPortLinkUpEvent>),
    /// A boxed array of *DvsPortReconfiguredEvent*. To be used in *Any* placeholders.
    ArrayOfDvsPortReconfiguredEvent(Vec<DvsPortReconfiguredEvent>),
    /// A boxed array of *DvsPortRuntimeChangeEvent*. To be used in *Any* placeholders.
    ArrayOfDvsPortRuntimeChangeEvent(Vec<DvsPortRuntimeChangeEvent>),
    /// A boxed array of *DvsPortUnblockedEvent*. To be used in *Any* placeholders.
    ArrayOfDvsPortUnblockedEvent(Vec<DvsPortUnblockedEvent>),
    /// A boxed array of *DvsPortVendorSpecificStateChangeEvent*. To be used in *Any* placeholders.
    ArrayOfDvsPortVendorSpecificStateChangeEvent(Vec<DvsPortVendorSpecificStateChangeEvent>),
    /// A boxed array of *DvsReconfiguredEvent*. To be used in *Any* placeholders.
    ArrayOfDvsReconfiguredEvent(Vec<DvsReconfiguredEvent>),
    /// A boxed array of *DvsRenamedEvent*. To be used in *Any* placeholders.
    ArrayOfDvsRenamedEvent(Vec<DvsRenamedEvent>),
    /// A boxed array of *DvsRestoreEvent*. To be used in *Any* placeholders.
    ArrayOfDvsRestoreEvent(Vec<DvsRestoreEvent>),
    /// A boxed array of *DvsUpgradeAvailableEvent*. To be used in *Any* placeholders.
    ArrayOfDvsUpgradeAvailableEvent(Vec<DvsUpgradeAvailableEvent>),
    /// A boxed array of *DvsUpgradeInProgressEvent*. To be used in *Any* placeholders.
    ArrayOfDvsUpgradeInProgressEvent(Vec<DvsUpgradeInProgressEvent>),
    /// A boxed array of *DvsUpgradeRejectedEvent*. To be used in *Any* placeholders.
    ArrayOfDvsUpgradeRejectedEvent(Vec<DvsUpgradeRejectedEvent>),
    /// A boxed array of *DvsUpgradedEvent*. To be used in *Any* placeholders.
    ArrayOfDvsUpgradedEvent(Vec<DvsUpgradedEvent>),
    /// A boxed array of *EnteredMaintenanceModeEvent*. To be used in *Any* placeholders.
    ArrayOfEnteredMaintenanceModeEvent(Vec<EnteredMaintenanceModeEvent>),
    /// A boxed array of *EnteredStandbyModeEvent*. To be used in *Any* placeholders.
    ArrayOfEnteredStandbyModeEvent(Vec<Box<dyn super::traits::EnteredStandbyModeEventTrait>>),
    /// A boxed array of *EnteringMaintenanceModeEvent*. To be used in *Any* placeholders.
    ArrayOfEnteringMaintenanceModeEvent(Vec<EnteringMaintenanceModeEvent>),
    /// A boxed array of *EnteringStandbyModeEvent*. To be used in *Any* placeholders.
    ArrayOfEnteringStandbyModeEvent(Vec<Box<dyn super::traits::EnteringStandbyModeEventTrait>>),
    /// A boxed array of *EntityEventArgument*. To be used in *Any* placeholders.
    ArrayOfEntityEventArgument(Vec<Box<dyn super::traits::EntityEventArgumentTrait>>),
    /// A boxed array of *ErrorUpgradeEvent*. To be used in *Any* placeholders.
    ArrayOfErrorUpgradeEvent(Vec<ErrorUpgradeEvent>),
    /// A boxed array of *Event*. To be used in *Any* placeholders.
    ArrayOfEvent(Vec<Box<dyn super::traits::EventTrait>>),
    /// A boxed array of *EventArgument*. To be used in *Any* placeholders.
    ArrayOfEventArgument(Vec<Box<dyn super::traits::EventArgumentTrait>>),
    /// A boxed array of *EventDescription*. To be used in *Any* placeholders.
    ArrayOfEventDescription(Vec<EventDescription>),
    /// A boxed array of *EventArgDesc*. To be used in *Any* placeholders.
    ArrayOfEventArgDesc(Vec<EventArgDesc>),
    /// A boxed array of *EventDescriptionEventDetail*. To be used in *Any* placeholders.
    ArrayOfEventDescriptionEventDetail(Vec<EventDescriptionEventDetail>),
    /// A boxed array of *EventEx*. To be used in *Any* placeholders.
    ArrayOfEventEx(Vec<EventEx>),
    /// A boxed array of *EventFilterSpec*. To be used in *Any* placeholders.
    ArrayOfEventFilterSpec(Vec<EventFilterSpec>),
    /// A boxed array of *EventFilterSpecByEntity*. To be used in *Any* placeholders.
    ArrayOfEventFilterSpecByEntity(Vec<EventFilterSpecByEntity>),
    /// A boxed array of *EventFilterSpecByTime*. To be used in *Any* placeholders.
    ArrayOfEventFilterSpecByTime(Vec<EventFilterSpecByTime>),
    /// A boxed array of *EventFilterSpecByUsername*. To be used in *Any* placeholders.
    ArrayOfEventFilterSpecByUsername(Vec<EventFilterSpecByUsername>),
    /// A boxed array of *ExitMaintenanceModeEvent*. To be used in *Any* placeholders.
    ArrayOfExitMaintenanceModeEvent(Vec<ExitMaintenanceModeEvent>),
    /// A boxed array of *ExitStandbyModeFailedEvent*. To be used in *Any* placeholders.
    ArrayOfExitStandbyModeFailedEvent(Vec<Box<dyn super::traits::ExitStandbyModeFailedEventTrait>>),
    /// A boxed array of *ExitedStandbyModeEvent*. To be used in *Any* placeholders.
    ArrayOfExitedStandbyModeEvent(Vec<Box<dyn super::traits::ExitedStandbyModeEventTrait>>),
    /// A boxed array of *ExitingStandbyModeEvent*. To be used in *Any* placeholders.
    ArrayOfExitingStandbyModeEvent(Vec<Box<dyn super::traits::ExitingStandbyModeEventTrait>>),
    /// A boxed array of *ExtendedEvent*. To be used in *Any* placeholders.
    ArrayOfExtendedEvent(Vec<ExtendedEvent>),
    /// A boxed array of *ExtendedEventPair*. To be used in *Any* placeholders.
    ArrayOfExtendedEventPair(Vec<ExtendedEventPair>),
    /// A boxed array of *FailoverLevelRestored*. To be used in *Any* placeholders.
    ArrayOfFailoverLevelRestored(Vec<FailoverLevelRestored>),
    /// A boxed array of *FolderEventArgument*. To be used in *Any* placeholders.
    ArrayOfFolderEventArgument(Vec<FolderEventArgument>),
    /// A boxed array of *GeneralEvent*. To be used in *Any* placeholders.
    ArrayOfGeneralEvent(Vec<Box<dyn super::traits::GeneralEventTrait>>),
    /// A boxed array of *GeneralHostErrorEvent*. To be used in *Any* placeholders.
    ArrayOfGeneralHostErrorEvent(Vec<GeneralHostErrorEvent>),
    /// A boxed array of *GeneralHostInfoEvent*. To be used in *Any* placeholders.
    ArrayOfGeneralHostInfoEvent(Vec<GeneralHostInfoEvent>),
    /// A boxed array of *GeneralHostWarningEvent*. To be used in *Any* placeholders.
    ArrayOfGeneralHostWarningEvent(Vec<GeneralHostWarningEvent>),
    /// A boxed array of *GeneralUserEvent*. To be used in *Any* placeholders.
    ArrayOfGeneralUserEvent(Vec<GeneralUserEvent>),
    /// A boxed array of *GeneralVmErrorEvent*. To be used in *Any* placeholders.
    ArrayOfGeneralVmErrorEvent(Vec<GeneralVmErrorEvent>),
    /// A boxed array of *GeneralVmInfoEvent*. To be used in *Any* placeholders.
    ArrayOfGeneralVmInfoEvent(Vec<GeneralVmInfoEvent>),
    /// A boxed array of *GeneralVmWarningEvent*. To be used in *Any* placeholders.
    ArrayOfGeneralVmWarningEvent(Vec<GeneralVmWarningEvent>),
    /// A boxed array of *GhostDvsProxySwitchDetectedEvent*. To be used in *Any* placeholders.
    ArrayOfGhostDvsProxySwitchDetectedEvent(Vec<GhostDvsProxySwitchDetectedEvent>),
    /// A boxed array of *GhostDvsProxySwitchRemovedEvent*. To be used in *Any* placeholders.
    ArrayOfGhostDvsProxySwitchRemovedEvent(Vec<GhostDvsProxySwitchRemovedEvent>),
    /// A boxed array of *GlobalMessageChangedEvent*. To be used in *Any* placeholders.
    ArrayOfGlobalMessageChangedEvent(Vec<GlobalMessageChangedEvent>),
    /// A boxed array of *HealthStatusChangedEvent*. To be used in *Any* placeholders.
    ArrayOfHealthStatusChangedEvent(Vec<HealthStatusChangedEvent>),
    /// A boxed array of *HostAddFailedEvent*. To be used in *Any* placeholders.
    ArrayOfHostAddFailedEvent(Vec<HostAddFailedEvent>),
    /// A boxed array of *HostAddedEvent*. To be used in *Any* placeholders.
    ArrayOfHostAddedEvent(Vec<HostAddedEvent>),
    /// A boxed array of *HostAdminDisableEvent*. To be used in *Any* placeholders.
    ArrayOfHostAdminDisableEvent(Vec<HostAdminDisableEvent>),
    /// A boxed array of *HostAdminEnableEvent*. To be used in *Any* placeholders.
    ArrayOfHostAdminEnableEvent(Vec<HostAdminEnableEvent>),
    /// A boxed array of *HostCnxFailedAccountFailedEvent*. To be used in *Any* placeholders.
    ArrayOfHostCnxFailedAccountFailedEvent(Vec<HostCnxFailedAccountFailedEvent>),
    /// A boxed array of *HostCnxFailedAlreadyManagedEvent*. To be used in *Any* placeholders.
    ArrayOfHostCnxFailedAlreadyManagedEvent(Vec<HostCnxFailedAlreadyManagedEvent>),
    /// A boxed array of *HostCnxFailedBadCcagentEvent*. To be used in *Any* placeholders.
    ArrayOfHostCnxFailedBadCcagentEvent(Vec<HostCnxFailedBadCcagentEvent>),
    /// A boxed array of *HostCnxFailedBadUsernameEvent*. To be used in *Any* placeholders.
    ArrayOfHostCnxFailedBadUsernameEvent(Vec<HostCnxFailedBadUsernameEvent>),
    /// A boxed array of *HostCnxFailedBadVersionEvent*. To be used in *Any* placeholders.
    ArrayOfHostCnxFailedBadVersionEvent(Vec<HostCnxFailedBadVersionEvent>),
    /// A boxed array of *HostCnxFailedCcagentUpgradeEvent*. To be used in *Any* placeholders.
    ArrayOfHostCnxFailedCcagentUpgradeEvent(Vec<HostCnxFailedCcagentUpgradeEvent>),
    /// A boxed array of *HostCnxFailedEvent*. To be used in *Any* placeholders.
    ArrayOfHostCnxFailedEvent(Vec<HostCnxFailedEvent>),
    /// A boxed array of *HostCnxFailedNetworkErrorEvent*. To be used in *Any* placeholders.
    ArrayOfHostCnxFailedNetworkErrorEvent(Vec<HostCnxFailedNetworkErrorEvent>),
    /// A boxed array of *HostCnxFailedNoAccessEvent*. To be used in *Any* placeholders.
    ArrayOfHostCnxFailedNoAccessEvent(Vec<HostCnxFailedNoAccessEvent>),
    /// A boxed array of *HostCnxFailedNoConnectionEvent*. To be used in *Any* placeholders.
    ArrayOfHostCnxFailedNoConnectionEvent(Vec<HostCnxFailedNoConnectionEvent>),
    /// A boxed array of *HostCnxFailedNoLicenseEvent*. To be used in *Any* placeholders.
    ArrayOfHostCnxFailedNoLicenseEvent(Vec<HostCnxFailedNoLicenseEvent>),
    /// A boxed array of *HostCnxFailedNotFoundEvent*. To be used in *Any* placeholders.
    ArrayOfHostCnxFailedNotFoundEvent(Vec<HostCnxFailedNotFoundEvent>),
    /// A boxed array of *HostCnxFailedTimeoutEvent*. To be used in *Any* placeholders.
    ArrayOfHostCnxFailedTimeoutEvent(Vec<HostCnxFailedTimeoutEvent>),
    /// A boxed array of *HostComplianceCheckedEvent*. To be used in *Any* placeholders.
    ArrayOfHostComplianceCheckedEvent(Vec<HostComplianceCheckedEvent>),
    /// A boxed array of *HostCompliantEvent*. To be used in *Any* placeholders.
    ArrayOfHostCompliantEvent(Vec<HostCompliantEvent>),
    /// A boxed array of *HostConfigAppliedEvent*. To be used in *Any* placeholders.
    ArrayOfHostConfigAppliedEvent(Vec<HostConfigAppliedEvent>),
    /// A boxed array of *HostConnectedEvent*. To be used in *Any* placeholders.
    ArrayOfHostConnectedEvent(Vec<HostConnectedEvent>),
    /// A boxed array of *HostConnectionLostEvent*. To be used in *Any* placeholders.
    ArrayOfHostConnectionLostEvent(Vec<HostConnectionLostEvent>),
    /// A boxed array of *HostDasDisabledEvent*. To be used in *Any* placeholders.
    ArrayOfHostDasDisabledEvent(Vec<HostDasDisabledEvent>),
    /// A boxed array of *HostDasDisablingEvent*. To be used in *Any* placeholders.
    ArrayOfHostDasDisablingEvent(Vec<HostDasDisablingEvent>),
    /// A boxed array of *HostDasEnabledEvent*. To be used in *Any* placeholders.
    ArrayOfHostDasEnabledEvent(Vec<HostDasEnabledEvent>),
    /// A boxed array of *HostDasEnablingEvent*. To be used in *Any* placeholders.
    ArrayOfHostDasEnablingEvent(Vec<HostDasEnablingEvent>),
    /// A boxed array of *HostDasErrorEvent*. To be used in *Any* placeholders.
    ArrayOfHostDasErrorEvent(Vec<HostDasErrorEvent>),
    /// A boxed array of *HostDasEvent*. To be used in *Any* placeholders.
    ArrayOfHostDasEvent(Vec<Box<dyn super::traits::HostDasEventTrait>>),
    /// A boxed array of *HostDasOkEvent*. To be used in *Any* placeholders.
    ArrayOfHostDasOkEvent(Vec<HostDasOkEvent>),
    /// A boxed array of *HostDisconnectedEvent*. To be used in *Any* placeholders.
    ArrayOfHostDisconnectedEvent(Vec<HostDisconnectedEvent>),
    /// A boxed array of *HostEnableAdminFailedEvent*. To be used in *Any* placeholders.
    ArrayOfHostEnableAdminFailedEvent(Vec<HostEnableAdminFailedEvent>),
    /// A boxed array of *HostEvent*. To be used in *Any* placeholders.
    ArrayOfHostEvent(Vec<Box<dyn super::traits::HostEventTrait>>),
    /// A boxed array of *HostEventArgument*. To be used in *Any* placeholders.
    ArrayOfHostEventArgument(Vec<HostEventArgument>),
    /// A boxed array of *HostExtraNetworksEvent*. To be used in *Any* placeholders.
    ArrayOfHostExtraNetworksEvent(Vec<HostExtraNetworksEvent>),
    /// A boxed array of *HostGetShortNameFailedEvent*. To be used in *Any* placeholders.
    ArrayOfHostGetShortNameFailedEvent(Vec<HostGetShortNameFailedEvent>),
    /// A boxed array of *HostInAuditModeEvent*. To be used in *Any* placeholders.
    ArrayOfHostInAuditModeEvent(Vec<HostInAuditModeEvent>),
    /// A boxed array of *HostInventoryFullEvent*. To be used in *Any* placeholders.
    ArrayOfHostInventoryFullEvent(Vec<HostInventoryFullEvent>),
    /// A boxed array of *HostInventoryUnreadableEvent*. To be used in *Any* placeholders.
    ArrayOfHostInventoryUnreadableEvent(Vec<HostInventoryUnreadableEvent>),
    /// A boxed array of *HostIpChangedEvent*. To be used in *Any* placeholders.
    ArrayOfHostIpChangedEvent(Vec<HostIpChangedEvent>),
    /// A boxed array of *HostIpInconsistentEvent*. To be used in *Any* placeholders.
    ArrayOfHostIpInconsistentEvent(Vec<HostIpInconsistentEvent>),
    /// A boxed array of *HostIpToShortNameFailedEvent*. To be used in *Any* placeholders.
    ArrayOfHostIpToShortNameFailedEvent(Vec<HostIpToShortNameFailedEvent>),
    /// A boxed array of *HostIsolationIpPingFailedEvent*. To be used in *Any* placeholders.
    ArrayOfHostIsolationIpPingFailedEvent(Vec<HostIsolationIpPingFailedEvent>),
    /// A boxed array of *HostLicenseExpiredEvent*. To be used in *Any* placeholders.
    ArrayOfHostLicenseExpiredEvent(Vec<HostLicenseExpiredEvent>),
    /// A boxed array of *HostLocalPortCreatedEvent*. To be used in *Any* placeholders.
    ArrayOfHostLocalPortCreatedEvent(Vec<HostLocalPortCreatedEvent>),
    /// A boxed array of *HostMissingNetworksEvent*. To be used in *Any* placeholders.
    ArrayOfHostMissingNetworksEvent(Vec<HostMissingNetworksEvent>),
    /// A boxed array of *HostMonitoringStateChangedEvent*. To be used in *Any* placeholders.
    ArrayOfHostMonitoringStateChangedEvent(Vec<HostMonitoringStateChangedEvent>),
    /// A boxed array of *HostNoAvailableNetworksEvent*. To be used in *Any* placeholders.
    ArrayOfHostNoAvailableNetworksEvent(Vec<HostNoAvailableNetworksEvent>),
    /// A boxed array of *HostNoHAEnabledPortGroupsEvent*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfHostNoHAEnabledPortGroupsEvent")]
    ArrayOfHostNoHaEnabledPortGroupsEvent(Vec<HostNoHaEnabledPortGroupsEvent>),
    /// A boxed array of *HostNoRedundantManagementNetworkEvent*. To be used in *Any* placeholders.
    ArrayOfHostNoRedundantManagementNetworkEvent(Vec<HostNoRedundantManagementNetworkEvent>),
    /// A boxed array of *HostNonCompliantEvent*. To be used in *Any* placeholders.
    ArrayOfHostNonCompliantEvent(Vec<HostNonCompliantEvent>),
    /// A boxed array of *HostNotInClusterEvent*. To be used in *Any* placeholders.
    ArrayOfHostNotInClusterEvent(Vec<HostNotInClusterEvent>),
    /// A boxed array of *HostOvercommittedEvent*. To be used in *Any* placeholders.
    ArrayOfHostOvercommittedEvent(Vec<HostOvercommittedEvent>),
    /// A boxed array of *HostPrimaryAgentNotShortNameEvent*. To be used in *Any* placeholders.
    ArrayOfHostPrimaryAgentNotShortNameEvent(Vec<HostPrimaryAgentNotShortNameEvent>),
    /// A boxed array of *HostProfileAppliedEvent*. To be used in *Any* placeholders.
    ArrayOfHostProfileAppliedEvent(Vec<HostProfileAppliedEvent>),
    /// A boxed array of *HostReconnectionFailedEvent*. To be used in *Any* placeholders.
    ArrayOfHostReconnectionFailedEvent(Vec<HostReconnectionFailedEvent>),
    /// A boxed array of *HostRemovedEvent*. To be used in *Any* placeholders.
    ArrayOfHostRemovedEvent(Vec<HostRemovedEvent>),
    /// A boxed array of *HostShortNameInconsistentEvent*. To be used in *Any* placeholders.
    ArrayOfHostShortNameInconsistentEvent(Vec<HostShortNameInconsistentEvent>),
    /// A boxed array of *HostShortNameToIpFailedEvent*. To be used in *Any* placeholders.
    ArrayOfHostShortNameToIpFailedEvent(Vec<HostShortNameToIpFailedEvent>),
    /// A boxed array of *HostShutdownEvent*. To be used in *Any* placeholders.
    ArrayOfHostShutdownEvent(Vec<HostShutdownEvent>),
    /// A boxed array of *HostSpecificationChangedEvent*. To be used in *Any* placeholders.
    ArrayOfHostSpecificationChangedEvent(Vec<HostSpecificationChangedEvent>),
    /// A boxed array of *HostSpecificationRequireEvent*. To be used in *Any* placeholders.
    ArrayOfHostSpecificationRequireEvent(Vec<HostSpecificationRequireEvent>),
    /// A boxed array of *HostSpecificationUpdateEvent*. To be used in *Any* placeholders.
    ArrayOfHostSpecificationUpdateEvent(Vec<HostSpecificationUpdateEvent>),
    /// A boxed array of *HostStatusChangedEvent*. To be used in *Any* placeholders.
    ArrayOfHostStatusChangedEvent(Vec<HostStatusChangedEvent>),
    /// A boxed array of *HostSubSpecificationDeleteEvent*. To be used in *Any* placeholders.
    ArrayOfHostSubSpecificationDeleteEvent(Vec<HostSubSpecificationDeleteEvent>),
    /// A boxed array of *HostSubSpecificationUpdateEvent*. To be used in *Any* placeholders.
    ArrayOfHostSubSpecificationUpdateEvent(Vec<HostSubSpecificationUpdateEvent>),
    /// A boxed array of *HostSyncFailedEvent*. To be used in *Any* placeholders.
    ArrayOfHostSyncFailedEvent(Vec<HostSyncFailedEvent>),
    /// A boxed array of *HostUpgradeFailedEvent*. To be used in *Any* placeholders.
    ArrayOfHostUpgradeFailedEvent(Vec<HostUpgradeFailedEvent>),
    /// A boxed array of *HostUserWorldSwapNotEnabledEvent*. To be used in *Any* placeholders.
    ArrayOfHostUserWorldSwapNotEnabledEvent(Vec<HostUserWorldSwapNotEnabledEvent>),
    /// A boxed array of *HostVnicConnectedToCustomizedDVPortEvent*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfHostVnicConnectedToCustomizedDVPortEvent")]
    ArrayOfHostVnicConnectedToCustomizedDvPortEvent(Vec<HostVnicConnectedToCustomizedDvPortEvent>),
    /// A boxed array of *HostWwnChangedEvent*. To be used in *Any* placeholders.
    ArrayOfHostWwnChangedEvent(Vec<HostWwnChangedEvent>),
    /// A boxed array of *HostWwnConflictEvent*. To be used in *Any* placeholders.
    ArrayOfHostWwnConflictEvent(Vec<HostWwnConflictEvent>),
    /// A boxed array of *IncorrectHostInformationEvent*. To be used in *Any* placeholders.
    ArrayOfIncorrectHostInformationEvent(Vec<IncorrectHostInformationEvent>),
    /// A boxed array of *InfoUpgradeEvent*. To be used in *Any* placeholders.
    ArrayOfInfoUpgradeEvent(Vec<InfoUpgradeEvent>),
    /// A boxed array of *InsufficientFailoverResourcesEvent*. To be used in *Any* placeholders.
    ArrayOfInsufficientFailoverResourcesEvent(Vec<InsufficientFailoverResourcesEvent>),
    /// A boxed array of *InvalidEditionEvent*. To be used in *Any* placeholders.
    ArrayOfInvalidEditionEvent(Vec<InvalidEditionEvent>),
    /// A boxed array of *LicenseEvent*. To be used in *Any* placeholders.
    ArrayOfLicenseEvent(Vec<Box<dyn super::traits::LicenseEventTrait>>),
    /// A boxed array of *LicenseExpiredEvent*. To be used in *Any* placeholders.
    ArrayOfLicenseExpiredEvent(Vec<LicenseExpiredEvent>),
    /// A boxed array of *LicenseNonComplianceEvent*. To be used in *Any* placeholders.
    ArrayOfLicenseNonComplianceEvent(Vec<LicenseNonComplianceEvent>),
    /// A boxed array of *LicenseRestrictedEvent*. To be used in *Any* placeholders.
    ArrayOfLicenseRestrictedEvent(Vec<LicenseRestrictedEvent>),
    /// A boxed array of *LicenseServerAvailableEvent*. To be used in *Any* placeholders.
    ArrayOfLicenseServerAvailableEvent(Vec<LicenseServerAvailableEvent>),
    /// A boxed array of *LicenseServerUnavailableEvent*. To be used in *Any* placeholders.
    ArrayOfLicenseServerUnavailableEvent(Vec<LicenseServerUnavailableEvent>),
    /// A boxed array of *LocalDatastoreCreatedEvent*. To be used in *Any* placeholders.
    ArrayOfLocalDatastoreCreatedEvent(Vec<LocalDatastoreCreatedEvent>),
    /// A boxed array of *LocalTSMEnabledEvent*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfLocalTSMEnabledEvent")]
    ArrayOfLocalTsmEnabledEvent(Vec<LocalTsmEnabledEvent>),
    /// A boxed array of *LockerMisconfiguredEvent*. To be used in *Any* placeholders.
    ArrayOfLockerMisconfiguredEvent(Vec<LockerMisconfiguredEvent>),
    /// A boxed array of *LockerReconfiguredEvent*. To be used in *Any* placeholders.
    ArrayOfLockerReconfiguredEvent(Vec<LockerReconfiguredEvent>),
    /// A boxed array of *ManagedEntityEventArgument*. To be used in *Any* placeholders.
    ArrayOfManagedEntityEventArgument(Vec<ManagedEntityEventArgument>),
    /// A boxed array of *MigrationErrorEvent*. To be used in *Any* placeholders.
    ArrayOfMigrationErrorEvent(Vec<MigrationErrorEvent>),
    /// A boxed array of *MigrationEvent*. To be used in *Any* placeholders.
    ArrayOfMigrationEvent(Vec<Box<dyn super::traits::MigrationEventTrait>>),
    /// A boxed array of *MigrationHostErrorEvent*. To be used in *Any* placeholders.
    ArrayOfMigrationHostErrorEvent(Vec<MigrationHostErrorEvent>),
    /// A boxed array of *MigrationHostWarningEvent*. To be used in *Any* placeholders.
    ArrayOfMigrationHostWarningEvent(Vec<MigrationHostWarningEvent>),
    /// A boxed array of *MigrationResourceErrorEvent*. To be used in *Any* placeholders.
    ArrayOfMigrationResourceErrorEvent(Vec<MigrationResourceErrorEvent>),
    /// A boxed array of *MigrationResourceWarningEvent*. To be used in *Any* placeholders.
    ArrayOfMigrationResourceWarningEvent(Vec<MigrationResourceWarningEvent>),
    /// A boxed array of *MigrationWarningEvent*. To be used in *Any* placeholders.
    ArrayOfMigrationWarningEvent(Vec<MigrationWarningEvent>),
    /// A boxed array of *MtuMatchEvent*. To be used in *Any* placeholders.
    ArrayOfMtuMatchEvent(Vec<MtuMatchEvent>),
    /// A boxed array of *MtuMismatchEvent*. To be used in *Any* placeholders.
    ArrayOfMtuMismatchEvent(Vec<MtuMismatchEvent>),
    /// A boxed array of *NASDatastoreCreatedEvent*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfNASDatastoreCreatedEvent")]
    ArrayOfNasDatastoreCreatedEvent(Vec<NasDatastoreCreatedEvent>),
    /// A boxed array of *NetworkEventArgument*. To be used in *Any* placeholders.
    ArrayOfNetworkEventArgument(Vec<NetworkEventArgument>),
    /// A boxed array of *NetworkRollbackEvent*. To be used in *Any* placeholders.
    ArrayOfNetworkRollbackEvent(Vec<NetworkRollbackEvent>),
    /// A boxed array of *NoAccessUserEvent*. To be used in *Any* placeholders.
    ArrayOfNoAccessUserEvent(Vec<NoAccessUserEvent>),
    /// A boxed array of *NoDatastoresConfiguredEvent*. To be used in *Any* placeholders.
    ArrayOfNoDatastoresConfiguredEvent(Vec<NoDatastoresConfiguredEvent>),
    /// A boxed array of *NoLicenseEvent*. To be used in *Any* placeholders.
    ArrayOfNoLicenseEvent(Vec<NoLicenseEvent>),
    /// A boxed array of *NoMaintenanceModeDrsRecommendationForVM*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfNoMaintenanceModeDrsRecommendationForVM")]
    ArrayOfNoMaintenanceModeDrsRecommendationForVm(Vec<NoMaintenanceModeDrsRecommendationForVm>),
    /// A boxed array of *NonVIWorkloadDetectedOnDatastoreEvent*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfNonVIWorkloadDetectedOnDatastoreEvent")]
    ArrayOfNonViWorkloadDetectedOnDatastoreEvent(Vec<NonViWorkloadDetectedOnDatastoreEvent>),
    /// A boxed array of *NotEnoughResourcesToStartVmEvent*. To be used in *Any* placeholders.
    ArrayOfNotEnoughResourcesToStartVmEvent(Vec<NotEnoughResourcesToStartVmEvent>),
    /// A boxed array of *OutOfSyncDvsHost*. To be used in *Any* placeholders.
    ArrayOfOutOfSyncDvsHost(Vec<OutOfSyncDvsHost>),
    /// A boxed array of *PermissionAddedEvent*. To be used in *Any* placeholders.
    ArrayOfPermissionAddedEvent(Vec<PermissionAddedEvent>),
    /// A boxed array of *PermissionEvent*. To be used in *Any* placeholders.
    ArrayOfPermissionEvent(Vec<Box<dyn super::traits::PermissionEventTrait>>),
    /// A boxed array of *PermissionRemovedEvent*. To be used in *Any* placeholders.
    ArrayOfPermissionRemovedEvent(Vec<PermissionRemovedEvent>),
    /// A boxed array of *PermissionUpdatedEvent*. To be used in *Any* placeholders.
    ArrayOfPermissionUpdatedEvent(Vec<PermissionUpdatedEvent>),
    /// A boxed array of *ProfileAssociatedEvent*. To be used in *Any* placeholders.
    ArrayOfProfileAssociatedEvent(Vec<ProfileAssociatedEvent>),
    /// A boxed array of *ProfileChangedEvent*. To be used in *Any* placeholders.
    ArrayOfProfileChangedEvent(Vec<ProfileChangedEvent>),
    /// A boxed array of *ProfileCreatedEvent*. To be used in *Any* placeholders.
    ArrayOfProfileCreatedEvent(Vec<ProfileCreatedEvent>),
    /// A boxed array of *ProfileDissociatedEvent*. To be used in *Any* placeholders.
    ArrayOfProfileDissociatedEvent(Vec<ProfileDissociatedEvent>),
    /// A boxed array of *ProfileEvent*. To be used in *Any* placeholders.
    ArrayOfProfileEvent(Vec<Box<dyn super::traits::ProfileEventTrait>>),
    /// A boxed array of *ProfileEventArgument*. To be used in *Any* placeholders.
    ArrayOfProfileEventArgument(Vec<ProfileEventArgument>),
    /// A boxed array of *ProfileReferenceHostChangedEvent*. To be used in *Any* placeholders.
    ArrayOfProfileReferenceHostChangedEvent(Vec<ProfileReferenceHostChangedEvent>),
    /// A boxed array of *ProfileRemovedEvent*. To be used in *Any* placeholders.
    ArrayOfProfileRemovedEvent(Vec<ProfileRemovedEvent>),
    /// A boxed array of *RecoveryEvent*. To be used in *Any* placeholders.
    ArrayOfRecoveryEvent(Vec<RecoveryEvent>),
    /// A boxed array of *RemoteTSMEnabledEvent*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfRemoteTSMEnabledEvent")]
    ArrayOfRemoteTsmEnabledEvent(Vec<RemoteTsmEnabledEvent>),
    /// A boxed array of *ResourcePoolCreatedEvent*. To be used in *Any* placeholders.
    ArrayOfResourcePoolCreatedEvent(Vec<ResourcePoolCreatedEvent>),
    /// A boxed array of *ResourcePoolDestroyedEvent*. To be used in *Any* placeholders.
    ArrayOfResourcePoolDestroyedEvent(Vec<ResourcePoolDestroyedEvent>),
    /// A boxed array of *ResourcePoolEvent*. To be used in *Any* placeholders.
    ArrayOfResourcePoolEvent(Vec<Box<dyn super::traits::ResourcePoolEventTrait>>),
    /// A boxed array of *ResourcePoolEventArgument*. To be used in *Any* placeholders.
    ArrayOfResourcePoolEventArgument(Vec<ResourcePoolEventArgument>),
    /// A boxed array of *ResourcePoolMovedEvent*. To be used in *Any* placeholders.
    ArrayOfResourcePoolMovedEvent(Vec<ResourcePoolMovedEvent>),
    /// A boxed array of *ResourcePoolReconfiguredEvent*. To be used in *Any* placeholders.
    ArrayOfResourcePoolReconfiguredEvent(Vec<ResourcePoolReconfiguredEvent>),
    /// A boxed array of *ResourceViolatedEvent*. To be used in *Any* placeholders.
    ArrayOfResourceViolatedEvent(Vec<ResourceViolatedEvent>),
    /// A boxed array of *RoleAddedEvent*. To be used in *Any* placeholders.
    ArrayOfRoleAddedEvent(Vec<RoleAddedEvent>),
    /// A boxed array of *RoleEvent*. To be used in *Any* placeholders.
    ArrayOfRoleEvent(Vec<Box<dyn super::traits::RoleEventTrait>>),
    /// A boxed array of *RoleEventArgument*. To be used in *Any* placeholders.
    ArrayOfRoleEventArgument(Vec<RoleEventArgument>),
    /// A boxed array of *RoleRemovedEvent*. To be used in *Any* placeholders.
    ArrayOfRoleRemovedEvent(Vec<RoleRemovedEvent>),
    /// A boxed array of *RoleUpdatedEvent*. To be used in *Any* placeholders.
    ArrayOfRoleUpdatedEvent(Vec<RoleUpdatedEvent>),
    /// A boxed array of *RollbackEvent*. To be used in *Any* placeholders.
    ArrayOfRollbackEvent(Vec<RollbackEvent>),
    /// A boxed array of *ScheduledTaskCompletedEvent*. To be used in *Any* placeholders.
    ArrayOfScheduledTaskCompletedEvent(Vec<ScheduledTaskCompletedEvent>),
    /// A boxed array of *ScheduledTaskCreatedEvent*. To be used in *Any* placeholders.
    ArrayOfScheduledTaskCreatedEvent(Vec<ScheduledTaskCreatedEvent>),
    /// A boxed array of *ScheduledTaskEmailCompletedEvent*. To be used in *Any* placeholders.
    ArrayOfScheduledTaskEmailCompletedEvent(Vec<ScheduledTaskEmailCompletedEvent>),
    /// A boxed array of *ScheduledTaskEmailFailedEvent*. To be used in *Any* placeholders.
    ArrayOfScheduledTaskEmailFailedEvent(Vec<ScheduledTaskEmailFailedEvent>),
    /// A boxed array of *ScheduledTaskEvent*. To be used in *Any* placeholders.
    ArrayOfScheduledTaskEvent(Vec<Box<dyn super::traits::ScheduledTaskEventTrait>>),
    /// A boxed array of *ScheduledTaskEventArgument*. To be used in *Any* placeholders.
    ArrayOfScheduledTaskEventArgument(Vec<ScheduledTaskEventArgument>),
    /// A boxed array of *ScheduledTaskFailedEvent*. To be used in *Any* placeholders.
    ArrayOfScheduledTaskFailedEvent(Vec<ScheduledTaskFailedEvent>),
    /// A boxed array of *ScheduledTaskReconfiguredEvent*. To be used in *Any* placeholders.
    ArrayOfScheduledTaskReconfiguredEvent(Vec<ScheduledTaskReconfiguredEvent>),
    /// A boxed array of *ScheduledTaskRemovedEvent*. To be used in *Any* placeholders.
    ArrayOfScheduledTaskRemovedEvent(Vec<ScheduledTaskRemovedEvent>),
    /// A boxed array of *ScheduledTaskStartedEvent*. To be used in *Any* placeholders.
    ArrayOfScheduledTaskStartedEvent(Vec<ScheduledTaskStartedEvent>),
    /// A boxed array of *ServerLicenseExpiredEvent*. To be used in *Any* placeholders.
    ArrayOfServerLicenseExpiredEvent(Vec<ServerLicenseExpiredEvent>),
    /// A boxed array of *ServerStartedSessionEvent*. To be used in *Any* placeholders.
    ArrayOfServerStartedSessionEvent(Vec<ServerStartedSessionEvent>),
    /// A boxed array of *SessionEvent*. To be used in *Any* placeholders.
    ArrayOfSessionEvent(Vec<Box<dyn super::traits::SessionEventTrait>>),
    /// A boxed array of *SessionTerminatedEvent*. To be used in *Any* placeholders.
    ArrayOfSessionTerminatedEvent(Vec<SessionTerminatedEvent>),
    /// A boxed array of *TaskEvent*. To be used in *Any* placeholders.
    ArrayOfTaskEvent(Vec<Box<dyn super::traits::TaskEventTrait>>),
    /// A boxed array of *TaskTimeoutEvent*. To be used in *Any* placeholders.
    ArrayOfTaskTimeoutEvent(Vec<TaskTimeoutEvent>),
    /// A boxed array of *TeamingMatchEvent*. To be used in *Any* placeholders.
    ArrayOfTeamingMatchEvent(Vec<TeamingMatchEvent>),
    /// A boxed array of *TeamingMisMatchEvent*. To be used in *Any* placeholders.
    ArrayOfTeamingMisMatchEvent(Vec<TeamingMisMatchEvent>),
    /// A boxed array of *TemplateBeingUpgradedEvent*. To be used in *Any* placeholders.
    ArrayOfTemplateBeingUpgradedEvent(Vec<TemplateBeingUpgradedEvent>),
    /// A boxed array of *TemplateUpgradeEvent*. To be used in *Any* placeholders.
    ArrayOfTemplateUpgradeEvent(Vec<Box<dyn super::traits::TemplateUpgradeEventTrait>>),
    /// A boxed array of *TemplateUpgradeFailedEvent*. To be used in *Any* placeholders.
    ArrayOfTemplateUpgradeFailedEvent(Vec<TemplateUpgradeFailedEvent>),
    /// A boxed array of *TemplateUpgradedEvent*. To be used in *Any* placeholders.
    ArrayOfTemplateUpgradedEvent(Vec<TemplateUpgradedEvent>),
    /// A boxed array of *TimedOutHostOperationEvent*. To be used in *Any* placeholders.
    ArrayOfTimedOutHostOperationEvent(Vec<TimedOutHostOperationEvent>),
    /// A boxed array of *UnlicensedVirtualMachinesEvent*. To be used in *Any* placeholders.
    ArrayOfUnlicensedVirtualMachinesEvent(Vec<UnlicensedVirtualMachinesEvent>),
    /// A boxed array of *UnlicensedVirtualMachinesFoundEvent*. To be used in *Any* placeholders.
    ArrayOfUnlicensedVirtualMachinesFoundEvent(Vec<UnlicensedVirtualMachinesFoundEvent>),
    /// A boxed array of *UpdatedAgentBeingRestartedEvent*. To be used in *Any* placeholders.
    ArrayOfUpdatedAgentBeingRestartedEvent(Vec<UpdatedAgentBeingRestartedEvent>),
    /// A boxed array of *UpgradeEvent*. To be used in *Any* placeholders.
    ArrayOfUpgradeEvent(Vec<Box<dyn super::traits::UpgradeEventTrait>>),
    /// A boxed array of *UplinkPortMtuNotSupportEvent*. To be used in *Any* placeholders.
    ArrayOfUplinkPortMtuNotSupportEvent(Vec<UplinkPortMtuNotSupportEvent>),
    /// A boxed array of *UplinkPortMtuSupportEvent*. To be used in *Any* placeholders.
    ArrayOfUplinkPortMtuSupportEvent(Vec<UplinkPortMtuSupportEvent>),
    /// A boxed array of *UplinkPortVlanTrunkedEvent*. To be used in *Any* placeholders.
    ArrayOfUplinkPortVlanTrunkedEvent(Vec<UplinkPortVlanTrunkedEvent>),
    /// A boxed array of *UplinkPortVlanUntrunkedEvent*. To be used in *Any* placeholders.
    ArrayOfUplinkPortVlanUntrunkedEvent(Vec<UplinkPortVlanUntrunkedEvent>),
    /// A boxed array of *UserAssignedToGroup*. To be used in *Any* placeholders.
    ArrayOfUserAssignedToGroup(Vec<UserAssignedToGroup>),
    /// A boxed array of *UserLoginSessionEvent*. To be used in *Any* placeholders.
    ArrayOfUserLoginSessionEvent(Vec<UserLoginSessionEvent>),
    /// A boxed array of *UserLogoutSessionEvent*. To be used in *Any* placeholders.
    ArrayOfUserLogoutSessionEvent(Vec<UserLogoutSessionEvent>),
    /// A boxed array of *UserPasswordChanged*. To be used in *Any* placeholders.
    ArrayOfUserPasswordChanged(Vec<UserPasswordChanged>),
    /// A boxed array of *UserUnassignedFromGroup*. To be used in *Any* placeholders.
    ArrayOfUserUnassignedFromGroup(Vec<UserUnassignedFromGroup>),
    /// A boxed array of *UserUpgradeEvent*. To be used in *Any* placeholders.
    ArrayOfUserUpgradeEvent(Vec<UserUpgradeEvent>),
    /// A boxed array of *VMFSDatastoreCreatedEvent*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVMFSDatastoreCreatedEvent")]
    ArrayOfVmfsDatastoreCreatedEvent(Vec<VmfsDatastoreCreatedEvent>),
    /// A boxed array of *VMFSDatastoreExpandedEvent*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVMFSDatastoreExpandedEvent")]
    ArrayOfVmfsDatastoreExpandedEvent(Vec<VmfsDatastoreExpandedEvent>),
    /// A boxed array of *VMFSDatastoreExtendedEvent*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVMFSDatastoreExtendedEvent")]
    ArrayOfVmfsDatastoreExtendedEvent(Vec<VmfsDatastoreExtendedEvent>),
    /// A boxed array of *VMotionLicenseExpiredEvent*. To be used in *Any* placeholders.
    ArrayOfVMotionLicenseExpiredEvent(Vec<VMotionLicenseExpiredEvent>),
    /// A boxed array of *VcAgentUninstallFailedEvent*. To be used in *Any* placeholders.
    ArrayOfVcAgentUninstallFailedEvent(Vec<VcAgentUninstallFailedEvent>),
    /// A boxed array of *VcAgentUninstalledEvent*. To be used in *Any* placeholders.
    ArrayOfVcAgentUninstalledEvent(Vec<VcAgentUninstalledEvent>),
    /// A boxed array of *VcAgentUpgradeFailedEvent*. To be used in *Any* placeholders.
    ArrayOfVcAgentUpgradeFailedEvent(Vec<VcAgentUpgradeFailedEvent>),
    /// A boxed array of *VcAgentUpgradedEvent*. To be used in *Any* placeholders.
    ArrayOfVcAgentUpgradedEvent(Vec<VcAgentUpgradedEvent>),
    /// A boxed array of *VimAccountPasswordChangedEvent*. To be used in *Any* placeholders.
    ArrayOfVimAccountPasswordChangedEvent(Vec<VimAccountPasswordChangedEvent>),
    /// A boxed array of *VmAcquiredMksTicketEvent*. To be used in *Any* placeholders.
    ArrayOfVmAcquiredMksTicketEvent(Vec<VmAcquiredMksTicketEvent>),
    /// A boxed array of *VmAcquiredTicketEvent*. To be used in *Any* placeholders.
    ArrayOfVmAcquiredTicketEvent(Vec<VmAcquiredTicketEvent>),
    /// A boxed array of *VmAutoRenameEvent*. To be used in *Any* placeholders.
    ArrayOfVmAutoRenameEvent(Vec<VmAutoRenameEvent>),
    /// A boxed array of *VmBeingClonedEvent*. To be used in *Any* placeholders.
    ArrayOfVmBeingClonedEvent(Vec<VmBeingClonedEvent>),
    /// A boxed array of *VmBeingClonedNoFolderEvent*. To be used in *Any* placeholders.
    ArrayOfVmBeingClonedNoFolderEvent(Vec<VmBeingClonedNoFolderEvent>),
    /// A boxed array of *VmBeingCreatedEvent*. To be used in *Any* placeholders.
    ArrayOfVmBeingCreatedEvent(Vec<VmBeingCreatedEvent>),
    /// A boxed array of *VmBeingDeployedEvent*. To be used in *Any* placeholders.
    ArrayOfVmBeingDeployedEvent(Vec<VmBeingDeployedEvent>),
    /// A boxed array of *VmBeingHotMigratedEvent*. To be used in *Any* placeholders.
    ArrayOfVmBeingHotMigratedEvent(Vec<VmBeingHotMigratedEvent>),
    /// A boxed array of *VmBeingMigratedEvent*. To be used in *Any* placeholders.
    ArrayOfVmBeingMigratedEvent(Vec<VmBeingMigratedEvent>),
    /// A boxed array of *VmBeingRelocatedEvent*. To be used in *Any* placeholders.
    ArrayOfVmBeingRelocatedEvent(Vec<VmBeingRelocatedEvent>),
    /// A boxed array of *VmCloneEvent*. To be used in *Any* placeholders.
    ArrayOfVmCloneEvent(Vec<Box<dyn super::traits::VmCloneEventTrait>>),
    /// A boxed array of *VmCloneFailedEvent*. To be used in *Any* placeholders.
    ArrayOfVmCloneFailedEvent(Vec<VmCloneFailedEvent>),
    /// A boxed array of *VmClonedEvent*. To be used in *Any* placeholders.
    ArrayOfVmClonedEvent(Vec<VmClonedEvent>),
    /// A boxed array of *VmConfigMissingEvent*. To be used in *Any* placeholders.
    ArrayOfVmConfigMissingEvent(Vec<VmConfigMissingEvent>),
    /// A boxed array of *VmConnectedEvent*. To be used in *Any* placeholders.
    ArrayOfVmConnectedEvent(Vec<VmConnectedEvent>),
    /// A boxed array of *VmCreatedEvent*. To be used in *Any* placeholders.
    ArrayOfVmCreatedEvent(Vec<VmCreatedEvent>),
    /// A boxed array of *VmDasBeingResetEvent*. To be used in *Any* placeholders.
    ArrayOfVmDasBeingResetEvent(Vec<Box<dyn super::traits::VmDasBeingResetEventTrait>>),
    /// A boxed array of *VmDasBeingResetWithScreenshotEvent*. To be used in *Any* placeholders.
    ArrayOfVmDasBeingResetWithScreenshotEvent(Vec<VmDasBeingResetWithScreenshotEvent>),
    /// A boxed array of *VmDasResetFailedEvent*. To be used in *Any* placeholders.
    ArrayOfVmDasResetFailedEvent(Vec<VmDasResetFailedEvent>),
    /// A boxed array of *VmDasUpdateErrorEvent*. To be used in *Any* placeholders.
    ArrayOfVmDasUpdateErrorEvent(Vec<VmDasUpdateErrorEvent>),
    /// A boxed array of *VmDasUpdateOkEvent*. To be used in *Any* placeholders.
    ArrayOfVmDasUpdateOkEvent(Vec<VmDasUpdateOkEvent>),
    /// A boxed array of *VmDateRolledBackEvent*. To be used in *Any* placeholders.
    ArrayOfVmDateRolledBackEvent(Vec<VmDateRolledBackEvent>),
    /// A boxed array of *VmDeployFailedEvent*. To be used in *Any* placeholders.
    ArrayOfVmDeployFailedEvent(Vec<VmDeployFailedEvent>),
    /// A boxed array of *VmDeployedEvent*. To be used in *Any* placeholders.
    ArrayOfVmDeployedEvent(Vec<VmDeployedEvent>),
    /// A boxed array of *VmDisconnectedEvent*. To be used in *Any* placeholders.
    ArrayOfVmDisconnectedEvent(Vec<VmDisconnectedEvent>),
    /// A boxed array of *VmDiscoveredEvent*. To be used in *Any* placeholders.
    ArrayOfVmDiscoveredEvent(Vec<VmDiscoveredEvent>),
    /// A boxed array of *VmDiskFailedEvent*. To be used in *Any* placeholders.
    ArrayOfVmDiskFailedEvent(Vec<VmDiskFailedEvent>),
    /// A boxed array of *VmEmigratingEvent*. To be used in *Any* placeholders.
    ArrayOfVmEmigratingEvent(Vec<VmEmigratingEvent>),
    /// A boxed array of *VmEndRecordingEvent*. To be used in *Any* placeholders.
    ArrayOfVmEndRecordingEvent(Vec<VmEndRecordingEvent>),
    /// A boxed array of *VmEndReplayingEvent*. To be used in *Any* placeholders.
    ArrayOfVmEndReplayingEvent(Vec<VmEndReplayingEvent>),
    /// A boxed array of *VmEvent*. To be used in *Any* placeholders.
    ArrayOfVmEvent(Vec<Box<dyn super::traits::VmEventTrait>>),
    /// A boxed array of *VmEventArgument*. To be used in *Any* placeholders.
    ArrayOfVmEventArgument(Vec<VmEventArgument>),
    /// A boxed array of *VmFailedMigrateEvent*. To be used in *Any* placeholders.
    ArrayOfVmFailedMigrateEvent(Vec<VmFailedMigrateEvent>),
    /// A boxed array of *VmFailedRelayoutEvent*. To be used in *Any* placeholders.
    ArrayOfVmFailedRelayoutEvent(Vec<VmFailedRelayoutEvent>),
    /// A boxed array of *VmFailedRelayoutOnVmfs2DatastoreEvent*. To be used in *Any* placeholders.
    ArrayOfVmFailedRelayoutOnVmfs2DatastoreEvent(Vec<VmFailedRelayoutOnVmfs2DatastoreEvent>),
    /// A boxed array of *VmFailedStartingSecondaryEvent*. To be used in *Any* placeholders.
    ArrayOfVmFailedStartingSecondaryEvent(Vec<VmFailedStartingSecondaryEvent>),
    /// A boxed array of *VmFailedToPowerOffEvent*. To be used in *Any* placeholders.
    ArrayOfVmFailedToPowerOffEvent(Vec<VmFailedToPowerOffEvent>),
    /// A boxed array of *VmFailedToPowerOnEvent*. To be used in *Any* placeholders.
    ArrayOfVmFailedToPowerOnEvent(Vec<VmFailedToPowerOnEvent>),
    /// A boxed array of *VmFailedToRebootGuestEvent*. To be used in *Any* placeholders.
    ArrayOfVmFailedToRebootGuestEvent(Vec<VmFailedToRebootGuestEvent>),
    /// A boxed array of *VmFailedToResetEvent*. To be used in *Any* placeholders.
    ArrayOfVmFailedToResetEvent(Vec<VmFailedToResetEvent>),
    /// A boxed array of *VmFailedToShutdownGuestEvent*. To be used in *Any* placeholders.
    ArrayOfVmFailedToShutdownGuestEvent(Vec<VmFailedToShutdownGuestEvent>),
    /// A boxed array of *VmFailedToStandbyGuestEvent*. To be used in *Any* placeholders.
    ArrayOfVmFailedToStandbyGuestEvent(Vec<VmFailedToStandbyGuestEvent>),
    /// A boxed array of *VmFailedToSuspendEvent*. To be used in *Any* placeholders.
    ArrayOfVmFailedToSuspendEvent(Vec<VmFailedToSuspendEvent>),
    /// A boxed array of *VmFailedUpdatingSecondaryConfig*. To be used in *Any* placeholders.
    ArrayOfVmFailedUpdatingSecondaryConfig(Vec<VmFailedUpdatingSecondaryConfig>),
    /// A boxed array of *VmFailoverFailed*. To be used in *Any* placeholders.
    ArrayOfVmFailoverFailed(Vec<VmFailoverFailed>),
    /// A boxed array of *VmFaultToleranceStateChangedEvent*. To be used in *Any* placeholders.
    ArrayOfVmFaultToleranceStateChangedEvent(Vec<VmFaultToleranceStateChangedEvent>),
    /// A boxed array of *VmFaultToleranceTurnedOffEvent*. To be used in *Any* placeholders.
    ArrayOfVmFaultToleranceTurnedOffEvent(Vec<VmFaultToleranceTurnedOffEvent>),
    /// A boxed array of *VmFaultToleranceVmTerminatedEvent*. To be used in *Any* placeholders.
    ArrayOfVmFaultToleranceVmTerminatedEvent(Vec<VmFaultToleranceVmTerminatedEvent>),
    /// A boxed array of *VmGuestOSCrashedEvent*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVmGuestOSCrashedEvent")]
    ArrayOfVmGuestOsCrashedEvent(Vec<VmGuestOsCrashedEvent>),
    /// A boxed array of *VmGuestRebootEvent*. To be used in *Any* placeholders.
    ArrayOfVmGuestRebootEvent(Vec<VmGuestRebootEvent>),
    /// A boxed array of *VmGuestShutdownEvent*. To be used in *Any* placeholders.
    ArrayOfVmGuestShutdownEvent(Vec<VmGuestShutdownEvent>),
    /// A boxed array of *VmGuestStandbyEvent*. To be used in *Any* placeholders.
    ArrayOfVmGuestStandbyEvent(Vec<VmGuestStandbyEvent>),
    /// A boxed array of *VmHealthMonitoringStateChangedEvent*. To be used in *Any* placeholders.
    ArrayOfVmHealthMonitoringStateChangedEvent(Vec<VmHealthMonitoringStateChangedEvent>),
    /// A boxed array of *VmInstanceUuidAssignedEvent*. To be used in *Any* placeholders.
    ArrayOfVmInstanceUuidAssignedEvent(Vec<VmInstanceUuidAssignedEvent>),
    /// A boxed array of *VmInstanceUuidChangedEvent*. To be used in *Any* placeholders.
    ArrayOfVmInstanceUuidChangedEvent(Vec<VmInstanceUuidChangedEvent>),
    /// A boxed array of *VmInstanceUuidConflictEvent*. To be used in *Any* placeholders.
    ArrayOfVmInstanceUuidConflictEvent(Vec<VmInstanceUuidConflictEvent>),
    /// A boxed array of *VmMacAssignedEvent*. To be used in *Any* placeholders.
    ArrayOfVmMacAssignedEvent(Vec<VmMacAssignedEvent>),
    /// A boxed array of *VmMacChangedEvent*. To be used in *Any* placeholders.
    ArrayOfVmMacChangedEvent(Vec<VmMacChangedEvent>),
    /// A boxed array of *VmMacConflictEvent*. To be used in *Any* placeholders.
    ArrayOfVmMacConflictEvent(Vec<VmMacConflictEvent>),
    /// A boxed array of *VmMaxFTRestartCountReached*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVmMaxFTRestartCountReached")]
    ArrayOfVmMaxFtRestartCountReached(Vec<VmMaxFtRestartCountReached>),
    /// A boxed array of *VmMaxRestartCountReached*. To be used in *Any* placeholders.
    ArrayOfVmMaxRestartCountReached(Vec<VmMaxRestartCountReached>),
    /// A boxed array of *VmMessageErrorEvent*. To be used in *Any* placeholders.
    ArrayOfVmMessageErrorEvent(Vec<VmMessageErrorEvent>),
    /// A boxed array of *VmMessageEvent*. To be used in *Any* placeholders.
    ArrayOfVmMessageEvent(Vec<VmMessageEvent>),
    /// A boxed array of *VmMessageWarningEvent*. To be used in *Any* placeholders.
    ArrayOfVmMessageWarningEvent(Vec<VmMessageWarningEvent>),
    /// A boxed array of *VmMigratedEvent*. To be used in *Any* placeholders.
    ArrayOfVmMigratedEvent(Vec<Box<dyn super::traits::VmMigratedEventTrait>>),
    /// A boxed array of *VmNoCompatibleHostForSecondaryEvent*. To be used in *Any* placeholders.
    ArrayOfVmNoCompatibleHostForSecondaryEvent(Vec<VmNoCompatibleHostForSecondaryEvent>),
    /// A boxed array of *VmNoNetworkAccessEvent*. To be used in *Any* placeholders.
    ArrayOfVmNoNetworkAccessEvent(Vec<VmNoNetworkAccessEvent>),
    /// A boxed array of *VmOrphanedEvent*. To be used in *Any* placeholders.
    ArrayOfVmOrphanedEvent(Vec<VmOrphanedEvent>),
    /// A boxed array of *VmPowerOffOnIsolationEvent*. To be used in *Any* placeholders.
    ArrayOfVmPowerOffOnIsolationEvent(Vec<VmPowerOffOnIsolationEvent>),
    /// A boxed array of *VmPoweredOffEvent*. To be used in *Any* placeholders.
    ArrayOfVmPoweredOffEvent(Vec<Box<dyn super::traits::VmPoweredOffEventTrait>>),
    /// A boxed array of *VmPoweredOnEvent*. To be used in *Any* placeholders.
    ArrayOfVmPoweredOnEvent(Vec<Box<dyn super::traits::VmPoweredOnEventTrait>>),
    /// A boxed array of *VmPoweringOnWithCustomizedDVPortEvent*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVmPoweringOnWithCustomizedDVPortEvent")]
    ArrayOfVmPoweringOnWithCustomizedDvPortEvent(Vec<VmPoweringOnWithCustomizedDvPortEvent>),
    /// A boxed array of *VmPrimaryFailoverEvent*. To be used in *Any* placeholders.
    ArrayOfVmPrimaryFailoverEvent(Vec<VmPrimaryFailoverEvent>),
    /// A boxed array of *VmReconfiguredEvent*. To be used in *Any* placeholders.
    ArrayOfVmReconfiguredEvent(Vec<VmReconfiguredEvent>),
    /// A boxed array of *VmRegisteredEvent*. To be used in *Any* placeholders.
    ArrayOfVmRegisteredEvent(Vec<VmRegisteredEvent>),
    /// A boxed array of *VmRelayoutSuccessfulEvent*. To be used in *Any* placeholders.
    ArrayOfVmRelayoutSuccessfulEvent(Vec<VmRelayoutSuccessfulEvent>),
    /// A boxed array of *VmRelayoutUpToDateEvent*. To be used in *Any* placeholders.
    ArrayOfVmRelayoutUpToDateEvent(Vec<VmRelayoutUpToDateEvent>),
    /// A boxed array of *VmReloadFromPathEvent*. To be used in *Any* placeholders.
    ArrayOfVmReloadFromPathEvent(Vec<VmReloadFromPathEvent>),
    /// A boxed array of *VmReloadFromPathFailedEvent*. To be used in *Any* placeholders.
    ArrayOfVmReloadFromPathFailedEvent(Vec<VmReloadFromPathFailedEvent>),
    /// A boxed array of *VmRelocateFailedEvent*. To be used in *Any* placeholders.
    ArrayOfVmRelocateFailedEvent(Vec<VmRelocateFailedEvent>),
    /// A boxed array of *VmRelocateSpecEvent*. To be used in *Any* placeholders.
    ArrayOfVmRelocateSpecEvent(Vec<Box<dyn super::traits::VmRelocateSpecEventTrait>>),
    /// A boxed array of *VmRelocatedEvent*. To be used in *Any* placeholders.
    ArrayOfVmRelocatedEvent(Vec<VmRelocatedEvent>),
    /// A boxed array of *VmRemoteConsoleConnectedEvent*. To be used in *Any* placeholders.
    ArrayOfVmRemoteConsoleConnectedEvent(Vec<VmRemoteConsoleConnectedEvent>),
    /// A boxed array of *VmRemoteConsoleDisconnectedEvent*. To be used in *Any* placeholders.
    ArrayOfVmRemoteConsoleDisconnectedEvent(Vec<VmRemoteConsoleDisconnectedEvent>),
    /// A boxed array of *VmRemovedEvent*. To be used in *Any* placeholders.
    ArrayOfVmRemovedEvent(Vec<VmRemovedEvent>),
    /// A boxed array of *VmRenamedEvent*. To be used in *Any* placeholders.
    ArrayOfVmRenamedEvent(Vec<VmRenamedEvent>),
    /// A boxed array of *VmRequirementsExceedCurrentEVCModeEvent*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVmRequirementsExceedCurrentEVCModeEvent")]
    ArrayOfVmRequirementsExceedCurrentEvcModeEvent(Vec<VmRequirementsExceedCurrentEvcModeEvent>),
    /// A boxed array of *VmResettingEvent*. To be used in *Any* placeholders.
    ArrayOfVmResettingEvent(Vec<VmResettingEvent>),
    /// A boxed array of *VmResourcePoolMovedEvent*. To be used in *Any* placeholders.
    ArrayOfVmResourcePoolMovedEvent(Vec<VmResourcePoolMovedEvent>),
    /// A boxed array of *VmResourceReallocatedEvent*. To be used in *Any* placeholders.
    ArrayOfVmResourceReallocatedEvent(Vec<VmResourceReallocatedEvent>),
    /// A boxed array of *VmRestartedOnAlternateHostEvent*. To be used in *Any* placeholders.
    ArrayOfVmRestartedOnAlternateHostEvent(Vec<VmRestartedOnAlternateHostEvent>),
    /// A boxed array of *VmResumingEvent*. To be used in *Any* placeholders.
    ArrayOfVmResumingEvent(Vec<VmResumingEvent>),
    /// A boxed array of *VmSecondaryAddedEvent*. To be used in *Any* placeholders.
    ArrayOfVmSecondaryAddedEvent(Vec<VmSecondaryAddedEvent>),
    /// A boxed array of *VmSecondaryDisabledBySystemEvent*. To be used in *Any* placeholders.
    ArrayOfVmSecondaryDisabledBySystemEvent(Vec<VmSecondaryDisabledBySystemEvent>),
    /// A boxed array of *VmSecondaryDisabledEvent*. To be used in *Any* placeholders.
    ArrayOfVmSecondaryDisabledEvent(Vec<VmSecondaryDisabledEvent>),
    /// A boxed array of *VmSecondaryEnabledEvent*. To be used in *Any* placeholders.
    ArrayOfVmSecondaryEnabledEvent(Vec<VmSecondaryEnabledEvent>),
    /// A boxed array of *VmSecondaryStartedEvent*. To be used in *Any* placeholders.
    ArrayOfVmSecondaryStartedEvent(Vec<VmSecondaryStartedEvent>),
    /// A boxed array of *VmShutdownOnIsolationEvent*. To be used in *Any* placeholders.
    ArrayOfVmShutdownOnIsolationEvent(Vec<VmShutdownOnIsolationEvent>),
    /// A boxed array of *VmStartRecordingEvent*. To be used in *Any* placeholders.
    ArrayOfVmStartRecordingEvent(Vec<VmStartRecordingEvent>),
    /// A boxed array of *VmStartReplayingEvent*. To be used in *Any* placeholders.
    ArrayOfVmStartReplayingEvent(Vec<VmStartReplayingEvent>),
    /// A boxed array of *VmStartingEvent*. To be used in *Any* placeholders.
    ArrayOfVmStartingEvent(Vec<Box<dyn super::traits::VmStartingEventTrait>>),
    /// A boxed array of *VmStartingSecondaryEvent*. To be used in *Any* placeholders.
    ArrayOfVmStartingSecondaryEvent(Vec<VmStartingSecondaryEvent>),
    /// A boxed array of *VmStaticMacConflictEvent*. To be used in *Any* placeholders.
    ArrayOfVmStaticMacConflictEvent(Vec<VmStaticMacConflictEvent>),
    /// A boxed array of *VmStoppingEvent*. To be used in *Any* placeholders.
    ArrayOfVmStoppingEvent(Vec<VmStoppingEvent>),
    /// A boxed array of *VmSuspendedEvent*. To be used in *Any* placeholders.
    ArrayOfVmSuspendedEvent(Vec<VmSuspendedEvent>),
    /// A boxed array of *VmSuspendingEvent*. To be used in *Any* placeholders.
    ArrayOfVmSuspendingEvent(Vec<VmSuspendingEvent>),
    /// A boxed array of *VmTimedoutStartingSecondaryEvent*. To be used in *Any* placeholders.
    ArrayOfVmTimedoutStartingSecondaryEvent(Vec<VmTimedoutStartingSecondaryEvent>),
    /// A boxed array of *VmUnsupportedStartingEvent*. To be used in *Any* placeholders.
    ArrayOfVmUnsupportedStartingEvent(Vec<VmUnsupportedStartingEvent>),
    /// A boxed array of *VmUpgradeCompleteEvent*. To be used in *Any* placeholders.
    ArrayOfVmUpgradeCompleteEvent(Vec<VmUpgradeCompleteEvent>),
    /// A boxed array of *VmUpgradeFailedEvent*. To be used in *Any* placeholders.
    ArrayOfVmUpgradeFailedEvent(Vec<VmUpgradeFailedEvent>),
    /// A boxed array of *VmUpgradingEvent*. To be used in *Any* placeholders.
    ArrayOfVmUpgradingEvent(Vec<VmUpgradingEvent>),
    /// A boxed array of *VmUuidAssignedEvent*. To be used in *Any* placeholders.
    ArrayOfVmUuidAssignedEvent(Vec<VmUuidAssignedEvent>),
    /// A boxed array of *VmUuidChangedEvent*. To be used in *Any* placeholders.
    ArrayOfVmUuidChangedEvent(Vec<VmUuidChangedEvent>),
    /// A boxed array of *VmUuidConflictEvent*. To be used in *Any* placeholders.
    ArrayOfVmUuidConflictEvent(Vec<VmUuidConflictEvent>),
    /// A boxed array of *VmVnicPoolReservationViolationClearEvent*. To be used in *Any* placeholders.
    ArrayOfVmVnicPoolReservationViolationClearEvent(Vec<VmVnicPoolReservationViolationClearEvent>),
    /// A boxed array of *VmVnicPoolReservationViolationRaiseEvent*. To be used in *Any* placeholders.
    ArrayOfVmVnicPoolReservationViolationRaiseEvent(Vec<VmVnicPoolReservationViolationRaiseEvent>),
    /// A boxed array of *VmWwnAssignedEvent*. To be used in *Any* placeholders.
    ArrayOfVmWwnAssignedEvent(Vec<VmWwnAssignedEvent>),
    /// A boxed array of *VmWwnChangedEvent*. To be used in *Any* placeholders.
    ArrayOfVmWwnChangedEvent(Vec<VmWwnChangedEvent>),
    /// A boxed array of *VmWwnConflictEvent*. To be used in *Any* placeholders.
    ArrayOfVmWwnConflictEvent(Vec<VmWwnConflictEvent>),
    /// A boxed array of *VnicPortArgument*. To be used in *Any* placeholders.
    ArrayOfVnicPortArgument(Vec<VnicPortArgument>),
    /// A boxed array of *WarningUpgradeEvent*. To be used in *Any* placeholders.
    ArrayOfWarningUpgradeEvent(Vec<WarningUpgradeEvent>),
    /// A boxed array of *IScsiBootFailureEvent*. To be used in *Any* placeholders.
    ArrayOfIScsiBootFailureEvent(Vec<IScsiBootFailureEvent>),
    /// A boxed array of *ExtExtendedProductInfo*. To be used in *Any* placeholders.
    ArrayOfExtExtendedProductInfo(Vec<ExtExtendedProductInfo>),
    /// A boxed array of *ManagedByInfo*. To be used in *Any* placeholders.
    ArrayOfManagedByInfo(Vec<ManagedByInfo>),
    /// A boxed array of *ExtManagedEntityInfo*. To be used in *Any* placeholders.
    ArrayOfExtManagedEntityInfo(Vec<ExtManagedEntityInfo>),
    /// A boxed array of *ExtSolutionManagerInfo*. To be used in *Any* placeholders.
    ArrayOfExtSolutionManagerInfo(Vec<ExtSolutionManagerInfo>),
    /// A boxed array of *ExtSolutionManagerInfoTabInfo*. To be used in *Any* placeholders.
    ArrayOfExtSolutionManagerInfoTabInfo(Vec<ExtSolutionManagerInfoTabInfo>),
    /// A boxed array of *ActiveDirectoryFault*. To be used in *Any* placeholders.
    ArrayOfActiveDirectoryFault(Vec<Box<dyn super::traits::ActiveDirectoryFaultTrait>>),
    /// A boxed array of *ActiveVMsBlockingEVC*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfActiveVMsBlockingEVC")]
    ArrayOfActiveVMsBlockingEvc(Vec<ActiveVMsBlockingEvc>),
    /// A boxed array of *AdminDisabled*. To be used in *Any* placeholders.
    ArrayOfAdminDisabled(Vec<AdminDisabled>),
    /// A boxed array of *AdminNotDisabled*. To be used in *Any* placeholders.
    ArrayOfAdminNotDisabled(Vec<AdminNotDisabled>),
    /// A boxed array of *AffinityConfigured*. To be used in *Any* placeholders.
    ArrayOfAffinityConfigured(Vec<AffinityConfigured>),
    /// A boxed array of *AgentInstallFailed*. To be used in *Any* placeholders.
    ArrayOfAgentInstallFailed(Vec<AgentInstallFailed>),
    /// A boxed array of *AlreadyBeingManaged*. To be used in *Any* placeholders.
    ArrayOfAlreadyBeingManaged(Vec<AlreadyBeingManaged>),
    /// A boxed array of *AlreadyConnected*. To be used in *Any* placeholders.
    ArrayOfAlreadyConnected(Vec<AlreadyConnected>),
    /// A boxed array of *AlreadyExists*. To be used in *Any* placeholders.
    ArrayOfAlreadyExists(Vec<AlreadyExists>),
    /// A boxed array of *AlreadyUpgraded*. To be used in *Any* placeholders.
    ArrayOfAlreadyUpgraded(Vec<AlreadyUpgraded>),
    /// A boxed array of *AnswerFileUpdateFailed*. To be used in *Any* placeholders.
    ArrayOfAnswerFileUpdateFailed(Vec<AnswerFileUpdateFailed>),
    /// A boxed array of *AnswerFileUpdateFailure*. To be used in *Any* placeholders.
    ArrayOfAnswerFileUpdateFailure(Vec<AnswerFileUpdateFailure>),
    /// A boxed array of *ApplicationQuiesceFault*. To be used in *Any* placeholders.
    ArrayOfApplicationQuiesceFault(Vec<ApplicationQuiesceFault>),
    /// A boxed array of *AuthMinimumAdminPermission*. To be used in *Any* placeholders.
    ArrayOfAuthMinimumAdminPermission(Vec<AuthMinimumAdminPermission>),
    /// A boxed array of *BackupBlobReadFailure*. To be used in *Any* placeholders.
    ArrayOfBackupBlobReadFailure(Vec<BackupBlobReadFailure>),
    /// A boxed array of *BackupBlobWriteFailure*. To be used in *Any* placeholders.
    ArrayOfBackupBlobWriteFailure(Vec<BackupBlobWriteFailure>),
    /// A boxed array of *BlockedByFirewall*. To be used in *Any* placeholders.
    ArrayOfBlockedByFirewall(Vec<BlockedByFirewall>),
    /// A boxed array of *CAMServerRefusedConnection*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfCAMServerRefusedConnection")]
    ArrayOfCamServerRefusedConnection(Vec<CamServerRefusedConnection>),
    /// A boxed array of *CannotAccessFile*. To be used in *Any* placeholders.
    ArrayOfCannotAccessFile(Vec<CannotAccessFile>),
    /// A boxed array of *CannotAccessLocalSource*. To be used in *Any* placeholders.
    ArrayOfCannotAccessLocalSource(Vec<CannotAccessLocalSource>),
    /// A boxed array of *CannotAccessNetwork*. To be used in *Any* placeholders.
    ArrayOfCannotAccessNetwork(Vec<Box<dyn super::traits::CannotAccessNetworkTrait>>),
    /// A boxed array of *CannotAccessVmComponent*. To be used in *Any* placeholders.
    ArrayOfCannotAccessVmComponent(Vec<Box<dyn super::traits::CannotAccessVmComponentTrait>>),
    /// A boxed array of *CannotAccessVmConfig*. To be used in *Any* placeholders.
    ArrayOfCannotAccessVmConfig(Vec<CannotAccessVmConfig>),
    /// A boxed array of *CannotAccessVmDevice*. To be used in *Any* placeholders.
    ArrayOfCannotAccessVmDevice(Vec<Box<dyn super::traits::CannotAccessVmDeviceTrait>>),
    /// A boxed array of *CannotAccessVmDisk*. To be used in *Any* placeholders.
    ArrayOfCannotAccessVmDisk(Vec<Box<dyn super::traits::CannotAccessVmDiskTrait>>),
    /// A boxed array of *CannotAddHostWithFTVmAsStandalone*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfCannotAddHostWithFTVmAsStandalone")]
    ArrayOfCannotAddHostWithFtVmAsStandalone(Vec<CannotAddHostWithFtVmAsStandalone>),
    /// A boxed array of *CannotAddHostWithFTVmToDifferentCluster*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfCannotAddHostWithFTVmToDifferentCluster")]
    ArrayOfCannotAddHostWithFtVmToDifferentCluster(Vec<CannotAddHostWithFtVmToDifferentCluster>),
    /// A boxed array of *CannotAddHostWithFTVmToNonHACluster*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfCannotAddHostWithFTVmToNonHACluster")]
    ArrayOfCannotAddHostWithFtVmToNonHaCluster(Vec<CannotAddHostWithFtVmToNonHaCluster>),
    /// A boxed array of *CannotChangeDrsBehaviorForFtSecondary*. To be used in *Any* placeholders.
    ArrayOfCannotChangeDrsBehaviorForFtSecondary(Vec<CannotChangeDrsBehaviorForFtSecondary>),
    /// A boxed array of *CannotChangeHaSettingsForFtSecondary*. To be used in *Any* placeholders.
    ArrayOfCannotChangeHaSettingsForFtSecondary(Vec<CannotChangeHaSettingsForFtSecondary>),
    /// A boxed array of *CannotChangeVsanClusterUuid*. To be used in *Any* placeholders.
    ArrayOfCannotChangeVsanClusterUuid(Vec<CannotChangeVsanClusterUuid>),
    /// A boxed array of *CannotChangeVsanNodeUuid*. To be used in *Any* placeholders.
    ArrayOfCannotChangeVsanNodeUuid(Vec<CannotChangeVsanNodeUuid>),
    /// A boxed array of *CannotComputeFTCompatibleHosts*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfCannotComputeFTCompatibleHosts")]
    ArrayOfCannotComputeFtCompatibleHosts(Vec<CannotComputeFtCompatibleHosts>),
    /// A boxed array of *CannotCreateFile*. To be used in *Any* placeholders.
    ArrayOfCannotCreateFile(Vec<CannotCreateFile>),
    /// A boxed array of *CannotDecryptPasswords*. To be used in *Any* placeholders.
    ArrayOfCannotDecryptPasswords(Vec<CannotDecryptPasswords>),
    /// A boxed array of *CannotDeleteFile*. To be used in *Any* placeholders.
    ArrayOfCannotDeleteFile(Vec<CannotDeleteFile>),
    /// A boxed array of *CannotDisableDrsOnClustersWithVApps*. To be used in *Any* placeholders.
    ArrayOfCannotDisableDrsOnClustersWithVApps(Vec<CannotDisableDrsOnClustersWithVApps>),
    /// A boxed array of *CannotDisableSnapshot*. To be used in *Any* placeholders.
    ArrayOfCannotDisableSnapshot(Vec<CannotDisableSnapshot>),
    /// A boxed array of *CannotDisconnectHostWithFaultToleranceVm*. To be used in *Any* placeholders.
    ArrayOfCannotDisconnectHostWithFaultToleranceVm(Vec<CannotDisconnectHostWithFaultToleranceVm>),
    /// A boxed array of *CannotEnableVmcpForCluster*. To be used in *Any* placeholders.
    ArrayOfCannotEnableVmcpForCluster(Vec<CannotEnableVmcpForCluster>),
    /// A boxed array of *CannotModifyConfigCpuRequirements*. To be used in *Any* placeholders.
    ArrayOfCannotModifyConfigCpuRequirements(Vec<CannotModifyConfigCpuRequirements>),
    /// A boxed array of *CannotMoveFaultToleranceVm*. To be used in *Any* placeholders.
    ArrayOfCannotMoveFaultToleranceVm(Vec<CannotMoveFaultToleranceVm>),
    /// A boxed array of *CannotMoveHostWithFaultToleranceVm*. To be used in *Any* placeholders.
    ArrayOfCannotMoveHostWithFaultToleranceVm(Vec<CannotMoveHostWithFaultToleranceVm>),
    /// A boxed array of *CannotMoveVmWithDeltaDisk*. To be used in *Any* placeholders.
    ArrayOfCannotMoveVmWithDeltaDisk(Vec<CannotMoveVmWithDeltaDisk>),
    /// A boxed array of *CannotMoveVmWithNativeDeltaDisk*. To be used in *Any* placeholders.
    ArrayOfCannotMoveVmWithNativeDeltaDisk(Vec<CannotMoveVmWithNativeDeltaDisk>),
    /// A boxed array of *CannotMoveVsanEnabledHost*. To be used in *Any* placeholders.
    ArrayOfCannotMoveVsanEnabledHost(Vec<Box<dyn super::traits::CannotMoveVsanEnabledHostTrait>>),
    /// A boxed array of *CannotPlaceWithoutPrerequisiteMoves*. To be used in *Any* placeholders.
    ArrayOfCannotPlaceWithoutPrerequisiteMoves(Vec<CannotPlaceWithoutPrerequisiteMoves>),
    /// A boxed array of *CannotPowerOffVmInCluster*. To be used in *Any* placeholders.
    ArrayOfCannotPowerOffVmInCluster(Vec<CannotPowerOffVmInCluster>),
    /// A boxed array of *CannotReconfigureVsanWhenHaEnabled*. To be used in *Any* placeholders.
    ArrayOfCannotReconfigureVsanWhenHaEnabled(Vec<CannotReconfigureVsanWhenHaEnabled>),
    /// A boxed array of *CannotUseNetwork*. To be used in *Any* placeholders.
    ArrayOfCannotUseNetwork(Vec<CannotUseNetwork>),
    /// A boxed array of *ClockSkew*. To be used in *Any* placeholders.
    ArrayOfClockSkew(Vec<ClockSkew>),
    /// A boxed array of *CloneFromSnapshotNotSupported*. To be used in *Any* placeholders.
    ArrayOfCloneFromSnapshotNotSupported(Vec<CloneFromSnapshotNotSupported>),
    /// A boxed array of *CollectorAddressUnset*. To be used in *Any* placeholders.
    ArrayOfCollectorAddressUnset(Vec<CollectorAddressUnset>),
    /// A boxed array of *ConcurrentAccess*. To be used in *Any* placeholders.
    ArrayOfConcurrentAccess(Vec<ConcurrentAccess>),
    /// A boxed array of *ConflictingConfiguration*. To be used in *Any* placeholders.
    ArrayOfConflictingConfiguration(Vec<ConflictingConfiguration>),
    /// A boxed array of *ConflictingConfigurationConfig*. To be used in *Any* placeholders.
    ArrayOfConflictingConfigurationConfig(Vec<ConflictingConfigurationConfig>),
    /// A boxed array of *ConflictingDatastoreFound*. To be used in *Any* placeholders.
    ArrayOfConflictingDatastoreFound(Vec<ConflictingDatastoreFound>),
    /// A boxed array of *ConnectedIso*. To be used in *Any* placeholders.
    ArrayOfConnectedIso(Vec<ConnectedIso>),
    /// A boxed array of *CpuCompatibilityUnknown*. To be used in *Any* placeholders.
    ArrayOfCpuCompatibilityUnknown(Vec<CpuCompatibilityUnknown>),
    /// A boxed array of *CpuHotPlugNotSupported*. To be used in *Any* placeholders.
    ArrayOfCpuHotPlugNotSupported(Vec<CpuHotPlugNotSupported>),
    /// A boxed array of *CpuIncompatible*. To be used in *Any* placeholders.
    ArrayOfCpuIncompatible(Vec<Box<dyn super::traits::CpuIncompatibleTrait>>),
    /// A boxed array of *CpuIncompatible1ECX*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfCpuIncompatible1ECX")]
    ArrayOfCpuIncompatible1Ecx(Vec<CpuIncompatible1Ecx>),
    /// A boxed array of *CpuIncompatible81EDX*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfCpuIncompatible81EDX")]
    ArrayOfCpuIncompatible81Edx(Vec<CpuIncompatible81Edx>),
    /// A boxed array of *CustomizationFault*. To be used in *Any* placeholders.
    ArrayOfCustomizationFault(Vec<Box<dyn super::traits::CustomizationFaultTrait>>),
    /// A boxed array of *CustomizationPending*. To be used in *Any* placeholders.
    ArrayOfCustomizationPending(Vec<CustomizationPending>),
    /// A boxed array of *DVPortNotSupported*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfDVPortNotSupported")]
    ArrayOfDvPortNotSupported(Vec<DvPortNotSupported>),
    /// A boxed array of *DasConfigFault*. To be used in *Any* placeholders.
    ArrayOfDasConfigFault(Vec<DasConfigFault>),
    /// A boxed array of *DatabaseError*. To be used in *Any* placeholders.
    ArrayOfDatabaseError(Vec<DatabaseError>),
    /// A boxed array of *DatacenterMismatch*. To be used in *Any* placeholders.
    ArrayOfDatacenterMismatch(Vec<DatacenterMismatch>),
    /// A boxed array of *DatacenterMismatchArgument*. To be used in *Any* placeholders.
    ArrayOfDatacenterMismatchArgument(Vec<DatacenterMismatchArgument>),
    /// A boxed array of *DatastoreNotWritableOnHost*. To be used in *Any* placeholders.
    ArrayOfDatastoreNotWritableOnHost(Vec<Box<dyn super::traits::DatastoreNotWritableOnHostTrait>>),
    /// A boxed array of *DeltaDiskFormatNotSupported*. To be used in *Any* placeholders.
    ArrayOfDeltaDiskFormatNotSupported(Vec<DeltaDiskFormatNotSupported>),
    /// A boxed array of *DestinationSwitchFull*. To be used in *Any* placeholders.
    ArrayOfDestinationSwitchFull(Vec<DestinationSwitchFull>),
    /// A boxed array of *DestinationVsanDisabled*. To be used in *Any* placeholders.
    ArrayOfDestinationVsanDisabled(Vec<DestinationVsanDisabled>),
    /// A boxed array of *DeviceBackingNotSupported*. To be used in *Any* placeholders.
    ArrayOfDeviceBackingNotSupported(Vec<Box<dyn super::traits::DeviceBackingNotSupportedTrait>>),
    /// A boxed array of *DeviceControllerNotSupported*. To be used in *Any* placeholders.
    ArrayOfDeviceControllerNotSupported(Vec<DeviceControllerNotSupported>),
    /// A boxed array of *DeviceHotPlugNotSupported*. To be used in *Any* placeholders.
    ArrayOfDeviceHotPlugNotSupported(Vec<DeviceHotPlugNotSupported>),
    /// A boxed array of *DeviceNotFound*. To be used in *Any* placeholders.
    ArrayOfDeviceNotFound(Vec<DeviceNotFound>),
    /// A boxed array of *DeviceNotSupported*. To be used in *Any* placeholders.
    ArrayOfDeviceNotSupported(Vec<Box<dyn super::traits::DeviceNotSupportedTrait>>),
    /// A boxed array of *DeviceUnsupportedForVmPlatform*. To be used in *Any* placeholders.
    ArrayOfDeviceUnsupportedForVmPlatform(Vec<DeviceUnsupportedForVmPlatform>),
    /// A boxed array of *DeviceUnsupportedForVmVersion*. To be used in *Any* placeholders.
    ArrayOfDeviceUnsupportedForVmVersion(Vec<DeviceUnsupportedForVmVersion>),
    /// A boxed array of *DigestNotSupported*. To be used in *Any* placeholders.
    ArrayOfDigestNotSupported(Vec<DigestNotSupported>),
    /// A boxed array of *DirectoryNotEmpty*. To be used in *Any* placeholders.
    ArrayOfDirectoryNotEmpty(Vec<DirectoryNotEmpty>),
    /// A boxed array of *DisableAdminNotSupported*. To be used in *Any* placeholders.
    ArrayOfDisableAdminNotSupported(Vec<DisableAdminNotSupported>),
    /// A boxed array of *DisallowedChangeByService*. To be used in *Any* placeholders.
    ArrayOfDisallowedChangeByService(Vec<DisallowedChangeByService>),
    /// A boxed array of *DisallowedDiskModeChange*. To be used in *Any* placeholders.
    ArrayOfDisallowedDiskModeChange(Vec<DisallowedDiskModeChange>),
    /// A boxed array of *DisallowedMigrationDeviceAttached*. To be used in *Any* placeholders.
    ArrayOfDisallowedMigrationDeviceAttached(Vec<DisallowedMigrationDeviceAttached>),
    /// A boxed array of *DisallowedOperationOnFailoverHost*. To be used in *Any* placeholders.
    ArrayOfDisallowedOperationOnFailoverHost(Vec<DisallowedOperationOnFailoverHost>),
    /// A boxed array of *DisconnectedHostsBlockingEVC*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfDisconnectedHostsBlockingEVC")]
    ArrayOfDisconnectedHostsBlockingEvc(Vec<DisconnectedHostsBlockingEvc>),
    /// A boxed array of *DiskHasPartitions*. To be used in *Any* placeholders.
    ArrayOfDiskHasPartitions(Vec<DiskHasPartitions>),
    /// A boxed array of *DiskIsLastRemainingNonSSD*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfDiskIsLastRemainingNonSSD")]
    ArrayOfDiskIsLastRemainingNonSsd(Vec<DiskIsLastRemainingNonSsd>),
    /// A boxed array of *DiskIsNonLocal*. To be used in *Any* placeholders.
    ArrayOfDiskIsNonLocal(Vec<DiskIsNonLocal>),
    /// A boxed array of *DiskIsUSB*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfDiskIsUSB")]
    ArrayOfDiskIsUsb(Vec<DiskIsUsb>),
    /// A boxed array of *DiskMoveTypeNotSupported*. To be used in *Any* placeholders.
    ArrayOfDiskMoveTypeNotSupported(Vec<DiskMoveTypeNotSupported>),
    /// A boxed array of *DiskNotSupported*. To be used in *Any* placeholders.
    ArrayOfDiskNotSupported(Vec<Box<dyn super::traits::DiskNotSupportedTrait>>),
    /// A boxed array of *DiskTooSmall*. To be used in *Any* placeholders.
    ArrayOfDiskTooSmall(Vec<DiskTooSmall>),
    /// A boxed array of *DomainNotFound*. To be used in *Any* placeholders.
    ArrayOfDomainNotFound(Vec<DomainNotFound>),
    /// A boxed array of *DrsDisabledOnVm*. To be used in *Any* placeholders.
    ArrayOfDrsDisabledOnVm(Vec<DrsDisabledOnVm>),
    /// A boxed array of *DrsVmotionIncompatibleFault*. To be used in *Any* placeholders.
    ArrayOfDrsVmotionIncompatibleFault(Vec<DrsVmotionIncompatibleFault>),
    /// A boxed array of *DuplicateDisks*. To be used in *Any* placeholders.
    ArrayOfDuplicateDisks(Vec<DuplicateDisks>),
    /// A boxed array of *DuplicateName*. To be used in *Any* placeholders.
    ArrayOfDuplicateName(Vec<DuplicateName>),
    /// A boxed array of *DuplicateVsanNetworkInterface*. To be used in *Any* placeholders.
    ArrayOfDuplicateVsanNetworkInterface(Vec<DuplicateVsanNetworkInterface>),
    /// A boxed array of *DvsApplyOperationFault*. To be used in *Any* placeholders.
    ArrayOfDvsApplyOperationFault(Vec<DvsApplyOperationFault>),
    /// A boxed array of *DvsApplyOperationFaultFaultOnObject*. To be used in *Any* placeholders.
    ArrayOfDvsApplyOperationFaultFaultOnObject(Vec<DvsApplyOperationFaultFaultOnObject>),
    /// A boxed array of *DvsFault*. To be used in *Any* placeholders.
    ArrayOfDvsFault(Vec<Box<dyn super::traits::DvsFaultTrait>>),
    /// A boxed array of *DvsNotAuthorized*. To be used in *Any* placeholders.
    ArrayOfDvsNotAuthorized(Vec<DvsNotAuthorized>),
    /// A boxed array of *DvsOperationBulkFault*. To be used in *Any* placeholders.
    ArrayOfDvsOperationBulkFault(Vec<DvsOperationBulkFault>),
    /// A boxed array of *DvsOperationBulkFaultFaultOnHost*. To be used in *Any* placeholders.
    ArrayOfDvsOperationBulkFaultFaultOnHost(Vec<DvsOperationBulkFaultFaultOnHost>),
    /// A boxed array of *DvsScopeViolated*. To be used in *Any* placeholders.
    ArrayOfDvsScopeViolated(Vec<DvsScopeViolated>),
    /// A boxed array of *EVCAdmissionFailed*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfEVCAdmissionFailed")]
    ArrayOfEvcAdmissionFailed(Vec<Box<dyn super::traits::EvcAdmissionFailedTrait>>),
    /// A boxed array of *EVCAdmissionFailedCPUFeaturesForMode*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfEVCAdmissionFailedCPUFeaturesForMode")]
    ArrayOfEvcAdmissionFailedCpuFeaturesForMode(Vec<EvcAdmissionFailedCpuFeaturesForMode>),
    /// A boxed array of *EVCAdmissionFailedCPUModel*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfEVCAdmissionFailedCPUModel")]
    ArrayOfEvcAdmissionFailedCpuModel(Vec<EvcAdmissionFailedCpuModel>),
    /// A boxed array of *EVCAdmissionFailedCPUModelForMode*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfEVCAdmissionFailedCPUModelForMode")]
    ArrayOfEvcAdmissionFailedCpuModelForMode(Vec<EvcAdmissionFailedCpuModelForMode>),
    /// A boxed array of *EVCAdmissionFailedCPUVendor*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfEVCAdmissionFailedCPUVendor")]
    ArrayOfEvcAdmissionFailedCpuVendor(Vec<EvcAdmissionFailedCpuVendor>),
    /// A boxed array of *EVCAdmissionFailedCPUVendorUnknown*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfEVCAdmissionFailedCPUVendorUnknown")]
    ArrayOfEvcAdmissionFailedCpuVendorUnknown(Vec<EvcAdmissionFailedCpuVendorUnknown>),
    /// A boxed array of *EVCAdmissionFailedHostDisconnected*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfEVCAdmissionFailedHostDisconnected")]
    ArrayOfEvcAdmissionFailedHostDisconnected(Vec<EvcAdmissionFailedHostDisconnected>),
    /// A boxed array of *EVCAdmissionFailedHostSoftware*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfEVCAdmissionFailedHostSoftware")]
    ArrayOfEvcAdmissionFailedHostSoftware(Vec<EvcAdmissionFailedHostSoftware>),
    /// A boxed array of *EVCAdmissionFailedHostSoftwareForMode*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfEVCAdmissionFailedHostSoftwareForMode")]
    ArrayOfEvcAdmissionFailedHostSoftwareForMode(Vec<EvcAdmissionFailedHostSoftwareForMode>),
    /// A boxed array of *EVCAdmissionFailedVmActive*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfEVCAdmissionFailedVmActive")]
    ArrayOfEvcAdmissionFailedVmActive(Vec<EvcAdmissionFailedVmActive>),
    /// A boxed array of *EVCConfigFault*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfEVCConfigFault")]
    ArrayOfEvcConfigFault(Vec<Box<dyn super::traits::EvcConfigFaultTrait>>),
    /// A boxed array of *EVCModeIllegalByVendor*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfEVCModeIllegalByVendor")]
    ArrayOfEvcModeIllegalByVendor(Vec<EvcModeIllegalByVendor>),
    /// A boxed array of *EVCModeUnsupportedByHosts*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfEVCModeUnsupportedByHosts")]
    ArrayOfEvcModeUnsupportedByHosts(Vec<EvcModeUnsupportedByHosts>),
    /// A boxed array of *EVCUnsupportedByHostHardware*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfEVCUnsupportedByHostHardware")]
    ArrayOfEvcUnsupportedByHostHardware(Vec<EvcUnsupportedByHostHardware>),
    /// A boxed array of *EVCUnsupportedByHostSoftware*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfEVCUnsupportedByHostSoftware")]
    ArrayOfEvcUnsupportedByHostSoftware(Vec<EvcUnsupportedByHostSoftware>),
    /// A boxed array of *EightHostLimitViolated*. To be used in *Any* placeholders.
    ArrayOfEightHostLimitViolated(Vec<EightHostLimitViolated>),
    /// A boxed array of *EncryptionKeyRequired*. To be used in *Any* placeholders.
    ArrayOfEncryptionKeyRequired(Vec<EncryptionKeyRequired>),
    /// A boxed array of *ExpiredAddonLicense*. To be used in *Any* placeholders.
    ArrayOfExpiredAddonLicense(Vec<ExpiredAddonLicense>),
    /// A boxed array of *ExpiredEditionLicense*. To be used in *Any* placeholders.
    ArrayOfExpiredEditionLicense(Vec<ExpiredEditionLicense>),
    /// A boxed array of *ExpiredFeatureLicense*. To be used in *Any* placeholders.
    ArrayOfExpiredFeatureLicense(Vec<Box<dyn super::traits::ExpiredFeatureLicenseTrait>>),
    /// A boxed array of *ExtendedFault*. To be used in *Any* placeholders.
    ArrayOfExtendedFault(Vec<ExtendedFault>),
    /// A boxed array of *FailToEnableSPBM*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfFailToEnableSPBM")]
    ArrayOfFailToEnableSpbm(Vec<FailToEnableSpbm>),
    /// A boxed array of *FailToLockFaultToleranceVMs*. To be used in *Any* placeholders.
    ArrayOfFailToLockFaultToleranceVMs(Vec<FailToLockFaultToleranceVMs>),
    /// A boxed array of *FaultToleranceAntiAffinityViolated*. To be used in *Any* placeholders.
    ArrayOfFaultToleranceAntiAffinityViolated(Vec<FaultToleranceAntiAffinityViolated>),
    /// A boxed array of *FaultToleranceCannotEditMem*. To be used in *Any* placeholders.
    ArrayOfFaultToleranceCannotEditMem(Vec<FaultToleranceCannotEditMem>),
    /// A boxed array of *FaultToleranceCpuIncompatible*. To be used in *Any* placeholders.
    ArrayOfFaultToleranceCpuIncompatible(Vec<FaultToleranceCpuIncompatible>),
    /// A boxed array of *FaultToleranceNeedsThickDisk*. To be used in *Any* placeholders.
    ArrayOfFaultToleranceNeedsThickDisk(Vec<FaultToleranceNeedsThickDisk>),
    /// A boxed array of *FaultToleranceNotLicensed*. To be used in *Any* placeholders.
    ArrayOfFaultToleranceNotLicensed(Vec<FaultToleranceNotLicensed>),
    /// A boxed array of *FaultToleranceNotSameBuild*. To be used in *Any* placeholders.
    ArrayOfFaultToleranceNotSameBuild(Vec<FaultToleranceNotSameBuild>),
    /// A boxed array of *FaultTolerancePrimaryPowerOnNotAttempted*. To be used in *Any* placeholders.
    ArrayOfFaultTolerancePrimaryPowerOnNotAttempted(Vec<FaultTolerancePrimaryPowerOnNotAttempted>),
    /// A boxed array of *FaultToleranceVmNotDasProtected*. To be used in *Any* placeholders.
    ArrayOfFaultToleranceVmNotDasProtected(Vec<FaultToleranceVmNotDasProtected>),
    /// A boxed array of *FcoeFault*. To be used in *Any* placeholders.
    ArrayOfFcoeFault(Vec<Box<dyn super::traits::FcoeFaultTrait>>),
    /// A boxed array of *FcoeFaultPnicHasNoPortSet*. To be used in *Any* placeholders.
    ArrayOfFcoeFaultPnicHasNoPortSet(Vec<FcoeFaultPnicHasNoPortSet>),
    /// A boxed array of *FeatureRequirementsNotMet*. To be used in *Any* placeholders.
    ArrayOfFeatureRequirementsNotMet(Vec<FeatureRequirementsNotMet>),
    /// A boxed array of *FileAlreadyExists*. To be used in *Any* placeholders.
    ArrayOfFileAlreadyExists(Vec<FileAlreadyExists>),
    /// A boxed array of *FileBackedPortNotSupported*. To be used in *Any* placeholders.
    ArrayOfFileBackedPortNotSupported(Vec<FileBackedPortNotSupported>),
    /// A boxed array of *FileFault*. To be used in *Any* placeholders.
    ArrayOfFileFault(Vec<Box<dyn super::traits::FileFaultTrait>>),
    /// A boxed array of *FileLocked*. To be used in *Any* placeholders.
    ArrayOfFileLocked(Vec<FileLocked>),
    /// A boxed array of *FileNameTooLong*. To be used in *Any* placeholders.
    ArrayOfFileNameTooLong(Vec<FileNameTooLong>),
    /// A boxed array of *FileNotFound*. To be used in *Any* placeholders.
    ArrayOfFileNotFound(Vec<FileNotFound>),
    /// A boxed array of *FileNotWritable*. To be used in *Any* placeholders.
    ArrayOfFileNotWritable(Vec<FileNotWritable>),
    /// A boxed array of *FileTooLarge*. To be used in *Any* placeholders.
    ArrayOfFileTooLarge(Vec<FileTooLarge>),
    /// A boxed array of *FilesystemQuiesceFault*. To be used in *Any* placeholders.
    ArrayOfFilesystemQuiesceFault(Vec<FilesystemQuiesceFault>),
    /// A boxed array of *FilterInUse*. To be used in *Any* placeholders.
    ArrayOfFilterInUse(Vec<FilterInUse>),
    /// A boxed array of *FtIssuesOnHost*. To be used in *Any* placeholders.
    ArrayOfFtIssuesOnHost(Vec<FtIssuesOnHost>),
    /// A boxed array of *FullStorageVMotionNotSupported*. To be used in *Any* placeholders.
    ArrayOfFullStorageVMotionNotSupported(Vec<FullStorageVMotionNotSupported>),
    /// A boxed array of *GatewayConnectFault*. To be used in *Any* placeholders.
    ArrayOfGatewayConnectFault(Vec<Box<dyn super::traits::GatewayConnectFaultTrait>>),
    /// A boxed array of *GatewayHostNotReachable*. To be used in *Any* placeholders.
    ArrayOfGatewayHostNotReachable(Vec<GatewayHostNotReachable>),
    /// A boxed array of *GatewayNotFound*. To be used in *Any* placeholders.
    ArrayOfGatewayNotFound(Vec<GatewayNotFound>),
    /// A boxed array of *GatewayNotReachable*. To be used in *Any* placeholders.
    ArrayOfGatewayNotReachable(Vec<GatewayNotReachable>),
    /// A boxed array of *GatewayOperationRefused*. To be used in *Any* placeholders.
    ArrayOfGatewayOperationRefused(Vec<GatewayOperationRefused>),
    /// A boxed array of *GatewayToHostAuthFault*. To be used in *Any* placeholders.
    ArrayOfGatewayToHostAuthFault(Vec<GatewayToHostAuthFault>),
    /// A boxed array of *GatewayToHostConnectFault*. To be used in *Any* placeholders.
    ArrayOfGatewayToHostConnectFault(Vec<Box<dyn super::traits::GatewayToHostConnectFaultTrait>>),
    /// A boxed array of *GatewayToHostTrustVerifyFault*. To be used in *Any* placeholders.
    ArrayOfGatewayToHostTrustVerifyFault(Vec<GatewayToHostTrustVerifyFault>),
    /// A boxed array of *GenericDrsFault*. To be used in *Any* placeholders.
    ArrayOfGenericDrsFault(Vec<GenericDrsFault>),
    /// A boxed array of *GenericVmConfigFault*. To be used in *Any* placeholders.
    ArrayOfGenericVmConfigFault(Vec<GenericVmConfigFault>),
    /// A boxed array of *GuestAuthenticationChallenge*. To be used in *Any* placeholders.
    ArrayOfGuestAuthenticationChallenge(Vec<GuestAuthenticationChallenge>),
    /// A boxed array of *GuestComponentsOutOfDate*. To be used in *Any* placeholders.
    ArrayOfGuestComponentsOutOfDate(Vec<GuestComponentsOutOfDate>),
    /// A boxed array of *GuestMultipleMappings*. To be used in *Any* placeholders.
    ArrayOfGuestMultipleMappings(Vec<GuestMultipleMappings>),
    /// A boxed array of *GuestOperationsFault*. To be used in *Any* placeholders.
    ArrayOfGuestOperationsFault(Vec<Box<dyn super::traits::GuestOperationsFaultTrait>>),
    /// A boxed array of *GuestOperationsUnavailable*. To be used in *Any* placeholders.
    ArrayOfGuestOperationsUnavailable(Vec<GuestOperationsUnavailable>),
    /// A boxed array of *GuestPermissionDenied*. To be used in *Any* placeholders.
    ArrayOfGuestPermissionDenied(Vec<GuestPermissionDenied>),
    /// A boxed array of *GuestProcessNotFound*. To be used in *Any* placeholders.
    ArrayOfGuestProcessNotFound(Vec<GuestProcessNotFound>),
    /// A boxed array of *GuestRegistryFault*. To be used in *Any* placeholders.
    ArrayOfGuestRegistryFault(Vec<Box<dyn super::traits::GuestRegistryFaultTrait>>),
    /// A boxed array of *GuestRegistryKeyAlreadyExists*. To be used in *Any* placeholders.
    ArrayOfGuestRegistryKeyAlreadyExists(Vec<GuestRegistryKeyAlreadyExists>),
    /// A boxed array of *GuestRegistryKeyFault*. To be used in *Any* placeholders.
    ArrayOfGuestRegistryKeyFault(Vec<Box<dyn super::traits::GuestRegistryKeyFaultTrait>>),
    /// A boxed array of *GuestRegistryKeyHasSubkeys*. To be used in *Any* placeholders.
    ArrayOfGuestRegistryKeyHasSubkeys(Vec<GuestRegistryKeyHasSubkeys>),
    /// A boxed array of *GuestRegistryKeyInvalid*. To be used in *Any* placeholders.
    ArrayOfGuestRegistryKeyInvalid(Vec<GuestRegistryKeyInvalid>),
    /// A boxed array of *GuestRegistryKeyParentVolatile*. To be used in *Any* placeholders.
    ArrayOfGuestRegistryKeyParentVolatile(Vec<GuestRegistryKeyParentVolatile>),
    /// A boxed array of *GuestRegistryValueFault*. To be used in *Any* placeholders.
    ArrayOfGuestRegistryValueFault(Vec<Box<dyn super::traits::GuestRegistryValueFaultTrait>>),
    /// A boxed array of *GuestRegistryValueNotFound*. To be used in *Any* placeholders.
    ArrayOfGuestRegistryValueNotFound(Vec<GuestRegistryValueNotFound>),
    /// A boxed array of *HAErrorsAtDest*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfHAErrorsAtDest")]
    ArrayOfHaErrorsAtDest(Vec<HaErrorsAtDest>),
    /// A boxed array of *HeterogenousHostsBlockingEVC*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfHeterogenousHostsBlockingEVC")]
    ArrayOfHeterogenousHostsBlockingEvc(Vec<HeterogenousHostsBlockingEvc>),
    /// A boxed array of *HostAccessRestrictedToManagementServer*. To be used in *Any* placeholders.
    ArrayOfHostAccessRestrictedToManagementServer(Vec<HostAccessRestrictedToManagementServer>),
    /// A boxed array of *HostConfigFailed*. To be used in *Any* placeholders.
    ArrayOfHostConfigFailed(Vec<HostConfigFailed>),
    /// A boxed array of *HostConfigFault*. To be used in *Any* placeholders.
    ArrayOfHostConfigFault(Vec<Box<dyn super::traits::HostConfigFaultTrait>>),
    /// A boxed array of *HostConnectFault*. To be used in *Any* placeholders.
    ArrayOfHostConnectFault(Vec<Box<dyn super::traits::HostConnectFaultTrait>>),
    /// A boxed array of *HostHasComponentFailure*. To be used in *Any* placeholders.
    ArrayOfHostHasComponentFailure(Vec<HostHasComponentFailure>),
    /// A boxed array of *HostInDomain*. To be used in *Any* placeholders.
    ArrayOfHostInDomain(Vec<HostInDomain>),
    /// A boxed array of *HostIncompatibleForFaultTolerance*. To be used in *Any* placeholders.
    ArrayOfHostIncompatibleForFaultTolerance(Vec<HostIncompatibleForFaultTolerance>),
    /// A boxed array of *HostIncompatibleForRecordReplay*. To be used in *Any* placeholders.
    ArrayOfHostIncompatibleForRecordReplay(Vec<HostIncompatibleForRecordReplay>),
    /// A boxed array of *HostInventoryFull*. To be used in *Any* placeholders.
    ArrayOfHostInventoryFull(Vec<HostInventoryFull>),
    /// A boxed array of *HostPowerOpFailed*. To be used in *Any* placeholders.
    ArrayOfHostPowerOpFailed(Vec<Box<dyn super::traits::HostPowerOpFailedTrait>>),
    /// A boxed array of *HostSpecificationOperationFailed*. To be used in *Any* placeholders.
    ArrayOfHostSpecificationOperationFailed(Vec<HostSpecificationOperationFailed>),
    /// A boxed array of *HotSnapshotMoveNotSupported*. To be used in *Any* placeholders.
    ArrayOfHotSnapshotMoveNotSupported(Vec<HotSnapshotMoveNotSupported>),
    /// A boxed array of *HttpFault*. To be used in *Any* placeholders.
    ArrayOfHttpFault(Vec<HttpFault>),
    /// A boxed array of *IDEDiskNotSupported*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfIDEDiskNotSupported")]
    ArrayOfIdeDiskNotSupported(Vec<IdeDiskNotSupported>),
    /// A boxed array of *IORMNotSupportedHostOnDatastore*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfIORMNotSupportedHostOnDatastore")]
    ArrayOfIormNotSupportedHostOnDatastore(Vec<IormNotSupportedHostOnDatastore>),
    /// A boxed array of *ImportHostAddFailure*. To be used in *Any* placeholders.
    ArrayOfImportHostAddFailure(Vec<ImportHostAddFailure>),
    /// A boxed array of *ImportOperationBulkFault*. To be used in *Any* placeholders.
    ArrayOfImportOperationBulkFault(Vec<ImportOperationBulkFault>),
    /// A boxed array of *ImportOperationBulkFaultFaultOnImport*. To be used in *Any* placeholders.
    ArrayOfImportOperationBulkFaultFaultOnImport(Vec<ImportOperationBulkFaultFaultOnImport>),
    /// A boxed array of *InUseFeatureManipulationDisallowed*. To be used in *Any* placeholders.
    ArrayOfInUseFeatureManipulationDisallowed(Vec<InUseFeatureManipulationDisallowed>),
    /// A boxed array of *InaccessibleDatastore*. To be used in *Any* placeholders.
    ArrayOfInaccessibleDatastore(Vec<Box<dyn super::traits::InaccessibleDatastoreTrait>>),
    /// A boxed array of *InaccessibleFTMetadataDatastore*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfInaccessibleFTMetadataDatastore")]
    ArrayOfInaccessibleFtMetadataDatastore(Vec<InaccessibleFtMetadataDatastore>),
    /// A boxed array of *InaccessibleVFlashSource*. To be used in *Any* placeholders.
    ArrayOfInaccessibleVFlashSource(Vec<InaccessibleVFlashSource>),
    /// A boxed array of *IncompatibleDefaultDevice*. To be used in *Any* placeholders.
    ArrayOfIncompatibleDefaultDevice(Vec<IncompatibleDefaultDevice>),
    /// A boxed array of *IncompatibleHostForFtSecondary*. To be used in *Any* placeholders.
    ArrayOfIncompatibleHostForFtSecondary(Vec<IncompatibleHostForFtSecondary>),
    /// A boxed array of *IncompatibleHostForVmReplication*. To be used in *Any* placeholders.
    ArrayOfIncompatibleHostForVmReplication(Vec<IncompatibleHostForVmReplication>),
    /// A boxed array of *IncompatibleSetting*. To be used in *Any* placeholders.
    ArrayOfIncompatibleSetting(Vec<IncompatibleSetting>),
    /// A boxed array of *IncorrectFileType*. To be used in *Any* placeholders.
    ArrayOfIncorrectFileType(Vec<IncorrectFileType>),
    /// A boxed array of *IncorrectHostInformation*. To be used in *Any* placeholders.
    ArrayOfIncorrectHostInformation(Vec<IncorrectHostInformation>),
    /// A boxed array of *IndependentDiskVMotionNotSupported*. To be used in *Any* placeholders.
    ArrayOfIndependentDiskVMotionNotSupported(Vec<IndependentDiskVMotionNotSupported>),
    /// A boxed array of *InsufficientAgentVmsDeployed*. To be used in *Any* placeholders.
    ArrayOfInsufficientAgentVmsDeployed(Vec<InsufficientAgentVmsDeployed>),
    /// A boxed array of *InsufficientCpuResourcesFault*. To be used in *Any* placeholders.
    ArrayOfInsufficientCpuResourcesFault(Vec<InsufficientCpuResourcesFault>),
    /// A boxed array of *InsufficientDisks*. To be used in *Any* placeholders.
    ArrayOfInsufficientDisks(Vec<InsufficientDisks>),
    /// A boxed array of *InsufficientFailoverResourcesFault*. To be used in *Any* placeholders.
    ArrayOfInsufficientFailoverResourcesFault(Vec<InsufficientFailoverResourcesFault>),
    /// A boxed array of *InsufficientGraphicsResourcesFault*. To be used in *Any* placeholders.
    ArrayOfInsufficientGraphicsResourcesFault(Vec<InsufficientGraphicsResourcesFault>),
    /// A boxed array of *InsufficientHostCapacityFault*. To be used in *Any* placeholders.
    ArrayOfInsufficientHostCapacityFault(Vec<Box<dyn super::traits::InsufficientHostCapacityFaultTrait>>),
    /// A boxed array of *InsufficientHostCpuCapacityFault*. To be used in *Any* placeholders.
    ArrayOfInsufficientHostCpuCapacityFault(Vec<InsufficientHostCpuCapacityFault>),
    /// A boxed array of *InsufficientHostMemoryCapacityFault*. To be used in *Any* placeholders.
    ArrayOfInsufficientHostMemoryCapacityFault(Vec<InsufficientHostMemoryCapacityFault>),
    /// A boxed array of *InsufficientMemoryResourcesFault*. To be used in *Any* placeholders.
    ArrayOfInsufficientMemoryResourcesFault(Vec<InsufficientMemoryResourcesFault>),
    /// A boxed array of *InsufficientNetworkCapacity*. To be used in *Any* placeholders.
    ArrayOfInsufficientNetworkCapacity(Vec<InsufficientNetworkCapacity>),
    /// A boxed array of *InsufficientNetworkResourcePoolCapacity*. To be used in *Any* placeholders.
    ArrayOfInsufficientNetworkResourcePoolCapacity(Vec<InsufficientNetworkResourcePoolCapacity>),
    /// A boxed array of *InsufficientPerCpuCapacity*. To be used in *Any* placeholders.
    ArrayOfInsufficientPerCpuCapacity(Vec<InsufficientPerCpuCapacity>),
    /// A boxed array of *InsufficientResourcesFault*. To be used in *Any* placeholders.
    ArrayOfInsufficientResourcesFault(Vec<Box<dyn super::traits::InsufficientResourcesFaultTrait>>),
    /// A boxed array of *InsufficientStandbyCpuResource*. To be used in *Any* placeholders.
    ArrayOfInsufficientStandbyCpuResource(Vec<InsufficientStandbyCpuResource>),
    /// A boxed array of *InsufficientStandbyMemoryResource*. To be used in *Any* placeholders.
    ArrayOfInsufficientStandbyMemoryResource(Vec<InsufficientStandbyMemoryResource>),
    /// A boxed array of *InsufficientStandbyResource*. To be used in *Any* placeholders.
    ArrayOfInsufficientStandbyResource(Vec<Box<dyn super::traits::InsufficientStandbyResourceTrait>>),
    /// A boxed array of *InsufficientStorageIops*. To be used in *Any* placeholders.
    ArrayOfInsufficientStorageIops(Vec<InsufficientStorageIops>),
    /// A boxed array of *InsufficientStorageSpace*. To be used in *Any* placeholders.
    ArrayOfInsufficientStorageSpace(Vec<InsufficientStorageSpace>),
    /// A boxed array of *InsufficientVFlashResourcesFault*. To be used in *Any* placeholders.
    ArrayOfInsufficientVFlashResourcesFault(Vec<InsufficientVFlashResourcesFault>),
    /// A boxed array of *InvalidAffinitySettingFault*. To be used in *Any* placeholders.
    ArrayOfInvalidAffinitySettingFault(Vec<InvalidAffinitySettingFault>),
    /// A boxed array of *InvalidBmcRole*. To be used in *Any* placeholders.
    ArrayOfInvalidBmcRole(Vec<InvalidBmcRole>),
    /// A boxed array of *InvalidBundle*. To be used in *Any* placeholders.
    ArrayOfInvalidBundle(Vec<InvalidBundle>),
    /// A boxed array of *InvalidCAMCertificate*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfInvalidCAMCertificate")]
    ArrayOfInvalidCamCertificate(Vec<InvalidCamCertificate>),
    /// A boxed array of *InvalidCAMServer*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfInvalidCAMServer")]
    ArrayOfInvalidCamServer(Vec<Box<dyn super::traits::InvalidCamServerTrait>>),
    /// A boxed array of *InvalidClientCertificate*. To be used in *Any* placeholders.
    ArrayOfInvalidClientCertificate(Vec<InvalidClientCertificate>),
    /// A boxed array of *InvalidController*. To be used in *Any* placeholders.
    ArrayOfInvalidController(Vec<InvalidController>),
    /// A boxed array of *InvalidDasConfigArgument*. To be used in *Any* placeholders.
    ArrayOfInvalidDasConfigArgument(Vec<InvalidDasConfigArgument>),
    /// A boxed array of *InvalidDasRestartPriorityForFtVm*. To be used in *Any* placeholders.
    ArrayOfInvalidDasRestartPriorityForFtVm(Vec<InvalidDasRestartPriorityForFtVm>),
    /// A boxed array of *InvalidDatastore*. To be used in *Any* placeholders.
    ArrayOfInvalidDatastore(Vec<Box<dyn super::traits::InvalidDatastoreTrait>>),
    /// A boxed array of *InvalidDatastorePath*. To be used in *Any* placeholders.
    ArrayOfInvalidDatastorePath(Vec<InvalidDatastorePath>),
    /// A boxed array of *InvalidDatastoreState*. To be used in *Any* placeholders.
    ArrayOfInvalidDatastoreState(Vec<InvalidDatastoreState>),
    /// A boxed array of *InvalidDeviceBacking*. To be used in *Any* placeholders.
    ArrayOfInvalidDeviceBacking(Vec<InvalidDeviceBacking>),
    /// A boxed array of *InvalidDeviceOperation*. To be used in *Any* placeholders.
    ArrayOfInvalidDeviceOperation(Vec<InvalidDeviceOperation>),
    /// A boxed array of *InvalidDeviceSpec*. To be used in *Any* placeholders.
    ArrayOfInvalidDeviceSpec(Vec<Box<dyn super::traits::InvalidDeviceSpecTrait>>),
    /// A boxed array of *InvalidDiskFormat*. To be used in *Any* placeholders.
    ArrayOfInvalidDiskFormat(Vec<InvalidDiskFormat>),
    /// A boxed array of *InvalidDrsBehaviorForFtVm*. To be used in *Any* placeholders.
    ArrayOfInvalidDrsBehaviorForFtVm(Vec<InvalidDrsBehaviorForFtVm>),
    /// A boxed array of *InvalidEditionLicense*. To be used in *Any* placeholders.
    ArrayOfInvalidEditionLicense(Vec<InvalidEditionLicense>),
    /// A boxed array of *InvalidEvent*. To be used in *Any* placeholders.
    ArrayOfInvalidEvent(Vec<InvalidEvent>),
    /// A boxed array of *InvalidFolder*. To be used in *Any* placeholders.
    ArrayOfInvalidFolder(Vec<Box<dyn super::traits::InvalidFolderTrait>>),
    /// A boxed array of *InvalidFormat*. To be used in *Any* placeholders.
    ArrayOfInvalidFormat(Vec<Box<dyn super::traits::InvalidFormatTrait>>),
    /// A boxed array of *InvalidGuestLogin*. To be used in *Any* placeholders.
    ArrayOfInvalidGuestLogin(Vec<InvalidGuestLogin>),
    /// A boxed array of *InvalidHostConnectionState*. To be used in *Any* placeholders.
    ArrayOfInvalidHostConnectionState(Vec<InvalidHostConnectionState>),
    /// A boxed array of *InvalidHostName*. To be used in *Any* placeholders.
    ArrayOfInvalidHostName(Vec<InvalidHostName>),
    /// A boxed array of *InvalidHostState*. To be used in *Any* placeholders.
    ArrayOfInvalidHostState(Vec<Box<dyn super::traits::InvalidHostStateTrait>>),
    /// A boxed array of *InvalidIndexArgument*. To be used in *Any* placeholders.
    ArrayOfInvalidIndexArgument(Vec<InvalidIndexArgument>),
    /// A boxed array of *InvalidIpfixConfig*. To be used in *Any* placeholders.
    ArrayOfInvalidIpfixConfig(Vec<InvalidIpfixConfig>),
    /// A boxed array of *InvalidIpmiLoginInfo*. To be used in *Any* placeholders.
    ArrayOfInvalidIpmiLoginInfo(Vec<InvalidIpmiLoginInfo>),
    /// A boxed array of *InvalidIpmiMacAddress*. To be used in *Any* placeholders.
    ArrayOfInvalidIpmiMacAddress(Vec<InvalidIpmiMacAddress>),
    /// A boxed array of *InvalidLicense*. To be used in *Any* placeholders.
    ArrayOfInvalidLicense(Vec<InvalidLicense>),
    /// A boxed array of *InvalidLocale*. To be used in *Any* placeholders.
    ArrayOfInvalidLocale(Vec<InvalidLocale>),
    /// A boxed array of *InvalidLogin*. To be used in *Any* placeholders.
    ArrayOfInvalidLogin(Vec<Box<dyn super::traits::InvalidLoginTrait>>),
    /// A boxed array of *InvalidName*. To be used in *Any* placeholders.
    ArrayOfInvalidName(Vec<InvalidName>),
    /// A boxed array of *InvalidNasCredentials*. To be used in *Any* placeholders.
    ArrayOfInvalidNasCredentials(Vec<InvalidNasCredentials>),
    /// A boxed array of *InvalidNetworkInType*. To be used in *Any* placeholders.
    ArrayOfInvalidNetworkInType(Vec<InvalidNetworkInType>),
    /// A boxed array of *InvalidNetworkResource*. To be used in *Any* placeholders.
    ArrayOfInvalidNetworkResource(Vec<InvalidNetworkResource>),
    /// A boxed array of *InvalidOperationOnSecondaryVm*. To be used in *Any* placeholders.
    ArrayOfInvalidOperationOnSecondaryVm(Vec<InvalidOperationOnSecondaryVm>),
    /// A boxed array of *InvalidPowerState*. To be used in *Any* placeholders.
    ArrayOfInvalidPowerState(Vec<InvalidPowerState>),
    /// A boxed array of *InvalidPrivilege*. To be used in *Any* placeholders.
    ArrayOfInvalidPrivilege(Vec<InvalidPrivilege>),
    /// A boxed array of *InvalidProfileReferenceHost*. To be used in *Any* placeholders.
    ArrayOfInvalidProfileReferenceHost(Vec<InvalidProfileReferenceHost>),
    /// A boxed array of *InvalidPropertyType*. To be used in *Any* placeholders.
    ArrayOfInvalidPropertyType(Vec<InvalidPropertyType>),
    /// A boxed array of *InvalidPropertyValue*. To be used in *Any* placeholders.
    ArrayOfInvalidPropertyValue(Vec<Box<dyn super::traits::InvalidPropertyValueTrait>>),
    /// A boxed array of *InvalidResourcePoolStructureFault*. To be used in *Any* placeholders.
    ArrayOfInvalidResourcePoolStructureFault(Vec<InvalidResourcePoolStructureFault>),
    /// A boxed array of *InvalidScheduledTask*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 8.0.2.0
    ArrayOfInvalidScheduledTask(Vec<InvalidScheduledTask>),
    /// A boxed array of *InvalidSnapshotFormat*. To be used in *Any* placeholders.
    ArrayOfInvalidSnapshotFormat(Vec<InvalidSnapshotFormat>),
    /// A boxed array of *InvalidState*. To be used in *Any* placeholders.
    ArrayOfInvalidState(Vec<Box<dyn super::traits::InvalidStateTrait>>),
    /// A boxed array of *InvalidVmConfig*. To be used in *Any* placeholders.
    ArrayOfInvalidVmConfig(Vec<Box<dyn super::traits::InvalidVmConfigTrait>>),
    /// A boxed array of *InvalidVmState*. To be used in *Any* placeholders.
    ArrayOfInvalidVmState(Vec<InvalidVmState>),
    /// A boxed array of *InventoryHasStandardAloneHosts*. To be used in *Any* placeholders.
    ArrayOfInventoryHasStandardAloneHosts(Vec<InventoryHasStandardAloneHosts>),
    /// A boxed array of *IpHostnameGeneratorError*. To be used in *Any* placeholders.
    ArrayOfIpHostnameGeneratorError(Vec<IpHostnameGeneratorError>),
    /// A boxed array of *IscsiFault*. To be used in *Any* placeholders.
    ArrayOfIscsiFault(Vec<Box<dyn super::traits::IscsiFaultTrait>>),
    /// A boxed array of *IscsiFaultInvalidVnic*. To be used in *Any* placeholders.
    ArrayOfIscsiFaultInvalidVnic(Vec<IscsiFaultInvalidVnic>),
    /// A boxed array of *IscsiFaultPnicInUse*. To be used in *Any* placeholders.
    ArrayOfIscsiFaultPnicInUse(Vec<IscsiFaultPnicInUse>),
    /// A boxed array of *IscsiFaultVnicAlreadyBound*. To be used in *Any* placeholders.
    ArrayOfIscsiFaultVnicAlreadyBound(Vec<IscsiFaultVnicAlreadyBound>),
    /// A boxed array of *IscsiFaultVnicHasActivePaths*. To be used in *Any* placeholders.
    ArrayOfIscsiFaultVnicHasActivePaths(Vec<IscsiFaultVnicHasActivePaths>),
    /// A boxed array of *IscsiFaultVnicHasMultipleUplinks*. To be used in *Any* placeholders.
    ArrayOfIscsiFaultVnicHasMultipleUplinks(Vec<IscsiFaultVnicHasMultipleUplinks>),
    /// A boxed array of *IscsiFaultVnicHasNoUplinks*. To be used in *Any* placeholders.
    ArrayOfIscsiFaultVnicHasNoUplinks(Vec<IscsiFaultVnicHasNoUplinks>),
    /// A boxed array of *IscsiFaultVnicHasWrongUplink*. To be used in *Any* placeholders.
    ArrayOfIscsiFaultVnicHasWrongUplink(Vec<IscsiFaultVnicHasWrongUplink>),
    /// A boxed array of *IscsiFaultVnicInUse*. To be used in *Any* placeholders.
    ArrayOfIscsiFaultVnicInUse(Vec<IscsiFaultVnicInUse>),
    /// A boxed array of *IscsiFaultVnicIsLastPath*. To be used in *Any* placeholders.
    ArrayOfIscsiFaultVnicIsLastPath(Vec<IscsiFaultVnicIsLastPath>),
    /// A boxed array of *IscsiFaultVnicNotBound*. To be used in *Any* placeholders.
    ArrayOfIscsiFaultVnicNotBound(Vec<IscsiFaultVnicNotBound>),
    /// A boxed array of *IscsiFaultVnicNotFound*. To be used in *Any* placeholders.
    ArrayOfIscsiFaultVnicNotFound(Vec<IscsiFaultVnicNotFound>),
    /// A boxed array of *KeyNotFound*. To be used in *Any* placeholders.
    ArrayOfKeyNotFound(Vec<KeyNotFound>),
    /// A boxed array of *LargeRDMConversionNotSupported*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfLargeRDMConversionNotSupported")]
    ArrayOfLargeRdmConversionNotSupported(Vec<LargeRdmConversionNotSupported>),
    /// A boxed array of *LargeRDMNotSupportedOnDatastore*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfLargeRDMNotSupportedOnDatastore")]
    ArrayOfLargeRdmNotSupportedOnDatastore(Vec<LargeRdmNotSupportedOnDatastore>),
    /// A boxed array of *LegacyNetworkInterfaceInUse*. To be used in *Any* placeholders.
    ArrayOfLegacyNetworkInterfaceInUse(Vec<LegacyNetworkInterfaceInUse>),
    /// A boxed array of *LicenseAssignmentFailed*. To be used in *Any* placeholders.
    ArrayOfLicenseAssignmentFailed(Vec<LicenseAssignmentFailed>),
    /// A boxed array of *LicenseDowngradeDisallowed*. To be used in *Any* placeholders.
    ArrayOfLicenseDowngradeDisallowed(Vec<LicenseDowngradeDisallowed>),
    /// A boxed array of *LicenseEntityNotFound*. To be used in *Any* placeholders.
    ArrayOfLicenseEntityNotFound(Vec<LicenseEntityNotFound>),
    /// A boxed array of *LicenseExpired*. To be used in *Any* placeholders.
    ArrayOfLicenseExpired(Vec<LicenseExpired>),
    /// A boxed array of *LicenseKeyEntityMismatch*. To be used in *Any* placeholders.
    ArrayOfLicenseKeyEntityMismatch(Vec<LicenseKeyEntityMismatch>),
    /// A boxed array of *LicenseRestricted*. To be used in *Any* placeholders.
    ArrayOfLicenseRestricted(Vec<LicenseRestricted>),
    /// A boxed array of *LicenseServerUnavailable*. To be used in *Any* placeholders.
    ArrayOfLicenseServerUnavailable(Vec<LicenseServerUnavailable>),
    /// A boxed array of *LicenseSourceUnavailable*. To be used in *Any* placeholders.
    ArrayOfLicenseSourceUnavailable(Vec<LicenseSourceUnavailable>),
    /// A boxed array of *LimitExceeded*. To be used in *Any* placeholders.
    ArrayOfLimitExceeded(Vec<LimitExceeded>),
    /// A boxed array of *LinuxVolumeNotClean*. To be used in *Any* placeholders.
    ArrayOfLinuxVolumeNotClean(Vec<LinuxVolumeNotClean>),
    /// A boxed array of *LogBundlingFailed*. To be used in *Any* placeholders.
    ArrayOfLogBundlingFailed(Vec<LogBundlingFailed>),
    /// A boxed array of *MaintenanceModeFileMove*. To be used in *Any* placeholders.
    ArrayOfMaintenanceModeFileMove(Vec<MaintenanceModeFileMove>),
    /// A boxed array of *MemoryFileFormatNotSupportedByDatastore*. To be used in *Any* placeholders.
    ArrayOfMemoryFileFormatNotSupportedByDatastore(Vec<MemoryFileFormatNotSupportedByDatastore>),
    /// A boxed array of *MemoryHotPlugNotSupported*. To be used in *Any* placeholders.
    ArrayOfMemoryHotPlugNotSupported(Vec<MemoryHotPlugNotSupported>),
    /// A boxed array of *MemorySizeNotRecommended*. To be used in *Any* placeholders.
    ArrayOfMemorySizeNotRecommended(Vec<MemorySizeNotRecommended>),
    /// A boxed array of *MemorySizeNotSupported*. To be used in *Any* placeholders.
    ArrayOfMemorySizeNotSupported(Vec<MemorySizeNotSupported>),
    /// A boxed array of *MemorySizeNotSupportedByDatastore*. To be used in *Any* placeholders.
    ArrayOfMemorySizeNotSupportedByDatastore(Vec<MemorySizeNotSupportedByDatastore>),
    /// A boxed array of *MemorySnapshotOnIndependentDisk*. To be used in *Any* placeholders.
    ArrayOfMemorySnapshotOnIndependentDisk(Vec<MemorySnapshotOnIndependentDisk>),
    /// A boxed array of *MethodAlreadyDisabledFault*. To be used in *Any* placeholders.
    ArrayOfMethodAlreadyDisabledFault(Vec<MethodAlreadyDisabledFault>),
    /// A boxed array of *MethodDisabled*. To be used in *Any* placeholders.
    ArrayOfMethodDisabled(Vec<MethodDisabled>),
    /// A boxed array of *MigrationDisabled*. To be used in *Any* placeholders.
    ArrayOfMigrationDisabled(Vec<MigrationDisabled>),
    /// A boxed array of *MigrationFault*. To be used in *Any* placeholders.
    ArrayOfMigrationFault(Vec<Box<dyn super::traits::MigrationFaultTrait>>),
    /// A boxed array of *MigrationFeatureNotSupported*. To be used in *Any* placeholders.
    ArrayOfMigrationFeatureNotSupported(Vec<Box<dyn super::traits::MigrationFeatureNotSupportedTrait>>),
    /// A boxed array of *MigrationNotReady*. To be used in *Any* placeholders.
    ArrayOfMigrationNotReady(Vec<MigrationNotReady>),
    /// A boxed array of *MismatchedBundle*. To be used in *Any* placeholders.
    ArrayOfMismatchedBundle(Vec<MismatchedBundle>),
    /// A boxed array of *MismatchedNetworkPolicies*. To be used in *Any* placeholders.
    ArrayOfMismatchedNetworkPolicies(Vec<MismatchedNetworkPolicies>),
    /// A boxed array of *MismatchedVMotionNetworkNames*. To be used in *Any* placeholders.
    ArrayOfMismatchedVMotionNetworkNames(Vec<MismatchedVMotionNetworkNames>),
    /// A boxed array of *MissingBmcSupport*. To be used in *Any* placeholders.
    ArrayOfMissingBmcSupport(Vec<MissingBmcSupport>),
    /// A boxed array of *MissingController*. To be used in *Any* placeholders.
    ArrayOfMissingController(Vec<MissingController>),
    /// A boxed array of *MissingIpPool*. To be used in *Any* placeholders.
    ArrayOfMissingIpPool(Vec<MissingIpPool>),
    /// A boxed array of *MissingLinuxCustResources*. To be used in *Any* placeholders.
    ArrayOfMissingLinuxCustResources(Vec<MissingLinuxCustResources>),
    /// A boxed array of *MissingNetworkIpConfig*. To be used in *Any* placeholders.
    ArrayOfMissingNetworkIpConfig(Vec<MissingNetworkIpConfig>),
    /// A boxed array of *MissingPowerOffConfiguration*. To be used in *Any* placeholders.
    ArrayOfMissingPowerOffConfiguration(Vec<MissingPowerOffConfiguration>),
    /// A boxed array of *MissingPowerOnConfiguration*. To be used in *Any* placeholders.
    ArrayOfMissingPowerOnConfiguration(Vec<MissingPowerOnConfiguration>),
    /// A boxed array of *MissingWindowsCustResources*. To be used in *Any* placeholders.
    ArrayOfMissingWindowsCustResources(Vec<MissingWindowsCustResources>),
    /// A boxed array of *MksConnectionLimitReached*. To be used in *Any* placeholders.
    ArrayOfMksConnectionLimitReached(Vec<MksConnectionLimitReached>),
    /// A boxed array of *MountError*. To be used in *Any* placeholders.
    ArrayOfMountError(Vec<MountError>),
    /// A boxed array of *MultiWriterNotSupported*. To be used in *Any* placeholders.
    ArrayOfMultiWriterNotSupported(Vec<MultiWriterNotSupported>),
    /// A boxed array of *MultipleCertificatesVerifyFault*. To be used in *Any* placeholders.
    ArrayOfMultipleCertificatesVerifyFault(Vec<MultipleCertificatesVerifyFault>),
    /// A boxed array of *MultipleCertificatesVerifyFaultThumbprintData*. To be used in *Any* placeholders.
    ArrayOfMultipleCertificatesVerifyFaultThumbprintData(Vec<MultipleCertificatesVerifyFaultThumbprintData>),
    /// A boxed array of *MultipleSnapshotsNotSupported*. To be used in *Any* placeholders.
    ArrayOfMultipleSnapshotsNotSupported(Vec<MultipleSnapshotsNotSupported>),
    /// A boxed array of *NamespaceFull*. To be used in *Any* placeholders.
    ArrayOfNamespaceFull(Vec<NamespaceFull>),
    /// A boxed array of *NamespaceLimitReached*. To be used in *Any* placeholders.
    ArrayOfNamespaceLimitReached(Vec<NamespaceLimitReached>),
    /// A boxed array of *NamespaceWriteProtected*. To be used in *Any* placeholders.
    ArrayOfNamespaceWriteProtected(Vec<NamespaceWriteProtected>),
    /// A boxed array of *NasConfigFault*. To be used in *Any* placeholders.
    ArrayOfNasConfigFault(Vec<Box<dyn super::traits::NasConfigFaultTrait>>),
    /// A boxed array of *NasConnectionLimitReached*. To be used in *Any* placeholders.
    ArrayOfNasConnectionLimitReached(Vec<NasConnectionLimitReached>),
    /// A boxed array of *NasSessionCredentialConflict*. To be used in *Any* placeholders.
    ArrayOfNasSessionCredentialConflict(Vec<NasSessionCredentialConflict>),
    /// A boxed array of *NasVolumeNotMounted*. To be used in *Any* placeholders.
    ArrayOfNasVolumeNotMounted(Vec<NasVolumeNotMounted>),
    /// A boxed array of *NetworkCopyFault*. To be used in *Any* placeholders.
    ArrayOfNetworkCopyFault(Vec<NetworkCopyFault>),
    /// A boxed array of *NetworkDisruptedAndConfigRolledBack*. To be used in *Any* placeholders.
    ArrayOfNetworkDisruptedAndConfigRolledBack(Vec<NetworkDisruptedAndConfigRolledBack>),
    /// A boxed array of *NetworkInaccessible*. To be used in *Any* placeholders.
    ArrayOfNetworkInaccessible(Vec<NetworkInaccessible>),
    /// A boxed array of *NetworksMayNotBeTheSame*. To be used in *Any* placeholders.
    ArrayOfNetworksMayNotBeTheSame(Vec<NetworksMayNotBeTheSame>),
    /// A boxed array of *NicSettingMismatch*. To be used in *Any* placeholders.
    ArrayOfNicSettingMismatch(Vec<NicSettingMismatch>),
    /// A boxed array of *NoActiveHostInCluster*. To be used in *Any* placeholders.
    ArrayOfNoActiveHostInCluster(Vec<NoActiveHostInCluster>),
    /// A boxed array of *NoAvailableIp*. To be used in *Any* placeholders.
    ArrayOfNoAvailableIp(Vec<NoAvailableIp>),
    /// A boxed array of *NoClientCertificate*. To be used in *Any* placeholders.
    ArrayOfNoClientCertificate(Vec<NoClientCertificate>),
    /// A boxed array of *NoCompatibleDatastore*. To be used in *Any* placeholders.
    ArrayOfNoCompatibleDatastore(Vec<NoCompatibleDatastore>),
    /// A boxed array of *NoCompatibleHardAffinityHost*. To be used in *Any* placeholders.
    ArrayOfNoCompatibleHardAffinityHost(Vec<NoCompatibleHardAffinityHost>),
    /// A boxed array of *NoCompatibleHost*. To be used in *Any* placeholders.
    ArrayOfNoCompatibleHost(Vec<Box<dyn super::traits::NoCompatibleHostTrait>>),
    /// A boxed array of *NoCompatibleHostWithAccessToDevice*. To be used in *Any* placeholders.
    ArrayOfNoCompatibleHostWithAccessToDevice(Vec<NoCompatibleHostWithAccessToDevice>),
    /// A boxed array of *NoCompatibleSoftAffinityHost*. To be used in *Any* placeholders.
    ArrayOfNoCompatibleSoftAffinityHost(Vec<NoCompatibleSoftAffinityHost>),
    /// A boxed array of *NoConnectedDatastore*. To be used in *Any* placeholders.
    ArrayOfNoConnectedDatastore(Vec<NoConnectedDatastore>),
    /// A boxed array of *NoDiskFound*. To be used in *Any* placeholders.
    ArrayOfNoDiskFound(Vec<NoDiskFound>),
    /// A boxed array of *NoDiskSpace*. To be used in *Any* placeholders.
    ArrayOfNoDiskSpace(Vec<NoDiskSpace>),
    /// A boxed array of *NoDisksToCustomize*. To be used in *Any* placeholders.
    ArrayOfNoDisksToCustomize(Vec<NoDisksToCustomize>),
    /// A boxed array of *NoGateway*. To be used in *Any* placeholders.
    ArrayOfNoGateway(Vec<NoGateway>),
    /// A boxed array of *NoGuestHeartbeat*. To be used in *Any* placeholders.
    ArrayOfNoGuestHeartbeat(Vec<NoGuestHeartbeat>),
    /// A boxed array of *NoHost*. To be used in *Any* placeholders.
    ArrayOfNoHost(Vec<NoHost>),
    /// A boxed array of *NoHostSuitableForFtSecondary*. To be used in *Any* placeholders.
    ArrayOfNoHostSuitableForFtSecondary(Vec<NoHostSuitableForFtSecondary>),
    /// A boxed array of *NoLicenseServerConfigured*. To be used in *Any* placeholders.
    ArrayOfNoLicenseServerConfigured(Vec<NoLicenseServerConfigured>),
    /// A boxed array of *NoPeerHostFound*. To be used in *Any* placeholders.
    ArrayOfNoPeerHostFound(Vec<NoPeerHostFound>),
    /// A boxed array of *NoPermission*. To be used in *Any* placeholders.
    ArrayOfNoPermission(Vec<Box<dyn super::traits::NoPermissionTrait>>),
    /// A boxed array of *NoPermissionEntityPrivileges*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 7.0.3.2
    ArrayOfNoPermissionEntityPrivileges(Vec<NoPermissionEntityPrivileges>),
    /// A boxed array of *NoPermissionOnAD*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfNoPermissionOnAD")]
    ArrayOfNoPermissionOnAd(Vec<NoPermissionOnAd>),
    /// A boxed array of *NoPermissionOnHost*. To be used in *Any* placeholders.
    ArrayOfNoPermissionOnHost(Vec<NoPermissionOnHost>),
    /// A boxed array of *NoPermissionOnNasVolume*. To be used in *Any* placeholders.
    ArrayOfNoPermissionOnNasVolume(Vec<NoPermissionOnNasVolume>),
    /// A boxed array of *NoSubjectName*. To be used in *Any* placeholders.
    ArrayOfNoSubjectName(Vec<NoSubjectName>),
    /// A boxed array of *NoVcManagedIpConfigured*. To be used in *Any* placeholders.
    ArrayOfNoVcManagedIpConfigured(Vec<NoVcManagedIpConfigured>),
    /// A boxed array of *NoVirtualNic*. To be used in *Any* placeholders.
    ArrayOfNoVirtualNic(Vec<NoVirtualNic>),
    /// A boxed array of *NoVmInVApp*. To be used in *Any* placeholders.
    ArrayOfNoVmInVApp(Vec<NoVmInVApp>),
    /// A boxed array of *NonADUserRequired*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfNonADUserRequired")]
    ArrayOfNonAdUserRequired(Vec<NonAdUserRequired>),
    /// A boxed array of *NonHomeRDMVMotionNotSupported*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfNonHomeRDMVMotionNotSupported")]
    ArrayOfNonHomeRdmvMotionNotSupported(Vec<NonHomeRdmvMotionNotSupported>),
    /// A boxed array of *NonPersistentDisksNotSupported*. To be used in *Any* placeholders.
    ArrayOfNonPersistentDisksNotSupported(Vec<NonPersistentDisksNotSupported>),
    /// A boxed array of *NonVmwareOuiMacNotSupportedHost*. To be used in *Any* placeholders.
    ArrayOfNonVmwareOuiMacNotSupportedHost(Vec<NonVmwareOuiMacNotSupportedHost>),
    /// A boxed array of *NotADirectory*. To be used in *Any* placeholders.
    ArrayOfNotADirectory(Vec<NotADirectory>),
    /// A boxed array of *NotAFile*. To be used in *Any* placeholders.
    ArrayOfNotAFile(Vec<NotAFile>),
    /// A boxed array of *NotAuthenticated*. To be used in *Any* placeholders.
    ArrayOfNotAuthenticated(Vec<NotAuthenticated>),
    /// A boxed array of *NotEnoughCpus*. To be used in *Any* placeholders.
    ArrayOfNotEnoughCpus(Vec<Box<dyn super::traits::NotEnoughCpusTrait>>),
    /// A boxed array of *NotEnoughLogicalCpus*. To be used in *Any* placeholders.
    ArrayOfNotEnoughLogicalCpus(Vec<NotEnoughLogicalCpus>),
    /// A boxed array of *NotFound*. To be used in *Any* placeholders.
    ArrayOfNotFound(Vec<NotFound>),
    /// A boxed array of *NotSupportedDeviceForFT*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfNotSupportedDeviceForFT")]
    ArrayOfNotSupportedDeviceForFt(Vec<NotSupportedDeviceForFt>),
    /// A boxed array of *NotSupportedHost*. To be used in *Any* placeholders.
    ArrayOfNotSupportedHost(Vec<Box<dyn super::traits::NotSupportedHostTrait>>),
    /// A boxed array of *NotSupportedHostForChecksum*. To be used in *Any* placeholders.
    ArrayOfNotSupportedHostForChecksum(Vec<NotSupportedHostForChecksum>),
    /// A boxed array of *NotSupportedHostForVFlash*. To be used in *Any* placeholders.
    ArrayOfNotSupportedHostForVFlash(Vec<NotSupportedHostForVFlash>),
    /// A boxed array of *NotSupportedHostForVmcp*. To be used in *Any* placeholders.
    ArrayOfNotSupportedHostForVmcp(Vec<NotSupportedHostForVmcp>),
    /// A boxed array of *NotSupportedHostForVmemFile*. To be used in *Any* placeholders.
    ArrayOfNotSupportedHostForVmemFile(Vec<NotSupportedHostForVmemFile>),
    /// A boxed array of *NotSupportedHostForVsan*. To be used in *Any* placeholders.
    ArrayOfNotSupportedHostForVsan(Vec<NotSupportedHostForVsan>),
    /// A boxed array of *NotSupportedHostInCluster*. To be used in *Any* placeholders.
    ArrayOfNotSupportedHostInCluster(Vec<Box<dyn super::traits::NotSupportedHostInClusterTrait>>),
    /// A boxed array of *NotSupportedHostInDvs*. To be used in *Any* placeholders.
    ArrayOfNotSupportedHostInDvs(Vec<NotSupportedHostInDvs>),
    /// A boxed array of *NotSupportedHostInHACluster*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfNotSupportedHostInHACluster")]
    ArrayOfNotSupportedHostInHaCluster(Vec<NotSupportedHostInHaCluster>),
    /// A boxed array of *NotUserConfigurableProperty*. To be used in *Any* placeholders.
    ArrayOfNotUserConfigurableProperty(Vec<NotUserConfigurableProperty>),
    /// A boxed array of *NumVirtualCoresPerSocketNotSupported*. To be used in *Any* placeholders.
    ArrayOfNumVirtualCoresPerSocketNotSupported(Vec<NumVirtualCoresPerSocketNotSupported>),
    /// A boxed array of *NumVirtualCpusExceedsLimit*. To be used in *Any* placeholders.
    ArrayOfNumVirtualCpusExceedsLimit(Vec<NumVirtualCpusExceedsLimit>),
    /// A boxed array of *NumVirtualCpusIncompatible*. To be used in *Any* placeholders.
    ArrayOfNumVirtualCpusIncompatible(Vec<NumVirtualCpusIncompatible>),
    /// A boxed array of *NumVirtualCpusNotSupported*. To be used in *Any* placeholders.
    ArrayOfNumVirtualCpusNotSupported(Vec<NumVirtualCpusNotSupported>),
    /// A boxed array of *OperationDisabledByGuest*. To be used in *Any* placeholders.
    ArrayOfOperationDisabledByGuest(Vec<OperationDisabledByGuest>),
    /// A boxed array of *OperationDisallowedOnHost*. To be used in *Any* placeholders.
    ArrayOfOperationDisallowedOnHost(Vec<OperationDisallowedOnHost>),
    /// A boxed array of *OperationNotSupportedByGuest*. To be used in *Any* placeholders.
    ArrayOfOperationNotSupportedByGuest(Vec<OperationNotSupportedByGuest>),
    /// A boxed array of *OutOfBounds*. To be used in *Any* placeholders.
    ArrayOfOutOfBounds(Vec<OutOfBounds>),
    /// A boxed array of *OvfAttribute*. To be used in *Any* placeholders.
    ArrayOfOvfAttribute(Vec<Box<dyn super::traits::OvfAttributeTrait>>),
    /// A boxed array of *OvfConnectedDevice*. To be used in *Any* placeholders.
    ArrayOfOvfConnectedDevice(Vec<Box<dyn super::traits::OvfConnectedDeviceTrait>>),
    /// A boxed array of *OvfConnectedDeviceFloppy*. To be used in *Any* placeholders.
    ArrayOfOvfConnectedDeviceFloppy(Vec<OvfConnectedDeviceFloppy>),
    /// A boxed array of *OvfConnectedDeviceIso*. To be used in *Any* placeholders.
    ArrayOfOvfConnectedDeviceIso(Vec<OvfConnectedDeviceIso>),
    /// A boxed array of *OvfConstraint*. To be used in *Any* placeholders.
    ArrayOfOvfConstraint(Vec<Box<dyn super::traits::OvfConstraintTrait>>),
    /// A boxed array of *OvfConsumerCallbackFault*. To be used in *Any* placeholders.
    ArrayOfOvfConsumerCallbackFault(Vec<Box<dyn super::traits::OvfConsumerCallbackFaultTrait>>),
    /// A boxed array of *OvfConsumerCommunicationError*. To be used in *Any* placeholders.
    ArrayOfOvfConsumerCommunicationError(Vec<OvfConsumerCommunicationError>),
    /// A boxed array of *OvfConsumerFault*. To be used in *Any* placeholders.
    ArrayOfOvfConsumerFault(Vec<OvfConsumerFault>),
    /// A boxed array of *OvfConsumerInvalidSection*. To be used in *Any* placeholders.
    ArrayOfOvfConsumerInvalidSection(Vec<OvfConsumerInvalidSection>),
    /// A boxed array of *OvfConsumerPowerOnFault*. To be used in *Any* placeholders.
    ArrayOfOvfConsumerPowerOnFault(Vec<OvfConsumerPowerOnFault>),
    /// A boxed array of *OvfConsumerUndeclaredSection*. To be used in *Any* placeholders.
    ArrayOfOvfConsumerUndeclaredSection(Vec<OvfConsumerUndeclaredSection>),
    /// A boxed array of *OvfConsumerUndefinedPrefix*. To be used in *Any* placeholders.
    ArrayOfOvfConsumerUndefinedPrefix(Vec<OvfConsumerUndefinedPrefix>),
    /// A boxed array of *OvfConsumerValidationFault*. To be used in *Any* placeholders.
    ArrayOfOvfConsumerValidationFault(Vec<OvfConsumerValidationFault>),
    /// A boxed array of *OvfCpuCompatibility*. To be used in *Any* placeholders.
    ArrayOfOvfCpuCompatibility(Vec<OvfCpuCompatibility>),
    /// A boxed array of *OvfCpuCompatibilityCheckNotSupported*. To be used in *Any* placeholders.
    ArrayOfOvfCpuCompatibilityCheckNotSupported(Vec<OvfCpuCompatibilityCheckNotSupported>),
    /// A boxed array of *OvfDiskMappingNotFound*. To be used in *Any* placeholders.
    ArrayOfOvfDiskMappingNotFound(Vec<OvfDiskMappingNotFound>),
    /// A boxed array of *OvfDiskOrderConstraint*. To be used in *Any* placeholders.
    ArrayOfOvfDiskOrderConstraint(Vec<OvfDiskOrderConstraint>),
    /// A boxed array of *OvfDuplicateElement*. To be used in *Any* placeholders.
    ArrayOfOvfDuplicateElement(Vec<OvfDuplicateElement>),
    /// A boxed array of *OvfDuplicatedElementBoundary*. To be used in *Any* placeholders.
    ArrayOfOvfDuplicatedElementBoundary(Vec<OvfDuplicatedElementBoundary>),
    /// A boxed array of *OvfDuplicatedPropertyIdExport*. To be used in *Any* placeholders.
    ArrayOfOvfDuplicatedPropertyIdExport(Vec<OvfDuplicatedPropertyIdExport>),
    /// A boxed array of *OvfDuplicatedPropertyIdImport*. To be used in *Any* placeholders.
    ArrayOfOvfDuplicatedPropertyIdImport(Vec<OvfDuplicatedPropertyIdImport>),
    /// A boxed array of *OvfElement*. To be used in *Any* placeholders.
    ArrayOfOvfElement(Vec<Box<dyn super::traits::OvfElementTrait>>),
    /// A boxed array of *OvfElementInvalidValue*. To be used in *Any* placeholders.
    ArrayOfOvfElementInvalidValue(Vec<OvfElementInvalidValue>),
    /// A boxed array of *OvfExport*. To be used in *Any* placeholders.
    ArrayOfOvfExport(Vec<Box<dyn super::traits::OvfExportTrait>>),
    /// A boxed array of *OvfExportFailed*. To be used in *Any* placeholders.
    ArrayOfOvfExportFailed(Vec<OvfExportFailed>),
    /// A boxed array of *OvfFault*. To be used in *Any* placeholders.
    ArrayOfOvfFault(Vec<Box<dyn super::traits::OvfFaultTrait>>),
    /// A boxed array of *OvfHardwareCheck*. To be used in *Any* placeholders.
    ArrayOfOvfHardwareCheck(Vec<OvfHardwareCheck>),
    /// A boxed array of *OvfHardwareExport*. To be used in *Any* placeholders.
    ArrayOfOvfHardwareExport(Vec<Box<dyn super::traits::OvfHardwareExportTrait>>),
    /// A boxed array of *OvfHostResourceConstraint*. To be used in *Any* placeholders.
    ArrayOfOvfHostResourceConstraint(Vec<OvfHostResourceConstraint>),
    /// A boxed array of *OvfHostValueNotParsed*. To be used in *Any* placeholders.
    ArrayOfOvfHostValueNotParsed(Vec<OvfHostValueNotParsed>),
    /// A boxed array of *OvfImport*. To be used in *Any* placeholders.
    ArrayOfOvfImport(Vec<Box<dyn super::traits::OvfImportTrait>>),
    /// A boxed array of *OvfImportFailed*. To be used in *Any* placeholders.
    ArrayOfOvfImportFailed(Vec<OvfImportFailed>),
    /// A boxed array of *OvfInternalError*. To be used in *Any* placeholders.
    ArrayOfOvfInternalError(Vec<OvfInternalError>),
    /// A boxed array of *OvfInvalidPackage*. To be used in *Any* placeholders.
    ArrayOfOvfInvalidPackage(Vec<Box<dyn super::traits::OvfInvalidPackageTrait>>),
    /// A boxed array of *OvfInvalidValue*. To be used in *Any* placeholders.
    ArrayOfOvfInvalidValue(Vec<Box<dyn super::traits::OvfInvalidValueTrait>>),
    /// A boxed array of *OvfInvalidValueConfiguration*. To be used in *Any* placeholders.
    ArrayOfOvfInvalidValueConfiguration(Vec<OvfInvalidValueConfiguration>),
    /// A boxed array of *OvfInvalidValueEmpty*. To be used in *Any* placeholders.
    ArrayOfOvfInvalidValueEmpty(Vec<OvfInvalidValueEmpty>),
    /// A boxed array of *OvfInvalidValueFormatMalformed*. To be used in *Any* placeholders.
    ArrayOfOvfInvalidValueFormatMalformed(Vec<OvfInvalidValueFormatMalformed>),
    /// A boxed array of *OvfInvalidValueReference*. To be used in *Any* placeholders.
    ArrayOfOvfInvalidValueReference(Vec<OvfInvalidValueReference>),
    /// A boxed array of *OvfInvalidVmName*. To be used in *Any* placeholders.
    ArrayOfOvfInvalidVmName(Vec<OvfInvalidVmName>),
    /// A boxed array of *OvfMappedOsId*. To be used in *Any* placeholders.
    ArrayOfOvfMappedOsId(Vec<OvfMappedOsId>),
    /// A boxed array of *OvfMissingAttribute*. To be used in *Any* placeholders.
    ArrayOfOvfMissingAttribute(Vec<OvfMissingAttribute>),
    /// A boxed array of *OvfMissingElement*. To be used in *Any* placeholders.
    ArrayOfOvfMissingElement(Vec<Box<dyn super::traits::OvfMissingElementTrait>>),
    /// A boxed array of *OvfMissingElementNormalBoundary*. To be used in *Any* placeholders.
    ArrayOfOvfMissingElementNormalBoundary(Vec<OvfMissingElementNormalBoundary>),
    /// A boxed array of *OvfMissingHardware*. To be used in *Any* placeholders.
    ArrayOfOvfMissingHardware(Vec<OvfMissingHardware>),
    /// A boxed array of *OvfNetworkMappingNotSupported*. To be used in *Any* placeholders.
    ArrayOfOvfNetworkMappingNotSupported(Vec<OvfNetworkMappingNotSupported>),
    /// A boxed array of *OvfNoHostNic*. To be used in *Any* placeholders.
    ArrayOfOvfNoHostNic(Vec<OvfNoHostNic>),
    /// A boxed array of *OvfNoSpaceOnController*. To be used in *Any* placeholders.
    ArrayOfOvfNoSpaceOnController(Vec<OvfNoSpaceOnController>),
    /// A boxed array of *OvfNoSupportedHardwareFamily*. To be used in *Any* placeholders.
    ArrayOfOvfNoSupportedHardwareFamily(Vec<OvfNoSupportedHardwareFamily>),
    /// A boxed array of *OvfProperty*. To be used in *Any* placeholders.
    ArrayOfOvfProperty(Vec<Box<dyn super::traits::OvfPropertyTrait>>),
    /// A boxed array of *OvfPropertyExport*. To be used in *Any* placeholders.
    ArrayOfOvfPropertyExport(Vec<OvfPropertyExport>),
    /// A boxed array of *OvfPropertyNetwork*. To be used in *Any* placeholders.
    ArrayOfOvfPropertyNetwork(Vec<OvfPropertyNetwork>),
    /// A boxed array of *OvfPropertyNetworkExport*. To be used in *Any* placeholders.
    ArrayOfOvfPropertyNetworkExport(Vec<OvfPropertyNetworkExport>),
    /// A boxed array of *OvfPropertyQualifier*. To be used in *Any* placeholders.
    ArrayOfOvfPropertyQualifier(Vec<OvfPropertyQualifier>),
    /// A boxed array of *OvfPropertyQualifierDuplicate*. To be used in *Any* placeholders.
    ArrayOfOvfPropertyQualifierDuplicate(Vec<OvfPropertyQualifierDuplicate>),
    /// A boxed array of *OvfPropertyQualifierIgnored*. To be used in *Any* placeholders.
    ArrayOfOvfPropertyQualifierIgnored(Vec<OvfPropertyQualifierIgnored>),
    /// A boxed array of *OvfPropertyType*. To be used in *Any* placeholders.
    ArrayOfOvfPropertyType(Vec<OvfPropertyType>),
    /// A boxed array of *OvfPropertyValue*. To be used in *Any* placeholders.
    ArrayOfOvfPropertyValue(Vec<OvfPropertyValue>),
    /// A boxed array of *OvfSystemFault*. To be used in *Any* placeholders.
    ArrayOfOvfSystemFault(Vec<Box<dyn super::traits::OvfSystemFaultTrait>>),
    /// A boxed array of *OvfToXmlUnsupportedElement*. To be used in *Any* placeholders.
    ArrayOfOvfToXmlUnsupportedElement(Vec<OvfToXmlUnsupportedElement>),
    /// A boxed array of *OvfUnableToExportDisk*. To be used in *Any* placeholders.
    ArrayOfOvfUnableToExportDisk(Vec<OvfUnableToExportDisk>),
    /// A boxed array of *OvfUnexpectedElement*. To be used in *Any* placeholders.
    ArrayOfOvfUnexpectedElement(Vec<OvfUnexpectedElement>),
    /// A boxed array of *OvfUnknownDevice*. To be used in *Any* placeholders.
    ArrayOfOvfUnknownDevice(Vec<OvfUnknownDevice>),
    /// A boxed array of *OvfUnknownDeviceBacking*. To be used in *Any* placeholders.
    ArrayOfOvfUnknownDeviceBacking(Vec<OvfUnknownDeviceBacking>),
    /// A boxed array of *OvfUnknownEntity*. To be used in *Any* placeholders.
    ArrayOfOvfUnknownEntity(Vec<OvfUnknownEntity>),
    /// A boxed array of *OvfUnsupportedAttribute*. To be used in *Any* placeholders.
    ArrayOfOvfUnsupportedAttribute(Vec<Box<dyn super::traits::OvfUnsupportedAttributeTrait>>),
    /// A boxed array of *OvfUnsupportedAttributeValue*. To be used in *Any* placeholders.
    ArrayOfOvfUnsupportedAttributeValue(Vec<OvfUnsupportedAttributeValue>),
    /// A boxed array of *OvfUnsupportedDeviceBackingInfo*. To be used in *Any* placeholders.
    ArrayOfOvfUnsupportedDeviceBackingInfo(Vec<OvfUnsupportedDeviceBackingInfo>),
    /// A boxed array of *OvfUnsupportedDeviceBackingOption*. To be used in *Any* placeholders.
    ArrayOfOvfUnsupportedDeviceBackingOption(Vec<OvfUnsupportedDeviceBackingOption>),
    /// A boxed array of *OvfUnsupportedDeviceExport*. To be used in *Any* placeholders.
    ArrayOfOvfUnsupportedDeviceExport(Vec<OvfUnsupportedDeviceExport>),
    /// A boxed array of *OvfUnsupportedDiskProvisioning*. To be used in *Any* placeholders.
    ArrayOfOvfUnsupportedDiskProvisioning(Vec<OvfUnsupportedDiskProvisioning>),
    /// A boxed array of *OvfUnsupportedElement*. To be used in *Any* placeholders.
    ArrayOfOvfUnsupportedElement(Vec<Box<dyn super::traits::OvfUnsupportedElementTrait>>),
    /// A boxed array of *OvfUnsupportedElementValue*. To be used in *Any* placeholders.
    ArrayOfOvfUnsupportedElementValue(Vec<OvfUnsupportedElementValue>),
    /// A boxed array of *OvfUnsupportedPackage*. To be used in *Any* placeholders.
    ArrayOfOvfUnsupportedPackage(Vec<Box<dyn super::traits::OvfUnsupportedPackageTrait>>),
    /// A boxed array of *OvfUnsupportedSection*. To be used in *Any* placeholders.
    ArrayOfOvfUnsupportedSection(Vec<OvfUnsupportedSection>),
    /// A boxed array of *OvfUnsupportedSubType*. To be used in *Any* placeholders.
    ArrayOfOvfUnsupportedSubType(Vec<OvfUnsupportedSubType>),
    /// A boxed array of *OvfUnsupportedType*. To be used in *Any* placeholders.
    ArrayOfOvfUnsupportedType(Vec<OvfUnsupportedType>),
    /// A boxed array of *OvfWrongElement*. To be used in *Any* placeholders.
    ArrayOfOvfWrongElement(Vec<OvfWrongElement>),
    /// A boxed array of *OvfWrongNamespace*. To be used in *Any* placeholders.
    ArrayOfOvfWrongNamespace(Vec<OvfWrongNamespace>),
    /// A boxed array of *OvfXmlFormat*. To be used in *Any* placeholders.
    ArrayOfOvfXmlFormat(Vec<OvfXmlFormat>),
    /// A boxed array of *PasswordExpired*. To be used in *Any* placeholders.
    ArrayOfPasswordExpired(Vec<PasswordExpired>),
    /// A boxed array of *PatchAlreadyInstalled*. To be used in *Any* placeholders.
    ArrayOfPatchAlreadyInstalled(Vec<PatchAlreadyInstalled>),
    /// A boxed array of *PatchBinariesNotFound*. To be used in *Any* placeholders.
    ArrayOfPatchBinariesNotFound(Vec<PatchBinariesNotFound>),
    /// A boxed array of *PatchInstallFailed*. To be used in *Any* placeholders.
    ArrayOfPatchInstallFailed(Vec<PatchInstallFailed>),
    /// A boxed array of *PatchIntegrityError*. To be used in *Any* placeholders.
    ArrayOfPatchIntegrityError(Vec<PatchIntegrityError>),
    /// A boxed array of *PatchMetadataCorrupted*. To be used in *Any* placeholders.
    ArrayOfPatchMetadataCorrupted(Vec<PatchMetadataCorrupted>),
    /// A boxed array of *PatchMetadataInvalid*. To be used in *Any* placeholders.
    ArrayOfPatchMetadataInvalid(Vec<Box<dyn super::traits::PatchMetadataInvalidTrait>>),
    /// A boxed array of *PatchMetadataNotFound*. To be used in *Any* placeholders.
    ArrayOfPatchMetadataNotFound(Vec<PatchMetadataNotFound>),
    /// A boxed array of *PatchMissingDependencies*. To be used in *Any* placeholders.
    ArrayOfPatchMissingDependencies(Vec<PatchMissingDependencies>),
    /// A boxed array of *PatchNotApplicable*. To be used in *Any* placeholders.
    ArrayOfPatchNotApplicable(Vec<Box<dyn super::traits::PatchNotApplicableTrait>>),
    /// A boxed array of *PatchSuperseded*. To be used in *Any* placeholders.
    ArrayOfPatchSuperseded(Vec<PatchSuperseded>),
    /// A boxed array of *PhysCompatRDMNotSupported*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfPhysCompatRDMNotSupported")]
    ArrayOfPhysCompatRdmNotSupported(Vec<PhysCompatRdmNotSupported>),
    /// A boxed array of *PlatformConfigFault*. To be used in *Any* placeholders.
    ArrayOfPlatformConfigFault(Vec<Box<dyn super::traits::PlatformConfigFaultTrait>>),
    /// A boxed array of *PowerOnFtSecondaryFailed*. To be used in *Any* placeholders.
    ArrayOfPowerOnFtSecondaryFailed(Vec<PowerOnFtSecondaryFailed>),
    /// A boxed array of *PowerOnFtSecondaryTimedout*. To be used in *Any* placeholders.
    ArrayOfPowerOnFtSecondaryTimedout(Vec<PowerOnFtSecondaryTimedout>),
    /// A boxed array of *ProfileUpdateFailed*. To be used in *Any* placeholders.
    ArrayOfProfileUpdateFailed(Vec<ProfileUpdateFailed>),
    /// A boxed array of *ProfileUpdateFailedUpdateFailure*. To be used in *Any* placeholders.
    ArrayOfProfileUpdateFailedUpdateFailure(Vec<ProfileUpdateFailedUpdateFailure>),
    /// A boxed array of *QuarantineModeFault*. To be used in *Any* placeholders.
    ArrayOfQuarantineModeFault(Vec<QuarantineModeFault>),
    /// A boxed array of *QuestionPending*. To be used in *Any* placeholders.
    ArrayOfQuestionPending(Vec<QuestionPending>),
    /// A boxed array of *QuiesceDatastoreIOForHAFailed*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfQuiesceDatastoreIOForHAFailed")]
    ArrayOfQuiesceDatastoreIoForHaFailed(Vec<QuiesceDatastoreIoForHaFailed>),
    /// A boxed array of *RDMConversionNotSupported*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfRDMConversionNotSupported")]
    ArrayOfRdmConversionNotSupported(Vec<RdmConversionNotSupported>),
    /// A boxed array of *RDMNotPreserved*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfRDMNotPreserved")]
    ArrayOfRdmNotPreserved(Vec<RdmNotPreserved>),
    /// A boxed array of *RDMNotSupported*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfRDMNotSupported")]
    ArrayOfRdmNotSupported(Vec<Box<dyn super::traits::RdmNotSupportedTrait>>),
    /// A boxed array of *RDMNotSupportedOnDatastore*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfRDMNotSupportedOnDatastore")]
    ArrayOfRdmNotSupportedOnDatastore(Vec<RdmNotSupportedOnDatastore>),
    /// A boxed array of *RDMPointsToInaccessibleDisk*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfRDMPointsToInaccessibleDisk")]
    ArrayOfRdmPointsToInaccessibleDisk(Vec<RdmPointsToInaccessibleDisk>),
    /// A boxed array of *RawDiskNotSupported*. To be used in *Any* placeholders.
    ArrayOfRawDiskNotSupported(Vec<RawDiskNotSupported>),
    /// A boxed array of *ReadHostResourcePoolTreeFailed*. To be used in *Any* placeholders.
    ArrayOfReadHostResourcePoolTreeFailed(Vec<ReadHostResourcePoolTreeFailed>),
    /// A boxed array of *ReadOnlyDisksWithLegacyDestination*. To be used in *Any* placeholders.
    ArrayOfReadOnlyDisksWithLegacyDestination(Vec<ReadOnlyDisksWithLegacyDestination>),
    /// A boxed array of *RebootRequired*. To be used in *Any* placeholders.
    ArrayOfRebootRequired(Vec<RebootRequired>),
    /// A boxed array of *RecordReplayDisabled*. To be used in *Any* placeholders.
    ArrayOfRecordReplayDisabled(Vec<RecordReplayDisabled>),
    /// A boxed array of *RemoteDeviceNotSupported*. To be used in *Any* placeholders.
    ArrayOfRemoteDeviceNotSupported(Vec<RemoteDeviceNotSupported>),
    /// A boxed array of *RemoveFailed*. To be used in *Any* placeholders.
    ArrayOfRemoveFailed(Vec<RemoveFailed>),
    /// A boxed array of *ReplicationConfigFault*. To be used in *Any* placeholders.
    ArrayOfReplicationConfigFault(Vec<Box<dyn super::traits::ReplicationConfigFaultTrait>>),
    /// A boxed array of *ReplicationDiskConfigFault*. To be used in *Any* placeholders.
    ArrayOfReplicationDiskConfigFault(Vec<ReplicationDiskConfigFault>),
    /// A boxed array of *ReplicationFault*. To be used in *Any* placeholders.
    ArrayOfReplicationFault(Vec<Box<dyn super::traits::ReplicationFaultTrait>>),
    /// A boxed array of *ReplicationIncompatibleWithFT*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfReplicationIncompatibleWithFT")]
    ArrayOfReplicationIncompatibleWithFt(Vec<ReplicationIncompatibleWithFt>),
    /// A boxed array of *ReplicationInvalidOptions*. To be used in *Any* placeholders.
    ArrayOfReplicationInvalidOptions(Vec<ReplicationInvalidOptions>),
    /// A boxed array of *ReplicationNotSupportedOnHost*. To be used in *Any* placeholders.
    ArrayOfReplicationNotSupportedOnHost(Vec<ReplicationNotSupportedOnHost>),
    /// A boxed array of *ReplicationVmConfigFault*. To be used in *Any* placeholders.
    ArrayOfReplicationVmConfigFault(Vec<ReplicationVmConfigFault>),
    /// A boxed array of *ReplicationVmFault*. To be used in *Any* placeholders.
    ArrayOfReplicationVmFault(Vec<Box<dyn super::traits::ReplicationVmFaultTrait>>),
    /// A boxed array of *ReplicationVmInProgressFault*. To be used in *Any* placeholders.
    ArrayOfReplicationVmInProgressFault(Vec<ReplicationVmInProgressFault>),
    /// A boxed array of *ResourceInUse*. To be used in *Any* placeholders.
    ArrayOfResourceInUse(Vec<Box<dyn super::traits::ResourceInUseTrait>>),
    /// A boxed array of *ResourceNotAvailable*. To be used in *Any* placeholders.
    ArrayOfResourceNotAvailable(Vec<ResourceNotAvailable>),
    /// A boxed array of *RestrictedByAdministrator*. To be used in *Any* placeholders.
    ArrayOfRestrictedByAdministrator(Vec<RestrictedByAdministrator>),
    /// A boxed array of *RestrictedVersion*. To be used in *Any* placeholders.
    ArrayOfRestrictedVersion(Vec<RestrictedVersion>),
    /// A boxed array of *RollbackFailure*. To be used in *Any* placeholders.
    ArrayOfRollbackFailure(Vec<RollbackFailure>),
    /// A boxed array of *RuleViolation*. To be used in *Any* placeholders.
    ArrayOfRuleViolation(Vec<RuleViolation>),
    /// A boxed array of *SSLDisabledFault*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfSSLDisabledFault")]
    ArrayOfSslDisabledFault(Vec<SslDisabledFault>),
    /// A boxed array of *SSLVerifyFault*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfSSLVerifyFault")]
    ArrayOfSslVerifyFault(Vec<SslVerifyFault>),
    /// A boxed array of *SSPIChallenge*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfSSPIChallenge")]
    ArrayOfSspiChallenge(Vec<SspiChallenge>),
    /// A boxed array of *SecondaryVmAlreadyDisabled*. To be used in *Any* placeholders.
    ArrayOfSecondaryVmAlreadyDisabled(Vec<SecondaryVmAlreadyDisabled>),
    /// A boxed array of *SecondaryVmAlreadyEnabled*. To be used in *Any* placeholders.
    ArrayOfSecondaryVmAlreadyEnabled(Vec<SecondaryVmAlreadyEnabled>),
    /// A boxed array of *SecondaryVmAlreadyRegistered*. To be used in *Any* placeholders.
    ArrayOfSecondaryVmAlreadyRegistered(Vec<SecondaryVmAlreadyRegistered>),
    /// A boxed array of *SecondaryVmNotRegistered*. To be used in *Any* placeholders.
    ArrayOfSecondaryVmNotRegistered(Vec<SecondaryVmNotRegistered>),
    /// A boxed array of *SharedBusControllerNotSupported*. To be used in *Any* placeholders.
    ArrayOfSharedBusControllerNotSupported(Vec<SharedBusControllerNotSupported>),
    /// A boxed array of *ShrinkDiskFault*. To be used in *Any* placeholders.
    ArrayOfShrinkDiskFault(Vec<ShrinkDiskFault>),
    /// A boxed array of *SnapshotCloneNotSupported*. To be used in *Any* placeholders.
    ArrayOfSnapshotCloneNotSupported(Vec<SnapshotCloneNotSupported>),
    /// A boxed array of *SnapshotCopyNotSupported*. To be used in *Any* placeholders.
    ArrayOfSnapshotCopyNotSupported(Vec<Box<dyn super::traits::SnapshotCopyNotSupportedTrait>>),
    /// A boxed array of *SnapshotDisabled*. To be used in *Any* placeholders.
    ArrayOfSnapshotDisabled(Vec<SnapshotDisabled>),
    /// A boxed array of *SnapshotFault*. To be used in *Any* placeholders.
    ArrayOfSnapshotFault(Vec<Box<dyn super::traits::SnapshotFaultTrait>>),
    /// A boxed array of *SnapshotIncompatibleDeviceInVm*. To be used in *Any* placeholders.
    ArrayOfSnapshotIncompatibleDeviceInVm(Vec<SnapshotIncompatibleDeviceInVm>),
    /// A boxed array of *SnapshotLocked*. To be used in *Any* placeholders.
    ArrayOfSnapshotLocked(Vec<SnapshotLocked>),
    /// A boxed array of *SnapshotMoveFromNonHomeNotSupported*. To be used in *Any* placeholders.
    ArrayOfSnapshotMoveFromNonHomeNotSupported(Vec<SnapshotMoveFromNonHomeNotSupported>),
    /// A boxed array of *SnapshotMoveNotSupported*. To be used in *Any* placeholders.
    ArrayOfSnapshotMoveNotSupported(Vec<SnapshotMoveNotSupported>),
    /// A boxed array of *SnapshotMoveToNonHomeNotSupported*. To be used in *Any* placeholders.
    ArrayOfSnapshotMoveToNonHomeNotSupported(Vec<SnapshotMoveToNonHomeNotSupported>),
    /// A boxed array of *SnapshotNoChange*. To be used in *Any* placeholders.
    ArrayOfSnapshotNoChange(Vec<SnapshotNoChange>),
    /// A boxed array of *SnapshotRevertIssue*. To be used in *Any* placeholders.
    ArrayOfSnapshotRevertIssue(Vec<SnapshotRevertIssue>),
    /// A boxed array of *SoftRuleVioCorrectionDisallowed*. To be used in *Any* placeholders.
    ArrayOfSoftRuleVioCorrectionDisallowed(Vec<SoftRuleVioCorrectionDisallowed>),
    /// A boxed array of *SoftRuleVioCorrectionImpact*. To be used in *Any* placeholders.
    ArrayOfSoftRuleVioCorrectionImpact(Vec<SoftRuleVioCorrectionImpact>),
    /// A boxed array of *SolutionUserRequired*. To be used in *Any* placeholders.
    ArrayOfSolutionUserRequired(Vec<SolutionUserRequired>),
    /// A boxed array of *SsdDiskNotAvailable*. To be used in *Any* placeholders.
    ArrayOfSsdDiskNotAvailable(Vec<SsdDiskNotAvailable>),
    /// A boxed array of *StorageDrsCannotMoveDiskInMultiWriterMode*. To be used in *Any* placeholders.
    ArrayOfStorageDrsCannotMoveDiskInMultiWriterMode(Vec<StorageDrsCannotMoveDiskInMultiWriterMode>),
    /// A boxed array of *StorageDrsCannotMoveFTVm*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfStorageDrsCannotMoveFTVm")]
    ArrayOfStorageDrsCannotMoveFtVm(Vec<StorageDrsCannotMoveFtVm>),
    /// A boxed array of *StorageDrsCannotMoveIndependentDisk*. To be used in *Any* placeholders.
    ArrayOfStorageDrsCannotMoveIndependentDisk(Vec<StorageDrsCannotMoveIndependentDisk>),
    /// A boxed array of *StorageDrsCannotMoveManuallyPlacedSwapFile*. To be used in *Any* placeholders.
    ArrayOfStorageDrsCannotMoveManuallyPlacedSwapFile(Vec<StorageDrsCannotMoveManuallyPlacedSwapFile>),
    /// A boxed array of *StorageDrsCannotMoveManuallyPlacedVm*. To be used in *Any* placeholders.
    ArrayOfStorageDrsCannotMoveManuallyPlacedVm(Vec<StorageDrsCannotMoveManuallyPlacedVm>),
    /// A boxed array of *StorageDrsCannotMoveSharedDisk*. To be used in *Any* placeholders.
    ArrayOfStorageDrsCannotMoveSharedDisk(Vec<StorageDrsCannotMoveSharedDisk>),
    /// A boxed array of *StorageDrsCannotMoveTemplate*. To be used in *Any* placeholders.
    ArrayOfStorageDrsCannotMoveTemplate(Vec<StorageDrsCannotMoveTemplate>),
    /// A boxed array of *StorageDrsCannotMoveVmInUserFolder*. To be used in *Any* placeholders.
    ArrayOfStorageDrsCannotMoveVmInUserFolder(Vec<StorageDrsCannotMoveVmInUserFolder>),
    /// A boxed array of *StorageDrsCannotMoveVmWithMountedCDROM*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfStorageDrsCannotMoveVmWithMountedCDROM")]
    ArrayOfStorageDrsCannotMoveVmWithMountedCdrom(Vec<StorageDrsCannotMoveVmWithMountedCdrom>),
    /// A boxed array of *StorageDrsCannotMoveVmWithNoFilesInLayout*. To be used in *Any* placeholders.
    ArrayOfStorageDrsCannotMoveVmWithNoFilesInLayout(Vec<StorageDrsCannotMoveVmWithNoFilesInLayout>),
    /// A boxed array of *StorageDrsDatacentersCannotShareDatastore*. To be used in *Any* placeholders.
    ArrayOfStorageDrsDatacentersCannotShareDatastore(Vec<StorageDrsDatacentersCannotShareDatastore>),
    /// A boxed array of *StorageDrsDisabledOnVm*. To be used in *Any* placeholders.
    ArrayOfStorageDrsDisabledOnVm(Vec<StorageDrsDisabledOnVm>),
    /// A boxed array of *StorageDrsHbrDiskNotMovable*. To be used in *Any* placeholders.
    ArrayOfStorageDrsHbrDiskNotMovable(Vec<StorageDrsHbrDiskNotMovable>),
    /// A boxed array of *StorageDrsHmsMoveInProgress*. To be used in *Any* placeholders.
    ArrayOfStorageDrsHmsMoveInProgress(Vec<StorageDrsHmsMoveInProgress>),
    /// A boxed array of *StorageDrsHmsUnreachable*. To be used in *Any* placeholders.
    ArrayOfStorageDrsHmsUnreachable(Vec<StorageDrsHmsUnreachable>),
    /// A boxed array of *StorageDrsIolbDisabledInternally*. To be used in *Any* placeholders.
    ArrayOfStorageDrsIolbDisabledInternally(Vec<StorageDrsIolbDisabledInternally>),
    /// A boxed array of *StorageDrsRelocateDisabled*. To be used in *Any* placeholders.
    ArrayOfStorageDrsRelocateDisabled(Vec<StorageDrsRelocateDisabled>),
    /// A boxed array of *StorageDrsStaleHmsCollection*. To be used in *Any* placeholders.
    ArrayOfStorageDrsStaleHmsCollection(Vec<StorageDrsStaleHmsCollection>),
    /// A boxed array of *StorageDrsUnableToMoveFiles*. To be used in *Any* placeholders.
    ArrayOfStorageDrsUnableToMoveFiles(Vec<StorageDrsUnableToMoveFiles>),
    /// A boxed array of *StorageVMotionNotSupported*. To be used in *Any* placeholders.
    ArrayOfStorageVMotionNotSupported(Vec<StorageVMotionNotSupported>),
    /// A boxed array of *StorageVmotionIncompatible*. To be used in *Any* placeholders.
    ArrayOfStorageVmotionIncompatible(Vec<StorageVmotionIncompatible>),
    /// A boxed array of *SuspendedRelocateNotSupported*. To be used in *Any* placeholders.
    ArrayOfSuspendedRelocateNotSupported(Vec<SuspendedRelocateNotSupported>),
    /// A boxed array of *SwapDatastoreNotWritableOnHost*. To be used in *Any* placeholders.
    ArrayOfSwapDatastoreNotWritableOnHost(Vec<SwapDatastoreNotWritableOnHost>),
    /// A boxed array of *SwapDatastoreUnset*. To be used in *Any* placeholders.
    ArrayOfSwapDatastoreUnset(Vec<SwapDatastoreUnset>),
    /// A boxed array of *SwapPlacementOverrideNotSupported*. To be used in *Any* placeholders.
    ArrayOfSwapPlacementOverrideNotSupported(Vec<SwapPlacementOverrideNotSupported>),
    /// A boxed array of *SwitchIpUnset*. To be used in *Any* placeholders.
    ArrayOfSwitchIpUnset(Vec<SwitchIpUnset>),
    /// A boxed array of *SwitchNotInUpgradeMode*. To be used in *Any* placeholders.
    ArrayOfSwitchNotInUpgradeMode(Vec<SwitchNotInUpgradeMode>),
    /// A boxed array of *TaskInProgress*. To be used in *Any* placeholders.
    ArrayOfTaskInProgress(Vec<Box<dyn super::traits::TaskInProgressTrait>>),
    /// A boxed array of *ThirdPartyLicenseAssignmentFailed*. To be used in *Any* placeholders.
    ArrayOfThirdPartyLicenseAssignmentFailed(Vec<ThirdPartyLicenseAssignmentFailed>),
    /// A boxed array of *Timedout*. To be used in *Any* placeholders.
    ArrayOfTimedout(Vec<Box<dyn super::traits::TimedoutTrait>>),
    /// A boxed array of *TooManyConcurrentNativeClones*. To be used in *Any* placeholders.
    ArrayOfTooManyConcurrentNativeClones(Vec<TooManyConcurrentNativeClones>),
    /// A boxed array of *TooManyConsecutiveOverrides*. To be used in *Any* placeholders.
    ArrayOfTooManyConsecutiveOverrides(Vec<TooManyConsecutiveOverrides>),
    /// A boxed array of *TooManyDevices*. To be used in *Any* placeholders.
    ArrayOfTooManyDevices(Vec<TooManyDevices>),
    /// A boxed array of *TooManyDisksOnLegacyHost*. To be used in *Any* placeholders.
    ArrayOfTooManyDisksOnLegacyHost(Vec<TooManyDisksOnLegacyHost>),
    /// A boxed array of *TooManyGuestLogons*. To be used in *Any* placeholders.
    ArrayOfTooManyGuestLogons(Vec<TooManyGuestLogons>),
    /// A boxed array of *TooManyHosts*. To be used in *Any* placeholders.
    ArrayOfTooManyHosts(Vec<TooManyHosts>),
    /// A boxed array of *TooManyNativeCloneLevels*. To be used in *Any* placeholders.
    ArrayOfTooManyNativeCloneLevels(Vec<TooManyNativeCloneLevels>),
    /// A boxed array of *TooManyNativeClonesOnFile*. To be used in *Any* placeholders.
    ArrayOfTooManyNativeClonesOnFile(Vec<TooManyNativeClonesOnFile>),
    /// A boxed array of *TooManySnapshotLevels*. To be used in *Any* placeholders.
    ArrayOfTooManySnapshotLevels(Vec<TooManySnapshotLevels>),
    /// A boxed array of *ToolsAlreadyUpgraded*. To be used in *Any* placeholders.
    ArrayOfToolsAlreadyUpgraded(Vec<ToolsAlreadyUpgraded>),
    /// A boxed array of *ToolsAutoUpgradeNotSupported*. To be used in *Any* placeholders.
    ArrayOfToolsAutoUpgradeNotSupported(Vec<ToolsAutoUpgradeNotSupported>),
    /// A boxed array of *ToolsImageCopyFailed*. To be used in *Any* placeholders.
    ArrayOfToolsImageCopyFailed(Vec<ToolsImageCopyFailed>),
    /// A boxed array of *ToolsImageNotAvailable*. To be used in *Any* placeholders.
    ArrayOfToolsImageNotAvailable(Vec<ToolsImageNotAvailable>),
    /// A boxed array of *ToolsImageSignatureCheckFailed*. To be used in *Any* placeholders.
    ArrayOfToolsImageSignatureCheckFailed(Vec<ToolsImageSignatureCheckFailed>),
    /// A boxed array of *ToolsInstallationInProgress*. To be used in *Any* placeholders.
    ArrayOfToolsInstallationInProgress(Vec<ToolsInstallationInProgress>),
    /// A boxed array of *ToolsUnavailable*. To be used in *Any* placeholders.
    ArrayOfToolsUnavailable(Vec<ToolsUnavailable>),
    /// A boxed array of *ToolsUpgradeCancelled*. To be used in *Any* placeholders.
    ArrayOfToolsUpgradeCancelled(Vec<ToolsUpgradeCancelled>),
    /// A boxed array of *UnSupportedDatastoreForVFlash*. To be used in *Any* placeholders.
    ArrayOfUnSupportedDatastoreForVFlash(Vec<UnSupportedDatastoreForVFlash>),
    /// A boxed array of *UncommittedUndoableDisk*. To be used in *Any* placeholders.
    ArrayOfUncommittedUndoableDisk(Vec<UncommittedUndoableDisk>),
    /// A boxed array of *UnconfiguredPropertyValue*. To be used in *Any* placeholders.
    ArrayOfUnconfiguredPropertyValue(Vec<UnconfiguredPropertyValue>),
    /// A boxed array of *UncustomizableGuest*. To be used in *Any* placeholders.
    ArrayOfUncustomizableGuest(Vec<UncustomizableGuest>),
    /// A boxed array of *UnexpectedCustomizationFault*. To be used in *Any* placeholders.
    ArrayOfUnexpectedCustomizationFault(Vec<UnexpectedCustomizationFault>),
    /// A boxed array of *UnrecognizedHost*. To be used in *Any* placeholders.
    ArrayOfUnrecognizedHost(Vec<UnrecognizedHost>),
    /// A boxed array of *UnsharedSwapVMotionNotSupported*. To be used in *Any* placeholders.
    ArrayOfUnsharedSwapVMotionNotSupported(Vec<UnsharedSwapVMotionNotSupported>),
    /// A boxed array of *UnsupportedDatastore*. To be used in *Any* placeholders.
    ArrayOfUnsupportedDatastore(Vec<Box<dyn super::traits::UnsupportedDatastoreTrait>>),
    /// A boxed array of *UnsupportedGuest*. To be used in *Any* placeholders.
    ArrayOfUnsupportedGuest(Vec<UnsupportedGuest>),
    /// A boxed array of *UnsupportedVimApiVersion*. To be used in *Any* placeholders.
    ArrayOfUnsupportedVimApiVersion(Vec<UnsupportedVimApiVersion>),
    /// A boxed array of *UnsupportedVmxLocation*. To be used in *Any* placeholders.
    ArrayOfUnsupportedVmxLocation(Vec<UnsupportedVmxLocation>),
    /// A boxed array of *UnusedVirtualDiskBlocksNotScrubbed*. To be used in *Any* placeholders.
    ArrayOfUnusedVirtualDiskBlocksNotScrubbed(Vec<UnusedVirtualDiskBlocksNotScrubbed>),
    /// A boxed array of *UserNotFound*. To be used in *Any* placeholders.
    ArrayOfUserNotFound(Vec<UserNotFound>),
    /// A boxed array of *VAppConfigFault*. To be used in *Any* placeholders.
    ArrayOfVAppConfigFault(Vec<Box<dyn super::traits::VAppConfigFaultTrait>>),
    /// A boxed array of *VAppNotRunning*. To be used in *Any* placeholders.
    ArrayOfVAppNotRunning(Vec<VAppNotRunning>),
    /// A boxed array of *VAppOperationInProgress*. To be used in *Any* placeholders.
    ArrayOfVAppOperationInProgress(Vec<VAppOperationInProgress>),
    /// A boxed array of *VAppPropertyFault*. To be used in *Any* placeholders.
    ArrayOfVAppPropertyFault(Vec<Box<dyn super::traits::VAppPropertyFaultTrait>>),
    /// A boxed array of *VAppTaskInProgress*. To be used in *Any* placeholders.
    ArrayOfVAppTaskInProgress(Vec<VAppTaskInProgress>),
    /// A boxed array of *VFlashCacheHotConfigNotSupported*. To be used in *Any* placeholders.
    ArrayOfVFlashCacheHotConfigNotSupported(Vec<VFlashCacheHotConfigNotSupported>),
    /// A boxed array of *VFlashModuleNotSupported*. To be used in *Any* placeholders.
    ArrayOfVFlashModuleNotSupported(Vec<VFlashModuleNotSupported>),
    /// A boxed array of *VFlashModuleVersionIncompatible*. To be used in *Any* placeholders.
    ArrayOfVFlashModuleVersionIncompatible(Vec<VFlashModuleVersionIncompatible>),
    /// A boxed array of *VMINotSupported*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVMINotSupported")]
    ArrayOfVmiNotSupported(Vec<VmiNotSupported>),
    /// A boxed array of *VMOnConflictDVPort*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVMOnConflictDVPort")]
    ArrayOfVmOnConflictDvPort(Vec<VmOnConflictDvPort>),
    /// A boxed array of *VMOnVirtualIntranet*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVMOnVirtualIntranet")]
    ArrayOfVmOnVirtualIntranet(Vec<VmOnVirtualIntranet>),
    /// A boxed array of *VMotionAcrossNetworkNotSupported*. To be used in *Any* placeholders.
    ArrayOfVMotionAcrossNetworkNotSupported(Vec<VMotionAcrossNetworkNotSupported>),
    /// A boxed array of *VMotionInterfaceIssue*. To be used in *Any* placeholders.
    ArrayOfVMotionInterfaceIssue(Vec<Box<dyn super::traits::VMotionInterfaceIssueTrait>>),
    /// A boxed array of *VMotionLinkCapacityLow*. To be used in *Any* placeholders.
    ArrayOfVMotionLinkCapacityLow(Vec<VMotionLinkCapacityLow>),
    /// A boxed array of *VMotionLinkDown*. To be used in *Any* placeholders.
    ArrayOfVMotionLinkDown(Vec<VMotionLinkDown>),
    /// A boxed array of *VMotionNotConfigured*. To be used in *Any* placeholders.
    ArrayOfVMotionNotConfigured(Vec<VMotionNotConfigured>),
    /// A boxed array of *VMotionNotLicensed*. To be used in *Any* placeholders.
    ArrayOfVMotionNotLicensed(Vec<VMotionNotLicensed>),
    /// A boxed array of *VMotionNotSupported*. To be used in *Any* placeholders.
    ArrayOfVMotionNotSupported(Vec<VMotionNotSupported>),
    /// A boxed array of *VMotionProtocolIncompatible*. To be used in *Any* placeholders.
    ArrayOfVMotionProtocolIncompatible(Vec<VMotionProtocolIncompatible>),
    /// A boxed array of *VimFault*. To be used in *Any* placeholders.
    ArrayOfVimFault(Vec<Box<dyn super::traits::VimFaultTrait>>),
    /// A boxed array of *VirtualDiskBlocksNotFullyProvisioned*. To be used in *Any* placeholders.
    ArrayOfVirtualDiskBlocksNotFullyProvisioned(Vec<VirtualDiskBlocksNotFullyProvisioned>),
    /// A boxed array of *VirtualDiskModeNotSupported*. To be used in *Any* placeholders.
    ArrayOfVirtualDiskModeNotSupported(Vec<VirtualDiskModeNotSupported>),
    /// A boxed array of *VirtualEthernetCardNotSupported*. To be used in *Any* placeholders.
    ArrayOfVirtualEthernetCardNotSupported(Vec<VirtualEthernetCardNotSupported>),
    /// A boxed array of *VirtualHardwareCompatibilityIssue*. To be used in *Any* placeholders.
    ArrayOfVirtualHardwareCompatibilityIssue(Vec<Box<dyn super::traits::VirtualHardwareCompatibilityIssueTrait>>),
    /// A boxed array of *VirtualHardwareVersionNotSupported*. To be used in *Any* placeholders.
    ArrayOfVirtualHardwareVersionNotSupported(Vec<VirtualHardwareVersionNotSupported>),
    /// A boxed array of *VmAlreadyExistsInDatacenter*. To be used in *Any* placeholders.
    ArrayOfVmAlreadyExistsInDatacenter(Vec<VmAlreadyExistsInDatacenter>),
    /// A boxed array of *VmConfigFault*. To be used in *Any* placeholders.
    ArrayOfVmConfigFault(Vec<Box<dyn super::traits::VmConfigFaultTrait>>),
    /// A boxed array of *VmConfigIncompatibleForFaultTolerance*. To be used in *Any* placeholders.
    ArrayOfVmConfigIncompatibleForFaultTolerance(Vec<VmConfigIncompatibleForFaultTolerance>),
    /// A boxed array of *VmConfigIncompatibleForRecordReplay*. To be used in *Any* placeholders.
    ArrayOfVmConfigIncompatibleForRecordReplay(Vec<VmConfigIncompatibleForRecordReplay>),
    /// A boxed array of *VmFaultToleranceConfigIssue*. To be used in *Any* placeholders.
    ArrayOfVmFaultToleranceConfigIssue(Vec<VmFaultToleranceConfigIssue>),
    /// A boxed array of *VmFaultToleranceConfigIssueWrapper*. To be used in *Any* placeholders.
    ArrayOfVmFaultToleranceConfigIssueWrapper(Vec<VmFaultToleranceConfigIssueWrapper>),
    /// A boxed array of *VmFaultToleranceInvalidFileBacking*. To be used in *Any* placeholders.
    ArrayOfVmFaultToleranceInvalidFileBacking(Vec<VmFaultToleranceInvalidFileBacking>),
    /// A boxed array of *VmFaultToleranceIssue*. To be used in *Any* placeholders.
    ArrayOfVmFaultToleranceIssue(Vec<Box<dyn super::traits::VmFaultToleranceIssueTrait>>),
    /// A boxed array of *VmFaultToleranceOpIssuesList*. To be used in *Any* placeholders.
    ArrayOfVmFaultToleranceOpIssuesList(Vec<VmFaultToleranceOpIssuesList>),
    /// A boxed array of *VmFaultToleranceTooManyFtVcpusOnHost*. To be used in *Any* placeholders.
    ArrayOfVmFaultToleranceTooManyFtVcpusOnHost(Vec<VmFaultToleranceTooManyFtVcpusOnHost>),
    /// A boxed array of *VmFaultToleranceTooManyVMsOnHost*. To be used in *Any* placeholders.
    ArrayOfVmFaultToleranceTooManyVMsOnHost(Vec<VmFaultToleranceTooManyVMsOnHost>),
    /// A boxed array of *VmHostAffinityRuleViolation*. To be used in *Any* placeholders.
    ArrayOfVmHostAffinityRuleViolation(Vec<VmHostAffinityRuleViolation>),
    /// A boxed array of *VmLimitLicense*. To be used in *Any* placeholders.
    ArrayOfVmLimitLicense(Vec<VmLimitLicense>),
    /// A boxed array of *VmMetadataManagerFault*. To be used in *Any* placeholders.
    ArrayOfVmMetadataManagerFault(Vec<VmMetadataManagerFault>),
    /// A boxed array of *VmMonitorIncompatibleForFaultTolerance*. To be used in *Any* placeholders.
    ArrayOfVmMonitorIncompatibleForFaultTolerance(Vec<VmMonitorIncompatibleForFaultTolerance>),
    /// A boxed array of *VmPowerOnDisabled*. To be used in *Any* placeholders.
    ArrayOfVmPowerOnDisabled(Vec<VmPowerOnDisabled>),
    /// A boxed array of *VmSmpFaultToleranceTooManyVMsOnHost*. To be used in *Any* placeholders.
    ArrayOfVmSmpFaultToleranceTooManyVMsOnHost(Vec<VmSmpFaultToleranceTooManyVMsOnHost>),
    /// A boxed array of *VmToolsUpgradeFault*. To be used in *Any* placeholders.
    ArrayOfVmToolsUpgradeFault(Vec<Box<dyn super::traits::VmToolsUpgradeFaultTrait>>),
    /// A boxed array of *VmValidateMaxDevice*. To be used in *Any* placeholders.
    ArrayOfVmValidateMaxDevice(Vec<VmValidateMaxDevice>),
    /// A boxed array of *VmWwnConflict*. To be used in *Any* placeholders.
    ArrayOfVmWwnConflict(Vec<VmWwnConflict>),
    /// A boxed array of *VmfsAlreadyMounted*. To be used in *Any* placeholders.
    ArrayOfVmfsAlreadyMounted(Vec<VmfsAlreadyMounted>),
    /// A boxed array of *VmfsAmbiguousMount*. To be used in *Any* placeholders.
    ArrayOfVmfsAmbiguousMount(Vec<VmfsAmbiguousMount>),
    /// A boxed array of *VmfsMountFault*. To be used in *Any* placeholders.
    ArrayOfVmfsMountFault(Vec<Box<dyn super::traits::VmfsMountFaultTrait>>),
    /// A boxed array of *VmotionInterfaceNotEnabled*. To be used in *Any* placeholders.
    ArrayOfVmotionInterfaceNotEnabled(Vec<VmotionInterfaceNotEnabled>),
    /// A boxed array of *VolumeEditorError*. To be used in *Any* placeholders.
    ArrayOfVolumeEditorError(Vec<VolumeEditorError>),
    /// A boxed array of *VramLimitLicense*. To be used in *Any* placeholders.
    ArrayOfVramLimitLicense(Vec<VramLimitLicense>),
    /// A boxed array of *VsanClusterUuidMismatch*. To be used in *Any* placeholders.
    ArrayOfVsanClusterUuidMismatch(Vec<VsanClusterUuidMismatch>),
    /// A boxed array of *VsanDiskFault*. To be used in *Any* placeholders.
    ArrayOfVsanDiskFault(Vec<Box<dyn super::traits::VsanDiskFaultTrait>>),
    /// A boxed array of *VsanFault*. To be used in *Any* placeholders.
    ArrayOfVsanFault(Vec<Box<dyn super::traits::VsanFaultTrait>>),
    /// A boxed array of *VsanIncompatibleDiskMapping*. To be used in *Any* placeholders.
    ArrayOfVsanIncompatibleDiskMapping(Vec<VsanIncompatibleDiskMapping>),
    /// A boxed array of *VspanDestPortConflict*. To be used in *Any* placeholders.
    ArrayOfVspanDestPortConflict(Vec<VspanDestPortConflict>),
    /// A boxed array of *VspanPortConflict*. To be used in *Any* placeholders.
    ArrayOfVspanPortConflict(Vec<VspanPortConflict>),
    /// A boxed array of *VspanPortMoveFault*. To be used in *Any* placeholders.
    ArrayOfVspanPortMoveFault(Vec<VspanPortMoveFault>),
    /// A boxed array of *VspanPortPromiscChangeFault*. To be used in *Any* placeholders.
    ArrayOfVspanPortPromiscChangeFault(Vec<VspanPortPromiscChangeFault>),
    /// A boxed array of *VspanPortgroupPromiscChangeFault*. To be used in *Any* placeholders.
    ArrayOfVspanPortgroupPromiscChangeFault(Vec<VspanPortgroupPromiscChangeFault>),
    /// A boxed array of *VspanPortgroupTypeChangeFault*. To be used in *Any* placeholders.
    ArrayOfVspanPortgroupTypeChangeFault(Vec<VspanPortgroupTypeChangeFault>),
    /// A boxed array of *VspanPromiscuousPortNotSupported*. To be used in *Any* placeholders.
    ArrayOfVspanPromiscuousPortNotSupported(Vec<VspanPromiscuousPortNotSupported>),
    /// A boxed array of *VspanSameSessionPortConflict*. To be used in *Any* placeholders.
    ArrayOfVspanSameSessionPortConflict(Vec<VspanSameSessionPortConflict>),
    /// A boxed array of *WakeOnLanNotSupported*. To be used in *Any* placeholders.
    ArrayOfWakeOnLanNotSupported(Vec<WakeOnLanNotSupported>),
    /// A boxed array of *WakeOnLanNotSupportedByVmotionNIC*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfWakeOnLanNotSupportedByVmotionNIC")]
    ArrayOfWakeOnLanNotSupportedByVmotionNic(Vec<WakeOnLanNotSupportedByVmotionNic>),
    /// A boxed array of *WillLoseHAProtection*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfWillLoseHAProtection")]
    ArrayOfWillLoseHaProtection(Vec<WillLoseHaProtection>),
    /// A boxed array of *WillModifyConfigCpuRequirements*. To be used in *Any* placeholders.
    ArrayOfWillModifyConfigCpuRequirements(Vec<WillModifyConfigCpuRequirements>),
    /// A boxed array of *WillResetSnapshotDirectory*. To be used in *Any* placeholders.
    ArrayOfWillResetSnapshotDirectory(Vec<WillResetSnapshotDirectory>),
    /// A boxed array of *WipeDiskFault*. To be used in *Any* placeholders.
    ArrayOfWipeDiskFault(Vec<WipeDiskFault>),
    /// A boxed array of *HostActiveDirectoryInfo*. To be used in *Any* placeholders.
    ArrayOfHostActiveDirectoryInfo(Vec<HostActiveDirectoryInfo>),
    /// A boxed array of *HostActiveDirectory*. To be used in *Any* placeholders.
    ArrayOfHostActiveDirectory(Vec<HostActiveDirectory>),
    /// A boxed array of *HostActiveDirectorySpec*. To be used in *Any* placeholders.
    ArrayOfHostActiveDirectorySpec(Vec<HostActiveDirectorySpec>),
    /// A boxed array of *HostAssignableHardwareBinding*. To be used in *Any* placeholders.
    ArrayOfHostAssignableHardwareBinding(Vec<HostAssignableHardwareBinding>),
    /// A boxed array of *HostAssignableHardwareConfig*. To be used in *Any* placeholders.
    ArrayOfHostAssignableHardwareConfig(Vec<HostAssignableHardwareConfig>),
    /// A boxed array of *HostAssignableHardwareConfigAttributeOverride*. To be used in *Any* placeholders.
    ArrayOfHostAssignableHardwareConfigAttributeOverride(Vec<HostAssignableHardwareConfigAttributeOverride>),
    /// A boxed array of *HostAuthenticationManagerInfo*. To be used in *Any* placeholders.
    ArrayOfHostAuthenticationManagerInfo(Vec<HostAuthenticationManagerInfo>),
    /// A boxed array of *HostAuthenticationStoreInfo*. To be used in *Any* placeholders.
    ArrayOfHostAuthenticationStoreInfo(Vec<Box<dyn super::traits::HostAuthenticationStoreInfoTrait>>),
    /// A boxed array of *AutoStartPowerInfo*. To be used in *Any* placeholders.
    ArrayOfAutoStartPowerInfo(Vec<AutoStartPowerInfo>),
    /// A boxed array of *HostAutoStartManagerConfig*. To be used in *Any* placeholders.
    ArrayOfHostAutoStartManagerConfig(Vec<HostAutoStartManagerConfig>),
    /// A boxed array of *AutoStartDefaults*. To be used in *Any* placeholders.
    ArrayOfAutoStartDefaults(Vec<AutoStartDefaults>),
    /// A boxed array of *HostBIOSInfo*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfHostBIOSInfo")]
    ArrayOfHostBiosInfo(Vec<HostBiosInfo>),
    /// A boxed array of *HostBlockAdapterTargetTransport*. To be used in *Any* placeholders.
    ArrayOfHostBlockAdapterTargetTransport(Vec<HostBlockAdapterTargetTransport>),
    /// A boxed array of *HostBlockHba*. To be used in *Any* placeholders.
    ArrayOfHostBlockHba(Vec<HostBlockHba>),
    /// A boxed array of *HostBootDeviceInfo*. To be used in *Any* placeholders.
    ArrayOfHostBootDeviceInfo(Vec<HostBootDeviceInfo>),
    /// A boxed array of *HostBootDevice*. To be used in *Any* placeholders.
    ArrayOfHostBootDevice(Vec<HostBootDevice>),
    /// A boxed array of *HostCacheConfigurationInfo*. To be used in *Any* placeholders.
    ArrayOfHostCacheConfigurationInfo(Vec<HostCacheConfigurationInfo>),
    /// A boxed array of *HostCacheConfigurationSpec*. To be used in *Any* placeholders.
    ArrayOfHostCacheConfigurationSpec(Vec<HostCacheConfigurationSpec>),
    /// A boxed array of *HostCapability*. To be used in *Any* placeholders.
    ArrayOfHostCapability(Vec<HostCapability>),
    /// A boxed array of *HostCertificateManagerCertificateInfo*. To be used in *Any* placeholders.
    ArrayOfHostCertificateManagerCertificateInfo(Vec<HostCertificateManagerCertificateInfo>),
    /// A boxed array of *HostCertificateManagerCertificateSpec*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 8.0.1.0
    ArrayOfHostCertificateManagerCertificateSpec(Vec<HostCertificateManagerCertificateSpec>),
    /// A boxed array of *HostConfigChange*. To be used in *Any* placeholders.
    ArrayOfHostConfigChange(Vec<HostConfigChange>),
    /// A boxed array of *HostConfigInfo*. To be used in *Any* placeholders.
    ArrayOfHostConfigInfo(Vec<HostConfigInfo>),
    /// A boxed array of *HostConfigManager*. To be used in *Any* placeholders.
    ArrayOfHostConfigManager(Vec<HostConfigManager>),
    /// A boxed array of *HostConfigSpec*. To be used in *Any* placeholders.
    ArrayOfHostConfigSpec(Vec<HostConfigSpec>),
    /// A boxed array of *HostConnectInfo*. To be used in *Any* placeholders.
    ArrayOfHostConnectInfo(Vec<HostConnectInfo>),
    /// A boxed array of *HostDatastoreExistsConnectInfo*. To be used in *Any* placeholders.
    ArrayOfHostDatastoreExistsConnectInfo(Vec<HostDatastoreExistsConnectInfo>),
    /// A boxed array of *HostDatastoreConnectInfo*. To be used in *Any* placeholders.
    ArrayOfHostDatastoreConnectInfo(Vec<Box<dyn super::traits::HostDatastoreConnectInfoTrait>>),
    /// A boxed array of *HostDatastoreNameConflictConnectInfo*. To be used in *Any* placeholders.
    ArrayOfHostDatastoreNameConflictConnectInfo(Vec<HostDatastoreNameConflictConnectInfo>),
    /// A boxed array of *HostLicenseConnectInfo*. To be used in *Any* placeholders.
    ArrayOfHostLicenseConnectInfo(Vec<HostLicenseConnectInfo>),
    /// A boxed array of *HostConnectInfoNetworkInfo*. To be used in *Any* placeholders.
    ArrayOfHostConnectInfoNetworkInfo(Vec<Box<dyn super::traits::HostConnectInfoNetworkInfoTrait>>),
    /// A boxed array of *HostNewNetworkConnectInfo*. To be used in *Any* placeholders.
    ArrayOfHostNewNetworkConnectInfo(Vec<HostNewNetworkConnectInfo>),
    /// A boxed array of *HostConnectSpec*. To be used in *Any* placeholders.
    ArrayOfHostConnectSpec(Vec<HostConnectSpec>),
    /// A boxed array of *HostCpuIdInfo*. To be used in *Any* placeholders.
    ArrayOfHostCpuIdInfo(Vec<HostCpuIdInfo>),
    /// A boxed array of *HostCpuInfo*. To be used in *Any* placeholders.
    ArrayOfHostCpuInfo(Vec<HostCpuInfo>),
    /// A boxed array of *HostCpuPackage*. To be used in *Any* placeholders.
    ArrayOfHostCpuPackage(Vec<HostCpuPackage>),
    /// A boxed array of *HostCpuPowerManagementInfo*. To be used in *Any* placeholders.
    ArrayOfHostCpuPowerManagementInfo(Vec<HostCpuPowerManagementInfo>),
    /// A boxed array of *HostHyperThreadScheduleInfo*. To be used in *Any* placeholders.
    ArrayOfHostHyperThreadScheduleInfo(Vec<HostHyperThreadScheduleInfo>),
    /// A boxed array of *HostDataTransportConnectionInfo*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 7.0.3.0
    ArrayOfHostDataTransportConnectionInfo(Vec<Box<dyn super::traits::HostDataTransportConnectionInfoTrait>>),
    /// A boxed array of *FileInfo*. To be used in *Any* placeholders.
    ArrayOfFileInfo(Vec<Box<dyn super::traits::FileInfoTrait>>),
    /// A boxed array of *FileQueryFlags*. To be used in *Any* placeholders.
    ArrayOfFileQueryFlags(Vec<FileQueryFlags>),
    /// A boxed array of *FloppyImageFileInfo*. To be used in *Any* placeholders.
    ArrayOfFloppyImageFileInfo(Vec<FloppyImageFileInfo>),
    /// A boxed array of *FloppyImageFileQuery*. To be used in *Any* placeholders.
    ArrayOfFloppyImageFileQuery(Vec<FloppyImageFileQuery>),
    /// A boxed array of *FolderFileInfo*. To be used in *Any* placeholders.
    ArrayOfFolderFileInfo(Vec<FolderFileInfo>),
    /// A boxed array of *FolderFileQuery*. To be used in *Any* placeholders.
    ArrayOfFolderFileQuery(Vec<FolderFileQuery>),
    /// A boxed array of *IsoImageFileInfo*. To be used in *Any* placeholders.
    ArrayOfIsoImageFileInfo(Vec<IsoImageFileInfo>),
    /// A boxed array of *IsoImageFileQuery*. To be used in *Any* placeholders.
    ArrayOfIsoImageFileQuery(Vec<IsoImageFileQuery>),
    /// A boxed array of *FileQuery*. To be used in *Any* placeholders.
    ArrayOfFileQuery(Vec<Box<dyn super::traits::FileQueryTrait>>),
    /// A boxed array of *HostDatastoreBrowserSearchResults*. To be used in *Any* placeholders.
    ArrayOfHostDatastoreBrowserSearchResults(Vec<HostDatastoreBrowserSearchResults>),
    /// A boxed array of *HostDatastoreBrowserSearchSpec*. To be used in *Any* placeholders.
    ArrayOfHostDatastoreBrowserSearchSpec(Vec<HostDatastoreBrowserSearchSpec>),
    /// A boxed array of *TemplateConfigFileInfo*. To be used in *Any* placeholders.
    ArrayOfTemplateConfigFileInfo(Vec<TemplateConfigFileInfo>),
    /// A boxed array of *TemplateConfigFileQuery*. To be used in *Any* placeholders.
    ArrayOfTemplateConfigFileQuery(Vec<TemplateConfigFileQuery>),
    /// A boxed array of *VmConfigFileInfo*. To be used in *Any* placeholders.
    ArrayOfVmConfigFileInfo(Vec<Box<dyn super::traits::VmConfigFileInfoTrait>>),
    /// A boxed array of *VmConfigFileEncryptionInfo*. To be used in *Any* placeholders.
    ArrayOfVmConfigFileEncryptionInfo(Vec<VmConfigFileEncryptionInfo>),
    /// A boxed array of *VmConfigFileQuery*. To be used in *Any* placeholders.
    ArrayOfVmConfigFileQuery(Vec<Box<dyn super::traits::VmConfigFileQueryTrait>>),
    /// A boxed array of *VmConfigFileQueryFlags*. To be used in *Any* placeholders.
    ArrayOfVmConfigFileQueryFlags(Vec<VmConfigFileQueryFlags>),
    /// A boxed array of *VmConfigFileQueryFilter*. To be used in *Any* placeholders.
    ArrayOfVmConfigFileQueryFilter(Vec<VmConfigFileQueryFilter>),
    /// A boxed array of *VmDiskFileInfo*. To be used in *Any* placeholders.
    ArrayOfVmDiskFileInfo(Vec<VmDiskFileInfo>),
    /// A boxed array of *VmDiskFileEncryptionInfo*. To be used in *Any* placeholders.
    ArrayOfVmDiskFileEncryptionInfo(Vec<VmDiskFileEncryptionInfo>),
    /// A boxed array of *VmDiskFileQuery*. To be used in *Any* placeholders.
    ArrayOfVmDiskFileQuery(Vec<VmDiskFileQuery>),
    /// A boxed array of *VmDiskFileQueryFlags*. To be used in *Any* placeholders.
    ArrayOfVmDiskFileQueryFlags(Vec<VmDiskFileQueryFlags>),
    /// A boxed array of *VmDiskFileQueryFilter*. To be used in *Any* placeholders.
    ArrayOfVmDiskFileQueryFilter(Vec<VmDiskFileQueryFilter>),
    /// A boxed array of *VmLogFileInfo*. To be used in *Any* placeholders.
    ArrayOfVmLogFileInfo(Vec<VmLogFileInfo>),
    /// A boxed array of *VmLogFileQuery*. To be used in *Any* placeholders.
    ArrayOfVmLogFileQuery(Vec<VmLogFileQuery>),
    /// A boxed array of *VmNvramFileInfo*. To be used in *Any* placeholders.
    ArrayOfVmNvramFileInfo(Vec<VmNvramFileInfo>),
    /// A boxed array of *VmNvramFileQuery*. To be used in *Any* placeholders.
    ArrayOfVmNvramFileQuery(Vec<VmNvramFileQuery>),
    /// A boxed array of *VmSnapshotFileInfo*. To be used in *Any* placeholders.
    ArrayOfVmSnapshotFileInfo(Vec<VmSnapshotFileInfo>),
    /// A boxed array of *VmSnapshotFileQuery*. To be used in *Any* placeholders.
    ArrayOfVmSnapshotFileQuery(Vec<VmSnapshotFileQuery>),
    /// A boxed array of *HostDatastoreSystemCapabilities*. To be used in *Any* placeholders.
    ArrayOfHostDatastoreSystemCapabilities(Vec<HostDatastoreSystemCapabilities>),
    /// A boxed array of *HostDatastoreSystemDatastoreResult*. To be used in *Any* placeholders.
    ArrayOfHostDatastoreSystemDatastoreResult(Vec<HostDatastoreSystemDatastoreResult>),
    /// A boxed array of *HostDatastoreSystemVvolDatastoreSpec*. To be used in *Any* placeholders.
    ArrayOfHostDatastoreSystemVvolDatastoreSpec(Vec<HostDatastoreSystemVvolDatastoreSpec>),
    /// A boxed array of *HostDateTimeConfig*. To be used in *Any* placeholders.
    ArrayOfHostDateTimeConfig(Vec<HostDateTimeConfig>),
    /// A boxed array of *HostDateTimeInfo*. To be used in *Any* placeholders.
    ArrayOfHostDateTimeInfo(Vec<HostDateTimeInfo>),
    /// A boxed array of *HostDateTimeSystemServiceTestResult*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 7.0.3.0
    ArrayOfHostDateTimeSystemServiceTestResult(Vec<HostDateTimeSystemServiceTestResult>),
    /// A boxed array of *HostDateTimeSystemTimeZone*. To be used in *Any* placeholders.
    ArrayOfHostDateTimeSystemTimeZone(Vec<HostDateTimeSystemTimeZone>),
    /// A boxed array of *HostDeploymentInfo*. To be used in *Any* placeholders.
    ArrayOfHostDeploymentInfo(Vec<HostDeploymentInfo>),
    /// A boxed array of *HostDevice*. To be used in *Any* placeholders.
    ArrayOfHostDevice(Vec<Box<dyn super::traits::HostDeviceTrait>>),
    /// A boxed array of *HostDhcpService*. To be used in *Any* placeholders.
    ArrayOfHostDhcpService(Vec<HostDhcpService>),
    /// A boxed array of *HostDhcpServiceConfig*. To be used in *Any* placeholders.
    ArrayOfHostDhcpServiceConfig(Vec<HostDhcpServiceConfig>),
    /// A boxed array of *HostDhcpServiceSpec*. To be used in *Any* placeholders.
    ArrayOfHostDhcpServiceSpec(Vec<HostDhcpServiceSpec>),
    /// A boxed array of *HostDiagnosticPartition*. To be used in *Any* placeholders.
    ArrayOfHostDiagnosticPartition(Vec<HostDiagnosticPartition>),
    /// A boxed array of *HostDiagnosticPartitionCreateDescription*. To be used in *Any* placeholders.
    ArrayOfHostDiagnosticPartitionCreateDescription(Vec<HostDiagnosticPartitionCreateDescription>),
    /// A boxed array of *HostDiagnosticPartitionCreateOption*. To be used in *Any* placeholders.
    ArrayOfHostDiagnosticPartitionCreateOption(Vec<HostDiagnosticPartitionCreateOption>),
    /// A boxed array of *HostDiagnosticPartitionCreateSpec*. To be used in *Any* placeholders.
    ArrayOfHostDiagnosticPartitionCreateSpec(Vec<HostDiagnosticPartitionCreateSpec>),
    /// A boxed array of *HostDigestInfo*. To be used in *Any* placeholders.
    ArrayOfHostDigestInfo(Vec<Box<dyn super::traits::HostDigestInfoTrait>>),
    /// A boxed array of *HostDirectoryStoreInfo*. To be used in *Any* placeholders.
    ArrayOfHostDirectoryStoreInfo(Vec<Box<dyn super::traits::HostDirectoryStoreInfoTrait>>),
    /// A boxed array of *HostDiskConfigurationResult*. To be used in *Any* placeholders.
    ArrayOfHostDiskConfigurationResult(Vec<HostDiskConfigurationResult>),
    /// A boxed array of *HostDiskDimensions*. To be used in *Any* placeholders.
    ArrayOfHostDiskDimensions(Vec<HostDiskDimensions>),
    /// A boxed array of *HostDiskDimensionsChs*. To be used in *Any* placeholders.
    ArrayOfHostDiskDimensionsChs(Vec<HostDiskDimensionsChs>),
    /// A boxed array of *HostDiskDimensionsLba*. To be used in *Any* placeholders.
    ArrayOfHostDiskDimensionsLba(Vec<HostDiskDimensionsLba>),
    /// A boxed array of *HostDiskPartitionInfo*. To be used in *Any* placeholders.
    ArrayOfHostDiskPartitionInfo(Vec<HostDiskPartitionInfo>),
    /// A boxed array of *HostDiskPartitionBlockRange*. To be used in *Any* placeholders.
    ArrayOfHostDiskPartitionBlockRange(Vec<HostDiskPartitionBlockRange>),
    /// A boxed array of *HostDiskPartitionLayout*. To be used in *Any* placeholders.
    ArrayOfHostDiskPartitionLayout(Vec<HostDiskPartitionLayout>),
    /// A boxed array of *HostDiskPartitionAttributes*. To be used in *Any* placeholders.
    ArrayOfHostDiskPartitionAttributes(Vec<HostDiskPartitionAttributes>),
    /// A boxed array of *HostDiskPartitionSpec*. To be used in *Any* placeholders.
    ArrayOfHostDiskPartitionSpec(Vec<HostDiskPartitionSpec>),
    /// A boxed array of *HostDnsConfig*. To be used in *Any* placeholders.
    ArrayOfHostDnsConfig(Vec<Box<dyn super::traits::HostDnsConfigTrait>>),
    /// A boxed array of *HostDnsConfigSpec*. To be used in *Any* placeholders.
    ArrayOfHostDnsConfigSpec(Vec<HostDnsConfigSpec>),
    /// A boxed array of *HostDvxClass*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 8.0.0.1
    ArrayOfHostDvxClass(Vec<HostDvxClass>),
    /// A boxed array of *HostEnterMaintenanceResult*. To be used in *Any* placeholders.
    ArrayOfHostEnterMaintenanceResult(Vec<HostEnterMaintenanceResult>),
    /// A boxed array of *HostEsxAgentHostManagerConfigInfo*. To be used in *Any* placeholders.
    ArrayOfHostEsxAgentHostManagerConfigInfo(Vec<HostEsxAgentHostManagerConfigInfo>),
    /// A boxed array of *HostFaultToleranceManagerComponentHealthInfo*. To be used in *Any* placeholders.
    ArrayOfHostFaultToleranceManagerComponentHealthInfo(Vec<HostFaultToleranceManagerComponentHealthInfo>),
    /// A boxed array of *FcoeConfig*. To be used in *Any* placeholders.
    ArrayOfFcoeConfig(Vec<FcoeConfig>),
    /// A boxed array of *FcoeConfigFcoeCapabilities*. To be used in *Any* placeholders.
    ArrayOfFcoeConfigFcoeCapabilities(Vec<FcoeConfigFcoeCapabilities>),
    /// A boxed array of *FcoeConfigFcoeSpecification*. To be used in *Any* placeholders.
    ArrayOfFcoeConfigFcoeSpecification(Vec<FcoeConfigFcoeSpecification>),
    /// A boxed array of *FcoeConfigVlanRange*. To be used in *Any* placeholders.
    ArrayOfFcoeConfigVlanRange(Vec<FcoeConfigVlanRange>),
    /// A boxed array of *HostFeatureCapability*. To be used in *Any* placeholders.
    ArrayOfHostFeatureCapability(Vec<HostFeatureCapability>),
    /// A boxed array of *HostFeatureMask*. To be used in *Any* placeholders.
    ArrayOfHostFeatureMask(Vec<HostFeatureMask>),
    /// A boxed array of *HostFeatureVersionInfo*. To be used in *Any* placeholders.
    ArrayOfHostFeatureVersionInfo(Vec<HostFeatureVersionInfo>),
    /// A boxed array of *HostFibreChannelHba*. To be used in *Any* placeholders.
    ArrayOfHostFibreChannelHba(Vec<Box<dyn super::traits::HostFibreChannelHbaTrait>>),
    /// A boxed array of *HostFibreChannelOverEthernetHba*. To be used in *Any* placeholders.
    ArrayOfHostFibreChannelOverEthernetHba(Vec<HostFibreChannelOverEthernetHba>),
    /// A boxed array of *HostFibreChannelOverEthernetHbaLinkInfo*. To be used in *Any* placeholders.
    ArrayOfHostFibreChannelOverEthernetHbaLinkInfo(Vec<HostFibreChannelOverEthernetHbaLinkInfo>),
    /// A boxed array of *HostFibreChannelOverEthernetTargetTransport*. To be used in *Any* placeholders.
    ArrayOfHostFibreChannelOverEthernetTargetTransport(Vec<HostFibreChannelOverEthernetTargetTransport>),
    /// A boxed array of *HostFibreChannelTargetTransport*. To be used in *Any* placeholders.
    ArrayOfHostFibreChannelTargetTransport(Vec<Box<dyn super::traits::HostFibreChannelTargetTransportTrait>>),
    /// A boxed array of *HostFileAccess*. To be used in *Any* placeholders.
    ArrayOfHostFileAccess(Vec<HostFileAccess>),
    /// A boxed array of *ModeInfo*. To be used in *Any* placeholders.
    ArrayOfModeInfo(Vec<ModeInfo>),
    /// A boxed array of *HostFileSystemMountInfo*. To be used in *Any* placeholders.
    ArrayOfHostFileSystemMountInfo(Vec<HostFileSystemMountInfo>),
    /// A boxed array of *HostFileSystemVolume*. To be used in *Any* placeholders.
    ArrayOfHostFileSystemVolume(Vec<Box<dyn super::traits::HostFileSystemVolumeTrait>>),
    /// A boxed array of *HostFileSystemVolumeInfo*. To be used in *Any* placeholders.
    ArrayOfHostFileSystemVolumeInfo(Vec<HostFileSystemVolumeInfo>),
    /// A boxed array of *HostFirewallConfig*. To be used in *Any* placeholders.
    ArrayOfHostFirewallConfig(Vec<HostFirewallConfig>),
    /// A boxed array of *HostFirewallConfigRuleSetConfig*. To be used in *Any* placeholders.
    ArrayOfHostFirewallConfigRuleSetConfig(Vec<HostFirewallConfigRuleSetConfig>),
    /// A boxed array of *HostFirewallInfo*. To be used in *Any* placeholders.
    ArrayOfHostFirewallInfo(Vec<HostFirewallInfo>),
    /// A boxed array of *HostFirewallDefaultPolicy*. To be used in *Any* placeholders.
    ArrayOfHostFirewallDefaultPolicy(Vec<HostFirewallDefaultPolicy>),
    /// A boxed array of *HostFlagInfo*. To be used in *Any* placeholders.
    ArrayOfHostFlagInfo(Vec<HostFlagInfo>),
    /// A boxed array of *HostForceMountedInfo*. To be used in *Any* placeholders.
    ArrayOfHostForceMountedInfo(Vec<HostForceMountedInfo>),
    /// A boxed array of *HostFru*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 8.0.0.1
    ArrayOfHostFru(Vec<HostFru>),
    /// A boxed array of *HostGatewaySpec*. To be used in *Any* placeholders.
    ArrayOfHostGatewaySpec(Vec<HostGatewaySpec>),
    /// A boxed array of *HostGraphicsConfig*. To be used in *Any* placeholders.
    ArrayOfHostGraphicsConfig(Vec<HostGraphicsConfig>),
    /// A boxed array of *HostGraphicsConfigDeviceType*. To be used in *Any* placeholders.
    ArrayOfHostGraphicsConfigDeviceType(Vec<HostGraphicsConfigDeviceType>),
    /// A boxed array of *HostGraphicsInfo*. To be used in *Any* placeholders.
    ArrayOfHostGraphicsInfo(Vec<HostGraphicsInfo>),
    /// A boxed array of *HostHardwareInfo*. To be used in *Any* placeholders.
    ArrayOfHostHardwareInfo(Vec<HostHardwareInfo>),
    /// A boxed array of *HostHardwareStatusInfo*. To be used in *Any* placeholders.
    ArrayOfHostHardwareStatusInfo(Vec<HostHardwareStatusInfo>),
    /// A boxed array of *DpuStatusInfo*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 8.0.0.1
    ArrayOfDpuStatusInfo(Vec<DpuStatusInfo>),
    /// A boxed array of *DpuStatusInfoOperationalInfo*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 8.0.0.1
    ArrayOfDpuStatusInfoOperationalInfo(Vec<DpuStatusInfoOperationalInfo>),
    /// A boxed array of *HostHardwareElementInfo*. To be used in *Any* placeholders.
    ArrayOfHostHardwareElementInfo(Vec<Box<dyn super::traits::HostHardwareElementInfoTrait>>),
    /// A boxed array of *HostStorageElementInfo*. To be used in *Any* placeholders.
    ArrayOfHostStorageElementInfo(Vec<HostStorageElementInfo>),
    /// A boxed array of *HostStorageOperationalInfo*. To be used in *Any* placeholders.
    ArrayOfHostStorageOperationalInfo(Vec<HostStorageOperationalInfo>),
    /// A boxed array of *HostHbaCreateSpec*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 7.0.3.0
    ArrayOfHostHbaCreateSpec(Vec<Box<dyn super::traits::HostHbaCreateSpecTrait>>),
    /// A boxed array of *HealthSystemRuntime*. To be used in *Any* placeholders.
    ArrayOfHealthSystemRuntime(Vec<HealthSystemRuntime>),
    /// A boxed array of *HostAccessControlEntry*. To be used in *Any* placeholders.
    ArrayOfHostAccessControlEntry(Vec<HostAccessControlEntry>),
    /// A boxed array of *HostHostBusAdapter*. To be used in *Any* placeholders.
    ArrayOfHostHostBusAdapter(Vec<Box<dyn super::traits::HostHostBusAdapterTrait>>),
    /// A boxed array of *HostProxySwitch*. To be used in *Any* placeholders.
    ArrayOfHostProxySwitch(Vec<HostProxySwitch>),
    /// A boxed array of *HostProxySwitchConfig*. To be used in *Any* placeholders.
    ArrayOfHostProxySwitchConfig(Vec<HostProxySwitchConfig>),
    /// A boxed array of *HostProxySwitchEnsInfo*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 8.0.0.1
    ArrayOfHostProxySwitchEnsInfo(Vec<HostProxySwitchEnsInfo>),
    /// A boxed array of *HostProxySwitchHostLagConfig*. To be used in *Any* placeholders.
    ArrayOfHostProxySwitchHostLagConfig(Vec<HostProxySwitchHostLagConfig>),
    /// A boxed array of *HostProxySwitchSpec*. To be used in *Any* placeholders.
    ArrayOfHostProxySwitchSpec(Vec<HostProxySwitchSpec>),
    /// A boxed array of *HostImageProfileSummary*. To be used in *Any* placeholders.
    ArrayOfHostImageProfileSummary(Vec<HostImageProfileSummary>),
    /// A boxed array of *HostInternetScsiHba*. To be used in *Any* placeholders.
    ArrayOfHostInternetScsiHba(Vec<HostInternetScsiHba>),
    /// A boxed array of *HostInternetScsiHbaAuthenticationCapabilities*. To be used in *Any* placeholders.
    ArrayOfHostInternetScsiHbaAuthenticationCapabilities(Vec<HostInternetScsiHbaAuthenticationCapabilities>),
    /// A boxed array of *HostInternetScsiHbaAuthenticationProperties*. To be used in *Any* placeholders.
    ArrayOfHostInternetScsiHbaAuthenticationProperties(Vec<HostInternetScsiHbaAuthenticationProperties>),
    /// A boxed array of *HostInternetScsiHbaDigestCapabilities*. To be used in *Any* placeholders.
    ArrayOfHostInternetScsiHbaDigestCapabilities(Vec<HostInternetScsiHbaDigestCapabilities>),
    /// A boxed array of *HostInternetScsiHbaDigestProperties*. To be used in *Any* placeholders.
    ArrayOfHostInternetScsiHbaDigestProperties(Vec<HostInternetScsiHbaDigestProperties>),
    /// A boxed array of *HostInternetScsiHbaDiscoveryCapabilities*. To be used in *Any* placeholders.
    ArrayOfHostInternetScsiHbaDiscoveryCapabilities(Vec<HostInternetScsiHbaDiscoveryCapabilities>),
    /// A boxed array of *HostInternetScsiHbaDiscoveryProperties*. To be used in *Any* placeholders.
    ArrayOfHostInternetScsiHbaDiscoveryProperties(Vec<HostInternetScsiHbaDiscoveryProperties>),
    /// A boxed array of *HostInternetScsiHbaIPCapabilities*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfHostInternetScsiHbaIPCapabilities")]
    ArrayOfHostInternetScsiHbaIpCapabilities(Vec<HostInternetScsiHbaIpCapabilities>),
    /// A boxed array of *HostInternetScsiHbaIPProperties*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfHostInternetScsiHbaIPProperties")]
    ArrayOfHostInternetScsiHbaIpProperties(Vec<HostInternetScsiHbaIpProperties>),
    /// A boxed array of *HostInternetScsiHbaIPv6Properties*. To be used in *Any* placeholders.
    ArrayOfHostInternetScsiHbaIPv6Properties(Vec<HostInternetScsiHbaIPv6Properties>),
    /// A boxed array of *HostInternetScsiHbaIscsiIpv6Address*. To be used in *Any* placeholders.
    ArrayOfHostInternetScsiHbaIscsiIpv6Address(Vec<HostInternetScsiHbaIscsiIpv6Address>),
    /// A boxed array of *HostInternetScsiHbaParamValue*. To be used in *Any* placeholders.
    ArrayOfHostInternetScsiHbaParamValue(Vec<HostInternetScsiHbaParamValue>),
    /// A boxed array of *HostInternetScsiHbaSendTarget*. To be used in *Any* placeholders.
    ArrayOfHostInternetScsiHbaSendTarget(Vec<HostInternetScsiHbaSendTarget>),
    /// A boxed array of *HostInternetScsiHbaStaticTarget*. To be used in *Any* placeholders.
    ArrayOfHostInternetScsiHbaStaticTarget(Vec<HostInternetScsiHbaStaticTarget>),
    /// A boxed array of *HostInternetScsiHbaTargetSet*. To be used in *Any* placeholders.
    ArrayOfHostInternetScsiHbaTargetSet(Vec<HostInternetScsiHbaTargetSet>),
    /// A boxed array of *HostInternetScsiTargetTransport*. To be used in *Any* placeholders.
    ArrayOfHostInternetScsiTargetTransport(Vec<HostInternetScsiTargetTransport>),
    /// A boxed array of *HostIpConfig*. To be used in *Any* placeholders.
    ArrayOfHostIpConfig(Vec<HostIpConfig>),
    /// A boxed array of *HostIpConfigIpV6Address*. To be used in *Any* placeholders.
    ArrayOfHostIpConfigIpV6Address(Vec<HostIpConfigIpV6Address>),
    /// A boxed array of *HostIpConfigIpV6AddressConfiguration*. To be used in *Any* placeholders.
    ArrayOfHostIpConfigIpV6AddressConfiguration(Vec<HostIpConfigIpV6AddressConfiguration>),
    /// A boxed array of *HostIpRouteConfig*. To be used in *Any* placeholders.
    ArrayOfHostIpRouteConfig(Vec<Box<dyn super::traits::HostIpRouteConfigTrait>>),
    /// A boxed array of *HostIpRouteConfigSpec*. To be used in *Any* placeholders.
    ArrayOfHostIpRouteConfigSpec(Vec<HostIpRouteConfigSpec>),
    /// A boxed array of *HostIpRouteEntry*. To be used in *Any* placeholders.
    ArrayOfHostIpRouteEntry(Vec<HostIpRouteEntry>),
    /// A boxed array of *HostIpRouteOp*. To be used in *Any* placeholders.
    ArrayOfHostIpRouteOp(Vec<HostIpRouteOp>),
    /// A boxed array of *HostIpRouteTableConfig*. To be used in *Any* placeholders.
    ArrayOfHostIpRouteTableConfig(Vec<HostIpRouteTableConfig>),
    /// A boxed array of *HostIpRouteTableInfo*. To be used in *Any* placeholders.
    ArrayOfHostIpRouteTableInfo(Vec<HostIpRouteTableInfo>),
    /// A boxed array of *HostIpmiInfo*. To be used in *Any* placeholders.
    ArrayOfHostIpmiInfo(Vec<HostIpmiInfo>),
    /// A boxed array of *IscsiDependencyEntity*. To be used in *Any* placeholders.
    ArrayOfIscsiDependencyEntity(Vec<IscsiDependencyEntity>),
    /// A boxed array of *IscsiMigrationDependency*. To be used in *Any* placeholders.
    ArrayOfIscsiMigrationDependency(Vec<IscsiMigrationDependency>),
    /// A boxed array of *IscsiPortInfo*. To be used in *Any* placeholders.
    ArrayOfIscsiPortInfo(Vec<IscsiPortInfo>),
    /// A boxed array of *IscsiStatus*. To be used in *Any* placeholders.
    ArrayOfIscsiStatus(Vec<IscsiStatus>),
    /// A boxed array of *KernelModuleInfo*. To be used in *Any* placeholders.
    ArrayOfKernelModuleInfo(Vec<KernelModuleInfo>),
    /// A boxed array of *KernelModuleSectionInfo*. To be used in *Any* placeholders.
    ArrayOfKernelModuleSectionInfo(Vec<KernelModuleSectionInfo>),
    /// A boxed array of *HostLicenseSpec*. To be used in *Any* placeholders.
    ArrayOfHostLicenseSpec(Vec<HostLicenseSpec>),
    /// A boxed array of *LinkDiscoveryProtocolConfig*. To be used in *Any* placeholders.
    ArrayOfLinkDiscoveryProtocolConfig(Vec<LinkDiscoveryProtocolConfig>),
    /// A boxed array of *HostAccountSpec*. To be used in *Any* placeholders.
    ArrayOfHostAccountSpec(Vec<Box<dyn super::traits::HostAccountSpecTrait>>),
    /// A boxed array of *HostPosixAccountSpec*. To be used in *Any* placeholders.
    ArrayOfHostPosixAccountSpec(Vec<HostPosixAccountSpec>),
    /// A boxed array of *HostLocalAuthenticationInfo*. To be used in *Any* placeholders.
    ArrayOfHostLocalAuthenticationInfo(Vec<HostLocalAuthenticationInfo>),
    /// A boxed array of *LocalDatastoreInfo*. To be used in *Any* placeholders.
    ArrayOfLocalDatastoreInfo(Vec<LocalDatastoreInfo>),
    /// A boxed array of *HostLocalFileSystemVolume*. To be used in *Any* placeholders.
    ArrayOfHostLocalFileSystemVolume(Vec<HostLocalFileSystemVolume>),
    /// A boxed array of *HostLocalFileSystemVolumeSpec*. To be used in *Any* placeholders.
    ArrayOfHostLocalFileSystemVolumeSpec(Vec<HostLocalFileSystemVolumeSpec>),
    /// A boxed array of *HostLowLevelProvisioningManagerDiskLayoutSpec*. To be used in *Any* placeholders.
    ArrayOfHostLowLevelProvisioningManagerDiskLayoutSpec(Vec<HostLowLevelProvisioningManagerDiskLayoutSpec>),
    /// A boxed array of *HostLowLevelProvisioningManagerFileDeleteResult*. To be used in *Any* placeholders.
    ArrayOfHostLowLevelProvisioningManagerFileDeleteResult(Vec<HostLowLevelProvisioningManagerFileDeleteResult>),
    /// A boxed array of *HostLowLevelProvisioningManagerFileDeleteSpec*. To be used in *Any* placeholders.
    ArrayOfHostLowLevelProvisioningManagerFileDeleteSpec(Vec<HostLowLevelProvisioningManagerFileDeleteSpec>),
    /// A boxed array of *HostLowLevelProvisioningManagerFileReserveResult*. To be used in *Any* placeholders.
    ArrayOfHostLowLevelProvisioningManagerFileReserveResult(Vec<HostLowLevelProvisioningManagerFileReserveResult>),
    /// A boxed array of *HostLowLevelProvisioningManagerFileReserveSpec*. To be used in *Any* placeholders.
    ArrayOfHostLowLevelProvisioningManagerFileReserveSpec(Vec<HostLowLevelProvisioningManagerFileReserveSpec>),
    /// A boxed array of *HostLowLevelProvisioningManagerSnapshotLayoutSpec*. To be used in *Any* placeholders.
    ArrayOfHostLowLevelProvisioningManagerSnapshotLayoutSpec(Vec<HostLowLevelProvisioningManagerSnapshotLayoutSpec>),
    /// A boxed array of *HostLowLevelProvisioningManagerVmMigrationStatus*. To be used in *Any* placeholders.
    ArrayOfHostLowLevelProvisioningManagerVmMigrationStatus(Vec<HostLowLevelProvisioningManagerVmMigrationStatus>),
    /// A boxed array of *HostLowLevelProvisioningManagerVmRecoveryInfo*. To be used in *Any* placeholders.
    ArrayOfHostLowLevelProvisioningManagerVmRecoveryInfo(Vec<HostLowLevelProvisioningManagerVmRecoveryInfo>),
    /// A boxed array of *HostMaintenanceSpec*. To be used in *Any* placeholders.
    ArrayOfHostMaintenanceSpec(Vec<HostMaintenanceSpec>),
    /// A boxed array of *ServiceConsoleReservationInfo*. To be used in *Any* placeholders.
    ArrayOfServiceConsoleReservationInfo(Vec<ServiceConsoleReservationInfo>),
    /// A boxed array of *VirtualMachineMemoryReservationInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineMemoryReservationInfo(Vec<VirtualMachineMemoryReservationInfo>),
    /// A boxed array of *VirtualMachineMemoryReservationSpec*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineMemoryReservationSpec(Vec<VirtualMachineMemoryReservationSpec>),
    /// A boxed array of *HostMemorySpec*. To be used in *Any* placeholders.
    ArrayOfHostMemorySpec(Vec<HostMemorySpec>),
    /// A boxed array of *HostMemoryTierInfo*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 7.0.3.0
    ArrayOfHostMemoryTierInfo(Vec<HostMemoryTierInfo>),
    /// A boxed array of *HostMountInfo*. To be used in *Any* placeholders.
    ArrayOfHostMountInfo(Vec<HostMountInfo>),
    /// A boxed array of *HostMultipathInfo*. To be used in *Any* placeholders.
    ArrayOfHostMultipathInfo(Vec<HostMultipathInfo>),
    /// A boxed array of *HostMultipathInfoFixedLogicalUnitPolicy*. To be used in *Any* placeholders.
    ArrayOfHostMultipathInfoFixedLogicalUnitPolicy(Vec<HostMultipathInfoFixedLogicalUnitPolicy>),
    /// A boxed array of *HostMultipathInfoHppLogicalUnitPolicy*. To be used in *Any* placeholders.
    ArrayOfHostMultipathInfoHppLogicalUnitPolicy(Vec<HostMultipathInfoHppLogicalUnitPolicy>),
    /// A boxed array of *HostMultipathInfoLogicalUnit*. To be used in *Any* placeholders.
    ArrayOfHostMultipathInfoLogicalUnit(Vec<HostMultipathInfoLogicalUnit>),
    /// A boxed array of *HostMultipathInfoLogicalUnitPolicy*. To be used in *Any* placeholders.
    ArrayOfHostMultipathInfoLogicalUnitPolicy(Vec<Box<dyn super::traits::HostMultipathInfoLogicalUnitPolicyTrait>>),
    /// A boxed array of *HostMultipathInfoLogicalUnitStorageArrayTypePolicy*. To be used in *Any* placeholders.
    ArrayOfHostMultipathInfoLogicalUnitStorageArrayTypePolicy(Vec<HostMultipathInfoLogicalUnitStorageArrayTypePolicy>),
    /// A boxed array of *HostMultipathInfoPath*. To be used in *Any* placeholders.
    ArrayOfHostMultipathInfoPath(Vec<HostMultipathInfoPath>),
    /// A boxed array of *HostMultipathStateInfo*. To be used in *Any* placeholders.
    ArrayOfHostMultipathStateInfo(Vec<HostMultipathStateInfo>),
    /// A boxed array of *HostMultipathStateInfoPath*. To be used in *Any* placeholders.
    ArrayOfHostMultipathStateInfoPath(Vec<HostMultipathStateInfoPath>),
    /// A boxed array of *NasDatastoreInfo*. To be used in *Any* placeholders.
    ArrayOfNasDatastoreInfo(Vec<NasDatastoreInfo>),
    /// A boxed array of *HostNasVolume*. To be used in *Any* placeholders.
    ArrayOfHostNasVolume(Vec<HostNasVolume>),
    /// A boxed array of *HostNasVolumeConfig*. To be used in *Any* placeholders.
    ArrayOfHostNasVolumeConfig(Vec<HostNasVolumeConfig>),
    /// A boxed array of *HostNasVolumeSpec*. To be used in *Any* placeholders.
    ArrayOfHostNasVolumeSpec(Vec<HostNasVolumeSpec>),
    /// A boxed array of *HostNasVolumeUserInfo*. To be used in *Any* placeholders.
    ArrayOfHostNasVolumeUserInfo(Vec<HostNasVolumeUserInfo>),
    /// A boxed array of *HostNatService*. To be used in *Any* placeholders.
    ArrayOfHostNatService(Vec<HostNatService>),
    /// A boxed array of *HostNatServiceConfig*. To be used in *Any* placeholders.
    ArrayOfHostNatServiceConfig(Vec<HostNatServiceConfig>),
    /// A boxed array of *HostNatServiceNameServiceSpec*. To be used in *Any* placeholders.
    ArrayOfHostNatServiceNameServiceSpec(Vec<HostNatServiceNameServiceSpec>),
    /// A boxed array of *HostNatServicePortForwardSpec*. To be used in *Any* placeholders.
    ArrayOfHostNatServicePortForwardSpec(Vec<HostNatServicePortForwardSpec>),
    /// A boxed array of *HostNatServiceSpec*. To be used in *Any* placeholders.
    ArrayOfHostNatServiceSpec(Vec<HostNatServiceSpec>),
    /// A boxed array of *HostNetCapabilities*. To be used in *Any* placeholders.
    ArrayOfHostNetCapabilities(Vec<HostNetCapabilities>),
    /// A boxed array of *HostNetOffloadCapabilities*. To be used in *Any* placeholders.
    ArrayOfHostNetOffloadCapabilities(Vec<HostNetOffloadCapabilities>),
    /// A boxed array of *HostNetStackInstance*. To be used in *Any* placeholders.
    ArrayOfHostNetStackInstance(Vec<HostNetStackInstance>),
    /// A boxed array of *HostNetworkConfig*. To be used in *Any* placeholders.
    ArrayOfHostNetworkConfig(Vec<HostNetworkConfig>),
    /// A boxed array of *HostNetworkConfigNetStackSpec*. To be used in *Any* placeholders.
    ArrayOfHostNetworkConfigNetStackSpec(Vec<HostNetworkConfigNetStackSpec>),
    /// A boxed array of *HostNetworkConfigResult*. To be used in *Any* placeholders.
    ArrayOfHostNetworkConfigResult(Vec<HostNetworkConfigResult>),
    /// A boxed array of *HostNetworkInfo*. To be used in *Any* placeholders.
    ArrayOfHostNetworkInfo(Vec<HostNetworkInfo>),
    /// A boxed array of *HostNetworkPolicy*. To be used in *Any* placeholders.
    ArrayOfHostNetworkPolicy(Vec<HostNetworkPolicy>),
    /// A boxed array of *HostNicFailureCriteria*. To be used in *Any* placeholders.
    ArrayOfHostNicFailureCriteria(Vec<HostNicFailureCriteria>),
    /// A boxed array of *HostNicOrderPolicy*. To be used in *Any* placeholders.
    ArrayOfHostNicOrderPolicy(Vec<HostNicOrderPolicy>),
    /// A boxed array of *HostNicTeamingPolicy*. To be used in *Any* placeholders.
    ArrayOfHostNicTeamingPolicy(Vec<HostNicTeamingPolicy>),
    /// A boxed array of *HostNetworkSecurityPolicy*. To be used in *Any* placeholders.
    ArrayOfHostNetworkSecurityPolicy(Vec<HostNetworkSecurityPolicy>),
    /// A boxed array of *HostNetworkTrafficShapingPolicy*. To be used in *Any* placeholders.
    ArrayOfHostNetworkTrafficShapingPolicy(Vec<HostNetworkTrafficShapingPolicy>),
    /// A boxed array of *HostNfcConnectionInfo*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 7.0.3.0
    ArrayOfHostNfcConnectionInfo(Vec<HostNfcConnectionInfo>),
    /// A boxed array of *HostNtpConfig*. To be used in *Any* placeholders.
    ArrayOfHostNtpConfig(Vec<HostNtpConfig>),
    /// A boxed array of *HostNumaInfo*. To be used in *Any* placeholders.
    ArrayOfHostNumaInfo(Vec<HostNumaInfo>),
    /// A boxed array of *HostNumaNode*. To be used in *Any* placeholders.
    ArrayOfHostNumaNode(Vec<HostNumaNode>),
    /// A boxed array of *HostNumericSensorInfo*. To be used in *Any* placeholders.
    ArrayOfHostNumericSensorInfo(Vec<HostNumericSensorInfo>),
    /// A boxed array of *NvdimmDimmInfo*. To be used in *Any* placeholders.
    ArrayOfNvdimmDimmInfo(Vec<NvdimmDimmInfo>),
    /// A boxed array of *NvdimmGuid*. To be used in *Any* placeholders.
    ArrayOfNvdimmGuid(Vec<NvdimmGuid>),
    /// A boxed array of *NvdimmHealthInfo*. To be used in *Any* placeholders.
    ArrayOfNvdimmHealthInfo(Vec<NvdimmHealthInfo>),
    /// A boxed array of *NvdimmInterleaveSetInfo*. To be used in *Any* placeholders.
    ArrayOfNvdimmInterleaveSetInfo(Vec<NvdimmInterleaveSetInfo>),
    /// A boxed array of *NvdimmNamespaceCreateSpec*. To be used in *Any* placeholders.
    ArrayOfNvdimmNamespaceCreateSpec(Vec<NvdimmNamespaceCreateSpec>),
    /// A boxed array of *NvdimmNamespaceDeleteSpec*. To be used in *Any* placeholders.
    ArrayOfNvdimmNamespaceDeleteSpec(Vec<NvdimmNamespaceDeleteSpec>),
    /// A boxed array of *NvdimmNamespaceDetails*. To be used in *Any* placeholders.
    ArrayOfNvdimmNamespaceDetails(Vec<NvdimmNamespaceDetails>),
    /// A boxed array of *NvdimmNamespaceInfo*. To be used in *Any* placeholders.
    ArrayOfNvdimmNamespaceInfo(Vec<NvdimmNamespaceInfo>),
    /// A boxed array of *NvdimmSystemInfo*. To be used in *Any* placeholders.
    ArrayOfNvdimmSystemInfo(Vec<NvdimmSystemInfo>),
    /// A boxed array of *NvdimmPMemNamespaceCreateSpec*. To be used in *Any* placeholders.
    ArrayOfNvdimmPMemNamespaceCreateSpec(Vec<NvdimmPMemNamespaceCreateSpec>),
    /// A boxed array of *NvdimmRegionInfo*. To be used in *Any* placeholders.
    ArrayOfNvdimmRegionInfo(Vec<NvdimmRegionInfo>),
    /// A boxed array of *NvdimmSummary*. To be used in *Any* placeholders.
    ArrayOfNvdimmSummary(Vec<NvdimmSummary>),
    /// A boxed array of *HostNvmeConnectSpec*. To be used in *Any* placeholders.
    ArrayOfHostNvmeConnectSpec(Vec<HostNvmeConnectSpec>),
    /// A boxed array of *HostNvmeController*. To be used in *Any* placeholders.
    ArrayOfHostNvmeController(Vec<HostNvmeController>),
    /// A boxed array of *HostNvmeDisconnectSpec*. To be used in *Any* placeholders.
    ArrayOfHostNvmeDisconnectSpec(Vec<HostNvmeDisconnectSpec>),
    /// A boxed array of *HostNvmeDiscoverSpec*. To be used in *Any* placeholders.
    ArrayOfHostNvmeDiscoverSpec(Vec<HostNvmeDiscoverSpec>),
    /// A boxed array of *HostNvmeDiscoveryLog*. To be used in *Any* placeholders.
    ArrayOfHostNvmeDiscoveryLog(Vec<HostNvmeDiscoveryLog>),
    /// A boxed array of *HostNvmeDiscoveryLogEntry*. To be used in *Any* placeholders.
    ArrayOfHostNvmeDiscoveryLogEntry(Vec<HostNvmeDiscoveryLogEntry>),
    /// A boxed array of *HostNvmeNamespace*. To be used in *Any* placeholders.
    ArrayOfHostNvmeNamespace(Vec<HostNvmeNamespace>),
    /// A boxed array of *HostNvmeOpaqueTransportParameters*. To be used in *Any* placeholders.
    ArrayOfHostNvmeOpaqueTransportParameters(Vec<HostNvmeOpaqueTransportParameters>),
    /// A boxed array of *HostNvmeOverFibreChannelParameters*. To be used in *Any* placeholders.
    ArrayOfHostNvmeOverFibreChannelParameters(Vec<HostNvmeOverFibreChannelParameters>),
    /// A boxed array of *HostNvmeOverRdmaParameters*. To be used in *Any* placeholders.
    ArrayOfHostNvmeOverRdmaParameters(Vec<HostNvmeOverRdmaParameters>),
    /// A boxed array of *HostNvmeOverTcpParameters*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 7.0.3.0
    ArrayOfHostNvmeOverTcpParameters(Vec<HostNvmeOverTcpParameters>),
    /// A boxed array of *HostNvmeSpec*. To be used in *Any* placeholders.
    ArrayOfHostNvmeSpec(Vec<Box<dyn super::traits::HostNvmeSpecTrait>>),
    /// A boxed array of *HostNvmeTopology*. To be used in *Any* placeholders.
    ArrayOfHostNvmeTopology(Vec<HostNvmeTopology>),
    /// A boxed array of *HostNvmeTopologyInterface*. To be used in *Any* placeholders.
    ArrayOfHostNvmeTopologyInterface(Vec<HostNvmeTopologyInterface>),
    /// A boxed array of *HostNvmeTransportParameters*. To be used in *Any* placeholders.
    ArrayOfHostNvmeTransportParameters(Vec<Box<dyn super::traits::HostNvmeTransportParametersTrait>>),
    /// A boxed array of *HostOpaqueNetworkInfo*. To be used in *Any* placeholders.
    ArrayOfHostOpaqueNetworkInfo(Vec<HostOpaqueNetworkInfo>),
    /// A boxed array of *HostOpaqueSwitch*. To be used in *Any* placeholders.
    ArrayOfHostOpaqueSwitch(Vec<HostOpaqueSwitch>),
    /// A boxed array of *HostOpaqueSwitchPhysicalNicZone*. To be used in *Any* placeholders.
    ArrayOfHostOpaqueSwitchPhysicalNicZone(Vec<HostOpaqueSwitchPhysicalNicZone>),
    /// A boxed array of *PMemDatastoreInfo*. To be used in *Any* placeholders.
    ArrayOfPMemDatastoreInfo(Vec<PMemDatastoreInfo>),
    /// A boxed array of *HostPMemVolume*. To be used in *Any* placeholders.
    ArrayOfHostPMemVolume(Vec<HostPMemVolume>),
    /// A boxed array of *HostParallelScsiHba*. To be used in *Any* placeholders.
    ArrayOfHostParallelScsiHba(Vec<HostParallelScsiHba>),
    /// A boxed array of *HostParallelScsiTargetTransport*. To be used in *Any* placeholders.
    ArrayOfHostParallelScsiTargetTransport(Vec<HostParallelScsiTargetTransport>),
    /// A boxed array of *HostPatchManagerLocator*. To be used in *Any* placeholders.
    ArrayOfHostPatchManagerLocator(Vec<HostPatchManagerLocator>),
    /// A boxed array of *HostPatchManagerPatchManagerOperationSpec*. To be used in *Any* placeholders.
    ArrayOfHostPatchManagerPatchManagerOperationSpec(Vec<HostPatchManagerPatchManagerOperationSpec>),
    /// A boxed array of *HostPatchManagerResult*. To be used in *Any* placeholders.
    ArrayOfHostPatchManagerResult(Vec<HostPatchManagerResult>),
    /// A boxed array of *HostPatchManagerStatus*. To be used in *Any* placeholders.
    ArrayOfHostPatchManagerStatus(Vec<HostPatchManagerStatus>),
    /// A boxed array of *HostPatchManagerStatusPrerequisitePatch*. To be used in *Any* placeholders.
    ArrayOfHostPatchManagerStatusPrerequisitePatch(Vec<HostPatchManagerStatusPrerequisitePatch>),
    /// A boxed array of *HostPathSelectionPolicyOption*. To be used in *Any* placeholders.
    ArrayOfHostPathSelectionPolicyOption(Vec<HostPathSelectionPolicyOption>),
    /// A boxed array of *HostPciDevice*. To be used in *Any* placeholders.
    ArrayOfHostPciDevice(Vec<HostPciDevice>),
    /// A boxed array of *HostPciPassthruConfig*. To be used in *Any* placeholders.
    ArrayOfHostPciPassthruConfig(Vec<Box<dyn super::traits::HostPciPassthruConfigTrait>>),
    /// A boxed array of *HostPciPassthruInfo*. To be used in *Any* placeholders.
    ArrayOfHostPciPassthruInfo(Vec<Box<dyn super::traits::HostPciPassthruInfoTrait>>),
    /// A boxed array of *HostPcieHba*. To be used in *Any* placeholders.
    ArrayOfHostPcieHba(Vec<HostPcieHba>),
    /// A boxed array of *HostPcieTargetTransport*. To be used in *Any* placeholders.
    ArrayOfHostPcieTargetTransport(Vec<HostPcieTargetTransport>),
    /// A boxed array of *HostPersistentMemoryInfo*. To be used in *Any* placeholders.
    ArrayOfHostPersistentMemoryInfo(Vec<HostPersistentMemoryInfo>),
    /// A boxed array of *PhysicalNic*. To be used in *Any* placeholders.
    ArrayOfPhysicalNic(Vec<PhysicalNic>),
    /// A boxed array of *PhysicalNicCdpDeviceCapability*. To be used in *Any* placeholders.
    ArrayOfPhysicalNicCdpDeviceCapability(Vec<PhysicalNicCdpDeviceCapability>),
    /// A boxed array of *PhysicalNicCdpInfo*. To be used in *Any* placeholders.
    ArrayOfPhysicalNicCdpInfo(Vec<PhysicalNicCdpInfo>),
    /// A boxed array of *PhysicalNicConfig*. To be used in *Any* placeholders.
    ArrayOfPhysicalNicConfig(Vec<PhysicalNicConfig>),
    /// A boxed array of *PhysicalNicLinkInfo*. To be used in *Any* placeholders.
    ArrayOfPhysicalNicLinkInfo(Vec<PhysicalNicLinkInfo>),
    /// A boxed array of *LinkLayerDiscoveryProtocolInfo*. To be used in *Any* placeholders.
    ArrayOfLinkLayerDiscoveryProtocolInfo(Vec<LinkLayerDiscoveryProtocolInfo>),
    /// A boxed array of *PhysicalNicHintInfo*. To be used in *Any* placeholders.
    ArrayOfPhysicalNicHintInfo(Vec<PhysicalNicHintInfo>),
    /// A boxed array of *PhysicalNicHint*. To be used in *Any* placeholders.
    ArrayOfPhysicalNicHint(Vec<Box<dyn super::traits::PhysicalNicHintTrait>>),
    /// A boxed array of *PhysicalNicIpHint*. To be used in *Any* placeholders.
    ArrayOfPhysicalNicIpHint(Vec<PhysicalNicIpHint>),
    /// A boxed array of *PhysicalNicNameHint*. To be used in *Any* placeholders.
    ArrayOfPhysicalNicNameHint(Vec<PhysicalNicNameHint>),
    /// A boxed array of *PhysicalNicSpec*. To be used in *Any* placeholders.
    ArrayOfPhysicalNicSpec(Vec<PhysicalNicSpec>),
    /// A boxed array of *HostPlugStoreTopology*. To be used in *Any* placeholders.
    ArrayOfHostPlugStoreTopology(Vec<HostPlugStoreTopology>),
    /// A boxed array of *HostPlugStoreTopologyAdapter*. To be used in *Any* placeholders.
    ArrayOfHostPlugStoreTopologyAdapter(Vec<HostPlugStoreTopologyAdapter>),
    /// A boxed array of *HostPlugStoreTopologyDevice*. To be used in *Any* placeholders.
    ArrayOfHostPlugStoreTopologyDevice(Vec<HostPlugStoreTopologyDevice>),
    /// A boxed array of *HostPlugStoreTopologyPath*. To be used in *Any* placeholders.
    ArrayOfHostPlugStoreTopologyPath(Vec<HostPlugStoreTopologyPath>),
    /// A boxed array of *HostPlugStoreTopologyPlugin*. To be used in *Any* placeholders.
    ArrayOfHostPlugStoreTopologyPlugin(Vec<HostPlugStoreTopologyPlugin>),
    /// A boxed array of *HostPlugStoreTopologyTarget*. To be used in *Any* placeholders.
    ArrayOfHostPlugStoreTopologyTarget(Vec<HostPlugStoreTopologyTarget>),
    /// A boxed array of *HostPortGroup*. To be used in *Any* placeholders.
    ArrayOfHostPortGroup(Vec<HostPortGroup>),
    /// A boxed array of *HostPortGroupConfig*. To be used in *Any* placeholders.
    ArrayOfHostPortGroupConfig(Vec<HostPortGroupConfig>),
    /// A boxed array of *HostPortGroupPort*. To be used in *Any* placeholders.
    ArrayOfHostPortGroupPort(Vec<HostPortGroupPort>),
    /// A boxed array of *HostPortGroupSpec*. To be used in *Any* placeholders.
    ArrayOfHostPortGroupSpec(Vec<HostPortGroupSpec>),
    /// A boxed array of *PowerSystemCapability*. To be used in *Any* placeholders.
    ArrayOfPowerSystemCapability(Vec<PowerSystemCapability>),
    /// A boxed array of *PowerSystemInfo*. To be used in *Any* placeholders.
    ArrayOfPowerSystemInfo(Vec<PowerSystemInfo>),
    /// A boxed array of *HostPowerPolicy*. To be used in *Any* placeholders.
    ArrayOfHostPowerPolicy(Vec<HostPowerPolicy>),
    /// A boxed array of *HostProtocolEndpoint*. To be used in *Any* placeholders.
    ArrayOfHostProtocolEndpoint(Vec<HostProtocolEndpoint>),
    /// A boxed array of *HostPtpConfig*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 7.0.3.0
    ArrayOfHostPtpConfig(Vec<HostPtpConfig>),
    /// A boxed array of *HostPtpConfigPtpPort*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 7.0.3.0
    ArrayOfHostPtpConfigPtpPort(Vec<HostPtpConfigPtpPort>),
    /// A boxed array of *HostQualifiedName*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 7.0.3.0
    ArrayOfHostQualifiedName(Vec<HostQualifiedName>),
    /// A boxed array of *HostRdmaDevice*. To be used in *Any* placeholders.
    ArrayOfHostRdmaDevice(Vec<HostRdmaDevice>),
    /// A boxed array of *HostRdmaDeviceBacking*. To be used in *Any* placeholders.
    ArrayOfHostRdmaDeviceBacking(Vec<Box<dyn super::traits::HostRdmaDeviceBackingTrait>>),
    /// A boxed array of *HostRdmaDeviceCapability*. To be used in *Any* placeholders.
    ArrayOfHostRdmaDeviceCapability(Vec<HostRdmaDeviceCapability>),
    /// A boxed array of *HostRdmaDeviceConnectionInfo*. To be used in *Any* placeholders.
    ArrayOfHostRdmaDeviceConnectionInfo(Vec<HostRdmaDeviceConnectionInfo>),
    /// A boxed array of *HostRdmaDevicePnicBacking*. To be used in *Any* placeholders.
    ArrayOfHostRdmaDevicePnicBacking(Vec<HostRdmaDevicePnicBacking>),
    /// A boxed array of *HostRdmaHba*. To be used in *Any* placeholders.
    ArrayOfHostRdmaHba(Vec<HostRdmaHba>),
    /// A boxed array of *HostRdmaTargetTransport*. To be used in *Any* placeholders.
    ArrayOfHostRdmaTargetTransport(Vec<HostRdmaTargetTransport>),
    /// A boxed array of *HostReliableMemoryInfo*. To be used in *Any* placeholders.
    ArrayOfHostReliableMemoryInfo(Vec<HostReliableMemoryInfo>),
    /// A boxed array of *HostResignatureRescanResult*. To be used in *Any* placeholders.
    ArrayOfHostResignatureRescanResult(Vec<HostResignatureRescanResult>),
    /// A boxed array of *HostFirewallRuleset*. To be used in *Any* placeholders.
    ArrayOfHostFirewallRuleset(Vec<HostFirewallRuleset>),
    /// A boxed array of *HostFirewallRulesetIpList*. To be used in *Any* placeholders.
    ArrayOfHostFirewallRulesetIpList(Vec<HostFirewallRulesetIpList>),
    /// A boxed array of *HostFirewallRulesetIpNetwork*. To be used in *Any* placeholders.
    ArrayOfHostFirewallRulesetIpNetwork(Vec<HostFirewallRulesetIpNetwork>),
    /// A boxed array of *HostFirewallRule*. To be used in *Any* placeholders.
    ArrayOfHostFirewallRule(Vec<HostFirewallRule>),
    /// A boxed array of *HostFirewallRulesetRulesetSpec*. To be used in *Any* placeholders.
    ArrayOfHostFirewallRulesetRulesetSpec(Vec<HostFirewallRulesetRulesetSpec>),
    /// A boxed array of *HostRuntimeInfo*. To be used in *Any* placeholders.
    ArrayOfHostRuntimeInfo(Vec<HostRuntimeInfo>),
    /// A boxed array of *HostRuntimeInfoNetStackInstanceRuntimeInfo*. To be used in *Any* placeholders.
    ArrayOfHostRuntimeInfoNetStackInstanceRuntimeInfo(Vec<HostRuntimeInfoNetStackInstanceRuntimeInfo>),
    /// A boxed array of *HostNetworkResourceRuntime*. To be used in *Any* placeholders.
    ArrayOfHostNetworkResourceRuntime(Vec<HostNetworkResourceRuntime>),
    /// A boxed array of *HostRuntimeInfoNetworkRuntimeInfo*. To be used in *Any* placeholders.
    ArrayOfHostRuntimeInfoNetworkRuntimeInfo(Vec<HostRuntimeInfoNetworkRuntimeInfo>),
    /// A boxed array of *HostPlacedVirtualNicIdentifier*. To be used in *Any* placeholders.
    ArrayOfHostPlacedVirtualNicIdentifier(Vec<HostPlacedVirtualNicIdentifier>),
    /// A boxed array of *HostPnicNetworkResourceInfo*. To be used in *Any* placeholders.
    ArrayOfHostPnicNetworkResourceInfo(Vec<HostPnicNetworkResourceInfo>),
    /// A boxed array of *HostRuntimeInfoStateEncryptionInfo*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 7.0.3.0
    ArrayOfHostRuntimeInfoStateEncryptionInfo(Vec<HostRuntimeInfoStateEncryptionInfo>),
    /// A boxed array of *HostScsiDisk*. To be used in *Any* placeholders.
    ArrayOfHostScsiDisk(Vec<HostScsiDisk>),
    /// A boxed array of *HostScsiDiskPartition*. To be used in *Any* placeholders.
    ArrayOfHostScsiDiskPartition(Vec<HostScsiDiskPartition>),
    /// A boxed array of *ScsiLun*. To be used in *Any* placeholders.
    ArrayOfScsiLun(Vec<Box<dyn super::traits::ScsiLunTrait>>),
    /// A boxed array of *ScsiLunCapabilities*. To be used in *Any* placeholders.
    ArrayOfScsiLunCapabilities(Vec<ScsiLunCapabilities>),
    /// A boxed array of *ScsiLunDescriptor*. To be used in *Any* placeholders.
    ArrayOfScsiLunDescriptor(Vec<ScsiLunDescriptor>),
    /// A boxed array of *ScsiLunDurableName*. To be used in *Any* placeholders.
    ArrayOfScsiLunDurableName(Vec<ScsiLunDurableName>),
    /// A boxed array of *HostScsiTopology*. To be used in *Any* placeholders.
    ArrayOfHostScsiTopology(Vec<HostScsiTopology>),
    /// A boxed array of *HostScsiTopologyInterface*. To be used in *Any* placeholders.
    ArrayOfHostScsiTopologyInterface(Vec<HostScsiTopologyInterface>),
    /// A boxed array of *HostScsiTopologyLun*. To be used in *Any* placeholders.
    ArrayOfHostScsiTopologyLun(Vec<HostScsiTopologyLun>),
    /// A boxed array of *HostScsiTopologyTarget*. To be used in *Any* placeholders.
    ArrayOfHostScsiTopologyTarget(Vec<HostScsiTopologyTarget>),
    /// A boxed array of *HostSecuritySpec*. To be used in *Any* placeholders.
    ArrayOfHostSecuritySpec(Vec<HostSecuritySpec>),
    /// A boxed array of *HostSerialAttachedHba*. To be used in *Any* placeholders.
    ArrayOfHostSerialAttachedHba(Vec<HostSerialAttachedHba>),
    /// A boxed array of *HostSerialAttachedTargetTransport*. To be used in *Any* placeholders.
    ArrayOfHostSerialAttachedTargetTransport(Vec<HostSerialAttachedTargetTransport>),
    /// A boxed array of *HostService*. To be used in *Any* placeholders.
    ArrayOfHostService(Vec<HostService>),
    /// A boxed array of *HostServiceSourcePackage*. To be used in *Any* placeholders.
    ArrayOfHostServiceSourcePackage(Vec<HostServiceSourcePackage>),
    /// A boxed array of *HostServiceConfig*. To be used in *Any* placeholders.
    ArrayOfHostServiceConfig(Vec<HostServiceConfig>),
    /// A boxed array of *HostServiceInfo*. To be used in *Any* placeholders.
    ArrayOfHostServiceInfo(Vec<HostServiceInfo>),
    /// A boxed array of *HostSevInfo*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 7.0.1.0
    ArrayOfHostSevInfo(Vec<HostSevInfo>),
    /// A boxed array of *HostSgxInfo*. To be used in *Any* placeholders.
    ArrayOfHostSgxInfo(Vec<HostSgxInfo>),
    /// A boxed array of *HostSgxRegistrationInfo*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 8.0.0.1
    ArrayOfHostSgxRegistrationInfo(Vec<HostSgxRegistrationInfo>),
    /// A boxed array of *HostSharedGpuCapabilities*. To be used in *Any* placeholders.
    ArrayOfHostSharedGpuCapabilities(Vec<HostSharedGpuCapabilities>),
    /// A boxed array of *HostSnmpSystemAgentLimits*. To be used in *Any* placeholders.
    ArrayOfHostSnmpSystemAgentLimits(Vec<HostSnmpSystemAgentLimits>),
    /// A boxed array of *HostSnmpConfigSpec*. To be used in *Any* placeholders.
    ArrayOfHostSnmpConfigSpec(Vec<HostSnmpConfigSpec>),
    /// A boxed array of *HostSnmpDestination*. To be used in *Any* placeholders.
    ArrayOfHostSnmpDestination(Vec<HostSnmpDestination>),
    /// A boxed array of *SoftwarePackage*. To be used in *Any* placeholders.
    ArrayOfSoftwarePackage(Vec<SoftwarePackage>),
    /// A boxed array of *SoftwarePackageCapability*. To be used in *Any* placeholders.
    ArrayOfSoftwarePackageCapability(Vec<SoftwarePackageCapability>),
    /// A boxed array of *Relation*. To be used in *Any* placeholders.
    ArrayOfRelation(Vec<Relation>),
    /// A boxed array of *HostSriovConfig*. To be used in *Any* placeholders.
    ArrayOfHostSriovConfig(Vec<HostSriovConfig>),
    /// A boxed array of *HostSriovDevicePoolInfo*. To be used in *Any* placeholders.
    ArrayOfHostSriovDevicePoolInfo(Vec<Box<dyn super::traits::HostSriovDevicePoolInfoTrait>>),
    /// A boxed array of *HostSriovInfo*. To be used in *Any* placeholders.
    ArrayOfHostSriovInfo(Vec<HostSriovInfo>),
    /// A boxed array of *HostSriovNetworkDevicePoolInfo*. To be used in *Any* placeholders.
    ArrayOfHostSriovNetworkDevicePoolInfo(Vec<HostSriovNetworkDevicePoolInfo>),
    /// A boxed array of *HostSslThumbprintInfo*. To be used in *Any* placeholders.
    ArrayOfHostSslThumbprintInfo(Vec<HostSslThumbprintInfo>),
    /// A boxed array of *HostStorageArrayTypePolicyOption*. To be used in *Any* placeholders.
    ArrayOfHostStorageArrayTypePolicyOption(Vec<HostStorageArrayTypePolicyOption>),
    /// A boxed array of *HostStorageDeviceInfo*. To be used in *Any* placeholders.
    ArrayOfHostStorageDeviceInfo(Vec<HostStorageDeviceInfo>),
    /// A boxed array of *HostStorageSystemDiskLocatorLedResult*. To be used in *Any* placeholders.
    ArrayOfHostStorageSystemDiskLocatorLedResult(Vec<HostStorageSystemDiskLocatorLedResult>),
    /// A boxed array of *HostStorageSystemScsiLunResult*. To be used in *Any* placeholders.
    ArrayOfHostStorageSystemScsiLunResult(Vec<HostStorageSystemScsiLunResult>),
    /// A boxed array of *HostStorageSystemVmfsVolumeResult*. To be used in *Any* placeholders.
    ArrayOfHostStorageSystemVmfsVolumeResult(Vec<HostStorageSystemVmfsVolumeResult>),
    /// A boxed array of *HostListSummary*. To be used in *Any* placeholders.
    ArrayOfHostListSummary(Vec<HostListSummary>),
    /// A boxed array of *HostConfigSummary*. To be used in *Any* placeholders.
    ArrayOfHostConfigSummary(Vec<HostConfigSummary>),
    /// A boxed array of *HostListSummaryGatewaySummary*. To be used in *Any* placeholders.
    ArrayOfHostListSummaryGatewaySummary(Vec<HostListSummaryGatewaySummary>),
    /// A boxed array of *HostHardwareSummary*. To be used in *Any* placeholders.
    ArrayOfHostHardwareSummary(Vec<HostHardwareSummary>),
    /// A boxed array of *HostListSummaryQuickStats*. To be used in *Any* placeholders.
    ArrayOfHostListSummaryQuickStats(Vec<HostListSummaryQuickStats>),
    /// A boxed array of *SystemEventInfo*. To be used in *Any* placeholders.
    ArrayOfSystemEventInfo(Vec<SystemEventInfo>),
    /// A boxed array of *HostSystemHealthInfo*. To be used in *Any* placeholders.
    ArrayOfHostSystemHealthInfo(Vec<HostSystemHealthInfo>),
    /// A boxed array of *HostSystemIdentificationInfo*. To be used in *Any* placeholders.
    ArrayOfHostSystemIdentificationInfo(Vec<HostSystemIdentificationInfo>),
    /// A boxed array of *HostSystemInfo*. To be used in *Any* placeholders.
    ArrayOfHostSystemInfo(Vec<HostSystemInfo>),
    /// A boxed array of *HostSystemResourceInfo*. To be used in *Any* placeholders.
    ArrayOfHostSystemResourceInfo(Vec<HostSystemResourceInfo>),
    /// A boxed array of *HostSystemSwapConfiguration*. To be used in *Any* placeholders.
    ArrayOfHostSystemSwapConfiguration(Vec<HostSystemSwapConfiguration>),
    /// A boxed array of *HostSystemSwapConfigurationDatastoreOption*. To be used in *Any* placeholders.
    ArrayOfHostSystemSwapConfigurationDatastoreOption(Vec<HostSystemSwapConfigurationDatastoreOption>),
    /// A boxed array of *HostSystemSwapConfigurationDisabledOption*. To be used in *Any* placeholders.
    ArrayOfHostSystemSwapConfigurationDisabledOption(Vec<HostSystemSwapConfigurationDisabledOption>),
    /// A boxed array of *HostSystemSwapConfigurationHostCacheOption*. To be used in *Any* placeholders.
    ArrayOfHostSystemSwapConfigurationHostCacheOption(Vec<HostSystemSwapConfigurationHostCacheOption>),
    /// A boxed array of *HostSystemSwapConfigurationHostLocalSwapOption*. To be used in *Any* placeholders.
    ArrayOfHostSystemSwapConfigurationHostLocalSwapOption(Vec<HostSystemSwapConfigurationHostLocalSwapOption>),
    /// A boxed array of *HostSystemSwapConfigurationSystemSwapOption*. To be used in *Any* placeholders.
    ArrayOfHostSystemSwapConfigurationSystemSwapOption(Vec<Box<dyn super::traits::HostSystemSwapConfigurationSystemSwapOptionTrait>>),
    /// A boxed array of *HostTargetTransport*. To be used in *Any* placeholders.
    ArrayOfHostTargetTransport(Vec<Box<dyn super::traits::HostTargetTransportTrait>>),
    /// A boxed array of *HostTcpHba*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 7.0.3.0
    ArrayOfHostTcpHba(Vec<HostTcpHba>),
    /// A boxed array of *HostTcpHbaCreateSpec*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 7.0.3.0
    ArrayOfHostTcpHbaCreateSpec(Vec<HostTcpHbaCreateSpec>),
    /// A boxed array of *HostTcpTargetTransport*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 7.0.3.0
    ArrayOfHostTcpTargetTransport(Vec<HostTcpTargetTransport>),
    /// A boxed array of *HostTpmAttestationInfo*. To be used in *Any* placeholders.
    ArrayOfHostTpmAttestationInfo(Vec<HostTpmAttestationInfo>),
    /// A boxed array of *HostTpmAttestationReport*. To be used in *Any* placeholders.
    ArrayOfHostTpmAttestationReport(Vec<HostTpmAttestationReport>),
    /// A boxed array of *HostTpmBootCompleteEventDetails*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 8.0.1.0
    ArrayOfHostTpmBootCompleteEventDetails(Vec<HostTpmBootCompleteEventDetails>),
    /// A boxed array of *HostTpmBootSecurityOptionEventDetails*. To be used in *Any* placeholders.
    ArrayOfHostTpmBootSecurityOptionEventDetails(Vec<Box<dyn super::traits::HostTpmBootSecurityOptionEventDetailsTrait>>),
    /// A boxed array of *HostTpmCommandEventDetails*. To be used in *Any* placeholders.
    ArrayOfHostTpmCommandEventDetails(Vec<HostTpmCommandEventDetails>),
    /// A boxed array of *HostTpmDigestInfo*. To be used in *Any* placeholders.
    ArrayOfHostTpmDigestInfo(Vec<HostTpmDigestInfo>),
    /// A boxed array of *HostTpmEventDetails*. To be used in *Any* placeholders.
    ArrayOfHostTpmEventDetails(Vec<Box<dyn super::traits::HostTpmEventDetailsTrait>>),
    /// A boxed array of *HostTpmEventLogEntry*. To be used in *Any* placeholders.
    ArrayOfHostTpmEventLogEntry(Vec<HostTpmEventLogEntry>),
    /// A boxed array of *HostTpmNvTagEventDetails*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 7.0.2.0
    ArrayOfHostTpmNvTagEventDetails(Vec<HostTpmNvTagEventDetails>),
    /// A boxed array of *HostTpmOptionEventDetails*. To be used in *Any* placeholders.
    ArrayOfHostTpmOptionEventDetails(Vec<HostTpmOptionEventDetails>),
    /// A boxed array of *HostTpmSignerEventDetails*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 8.0.0.1
    ArrayOfHostTpmSignerEventDetails(Vec<HostTpmSignerEventDetails>),
    /// A boxed array of *HostTpmSoftwareComponentEventDetails*. To be used in *Any* placeholders.
    ArrayOfHostTpmSoftwareComponentEventDetails(Vec<HostTpmSoftwareComponentEventDetails>),
    /// A boxed array of *HostTpmVersionEventDetails*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 8.0.0.1
    ArrayOfHostTpmVersionEventDetails(Vec<HostTpmVersionEventDetails>),
    /// A boxed array of *HostTrustAuthorityAttestationInfo*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 7.0.1.0
    ArrayOfHostTrustAuthorityAttestationInfo(Vec<HostTrustAuthorityAttestationInfo>),
    /// A boxed array of *HostUnresolvedVmfsExtent*. To be used in *Any* placeholders.
    ArrayOfHostUnresolvedVmfsExtent(Vec<HostUnresolvedVmfsExtent>),
    /// A boxed array of *HostUnresolvedVmfsResignatureSpec*. To be used in *Any* placeholders.
    ArrayOfHostUnresolvedVmfsResignatureSpec(Vec<HostUnresolvedVmfsResignatureSpec>),
    /// A boxed array of *HostUnresolvedVmfsResolutionResult*. To be used in *Any* placeholders.
    ArrayOfHostUnresolvedVmfsResolutionResult(Vec<HostUnresolvedVmfsResolutionResult>),
    /// A boxed array of *HostUnresolvedVmfsResolutionSpec*. To be used in *Any* placeholders.
    ArrayOfHostUnresolvedVmfsResolutionSpec(Vec<HostUnresolvedVmfsResolutionSpec>),
    /// A boxed array of *HostUnresolvedVmfsVolume*. To be used in *Any* placeholders.
    ArrayOfHostUnresolvedVmfsVolume(Vec<HostUnresolvedVmfsVolume>),
    /// A boxed array of *HostUnresolvedVmfsVolumeResolveStatus*. To be used in *Any* placeholders.
    ArrayOfHostUnresolvedVmfsVolumeResolveStatus(Vec<HostUnresolvedVmfsVolumeResolveStatus>),
    /// A boxed array of *HostVFlashManagerVFlashCacheConfigInfo*. To be used in *Any* placeholders.
    ArrayOfHostVFlashManagerVFlashCacheConfigInfo(Vec<HostVFlashManagerVFlashCacheConfigInfo>),
    /// A boxed array of *HostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption*. To be used in *Any* placeholders.
    ArrayOfHostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption(Vec<HostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption>),
    /// A boxed array of *HostVFlashManagerVFlashCacheConfigSpec*. To be used in *Any* placeholders.
    ArrayOfHostVFlashManagerVFlashCacheConfigSpec(Vec<HostVFlashManagerVFlashCacheConfigSpec>),
    /// A boxed array of *HostVFlashManagerVFlashConfigInfo*. To be used in *Any* placeholders.
    ArrayOfHostVFlashManagerVFlashConfigInfo(Vec<HostVFlashManagerVFlashConfigInfo>),
    /// A boxed array of *HostVFlashManagerVFlashResourceConfigInfo*. To be used in *Any* placeholders.
    ArrayOfHostVFlashManagerVFlashResourceConfigInfo(Vec<HostVFlashManagerVFlashResourceConfigInfo>),
    /// A boxed array of *HostVFlashManagerVFlashResourceConfigSpec*. To be used in *Any* placeholders.
    ArrayOfHostVFlashManagerVFlashResourceConfigSpec(Vec<HostVFlashManagerVFlashResourceConfigSpec>),
    /// A boxed array of *HostVFlashManagerVFlashResourceRunTimeInfo*. To be used in *Any* placeholders.
    ArrayOfHostVFlashManagerVFlashResourceRunTimeInfo(Vec<HostVFlashManagerVFlashResourceRunTimeInfo>),
    /// A boxed array of *HostVFlashResourceConfigurationResult*. To be used in *Any* placeholders.
    ArrayOfHostVFlashResourceConfigurationResult(Vec<HostVFlashResourceConfigurationResult>),
    /// A boxed array of *HostVMotionConfig*. To be used in *Any* placeholders.
    ArrayOfHostVMotionConfig(Vec<HostVMotionConfig>),
    /// A boxed array of *HostVMotionInfo*. To be used in *Any* placeholders.
    ArrayOfHostVMotionInfo(Vec<HostVMotionInfo>),
    /// A boxed array of *HostVMotionManagerDstInstantCloneResult*. To be used in *Any* placeholders.
    ArrayOfHostVMotionManagerDstInstantCloneResult(Vec<HostVMotionManagerDstInstantCloneResult>),
    /// A boxed array of *HostVMotionManagerSrcInstantCloneResult*. To be used in *Any* placeholders.
    ArrayOfHostVMotionManagerSrcInstantCloneResult(Vec<HostVMotionManagerSrcInstantCloneResult>),
    /// A boxed array of *HostVMotionNetConfig*. To be used in *Any* placeholders.
    ArrayOfHostVMotionNetConfig(Vec<HostVMotionNetConfig>),
    /// A boxed array of *HostVfatVolume*. To be used in *Any* placeholders.
    ArrayOfHostVfatVolume(Vec<HostVfatVolume>),
    /// A boxed array of *HostVffsVolume*. To be used in *Any* placeholders.
    ArrayOfHostVffsVolume(Vec<HostVffsVolume>),
    /// A boxed array of *HostVffsSpec*. To be used in *Any* placeholders.
    ArrayOfHostVffsSpec(Vec<HostVffsSpec>),
    /// A boxed array of *HostVirtualNic*. To be used in *Any* placeholders.
    ArrayOfHostVirtualNic(Vec<HostVirtualNic>),
    /// A boxed array of *HostVirtualNicConfig*. To be used in *Any* placeholders.
    ArrayOfHostVirtualNicConfig(Vec<HostVirtualNicConfig>),
    /// A boxed array of *HostVirtualNicIpRouteSpec*. To be used in *Any* placeholders.
    ArrayOfHostVirtualNicIpRouteSpec(Vec<HostVirtualNicIpRouteSpec>),
    /// A boxed array of *HostVirtualNicOpaqueNetworkSpec*. To be used in *Any* placeholders.
    ArrayOfHostVirtualNicOpaqueNetworkSpec(Vec<HostVirtualNicOpaqueNetworkSpec>),
    /// A boxed array of *HostVirtualNicSpec*. To be used in *Any* placeholders.
    ArrayOfHostVirtualNicSpec(Vec<HostVirtualNicSpec>),
    /// A boxed array of *HostVirtualNicConnection*. To be used in *Any* placeholders.
    ArrayOfHostVirtualNicConnection(Vec<HostVirtualNicConnection>),
    /// A boxed array of *VirtualNicManagerNetConfig*. To be used in *Any* placeholders.
    ArrayOfVirtualNicManagerNetConfig(Vec<VirtualNicManagerNetConfig>),
    /// A boxed array of *HostVirtualNicManagerNicTypeSelection*. To be used in *Any* placeholders.
    ArrayOfHostVirtualNicManagerNicTypeSelection(Vec<HostVirtualNicManagerNicTypeSelection>),
    /// A boxed array of *HostVirtualNicManagerInfo*. To be used in *Any* placeholders.
    ArrayOfHostVirtualNicManagerInfo(Vec<HostVirtualNicManagerInfo>),
    /// A boxed array of *HostVirtualSwitch*. To be used in *Any* placeholders.
    ArrayOfHostVirtualSwitch(Vec<HostVirtualSwitch>),
    /// A boxed array of *HostVirtualSwitchAutoBridge*. To be used in *Any* placeholders.
    ArrayOfHostVirtualSwitchAutoBridge(Vec<HostVirtualSwitchAutoBridge>),
    /// A boxed array of *HostVirtualSwitchBeaconConfig*. To be used in *Any* placeholders.
    ArrayOfHostVirtualSwitchBeaconConfig(Vec<HostVirtualSwitchBeaconConfig>),
    /// A boxed array of *HostVirtualSwitchBondBridge*. To be used in *Any* placeholders.
    ArrayOfHostVirtualSwitchBondBridge(Vec<HostVirtualSwitchBondBridge>),
    /// A boxed array of *HostVirtualSwitchBridge*. To be used in *Any* placeholders.
    ArrayOfHostVirtualSwitchBridge(Vec<Box<dyn super::traits::HostVirtualSwitchBridgeTrait>>),
    /// A boxed array of *HostVirtualSwitchConfig*. To be used in *Any* placeholders.
    ArrayOfHostVirtualSwitchConfig(Vec<HostVirtualSwitchConfig>),
    /// A boxed array of *HostVirtualSwitchSimpleBridge*. To be used in *Any* placeholders.
    ArrayOfHostVirtualSwitchSimpleBridge(Vec<HostVirtualSwitchSimpleBridge>),
    /// A boxed array of *HostVirtualSwitchSpec*. To be used in *Any* placeholders.
    ArrayOfHostVirtualSwitchSpec(Vec<HostVirtualSwitchSpec>),
    /// A boxed array of *HostVmciAccessManagerAccessSpec*. To be used in *Any* placeholders.
    ArrayOfHostVmciAccessManagerAccessSpec(Vec<HostVmciAccessManagerAccessSpec>),
    /// A boxed array of *VmfsDatastoreCreateSpec*. To be used in *Any* placeholders.
    ArrayOfVmfsDatastoreCreateSpec(Vec<VmfsDatastoreCreateSpec>),
    /// A boxed array of *VmfsDatastoreExpandSpec*. To be used in *Any* placeholders.
    ArrayOfVmfsDatastoreExpandSpec(Vec<VmfsDatastoreExpandSpec>),
    /// A boxed array of *VmfsDatastoreExtendSpec*. To be used in *Any* placeholders.
    ArrayOfVmfsDatastoreExtendSpec(Vec<VmfsDatastoreExtendSpec>),
    /// A boxed array of *VmfsDatastoreInfo*. To be used in *Any* placeholders.
    ArrayOfVmfsDatastoreInfo(Vec<VmfsDatastoreInfo>),
    /// A boxed array of *VmfsDatastoreOption*. To be used in *Any* placeholders.
    ArrayOfVmfsDatastoreOption(Vec<VmfsDatastoreOption>),
    /// A boxed array of *VmfsDatastoreAllExtentOption*. To be used in *Any* placeholders.
    ArrayOfVmfsDatastoreAllExtentOption(Vec<VmfsDatastoreAllExtentOption>),
    /// A boxed array of *VmfsDatastoreBaseOption*. To be used in *Any* placeholders.
    ArrayOfVmfsDatastoreBaseOption(Vec<Box<dyn super::traits::VmfsDatastoreBaseOptionTrait>>),
    /// A boxed array of *VmfsDatastoreMultipleExtentOption*. To be used in *Any* placeholders.
    ArrayOfVmfsDatastoreMultipleExtentOption(Vec<VmfsDatastoreMultipleExtentOption>),
    /// A boxed array of *VmfsDatastoreSingleExtentOption*. To be used in *Any* placeholders.
    ArrayOfVmfsDatastoreSingleExtentOption(Vec<Box<dyn super::traits::VmfsDatastoreSingleExtentOptionTrait>>),
    /// A boxed array of *VmfsDatastoreSpec*. To be used in *Any* placeholders.
    ArrayOfVmfsDatastoreSpec(Vec<Box<dyn super::traits::VmfsDatastoreSpecTrait>>),
    /// A boxed array of *HostVmfsRescanResult*. To be used in *Any* placeholders.
    ArrayOfHostVmfsRescanResult(Vec<HostVmfsRescanResult>),
    /// A boxed array of *HostVmfsVolume*. To be used in *Any* placeholders.
    ArrayOfHostVmfsVolume(Vec<HostVmfsVolume>),
    /// A boxed array of *VmfsConfigOption*. To be used in *Any* placeholders.
    ArrayOfVmfsConfigOption(Vec<VmfsConfigOption>),
    /// A boxed array of *HostVmfsSpec*. To be used in *Any* placeholders.
    ArrayOfHostVmfsSpec(Vec<HostVmfsSpec>),
    /// A boxed array of *VmfsUnmapBandwidthSpec*. To be used in *Any* placeholders.
    ArrayOfVmfsUnmapBandwidthSpec(Vec<VmfsUnmapBandwidthSpec>),
    /// A boxed array of *VsanDatastoreInfo*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 7.0.1.0
    ArrayOfVsanDatastoreInfo(Vec<VsanDatastoreInfo>),
    /// A boxed array of *HostVsanInternalSystemCmmdsQuery*. To be used in *Any* placeholders.
    ArrayOfHostVsanInternalSystemCmmdsQuery(Vec<HostVsanInternalSystemCmmdsQuery>),
    /// A boxed array of *HostVsanInternalSystemDeleteVsanObjectsResult*. To be used in *Any* placeholders.
    ArrayOfHostVsanInternalSystemDeleteVsanObjectsResult(Vec<HostVsanInternalSystemDeleteVsanObjectsResult>),
    /// A boxed array of *VsanNewPolicyBatch*. To be used in *Any* placeholders.
    ArrayOfVsanNewPolicyBatch(Vec<VsanNewPolicyBatch>),
    /// A boxed array of *VsanPolicyChangeBatch*. To be used in *Any* placeholders.
    ArrayOfVsanPolicyChangeBatch(Vec<VsanPolicyChangeBatch>),
    /// A boxed array of *VsanPolicyCost*. To be used in *Any* placeholders.
    ArrayOfVsanPolicyCost(Vec<VsanPolicyCost>),
    /// A boxed array of *VsanPolicySatisfiability*. To be used in *Any* placeholders.
    ArrayOfVsanPolicySatisfiability(Vec<VsanPolicySatisfiability>),
    /// A boxed array of *HostVsanInternalSystemVsanObjectOperationResult*. To be used in *Any* placeholders.
    ArrayOfHostVsanInternalSystemVsanObjectOperationResult(Vec<HostVsanInternalSystemVsanObjectOperationResult>),
    /// A boxed array of *HostVsanInternalSystemVsanPhysicalDiskDiagnosticsResult*. To be used in *Any* placeholders.
    ArrayOfHostVsanInternalSystemVsanPhysicalDiskDiagnosticsResult(Vec<HostVsanInternalSystemVsanPhysicalDiskDiagnosticsResult>),
    /// A boxed array of *VvolDatastoreInfo*. To be used in *Any* placeholders.
    ArrayOfVvolDatastoreInfo(Vec<VvolDatastoreInfo>),
    /// A boxed array of *HostVvolNQN*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 8.0.2.0
    #[serde(rename = "ArrayOfHostVvolNQN")]
    ArrayOfHostVvolNqn(Vec<HostVvolNqn>),
    /// A boxed array of *HostVvolVolume*. To be used in *Any* placeholders.
    ArrayOfHostVvolVolume(Vec<HostVvolVolume>),
    /// A boxed array of *VVolHostPE*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVVolHostPE")]
    ArrayOfVVolHostPe(Vec<VVolHostPe>),
    /// A boxed array of *HostVvolVolumeHostVvolNQN*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 8.0.2.0
    #[serde(rename = "ArrayOfHostVvolVolumeHostVvolNQN")]
    ArrayOfHostVvolVolumeHostVvolNqn(Vec<HostVvolVolumeHostVvolNqn>),
    /// A boxed array of *HostVvolVolumeSpecification*. To be used in *Any* placeholders.
    ArrayOfHostVvolVolumeSpecification(Vec<HostVvolVolumeSpecification>),
    /// A boxed array of *NetDhcpConfigInfo*. To be used in *Any* placeholders.
    ArrayOfNetDhcpConfigInfo(Vec<NetDhcpConfigInfo>),
    /// A boxed array of *NetDhcpConfigInfoDhcpOptions*. To be used in *Any* placeholders.
    ArrayOfNetDhcpConfigInfoDhcpOptions(Vec<NetDhcpConfigInfoDhcpOptions>),
    /// A boxed array of *NetDhcpConfigSpec*. To be used in *Any* placeholders.
    ArrayOfNetDhcpConfigSpec(Vec<NetDhcpConfigSpec>),
    /// A boxed array of *NetDhcpConfigSpecDhcpOptionsSpec*. To be used in *Any* placeholders.
    ArrayOfNetDhcpConfigSpecDhcpOptionsSpec(Vec<NetDhcpConfigSpecDhcpOptionsSpec>),
    /// A boxed array of *NetDnsConfigInfo*. To be used in *Any* placeholders.
    ArrayOfNetDnsConfigInfo(Vec<NetDnsConfigInfo>),
    /// A boxed array of *NetDnsConfigSpec*. To be used in *Any* placeholders.
    ArrayOfNetDnsConfigSpec(Vec<NetDnsConfigSpec>),
    /// A boxed array of *NetIpConfigInfo*. To be used in *Any* placeholders.
    ArrayOfNetIpConfigInfo(Vec<NetIpConfigInfo>),
    /// A boxed array of *NetIpConfigInfoIpAddress*. To be used in *Any* placeholders.
    ArrayOfNetIpConfigInfoIpAddress(Vec<NetIpConfigInfoIpAddress>),
    /// A boxed array of *NetIpConfigSpec*. To be used in *Any* placeholders.
    ArrayOfNetIpConfigSpec(Vec<NetIpConfigSpec>),
    /// A boxed array of *NetIpConfigSpecIpAddressSpec*. To be used in *Any* placeholders.
    ArrayOfNetIpConfigSpecIpAddressSpec(Vec<NetIpConfigSpecIpAddressSpec>),
    /// A boxed array of *NetIpRouteConfigInfo*. To be used in *Any* placeholders.
    ArrayOfNetIpRouteConfigInfo(Vec<NetIpRouteConfigInfo>),
    /// A boxed array of *NetIpRouteConfigInfoGateway*. To be used in *Any* placeholders.
    ArrayOfNetIpRouteConfigInfoGateway(Vec<NetIpRouteConfigInfoGateway>),
    /// A boxed array of *NetIpRouteConfigInfoIpRoute*. To be used in *Any* placeholders.
    ArrayOfNetIpRouteConfigInfoIpRoute(Vec<NetIpRouteConfigInfoIpRoute>),
    /// A boxed array of *NetIpRouteConfigSpec*. To be used in *Any* placeholders.
    ArrayOfNetIpRouteConfigSpec(Vec<NetIpRouteConfigSpec>),
    /// A boxed array of *NetIpRouteConfigSpecGatewaySpec*. To be used in *Any* placeholders.
    ArrayOfNetIpRouteConfigSpecGatewaySpec(Vec<NetIpRouteConfigSpecGatewaySpec>),
    /// A boxed array of *NetIpRouteConfigSpecIpRouteSpec*. To be used in *Any* placeholders.
    ArrayOfNetIpRouteConfigSpecIpRouteSpec(Vec<NetIpRouteConfigSpecIpRouteSpec>),
    /// A boxed array of *NetIpStackInfo*. To be used in *Any* placeholders.
    ArrayOfNetIpStackInfo(Vec<NetIpStackInfo>),
    /// A boxed array of *NetIpStackInfoDefaultRouter*. To be used in *Any* placeholders.
    ArrayOfNetIpStackInfoDefaultRouter(Vec<NetIpStackInfoDefaultRouter>),
    /// A boxed array of *NetIpStackInfoNetToMedia*. To be used in *Any* placeholders.
    ArrayOfNetIpStackInfoNetToMedia(Vec<NetIpStackInfoNetToMedia>),
    /// A boxed array of *NetBIOSConfigInfo*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfNetBIOSConfigInfo")]
    ArrayOfNetBiosConfigInfo(Vec<Box<dyn super::traits::NetBiosConfigInfoTrait>>),
    /// A boxed array of *WinNetBIOSConfigInfo*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfWinNetBIOSConfigInfo")]
    ArrayOfWinNetBiosConfigInfo(Vec<WinNetBiosConfigInfo>),
    /// A boxed array of *ArrayUpdateSpec*. To be used in *Any* placeholders.
    ArrayOfArrayUpdateSpec(Vec<Box<dyn super::traits::ArrayUpdateSpecTrait>>),
    /// A boxed array of *BoolOption*. To be used in *Any* placeholders.
    ArrayOfBoolOption(Vec<BoolOption>),
    /// A boxed array of *ChoiceOption*. To be used in *Any* placeholders.
    ArrayOfChoiceOption(Vec<ChoiceOption>),
    /// A boxed array of *FloatOption*. To be used in *Any* placeholders.
    ArrayOfFloatOption(Vec<FloatOption>),
    /// A boxed array of *IntOption*. To be used in *Any* placeholders.
    ArrayOfIntOption(Vec<IntOption>),
    /// A boxed array of *LongOption*. To be used in *Any* placeholders.
    ArrayOfLongOption(Vec<LongOption>),
    /// A boxed array of *OptionDef*. To be used in *Any* placeholders.
    ArrayOfOptionDef(Vec<OptionDef>),
    /// A boxed array of *OptionType*. To be used in *Any* placeholders.
    ArrayOfOptionType(Vec<Box<dyn super::traits::OptionTypeTrait>>),
    /// A boxed array of *OptionValue*. To be used in *Any* placeholders.
    ArrayOfOptionValue(Vec<Box<dyn super::traits::OptionValueTrait>>),
    /// A boxed array of *StringOption*. To be used in *Any* placeholders.
    ArrayOfStringOption(Vec<StringOption>),
    /// A boxed array of *ApplyProfile*. To be used in *Any* placeholders.
    ArrayOfApplyProfile(Vec<Box<dyn super::traits::ApplyProfileTrait>>),
    /// A boxed array of *ProfileApplyProfileElement*. To be used in *Any* placeholders.
    ArrayOfProfileApplyProfileElement(Vec<ProfileApplyProfileElement>),
    /// A boxed array of *ProfileApplyProfileProperty*. To be used in *Any* placeholders.
    ArrayOfProfileApplyProfileProperty(Vec<ProfileApplyProfileProperty>),
    /// A boxed array of *ComplianceLocator*. To be used in *Any* placeholders.
    ArrayOfComplianceLocator(Vec<ComplianceLocator>),
    /// A boxed array of *ComplianceProfile*. To be used in *Any* placeholders.
    ArrayOfComplianceProfile(Vec<ComplianceProfile>),
    /// A boxed array of *ComplianceResult*. To be used in *Any* placeholders.
    ArrayOfComplianceResult(Vec<ComplianceResult>),
    /// A boxed array of *ComplianceFailure*. To be used in *Any* placeholders.
    ArrayOfComplianceFailure(Vec<ComplianceFailure>),
    /// A boxed array of *ComplianceFailureComplianceFailureValues*. To be used in *Any* placeholders.
    ArrayOfComplianceFailureComplianceFailureValues(Vec<ComplianceFailureComplianceFailureValues>),
    /// A boxed array of *ProfileCompositeExpression*. To be used in *Any* placeholders.
    ArrayOfProfileCompositeExpression(Vec<ProfileCompositeExpression>),
    /// A boxed array of *CompositePolicyOption*. To be used in *Any* placeholders.
    ArrayOfCompositePolicyOption(Vec<CompositePolicyOption>),
    /// A boxed array of *ProfileCompositePolicyOptionMetadata*. To be used in *Any* placeholders.
    ArrayOfProfileCompositePolicyOptionMetadata(Vec<ProfileCompositePolicyOptionMetadata>),
    /// A boxed array of *ProfileDeferredPolicyOptionParameter*. To be used in *Any* placeholders.
    ArrayOfProfileDeferredPolicyOptionParameter(Vec<ProfileDeferredPolicyOptionParameter>),
    /// A boxed array of *ProfileExpression*. To be used in *Any* placeholders.
    ArrayOfProfileExpression(Vec<Box<dyn super::traits::ProfileExpressionTrait>>),
    /// A boxed array of *ProfileExpressionMetadata*. To be used in *Any* placeholders.
    ArrayOfProfileExpressionMetadata(Vec<ProfileExpressionMetadata>),
    /// A boxed array of *ProfileParameterMetadata*. To be used in *Any* placeholders.
    ArrayOfProfileParameterMetadata(Vec<ProfileParameterMetadata>),
    /// A boxed array of *ProfileParameterMetadataParameterRelationMetadata*. To be used in *Any* placeholders.
    ArrayOfProfileParameterMetadataParameterRelationMetadata(Vec<ProfileParameterMetadataParameterRelationMetadata>),
    /// A boxed array of *ProfilePolicy*. To be used in *Any* placeholders.
    ArrayOfProfilePolicy(Vec<ProfilePolicy>),
    /// A boxed array of *ProfilePolicyMetadata*. To be used in *Any* placeholders.
    ArrayOfProfilePolicyMetadata(Vec<ProfilePolicyMetadata>),
    /// A boxed array of *PolicyOption*. To be used in *Any* placeholders.
    ArrayOfPolicyOption(Vec<Box<dyn super::traits::PolicyOptionTrait>>),
    /// A boxed array of *ProfilePolicyOptionMetadata*. To be used in *Any* placeholders.
    ArrayOfProfilePolicyOptionMetadata(Vec<Box<dyn super::traits::ProfilePolicyOptionMetadataTrait>>),
    /// A boxed array of *ProfileConfigInfo*. To be used in *Any* placeholders.
    ArrayOfProfileConfigInfo(Vec<Box<dyn super::traits::ProfileConfigInfoTrait>>),
    /// A boxed array of *ProfileCreateSpec*. To be used in *Any* placeholders.
    ArrayOfProfileCreateSpec(Vec<Box<dyn super::traits::ProfileCreateSpecTrait>>),
    /// A boxed array of *ProfileDescription*. To be used in *Any* placeholders.
    ArrayOfProfileDescription(Vec<ProfileDescription>),
    /// A boxed array of *ProfileDescriptionSection*. To be used in *Any* placeholders.
    ArrayOfProfileDescriptionSection(Vec<ProfileDescriptionSection>),
    /// A boxed array of *ProfileSerializedCreateSpec*. To be used in *Any* placeholders.
    ArrayOfProfileSerializedCreateSpec(Vec<Box<dyn super::traits::ProfileSerializedCreateSpecTrait>>),
    /// A boxed array of *ProfileMetadata*. To be used in *Any* placeholders.
    ArrayOfProfileMetadata(Vec<ProfileMetadata>),
    /// A boxed array of *ProfileMetadataProfileOperationMessage*. To be used in *Any* placeholders.
    ArrayOfProfileMetadataProfileOperationMessage(Vec<ProfileMetadataProfileOperationMessage>),
    /// A boxed array of *ProfileMetadataProfileSortSpec*. To be used in *Any* placeholders.
    ArrayOfProfileMetadataProfileSortSpec(Vec<ProfileMetadataProfileSortSpec>),
    /// A boxed array of *ProfilePropertyPath*. To be used in *Any* placeholders.
    ArrayOfProfilePropertyPath(Vec<ProfilePropertyPath>),
    /// A boxed array of *ProfileProfileStructure*. To be used in *Any* placeholders.
    ArrayOfProfileProfileStructure(Vec<ProfileProfileStructure>),
    /// A boxed array of *ProfileProfileStructureProperty*. To be used in *Any* placeholders.
    ArrayOfProfileProfileStructureProperty(Vec<ProfileProfileStructureProperty>),
    /// A boxed array of *ProfileSimpleExpression*. To be used in *Any* placeholders.
    ArrayOfProfileSimpleExpression(Vec<ProfileSimpleExpression>),
    /// A boxed array of *UserInputRequiredParameterMetadata*. To be used in *Any* placeholders.
    ArrayOfUserInputRequiredParameterMetadata(Vec<UserInputRequiredParameterMetadata>),
    /// A boxed array of *ClusterProfileCompleteConfigSpec*. To be used in *Any* placeholders.
    ArrayOfClusterProfileCompleteConfigSpec(Vec<ClusterProfileCompleteConfigSpec>),
    /// A boxed array of *ClusterProfileConfigInfo*. To be used in *Any* placeholders.
    ArrayOfClusterProfileConfigInfo(Vec<ClusterProfileConfigInfo>),
    /// A boxed array of *ClusterProfileConfigServiceCreateSpec*. To be used in *Any* placeholders.
    ArrayOfClusterProfileConfigServiceCreateSpec(Vec<ClusterProfileConfigServiceCreateSpec>),
    /// A boxed array of *ClusterProfileConfigSpec*. To be used in *Any* placeholders.
    ArrayOfClusterProfileConfigSpec(Vec<Box<dyn super::traits::ClusterProfileConfigSpecTrait>>),
    /// A boxed array of *ClusterProfileCreateSpec*. To be used in *Any* placeholders.
    ArrayOfClusterProfileCreateSpec(Vec<Box<dyn super::traits::ClusterProfileCreateSpecTrait>>),
    /// A boxed array of *ActiveDirectoryProfile*. To be used in *Any* placeholders.
    ArrayOfActiveDirectoryProfile(Vec<ActiveDirectoryProfile>),
    /// A boxed array of *AnswerFile*. To be used in *Any* placeholders.
    ArrayOfAnswerFile(Vec<AnswerFile>),
    /// A boxed array of *AnswerFileStatusResult*. To be used in *Any* placeholders.
    ArrayOfAnswerFileStatusResult(Vec<AnswerFileStatusResult>),
    /// A boxed array of *AnswerFileStatusError*. To be used in *Any* placeholders.
    ArrayOfAnswerFileStatusError(Vec<AnswerFileStatusError>),
    /// A boxed array of *AuthenticationProfile*. To be used in *Any* placeholders.
    ArrayOfAuthenticationProfile(Vec<AuthenticationProfile>),
    /// A boxed array of *DateTimeProfile*. To be used in *Any* placeholders.
    ArrayOfDateTimeProfile(Vec<DateTimeProfile>),
    /// A boxed array of *DvsHostVNicProfile*. To be used in *Any* placeholders.
    ArrayOfDvsHostVNicProfile(Vec<DvsHostVNicProfile>),
    /// A boxed array of *DvsProfile*. To be used in *Any* placeholders.
    ArrayOfDvsProfile(Vec<DvsProfile>),
    /// A boxed array of *DvsServiceConsoleVNicProfile*. To be used in *Any* placeholders.
    ArrayOfDvsServiceConsoleVNicProfile(Vec<DvsServiceConsoleVNicProfile>),
    /// A boxed array of *DvsVNicProfile*. To be used in *Any* placeholders.
    ArrayOfDvsVNicProfile(Vec<Box<dyn super::traits::DvsVNicProfileTrait>>),
    /// A boxed array of *ProfileExecuteResult*. To be used in *Any* placeholders.
    ArrayOfProfileExecuteResult(Vec<Box<dyn super::traits::ProfileExecuteResultTrait>>),
    /// A boxed array of *ProfileExecuteError*. To be used in *Any* placeholders.
    ArrayOfProfileExecuteError(Vec<ProfileExecuteError>),
    /// A boxed array of *FirewallProfile*. To be used in *Any* placeholders.
    ArrayOfFirewallProfile(Vec<FirewallProfile>),
    /// A boxed array of *FirewallProfileRulesetProfile*. To be used in *Any* placeholders.
    ArrayOfFirewallProfileRulesetProfile(Vec<FirewallProfileRulesetProfile>),
    /// A boxed array of *HostApplyProfile*. To be used in *Any* placeholders.
    ArrayOfHostApplyProfile(Vec<HostApplyProfile>),
    /// A boxed array of *HostMemoryProfile*. To be used in *Any* placeholders.
    ArrayOfHostMemoryProfile(Vec<HostMemoryProfile>),
    /// A boxed array of *HostPortGroupProfile*. To be used in *Any* placeholders.
    ArrayOfHostPortGroupProfile(Vec<HostPortGroupProfile>),
    /// A boxed array of *HostProfileCompleteConfigSpec*. To be used in *Any* placeholders.
    ArrayOfHostProfileCompleteConfigSpec(Vec<HostProfileCompleteConfigSpec>),
    /// A boxed array of *HostProfileConfigInfo*. To be used in *Any* placeholders.
    ArrayOfHostProfileConfigInfo(Vec<HostProfileConfigInfo>),
    /// A boxed array of *HostProfileConfigSpec*. To be used in *Any* placeholders.
    ArrayOfHostProfileConfigSpec(Vec<Box<dyn super::traits::HostProfileConfigSpecTrait>>),
    /// A boxed array of *HostProfileHostBasedConfigSpec*. To be used in *Any* placeholders.
    ArrayOfHostProfileHostBasedConfigSpec(Vec<HostProfileHostBasedConfigSpec>),
    /// A boxed array of *HostProfileSerializedHostProfileSpec*. To be used in *Any* placeholders.
    ArrayOfHostProfileSerializedHostProfileSpec(Vec<HostProfileSerializedHostProfileSpec>),
    /// A boxed array of *HostProfileValidationFailureInfo*. To be used in *Any* placeholders.
    ArrayOfHostProfileValidationFailureInfo(Vec<HostProfileValidationFailureInfo>),
    /// A boxed array of *HostSpecification*. To be used in *Any* placeholders.
    ArrayOfHostSpecification(Vec<HostSpecification>),
    /// A boxed array of *HostSubSpecification*. To be used in *Any* placeholders.
    ArrayOfHostSubSpecification(Vec<HostSubSpecification>),
    /// A boxed array of *IpAddressProfile*. To be used in *Any* placeholders.
    ArrayOfIpAddressProfile(Vec<IpAddressProfile>),
    /// A boxed array of *IpRouteProfile*. To be used in *Any* placeholders.
    ArrayOfIpRouteProfile(Vec<IpRouteProfile>),
    /// A boxed array of *NasStorageProfile*. To be used in *Any* placeholders.
    ArrayOfNasStorageProfile(Vec<NasStorageProfile>),
    /// A boxed array of *NetStackInstanceProfile*. To be used in *Any* placeholders.
    ArrayOfNetStackInstanceProfile(Vec<NetStackInstanceProfile>),
    /// A boxed array of *NetworkPolicyProfile*. To be used in *Any* placeholders.
    ArrayOfNetworkPolicyProfile(Vec<NetworkPolicyProfile>),
    /// A boxed array of *NetworkProfile*. To be used in *Any* placeholders.
    ArrayOfNetworkProfile(Vec<NetworkProfile>),
    /// A boxed array of *NetworkProfileDnsConfigProfile*. To be used in *Any* placeholders.
    ArrayOfNetworkProfileDnsConfigProfile(Vec<NetworkProfileDnsConfigProfile>),
    /// A boxed array of *NsxHostVNicProfile*. To be used in *Any* placeholders.
    ArrayOfNsxHostVNicProfile(Vec<NsxHostVNicProfile>),
    /// A boxed array of *OpaqueSwitchProfile*. To be used in *Any* placeholders.
    ArrayOfOpaqueSwitchProfile(Vec<OpaqueSwitchProfile>),
    /// A boxed array of *OptionProfile*. To be used in *Any* placeholders.
    ArrayOfOptionProfile(Vec<OptionProfile>),
    /// A boxed array of *PermissionProfile*. To be used in *Any* placeholders.
    ArrayOfPermissionProfile(Vec<PermissionProfile>),
    /// A boxed array of *PhysicalNicProfile*. To be used in *Any* placeholders.
    ArrayOfPhysicalNicProfile(Vec<PhysicalNicProfile>),
    /// A boxed array of *PnicUplinkProfile*. To be used in *Any* placeholders.
    ArrayOfPnicUplinkProfile(Vec<PnicUplinkProfile>),
    /// A boxed array of *PortGroupProfile*. To be used in *Any* placeholders.
    ArrayOfPortGroupProfile(Vec<Box<dyn super::traits::PortGroupProfileTrait>>),
    /// A boxed array of *VirtualSwitchSelectionProfile*. To be used in *Any* placeholders.
    ArrayOfVirtualSwitchSelectionProfile(Vec<VirtualSwitchSelectionProfile>),
    /// A boxed array of *VlanProfile*. To be used in *Any* placeholders.
    ArrayOfVlanProfile(Vec<VlanProfile>),
    /// A boxed array of *AnswerFileCreateSpec*. To be used in *Any* placeholders.
    ArrayOfAnswerFileCreateSpec(Vec<Box<dyn super::traits::AnswerFileCreateSpecTrait>>),
    /// A boxed array of *AnswerFileOptionsCreateSpec*. To be used in *Any* placeholders.
    ArrayOfAnswerFileOptionsCreateSpec(Vec<AnswerFileOptionsCreateSpec>),
    /// A boxed array of *AnswerFileSerializedCreateSpec*. To be used in *Any* placeholders.
    ArrayOfAnswerFileSerializedCreateSpec(Vec<AnswerFileSerializedCreateSpec>),
    /// A boxed array of *ApplyHostProfileConfigurationResult*. To be used in *Any* placeholders.
    ArrayOfApplyHostProfileConfigurationResult(Vec<ApplyHostProfileConfigurationResult>),
    /// A boxed array of *ApplyHostProfileConfigurationSpec*. To be used in *Any* placeholders.
    ArrayOfApplyHostProfileConfigurationSpec(Vec<ApplyHostProfileConfigurationSpec>),
    /// A boxed array of *HostProfileManagerCompositionResult*. To be used in *Any* placeholders.
    ArrayOfHostProfileManagerCompositionResult(Vec<HostProfileManagerCompositionResult>),
    /// A boxed array of *HostProfileManagerCompositionResultResultElement*. To be used in *Any* placeholders.
    ArrayOfHostProfileManagerCompositionResultResultElement(Vec<HostProfileManagerCompositionResultResultElement>),
    /// A boxed array of *HostProfileManagerCompositionValidationResult*. To be used in *Any* placeholders.
    ArrayOfHostProfileManagerCompositionValidationResult(Vec<HostProfileManagerCompositionValidationResult>),
    /// A boxed array of *HostProfileManagerCompositionValidationResultResultElement*. To be used in *Any* placeholders.
    ArrayOfHostProfileManagerCompositionValidationResultResultElement(Vec<HostProfileManagerCompositionValidationResultResultElement>),
    /// A boxed array of *HostProfileManagerConfigTaskList*. To be used in *Any* placeholders.
    ArrayOfHostProfileManagerConfigTaskList(Vec<HostProfileManagerConfigTaskList>),
    /// A boxed array of *HostProfilesEntityCustomizations*. To be used in *Any* placeholders.
    ArrayOfHostProfilesEntityCustomizations(Vec<Box<dyn super::traits::HostProfilesEntityCustomizationsTrait>>),
    /// A boxed array of *HostProfileManagerHostToConfigSpecMap*. To be used in *Any* placeholders.
    ArrayOfHostProfileManagerHostToConfigSpecMap(Vec<HostProfileManagerHostToConfigSpecMap>),
    /// A boxed array of *StructuredCustomizations*. To be used in *Any* placeholders.
    ArrayOfStructuredCustomizations(Vec<StructuredCustomizations>),
    /// A boxed array of *SecurityProfile*. To be used in *Any* placeholders.
    ArrayOfSecurityProfile(Vec<SecurityProfile>),
    /// A boxed array of *ServiceConsolePortGroupProfile*. To be used in *Any* placeholders.
    ArrayOfServiceConsolePortGroupProfile(Vec<ServiceConsolePortGroupProfile>),
    /// A boxed array of *ServiceProfile*. To be used in *Any* placeholders.
    ArrayOfServiceProfile(Vec<ServiceProfile>),
    /// A boxed array of *StaticRouteProfile*. To be used in *Any* placeholders.
    ArrayOfStaticRouteProfile(Vec<StaticRouteProfile>),
    /// A boxed array of *StorageProfile*. To be used in *Any* placeholders.
    ArrayOfStorageProfile(Vec<StorageProfile>),
    /// A boxed array of *UserGroupProfile*. To be used in *Any* placeholders.
    ArrayOfUserGroupProfile(Vec<UserGroupProfile>),
    /// A boxed array of *UserProfile*. To be used in *Any* placeholders.
    ArrayOfUserProfile(Vec<UserProfile>),
    /// A boxed array of *VirtualSwitchProfile*. To be used in *Any* placeholders.
    ArrayOfVirtualSwitchProfile(Vec<VirtualSwitchProfile>),
    /// A boxed array of *LinkProfile*. To be used in *Any* placeholders.
    ArrayOfLinkProfile(Vec<LinkProfile>),
    /// A boxed array of *NumPortsProfile*. To be used in *Any* placeholders.
    ArrayOfNumPortsProfile(Vec<NumPortsProfile>),
    /// A boxed array of *VmPortGroupProfile*. To be used in *Any* placeholders.
    ArrayOfVmPortGroupProfile(Vec<VmPortGroupProfile>),
    /// A boxed array of *AfterStartupTaskScheduler*. To be used in *Any* placeholders.
    ArrayOfAfterStartupTaskScheduler(Vec<AfterStartupTaskScheduler>),
    /// A boxed array of *DailyTaskScheduler*. To be used in *Any* placeholders.
    ArrayOfDailyTaskScheduler(Vec<Box<dyn super::traits::DailyTaskSchedulerTrait>>),
    /// A boxed array of *HourlyTaskScheduler*. To be used in *Any* placeholders.
    ArrayOfHourlyTaskScheduler(Vec<Box<dyn super::traits::HourlyTaskSchedulerTrait>>),
    /// A boxed array of *MonthlyByDayTaskScheduler*. To be used in *Any* placeholders.
    ArrayOfMonthlyByDayTaskScheduler(Vec<MonthlyByDayTaskScheduler>),
    /// A boxed array of *MonthlyByWeekdayTaskScheduler*. To be used in *Any* placeholders.
    ArrayOfMonthlyByWeekdayTaskScheduler(Vec<MonthlyByWeekdayTaskScheduler>),
    /// A boxed array of *MonthlyTaskScheduler*. To be used in *Any* placeholders.
    ArrayOfMonthlyTaskScheduler(Vec<Box<dyn super::traits::MonthlyTaskSchedulerTrait>>),
    /// A boxed array of *OnceTaskScheduler*. To be used in *Any* placeholders.
    ArrayOfOnceTaskScheduler(Vec<OnceTaskScheduler>),
    /// A boxed array of *RecurrentTaskScheduler*. To be used in *Any* placeholders.
    ArrayOfRecurrentTaskScheduler(Vec<Box<dyn super::traits::RecurrentTaskSchedulerTrait>>),
    /// A boxed array of *ScheduledTaskDescription*. To be used in *Any* placeholders.
    ArrayOfScheduledTaskDescription(Vec<ScheduledTaskDescription>),
    /// A boxed array of *ScheduledTaskDetail*. To be used in *Any* placeholders.
    ArrayOfScheduledTaskDetail(Vec<ScheduledTaskDetail>),
    /// A boxed array of *ScheduledTaskInfo*. To be used in *Any* placeholders.
    ArrayOfScheduledTaskInfo(Vec<ScheduledTaskInfo>),
    /// A boxed array of *ScheduledTaskSpec*. To be used in *Any* placeholders.
    ArrayOfScheduledTaskSpec(Vec<Box<dyn super::traits::ScheduledTaskSpecTrait>>),
    /// A boxed array of *TaskScheduler*. To be used in *Any* placeholders.
    ArrayOfTaskScheduler(Vec<Box<dyn super::traits::TaskSchedulerTrait>>),
    /// A boxed array of *WeeklyTaskScheduler*. To be used in *Any* placeholders.
    ArrayOfWeeklyTaskScheduler(Vec<WeeklyTaskScheduler>),
    /// A boxed array of *ApplyStorageRecommendationResult*. To be used in *Any* placeholders.
    ArrayOfApplyStorageRecommendationResult(Vec<ApplyStorageRecommendationResult>),
    /// A boxed array of *StorageDrsAutomationConfig*. To be used in *Any* placeholders.
    ArrayOfStorageDrsAutomationConfig(Vec<StorageDrsAutomationConfig>),
    /// A boxed array of *StorageDrsConfigInfo*. To be used in *Any* placeholders.
    ArrayOfStorageDrsConfigInfo(Vec<StorageDrsConfigInfo>),
    /// A boxed array of *StorageDrsConfigSpec*. To be used in *Any* placeholders.
    ArrayOfStorageDrsConfigSpec(Vec<StorageDrsConfigSpec>),
    /// A boxed array of *HbrDiskMigrationAction*. To be used in *Any* placeholders.
    ArrayOfHbrDiskMigrationAction(Vec<HbrDiskMigrationAction>),
    /// A boxed array of *StorageDrsIoLoadBalanceConfig*. To be used in *Any* placeholders.
    ArrayOfStorageDrsIoLoadBalanceConfig(Vec<StorageDrsIoLoadBalanceConfig>),
    /// A boxed array of *StorageDrsOptionSpec*. To be used in *Any* placeholders.
    ArrayOfStorageDrsOptionSpec(Vec<StorageDrsOptionSpec>),
    /// A boxed array of *PlacementAffinityRule*. To be used in *Any* placeholders.
    ArrayOfPlacementAffinityRule(Vec<PlacementAffinityRule>),
    /// A boxed array of *PlacementRankResult*. To be used in *Any* placeholders.
    ArrayOfPlacementRankResult(Vec<PlacementRankResult>),
    /// A boxed array of *PlacementRankSpec*. To be used in *Any* placeholders.
    ArrayOfPlacementRankSpec(Vec<PlacementRankSpec>),
    /// A boxed array of *StorageDrsPlacementRankVmSpec*. To be used in *Any* placeholders.
    ArrayOfStorageDrsPlacementRankVmSpec(Vec<StorageDrsPlacementRankVmSpec>),
    /// A boxed array of *StorageDrsPodConfigInfo*. To be used in *Any* placeholders.
    ArrayOfStorageDrsPodConfigInfo(Vec<StorageDrsPodConfigInfo>),
    /// A boxed array of *StorageDrsPodConfigSpec*. To be used in *Any* placeholders.
    ArrayOfStorageDrsPodConfigSpec(Vec<StorageDrsPodConfigSpec>),
    /// A boxed array of *StorageDrsPodSelectionSpec*. To be used in *Any* placeholders.
    ArrayOfStorageDrsPodSelectionSpec(Vec<StorageDrsPodSelectionSpec>),
    /// A boxed array of *PodDiskLocator*. To be used in *Any* placeholders.
    ArrayOfPodDiskLocator(Vec<PodDiskLocator>),
    /// A boxed array of *VmPodConfigForPlacement*. To be used in *Any* placeholders.
    ArrayOfVmPodConfigForPlacement(Vec<VmPodConfigForPlacement>),
    /// A boxed array of *StorageDrsSpaceLoadBalanceConfig*. To be used in *Any* placeholders.
    ArrayOfStorageDrsSpaceLoadBalanceConfig(Vec<StorageDrsSpaceLoadBalanceConfig>),
    /// A boxed array of *StorageMigrationAction*. To be used in *Any* placeholders.
    ArrayOfStorageMigrationAction(Vec<StorageMigrationAction>),
    /// A boxed array of *StoragePlacementAction*. To be used in *Any* placeholders.
    ArrayOfStoragePlacementAction(Vec<StoragePlacementAction>),
    /// A boxed array of *StoragePlacementResult*. To be used in *Any* placeholders.
    ArrayOfStoragePlacementResult(Vec<StoragePlacementResult>),
    /// A boxed array of *StoragePlacementSpec*. To be used in *Any* placeholders.
    ArrayOfStoragePlacementSpec(Vec<StoragePlacementSpec>),
    /// A boxed array of *VirtualDiskAntiAffinityRuleSpec*. To be used in *Any* placeholders.
    ArrayOfVirtualDiskAntiAffinityRuleSpec(Vec<VirtualDiskAntiAffinityRuleSpec>),
    /// A boxed array of *VirtualDiskRuleSpec*. To be used in *Any* placeholders.
    ArrayOfVirtualDiskRuleSpec(Vec<VirtualDiskRuleSpec>),
    /// A boxed array of *StorageDrsVmConfigInfo*. To be used in *Any* placeholders.
    ArrayOfStorageDrsVmConfigInfo(Vec<StorageDrsVmConfigInfo>),
    /// A boxed array of *StorageDrsVmConfigSpec*. To be used in *Any* placeholders.
    ArrayOfStorageDrsVmConfigSpec(Vec<StorageDrsVmConfigSpec>),
    /// A boxed array of *VAppCloneSpec*. To be used in *Any* placeholders.
    ArrayOfVAppCloneSpec(Vec<VAppCloneSpec>),
    /// A boxed array of *VAppCloneSpecNetworkMappingPair*. To be used in *Any* placeholders.
    ArrayOfVAppCloneSpecNetworkMappingPair(Vec<VAppCloneSpecNetworkMappingPair>),
    /// A boxed array of *VAppCloneSpecResourceMap*. To be used in *Any* placeholders.
    ArrayOfVAppCloneSpecResourceMap(Vec<VAppCloneSpecResourceMap>),
    /// A boxed array of *VAppEntityConfigInfo*. To be used in *Any* placeholders.
    ArrayOfVAppEntityConfigInfo(Vec<VAppEntityConfigInfo>),
    /// A boxed array of *VAppIPAssignmentInfo*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVAppIPAssignmentInfo")]
    ArrayOfVAppIpAssignmentInfo(Vec<VAppIpAssignmentInfo>),
    /// A boxed array of *IpPool*. To be used in *Any* placeholders.
    ArrayOfIpPool(Vec<IpPool>),
    /// A boxed array of *IpPoolAssociation*. To be used in *Any* placeholders.
    ArrayOfIpPoolAssociation(Vec<IpPoolAssociation>),
    /// A boxed array of *IpPoolIpPoolConfigInfo*. To be used in *Any* placeholders.
    ArrayOfIpPoolIpPoolConfigInfo(Vec<IpPoolIpPoolConfigInfo>),
    /// A boxed array of *VAppOvfSectionInfo*. To be used in *Any* placeholders.
    ArrayOfVAppOvfSectionInfo(Vec<VAppOvfSectionInfo>),
    /// A boxed array of *VAppOvfSectionSpec*. To be used in *Any* placeholders.
    ArrayOfVAppOvfSectionSpec(Vec<VAppOvfSectionSpec>),
    /// A boxed array of *VAppProductInfo*. To be used in *Any* placeholders.
    ArrayOfVAppProductInfo(Vec<VAppProductInfo>),
    /// A boxed array of *VAppProductSpec*. To be used in *Any* placeholders.
    ArrayOfVAppProductSpec(Vec<VAppProductSpec>),
    /// A boxed array of *VAppPropertyInfo*. To be used in *Any* placeholders.
    ArrayOfVAppPropertyInfo(Vec<VAppPropertyInfo>),
    /// A boxed array of *VAppPropertySpec*. To be used in *Any* placeholders.
    ArrayOfVAppPropertySpec(Vec<VAppPropertySpec>),
    /// A boxed array of *VAppConfigInfo*. To be used in *Any* placeholders.
    ArrayOfVAppConfigInfo(Vec<VAppConfigInfo>),
    /// A boxed array of *VAppConfigSpec*. To be used in *Any* placeholders.
    ArrayOfVAppConfigSpec(Vec<VAppConfigSpec>),
    /// A boxed array of *VirtualAppImportSpec*. To be used in *Any* placeholders.
    ArrayOfVirtualAppImportSpec(Vec<VirtualAppImportSpec>),
    /// A boxed array of *VmConfigInfo*. To be used in *Any* placeholders.
    ArrayOfVmConfigInfo(Vec<Box<dyn super::traits::VmConfigInfoTrait>>),
    /// A boxed array of *VmConfigSpec*. To be used in *Any* placeholders.
    ArrayOfVmConfigSpec(Vec<Box<dyn super::traits::VmConfigSpecTrait>>),
    /// A boxed array of *ClusterNetworkConfigSpec*. To be used in *Any* placeholders.
    ArrayOfClusterNetworkConfigSpec(Vec<ClusterNetworkConfigSpec>),
    /// A boxed array of *FailoverNodeInfo*. To be used in *Any* placeholders.
    ArrayOfFailoverNodeInfo(Vec<FailoverNodeInfo>),
    /// A boxed array of *NodeDeploymentSpec*. To be used in *Any* placeholders.
    ArrayOfNodeDeploymentSpec(Vec<Box<dyn super::traits::NodeDeploymentSpecTrait>>),
    /// A boxed array of *NodeNetworkSpec*. To be used in *Any* placeholders.
    ArrayOfNodeNetworkSpec(Vec<Box<dyn super::traits::NodeNetworkSpecTrait>>),
    /// A boxed array of *PassiveNodeDeploymentSpec*. To be used in *Any* placeholders.
    ArrayOfPassiveNodeDeploymentSpec(Vec<PassiveNodeDeploymentSpec>),
    /// A boxed array of *PassiveNodeNetworkSpec*. To be used in *Any* placeholders.
    ArrayOfPassiveNodeNetworkSpec(Vec<PassiveNodeNetworkSpec>),
    /// A boxed array of *SourceNodeSpec*. To be used in *Any* placeholders.
    ArrayOfSourceNodeSpec(Vec<SourceNodeSpec>),
    /// A boxed array of *VchaClusterConfigInfo*. To be used in *Any* placeholders.
    ArrayOfVchaClusterConfigInfo(Vec<VchaClusterConfigInfo>),
    /// A boxed array of *VchaClusterConfigSpec*. To be used in *Any* placeholders.
    ArrayOfVchaClusterConfigSpec(Vec<VchaClusterConfigSpec>),
    /// A boxed array of *VchaClusterDeploymentSpec*. To be used in *Any* placeholders.
    ArrayOfVchaClusterDeploymentSpec(Vec<VchaClusterDeploymentSpec>),
    /// A boxed array of *VchaClusterNetworkSpec*. To be used in *Any* placeholders.
    ArrayOfVchaClusterNetworkSpec(Vec<VchaClusterNetworkSpec>),
    /// A boxed array of *WitnessNodeInfo*. To be used in *Any* placeholders.
    ArrayOfWitnessNodeInfo(Vec<WitnessNodeInfo>),
    /// A boxed array of *VchaClusterHealth*. To be used in *Any* placeholders.
    ArrayOfVchaClusterHealth(Vec<VchaClusterHealth>),
    /// A boxed array of *VchaClusterRuntimeInfo*. To be used in *Any* placeholders.
    ArrayOfVchaClusterRuntimeInfo(Vec<VchaClusterRuntimeInfo>),
    /// A boxed array of *VchaNodeRuntimeInfo*. To be used in *Any* placeholders.
    ArrayOfVchaNodeRuntimeInfo(Vec<VchaNodeRuntimeInfo>),
    /// A boxed array of *VirtualMachineAffinityInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineAffinityInfo(Vec<VirtualMachineAffinityInfo>),
    /// A boxed array of *VirtualMachineBaseIndependentFilterSpec*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 7.0.2.1
    ArrayOfVirtualMachineBaseIndependentFilterSpec(Vec<Box<dyn super::traits::VirtualMachineBaseIndependentFilterSpecTrait>>),
    /// A boxed array of *VirtualMachineBootOptions*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineBootOptions(Vec<VirtualMachineBootOptions>),
    /// A boxed array of *VirtualMachineBootOptionsBootableCdromDevice*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineBootOptionsBootableCdromDevice(Vec<VirtualMachineBootOptionsBootableCdromDevice>),
    /// A boxed array of *VirtualMachineBootOptionsBootableDevice*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineBootOptionsBootableDevice(Vec<Box<dyn super::traits::VirtualMachineBootOptionsBootableDeviceTrait>>),
    /// A boxed array of *VirtualMachineBootOptionsBootableDiskDevice*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineBootOptionsBootableDiskDevice(Vec<VirtualMachineBootOptionsBootableDiskDevice>),
    /// A boxed array of *VirtualMachineBootOptionsBootableEthernetDevice*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineBootOptionsBootableEthernetDevice(Vec<VirtualMachineBootOptionsBootableEthernetDevice>),
    /// A boxed array of *VirtualMachineBootOptionsBootableFloppyDevice*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineBootOptionsBootableFloppyDevice(Vec<VirtualMachineBootOptionsBootableFloppyDevice>),
    /// A boxed array of *VirtualMachineCapability*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineCapability(Vec<VirtualMachineCapability>),
    /// A boxed array of *VirtualMachineCdromInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineCdromInfo(Vec<VirtualMachineCdromInfo>),
    /// A boxed array of *VirtualMachineCertThumbprint*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 7.0.3.1
    ArrayOfVirtualMachineCertThumbprint(Vec<VirtualMachineCertThumbprint>),
    /// A boxed array of *VirtualMachineCloneSpec*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineCloneSpec(Vec<VirtualMachineCloneSpec>),
    /// A boxed array of *VirtualMachineConfigInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineConfigInfo(Vec<VirtualMachineConfigInfo>),
    /// A boxed array of *VirtualMachineConfigInfoDatastoreUrlPair*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineConfigInfoDatastoreUrlPair(Vec<VirtualMachineConfigInfoDatastoreUrlPair>),
    /// A boxed array of *VirtualMachineConfigInfoOverheadInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineConfigInfoOverheadInfo(Vec<VirtualMachineConfigInfoOverheadInfo>),
    /// A boxed array of *VirtualMachineConfigOption*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineConfigOption(Vec<VirtualMachineConfigOption>),
    /// A boxed array of *VirtualMachineConfigOptionDescriptor*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineConfigOptionDescriptor(Vec<VirtualMachineConfigOptionDescriptor>),
    /// A boxed array of *VirtualMachineConfigSpec*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineConfigSpec(Vec<VirtualMachineConfigSpec>),
    /// A boxed array of *VirtualMachineCpuIdInfoSpec*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineCpuIdInfoSpec(Vec<VirtualMachineCpuIdInfoSpec>),
    /// A boxed array of *ConfigTarget*. To be used in *Any* placeholders.
    ArrayOfConfigTarget(Vec<ConfigTarget>),
    /// A boxed array of *VirtualMachineConsolePreferences*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineConsolePreferences(Vec<VirtualMachineConsolePreferences>),
    /// A boxed array of *VirtualMachineContentLibraryItemInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineContentLibraryItemInfo(Vec<VirtualMachineContentLibraryItemInfo>),
    /// A boxed array of *VirtualMachineDatastoreInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineDatastoreInfo(Vec<VirtualMachineDatastoreInfo>),
    /// A boxed array of *DatastoreOption*. To be used in *Any* placeholders.
    ArrayOfDatastoreOption(Vec<DatastoreOption>),
    /// A boxed array of *VirtualMachineDatastoreVolumeOption*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineDatastoreVolumeOption(Vec<VirtualMachineDatastoreVolumeOption>),
    /// A boxed array of *VirtualMachineDefaultPowerOpInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineDefaultPowerOpInfo(Vec<VirtualMachineDefaultPowerOpInfo>),
    /// A boxed array of *VirtualMachineDefaultProfileSpec*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineDefaultProfileSpec(Vec<VirtualMachineDefaultProfileSpec>),
    /// A boxed array of *VirtualMachineDefinedProfileSpec*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineDefinedProfileSpec(Vec<VirtualMachineDefinedProfileSpec>),
    /// A boxed array of *VirtualMachineDeviceRuntimeInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineDeviceRuntimeInfo(Vec<VirtualMachineDeviceRuntimeInfo>),
    /// A boxed array of *VirtualMachineDeviceRuntimeInfoDeviceRuntimeState*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineDeviceRuntimeInfoDeviceRuntimeState(Vec<Box<dyn super::traits::VirtualMachineDeviceRuntimeInfoDeviceRuntimeStateTrait>>),
    /// A boxed array of *VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeState*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeState(Vec<VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeState>),
    /// A boxed array of *VirtualMachineDiskDeviceInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineDiskDeviceInfo(Vec<Box<dyn super::traits::VirtualMachineDiskDeviceInfoTrait>>),
    /// A boxed array of *VirtualMachineDvxClassInfo*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 8.0.0.1
    ArrayOfVirtualMachineDvxClassInfo(Vec<VirtualMachineDvxClassInfo>),
    /// A boxed array of *VirtualMachineDynamicPassthroughInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineDynamicPassthroughInfo(Vec<VirtualMachineDynamicPassthroughInfo>),
    /// A boxed array of *VirtualMachineEmptyIndependentFilterSpec*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 7.0.2.1
    ArrayOfVirtualMachineEmptyIndependentFilterSpec(Vec<VirtualMachineEmptyIndependentFilterSpec>),
    /// A boxed array of *VirtualMachineEmptyProfileSpec*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineEmptyProfileSpec(Vec<VirtualMachineEmptyProfileSpec>),
    /// A boxed array of *FaultToleranceConfigInfo*. To be used in *Any* placeholders.
    ArrayOfFaultToleranceConfigInfo(Vec<Box<dyn super::traits::FaultToleranceConfigInfoTrait>>),
    /// A boxed array of *FaultToleranceConfigSpec*. To be used in *Any* placeholders.
    ArrayOfFaultToleranceConfigSpec(Vec<FaultToleranceConfigSpec>),
    /// A boxed array of *FaultToleranceMetaSpec*. To be used in *Any* placeholders.
    ArrayOfFaultToleranceMetaSpec(Vec<FaultToleranceMetaSpec>),
    /// A boxed array of *FaultTolerancePrimaryConfigInfo*. To be used in *Any* placeholders.
    ArrayOfFaultTolerancePrimaryConfigInfo(Vec<FaultTolerancePrimaryConfigInfo>),
    /// A boxed array of *FaultToleranceSecondaryConfigInfo*. To be used in *Any* placeholders.
    ArrayOfFaultToleranceSecondaryConfigInfo(Vec<FaultToleranceSecondaryConfigInfo>),
    /// A boxed array of *FaultToleranceSecondaryOpResult*. To be used in *Any* placeholders.
    ArrayOfFaultToleranceSecondaryOpResult(Vec<FaultToleranceSecondaryOpResult>),
    /// A boxed array of *FaultToleranceVMConfigSpec*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfFaultToleranceVMConfigSpec")]
    ArrayOfFaultToleranceVmConfigSpec(Vec<FaultToleranceVmConfigSpec>),
    /// A boxed array of *FaultToleranceDiskSpec*. To be used in *Any* placeholders.
    ArrayOfFaultToleranceDiskSpec(Vec<FaultToleranceDiskSpec>),
    /// A boxed array of *VirtualMachineFeatureRequirement*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineFeatureRequirement(Vec<VirtualMachineFeatureRequirement>),
    /// A boxed array of *VirtualMachineFileInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineFileInfo(Vec<VirtualMachineFileInfo>),
    /// A boxed array of *VirtualMachineFileLayout*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineFileLayout(Vec<VirtualMachineFileLayout>),
    /// A boxed array of *VirtualMachineFileLayoutDiskLayout*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineFileLayoutDiskLayout(Vec<VirtualMachineFileLayoutDiskLayout>),
    /// A boxed array of *VirtualMachineFileLayoutSnapshotLayout*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineFileLayoutSnapshotLayout(Vec<VirtualMachineFileLayoutSnapshotLayout>),
    /// A boxed array of *VirtualMachineFileLayoutEx*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineFileLayoutEx(Vec<VirtualMachineFileLayoutEx>),
    /// A boxed array of *VirtualMachineFileLayoutExDiskLayout*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineFileLayoutExDiskLayout(Vec<VirtualMachineFileLayoutExDiskLayout>),
    /// A boxed array of *VirtualMachineFileLayoutExDiskUnit*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineFileLayoutExDiskUnit(Vec<VirtualMachineFileLayoutExDiskUnit>),
    /// A boxed array of *VirtualMachineFileLayoutExFileInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineFileLayoutExFileInfo(Vec<VirtualMachineFileLayoutExFileInfo>),
    /// A boxed array of *VirtualMachineFileLayoutExSnapshotLayout*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineFileLayoutExSnapshotLayout(Vec<VirtualMachineFileLayoutExSnapshotLayout>),
    /// A boxed array of *VirtualMachineFlagInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineFlagInfo(Vec<VirtualMachineFlagInfo>),
    /// A boxed array of *VirtualMachineFloppyInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineFloppyInfo(Vec<VirtualMachineFloppyInfo>),
    /// A boxed array of *VirtualMachineForkConfigInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineForkConfigInfo(Vec<VirtualMachineForkConfigInfo>),
    /// A boxed array of *GuestInfo*. To be used in *Any* placeholders.
    ArrayOfGuestInfo(Vec<GuestInfo>),
    /// A boxed array of *GuestInfoCustomizationInfo*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 7.0.2.0
    ArrayOfGuestInfoCustomizationInfo(Vec<GuestInfoCustomizationInfo>),
    /// A boxed array of *GuestDiskInfo*. To be used in *Any* placeholders.
    ArrayOfGuestDiskInfo(Vec<GuestDiskInfo>),
    /// A boxed array of *GuestInfoNamespaceGenerationInfo*. To be used in *Any* placeholders.
    ArrayOfGuestInfoNamespaceGenerationInfo(Vec<GuestInfoNamespaceGenerationInfo>),
    /// A boxed array of *GuestNicInfo*. To be used in *Any* placeholders.
    ArrayOfGuestNicInfo(Vec<GuestNicInfo>),
    /// A boxed array of *GuestScreenInfo*. To be used in *Any* placeholders.
    ArrayOfGuestScreenInfo(Vec<GuestScreenInfo>),
    /// A boxed array of *GuestStackInfo*. To be used in *Any* placeholders.
    ArrayOfGuestStackInfo(Vec<GuestStackInfo>),
    /// A boxed array of *GuestInfoVirtualDiskMapping*. To be used in *Any* placeholders.
    ArrayOfGuestInfoVirtualDiskMapping(Vec<GuestInfoVirtualDiskMapping>),
    /// A boxed array of *VirtualMachineGuestIntegrityInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineGuestIntegrityInfo(Vec<VirtualMachineGuestIntegrityInfo>),
    /// A boxed array of *VirtualMachineGuestMonitoringModeInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineGuestMonitoringModeInfo(Vec<VirtualMachineGuestMonitoringModeInfo>),
    /// A boxed array of *GuestOsDescriptor*. To be used in *Any* placeholders.
    ArrayOfGuestOsDescriptor(Vec<GuestOsDescriptor>),
    /// A boxed array of *VirtualMachineGuestQuiesceSpec*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineGuestQuiesceSpec(Vec<Box<dyn super::traits::VirtualMachineGuestQuiesceSpecTrait>>),
    /// A boxed array of *VirtualMachineIdeDiskDeviceInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineIdeDiskDeviceInfo(Vec<VirtualMachineIdeDiskDeviceInfo>),
    /// A boxed array of *VirtualMachineIdeDiskDevicePartitionInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineIdeDiskDevicePartitionInfo(Vec<VirtualMachineIdeDiskDevicePartitionInfo>),
    /// A boxed array of *VirtualMachineIndependentFilterSpec*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 7.0.2.1
    ArrayOfVirtualMachineIndependentFilterSpec(Vec<VirtualMachineIndependentFilterSpec>),
    /// A boxed array of *VirtualMachineInstantCloneSpec*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineInstantCloneSpec(Vec<VirtualMachineInstantCloneSpec>),
    /// A boxed array of *VirtualMachineLegacyNetworkSwitchInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineLegacyNetworkSwitchInfo(Vec<VirtualMachineLegacyNetworkSwitchInfo>),
    /// A boxed array of *VirtualMachineMessage*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineMessage(Vec<VirtualMachineMessage>),
    /// A boxed array of *VirtualMachineMetadataManagerVmMetadata*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineMetadataManagerVmMetadata(Vec<VirtualMachineMetadataManagerVmMetadata>),
    /// A boxed array of *VirtualMachineMetadataManagerVmMetadataInput*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineMetadataManagerVmMetadataInput(Vec<VirtualMachineMetadataManagerVmMetadataInput>),
    /// A boxed array of *VirtualMachineMetadataManagerVmMetadataOwner*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineMetadataManagerVmMetadataOwner(Vec<VirtualMachineMetadataManagerVmMetadataOwner>),
    /// A boxed array of *VirtualMachineMetadataManagerVmMetadataResult*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineMetadataManagerVmMetadataResult(Vec<VirtualMachineMetadataManagerVmMetadataResult>),
    /// A boxed array of *VirtualMachineNetworkInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineNetworkInfo(Vec<VirtualMachineNetworkInfo>),
    /// A boxed array of *VirtualMachineNetworkShaperInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineNetworkShaperInfo(Vec<VirtualMachineNetworkShaperInfo>),
    /// A boxed array of *OpaqueNetworkTargetInfo*. To be used in *Any* placeholders.
    ArrayOfOpaqueNetworkTargetInfo(Vec<OpaqueNetworkTargetInfo>),
    /// A boxed array of *VirtualMachineParallelInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineParallelInfo(Vec<VirtualMachineParallelInfo>),
    /// A boxed array of *VirtualMachinePciPassthroughInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualMachinePciPassthroughInfo(Vec<Box<dyn super::traits::VirtualMachinePciPassthroughInfoTrait>>),
    /// A boxed array of *VirtualMachinePciSharedGpuPassthroughInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualMachinePciSharedGpuPassthroughInfo(Vec<VirtualMachinePciSharedGpuPassthroughInfo>),
    /// A boxed array of *VirtualMachinePrecisionClockInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualMachinePrecisionClockInfo(Vec<VirtualMachinePrecisionClockInfo>),
    /// A boxed array of *VirtualMachineProfileDetails*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineProfileDetails(Vec<VirtualMachineProfileDetails>),
    /// A boxed array of *VirtualMachineProfileDetailsDiskProfileDetails*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineProfileDetailsDiskProfileDetails(Vec<VirtualMachineProfileDetailsDiskProfileDetails>),
    /// A boxed array of *VirtualMachineProfileRawData*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineProfileRawData(Vec<VirtualMachineProfileRawData>),
    /// A boxed array of *VirtualMachineProfileSpec*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineProfileSpec(Vec<Box<dyn super::traits::VirtualMachineProfileSpecTrait>>),
    /// A boxed array of *VirtualMachinePropertyRelation*. To be used in *Any* placeholders.
    ArrayOfVirtualMachinePropertyRelation(Vec<VirtualMachinePropertyRelation>),
    /// A boxed array of *VirtualMachineQuestionInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineQuestionInfo(Vec<VirtualMachineQuestionInfo>),
    /// A boxed array of *VirtualMachineRelocateSpec*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineRelocateSpec(Vec<VirtualMachineRelocateSpec>),
    /// A boxed array of *VirtualMachineRelocateSpecDiskLocator*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineRelocateSpecDiskLocator(Vec<VirtualMachineRelocateSpecDiskLocator>),
    /// A boxed array of *VirtualMachineRelocateSpecDiskLocatorBackingSpec*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineRelocateSpecDiskLocatorBackingSpec(Vec<VirtualMachineRelocateSpecDiskLocatorBackingSpec>),
    /// A boxed array of *ReplicationConfigSpec*. To be used in *Any* placeholders.
    ArrayOfReplicationConfigSpec(Vec<ReplicationConfigSpec>),
    /// A boxed array of *ReplicationInfoDiskSettings*. To be used in *Any* placeholders.
    ArrayOfReplicationInfoDiskSettings(Vec<ReplicationInfoDiskSettings>),
    /// A boxed array of *VirtualMachineRuntimeInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineRuntimeInfo(Vec<VirtualMachineRuntimeInfo>),
    /// A boxed array of *VirtualMachineRuntimeInfoDasProtectionState*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineRuntimeInfoDasProtectionState(Vec<VirtualMachineRuntimeInfoDasProtectionState>),
    /// A boxed array of *ScheduledHardwareUpgradeInfo*. To be used in *Any* placeholders.
    ArrayOfScheduledHardwareUpgradeInfo(Vec<ScheduledHardwareUpgradeInfo>),
    /// A boxed array of *VirtualMachineScsiDiskDeviceInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineScsiDiskDeviceInfo(Vec<VirtualMachineScsiDiskDeviceInfo>),
    /// A boxed array of *VirtualMachineScsiPassthroughInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineScsiPassthroughInfo(Vec<VirtualMachineScsiPassthroughInfo>),
    /// A boxed array of *VirtualMachineSerialInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineSerialInfo(Vec<VirtualMachineSerialInfo>),
    /// A boxed array of *VirtualMachineSgxInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineSgxInfo(Vec<VirtualMachineSgxInfo>),
    /// A boxed array of *VirtualMachineSgxTargetInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineSgxTargetInfo(Vec<VirtualMachineSgxTargetInfo>),
    /// A boxed array of *VirtualMachineSnapshotInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineSnapshotInfo(Vec<VirtualMachineSnapshotInfo>),
    /// A boxed array of *VirtualMachineSnapshotTree*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineSnapshotTree(Vec<VirtualMachineSnapshotTree>),
    /// A boxed array of *VirtualMachineSoundInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineSoundInfo(Vec<VirtualMachineSoundInfo>),
    /// A boxed array of *VirtualMachineSriovDevicePoolInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineSriovDevicePoolInfo(Vec<Box<dyn super::traits::VirtualMachineSriovDevicePoolInfoTrait>>),
    /// A boxed array of *VirtualMachineSriovInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineSriovInfo(Vec<VirtualMachineSriovInfo>),
    /// A boxed array of *VirtualMachineSriovNetworkDevicePoolInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineSriovNetworkDevicePoolInfo(Vec<VirtualMachineSriovNetworkDevicePoolInfo>),
    /// A boxed array of *VirtualMachineStorageInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineStorageInfo(Vec<VirtualMachineStorageInfo>),
    /// A boxed array of *VirtualMachineUsageOnDatastore*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineUsageOnDatastore(Vec<VirtualMachineUsageOnDatastore>),
    /// A boxed array of *VirtualMachineSummary*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineSummary(Vec<VirtualMachineSummary>),
    /// A boxed array of *VirtualMachineConfigSummary*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineConfigSummary(Vec<VirtualMachineConfigSummary>),
    /// A boxed array of *VirtualMachineGuestSummary*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineGuestSummary(Vec<VirtualMachineGuestSummary>),
    /// A boxed array of *VirtualMachineQuickStats*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineQuickStats(Vec<VirtualMachineQuickStats>),
    /// A boxed array of *VirtualMachineQuickStatsMemoryTierStats*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 7.0.3.0
    ArrayOfVirtualMachineQuickStatsMemoryTierStats(Vec<VirtualMachineQuickStatsMemoryTierStats>),
    /// A boxed array of *VirtualMachineStorageSummary*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineStorageSummary(Vec<VirtualMachineStorageSummary>),
    /// A boxed array of *VirtualMachineTargetInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineTargetInfo(Vec<Box<dyn super::traits::VirtualMachineTargetInfoTrait>>),
    /// A boxed array of *ToolsConfigInfo*. To be used in *Any* placeholders.
    ArrayOfToolsConfigInfo(Vec<ToolsConfigInfo>),
    /// A boxed array of *ToolsConfigInfoToolsLastInstallInfo*. To be used in *Any* placeholders.
    ArrayOfToolsConfigInfoToolsLastInstallInfo(Vec<ToolsConfigInfoToolsLastInstallInfo>),
    /// A boxed array of *VirtualMachineUsbInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineUsbInfo(Vec<VirtualMachineUsbInfo>),
    /// A boxed array of *UsbScanCodeSpec*. To be used in *Any* placeholders.
    ArrayOfUsbScanCodeSpec(Vec<UsbScanCodeSpec>),
    /// A boxed array of *UsbScanCodeSpecKeyEvent*. To be used in *Any* placeholders.
    ArrayOfUsbScanCodeSpecKeyEvent(Vec<UsbScanCodeSpecKeyEvent>),
    /// A boxed array of *UsbScanCodeSpecModifierType*. To be used in *Any* placeholders.
    ArrayOfUsbScanCodeSpecModifierType(Vec<UsbScanCodeSpecModifierType>),
    /// A boxed array of *VirtualMachineVFlashModuleInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineVFlashModuleInfo(Vec<VirtualMachineVFlashModuleInfo>),
    /// A boxed array of *VirtualMachineVMotionStunTimeInfo*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 8.0.2.0
    ArrayOfVirtualMachineVMotionStunTimeInfo(Vec<VirtualMachineVMotionStunTimeInfo>),
    /// A boxed array of *VirtualMachineVcpuConfig*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineVcpuConfig(Vec<VirtualMachineVcpuConfig>),
    /// A boxed array of *VirtualMachineVendorDeviceGroupInfo*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 8.0.0.1
    ArrayOfVirtualMachineVendorDeviceGroupInfo(Vec<VirtualMachineVendorDeviceGroupInfo>),
    /// A boxed array of *VirtualMachineVendorDeviceGroupInfoComponentDeviceInfo*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 8.0.0.1
    ArrayOfVirtualMachineVendorDeviceGroupInfoComponentDeviceInfo(Vec<VirtualMachineVendorDeviceGroupInfoComponentDeviceInfo>),
    /// A boxed array of *VirtualMachineVgpuDeviceInfo*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 7.0.3.0
    ArrayOfVirtualMachineVgpuDeviceInfo(Vec<VirtualMachineVgpuDeviceInfo>),
    /// A boxed array of *VirtualMachineVgpuProfileInfo*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 7.0.3.0
    ArrayOfVirtualMachineVgpuProfileInfo(Vec<VirtualMachineVgpuProfileInfo>),
    /// A boxed array of *VirtualMachineVirtualDeviceGroups*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 8.0.0.1
    ArrayOfVirtualMachineVirtualDeviceGroups(Vec<VirtualMachineVirtualDeviceGroups>),
    /// A boxed array of *VirtualMachineVirtualDeviceGroupsDeviceGroup*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineVirtualDeviceGroupsDeviceGroup(Vec<Box<dyn super::traits::VirtualMachineVirtualDeviceGroupsDeviceGroupTrait>>),
    /// A boxed array of *VirtualMachineVirtualDeviceGroupsVendorDeviceGroup*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineVirtualDeviceGroupsVendorDeviceGroup(Vec<VirtualMachineVirtualDeviceGroupsVendorDeviceGroup>),
    /// A boxed array of *VirtualMachineVirtualDeviceSwap*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 8.0.0.1
    ArrayOfVirtualMachineVirtualDeviceSwap(Vec<VirtualMachineVirtualDeviceSwap>),
    /// A boxed array of *VirtualMachineVirtualDeviceSwapDeviceSwapInfo*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 8.0.0.1
    ArrayOfVirtualMachineVirtualDeviceSwapDeviceSwapInfo(Vec<VirtualMachineVirtualDeviceSwapDeviceSwapInfo>),
    /// A boxed array of *VirtualHardware*. To be used in *Any* placeholders.
    ArrayOfVirtualHardware(Vec<VirtualHardware>),
    /// A boxed array of *VirtualHardwareOption*. To be used in *Any* placeholders.
    ArrayOfVirtualHardwareOption(Vec<VirtualHardwareOption>),
    /// A boxed array of *VirtualMachineVirtualNuma*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 8.0.0.1
    ArrayOfVirtualMachineVirtualNuma(Vec<VirtualMachineVirtualNuma>),
    /// A boxed array of *VirtualMachineVirtualNumaInfo*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 8.0.0.1
    ArrayOfVirtualMachineVirtualNumaInfo(Vec<VirtualMachineVirtualNumaInfo>),
    /// A boxed array of *VirtualMachineVirtualPMem*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 7.0.3.0
    ArrayOfVirtualMachineVirtualPMem(Vec<VirtualMachineVirtualPMem>),
    /// A boxed array of *VirtualMachineImportSpec*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineImportSpec(Vec<VirtualMachineImportSpec>),
    /// A boxed array of *VirtualMachineWindowsQuiesceSpec*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineWindowsQuiesceSpec(Vec<VirtualMachineWindowsQuiesceSpec>),
    /// A boxed array of *CheckResult*. To be used in *Any* placeholders.
    ArrayOfCheckResult(Vec<CheckResult>),
    /// A boxed array of *CustomizationAdapterMapping*. To be used in *Any* placeholders.
    ArrayOfCustomizationAdapterMapping(Vec<CustomizationAdapterMapping>),
    /// A boxed array of *CustomizationAutoIpV6Generator*. To be used in *Any* placeholders.
    ArrayOfCustomizationAutoIpV6Generator(Vec<CustomizationAutoIpV6Generator>),
    /// A boxed array of *CustomizationCloudinitPrep*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 7.0.3.0
    ArrayOfCustomizationCloudinitPrep(Vec<CustomizationCloudinitPrep>),
    /// A boxed array of *CustomizationCustomIpGenerator*. To be used in *Any* placeholders.
    ArrayOfCustomizationCustomIpGenerator(Vec<CustomizationCustomIpGenerator>),
    /// A boxed array of *CustomizationCustomIpV6Generator*. To be used in *Any* placeholders.
    ArrayOfCustomizationCustomIpV6Generator(Vec<CustomizationCustomIpV6Generator>),
    /// A boxed array of *CustomizationCustomName*. To be used in *Any* placeholders.
    ArrayOfCustomizationCustomName(Vec<CustomizationCustomName>),
    /// A boxed array of *CustomizationDhcpIpGenerator*. To be used in *Any* placeholders.
    ArrayOfCustomizationDhcpIpGenerator(Vec<CustomizationDhcpIpGenerator>),
    /// A boxed array of *CustomizationDhcpIpV6Generator*. To be used in *Any* placeholders.
    ArrayOfCustomizationDhcpIpV6Generator(Vec<CustomizationDhcpIpV6Generator>),
    /// A boxed array of *CustomizationFixedIp*. To be used in *Any* placeholders.
    ArrayOfCustomizationFixedIp(Vec<CustomizationFixedIp>),
    /// A boxed array of *CustomizationFixedIpV6*. To be used in *Any* placeholders.
    ArrayOfCustomizationFixedIpV6(Vec<CustomizationFixedIpV6>),
    /// A boxed array of *CustomizationFixedName*. To be used in *Any* placeholders.
    ArrayOfCustomizationFixedName(Vec<CustomizationFixedName>),
    /// A boxed array of *CustomizationGlobalIPSettings*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfCustomizationGlobalIPSettings")]
    ArrayOfCustomizationGlobalIpSettings(Vec<CustomizationGlobalIpSettings>),
    /// A boxed array of *CustomizationGuiRunOnce*. To be used in *Any* placeholders.
    ArrayOfCustomizationGuiRunOnce(Vec<CustomizationGuiRunOnce>),
    /// A boxed array of *CustomizationGuiUnattended*. To be used in *Any* placeholders.
    ArrayOfCustomizationGuiUnattended(Vec<CustomizationGuiUnattended>),
    /// A boxed array of *CustomizationIPSettings*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfCustomizationIPSettings")]
    ArrayOfCustomizationIpSettings(Vec<CustomizationIpSettings>),
    /// A boxed array of *CustomizationIPSettingsIpV6AddressSpec*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfCustomizationIPSettingsIpV6AddressSpec")]
    ArrayOfCustomizationIpSettingsIpV6AddressSpec(Vec<CustomizationIpSettingsIpV6AddressSpec>),
    /// A boxed array of *CustomizationIdentification*. To be used in *Any* placeholders.
    ArrayOfCustomizationIdentification(Vec<CustomizationIdentification>),
    /// A boxed array of *CustomizationIdentitySettings*. To be used in *Any* placeholders.
    ArrayOfCustomizationIdentitySettings(Vec<Box<dyn super::traits::CustomizationIdentitySettingsTrait>>),
    /// A boxed array of *CustomizationIpGenerator*. To be used in *Any* placeholders.
    ArrayOfCustomizationIpGenerator(Vec<Box<dyn super::traits::CustomizationIpGeneratorTrait>>),
    /// A boxed array of *CustomizationIpV6Generator*. To be used in *Any* placeholders.
    ArrayOfCustomizationIpV6Generator(Vec<Box<dyn super::traits::CustomizationIpV6GeneratorTrait>>),
    /// A boxed array of *CustomizationLicenseFilePrintData*. To be used in *Any* placeholders.
    ArrayOfCustomizationLicenseFilePrintData(Vec<CustomizationLicenseFilePrintData>),
    /// A boxed array of *CustomizationLinuxOptions*. To be used in *Any* placeholders.
    ArrayOfCustomizationLinuxOptions(Vec<CustomizationLinuxOptions>),
    /// A boxed array of *CustomizationLinuxPrep*. To be used in *Any* placeholders.
    ArrayOfCustomizationLinuxPrep(Vec<CustomizationLinuxPrep>),
    /// A boxed array of *CustomizationName*. To be used in *Any* placeholders.
    ArrayOfCustomizationName(Vec<Box<dyn super::traits::CustomizationNameTrait>>),
    /// A boxed array of *CustomizationOptions*. To be used in *Any* placeholders.
    ArrayOfCustomizationOptions(Vec<Box<dyn super::traits::CustomizationOptionsTrait>>),
    /// A boxed array of *CustomizationPassword*. To be used in *Any* placeholders.
    ArrayOfCustomizationPassword(Vec<CustomizationPassword>),
    /// A boxed array of *CustomizationPrefixName*. To be used in *Any* placeholders.
    ArrayOfCustomizationPrefixName(Vec<CustomizationPrefixName>),
    /// A boxed array of *CustomizationSpec*. To be used in *Any* placeholders.
    ArrayOfCustomizationSpec(Vec<CustomizationSpec>),
    /// A boxed array of *CustomizationStatelessIpV6Generator*. To be used in *Any* placeholders.
    ArrayOfCustomizationStatelessIpV6Generator(Vec<CustomizationStatelessIpV6Generator>),
    /// A boxed array of *CustomizationSysprep*. To be used in *Any* placeholders.
    ArrayOfCustomizationSysprep(Vec<CustomizationSysprep>),
    /// A boxed array of *CustomizationSysprepText*. To be used in *Any* placeholders.
    ArrayOfCustomizationSysprepText(Vec<CustomizationSysprepText>),
    /// A boxed array of *CustomizationUnknownIpGenerator*. To be used in *Any* placeholders.
    ArrayOfCustomizationUnknownIpGenerator(Vec<CustomizationUnknownIpGenerator>),
    /// A boxed array of *CustomizationUnknownIpV6Generator*. To be used in *Any* placeholders.
    ArrayOfCustomizationUnknownIpV6Generator(Vec<CustomizationUnknownIpV6Generator>),
    /// A boxed array of *CustomizationUnknownName*. To be used in *Any* placeholders.
    ArrayOfCustomizationUnknownName(Vec<CustomizationUnknownName>),
    /// A boxed array of *CustomizationUserData*. To be used in *Any* placeholders.
    ArrayOfCustomizationUserData(Vec<CustomizationUserData>),
    /// A boxed array of *CustomizationVirtualMachineName*. To be used in *Any* placeholders.
    ArrayOfCustomizationVirtualMachineName(Vec<CustomizationVirtualMachineName>),
    /// A boxed array of *CustomizationWinOptions*. To be used in *Any* placeholders.
    ArrayOfCustomizationWinOptions(Vec<CustomizationWinOptions>),
    /// A boxed array of *HostDiskMappingInfo*. To be used in *Any* placeholders.
    ArrayOfHostDiskMappingInfo(Vec<HostDiskMappingInfo>),
    /// A boxed array of *HostDiskMappingPartitionInfo*. To be used in *Any* placeholders.
    ArrayOfHostDiskMappingPartitionInfo(Vec<HostDiskMappingPartitionInfo>),
    /// A boxed array of *HostDiskMappingOption*. To be used in *Any* placeholders.
    ArrayOfHostDiskMappingOption(Vec<HostDiskMappingOption>),
    /// A boxed array of *HostDiskMappingPartitionOption*. To be used in *Any* placeholders.
    ArrayOfHostDiskMappingPartitionOption(Vec<HostDiskMappingPartitionOption>),
    /// A boxed array of *ParaVirtualSCSIController*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfParaVirtualSCSIController")]
    ArrayOfParaVirtualScsiController(Vec<ParaVirtualScsiController>),
    /// A boxed array of *ParaVirtualSCSIControllerOption*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfParaVirtualSCSIControllerOption")]
    ArrayOfParaVirtualScsiControllerOption(Vec<ParaVirtualScsiControllerOption>),
    /// A boxed array of *VirtualAHCIController*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualAHCIController")]
    ArrayOfVirtualAhciController(Vec<VirtualAhciController>),
    /// A boxed array of *VirtualAHCIControllerOption*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualAHCIControllerOption")]
    ArrayOfVirtualAhciControllerOption(Vec<VirtualAhciControllerOption>),
    /// A boxed array of *VirtualBusLogicController*. To be used in *Any* placeholders.
    ArrayOfVirtualBusLogicController(Vec<VirtualBusLogicController>),
    /// A boxed array of *VirtualBusLogicControllerOption*. To be used in *Any* placeholders.
    ArrayOfVirtualBusLogicControllerOption(Vec<VirtualBusLogicControllerOption>),
    /// A boxed array of *VirtualCdrom*. To be used in *Any* placeholders.
    ArrayOfVirtualCdrom(Vec<VirtualCdrom>),
    /// A boxed array of *VirtualCdromAtapiBackingInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualCdromAtapiBackingInfo(Vec<VirtualCdromAtapiBackingInfo>),
    /// A boxed array of *VirtualCdromIsoBackingInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualCdromIsoBackingInfo(Vec<VirtualCdromIsoBackingInfo>),
    /// A boxed array of *VirtualCdromPassthroughBackingInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualCdromPassthroughBackingInfo(Vec<VirtualCdromPassthroughBackingInfo>),
    /// A boxed array of *VirtualCdromRemoteAtapiBackingInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualCdromRemoteAtapiBackingInfo(Vec<VirtualCdromRemoteAtapiBackingInfo>),
    /// A boxed array of *VirtualCdromRemotePassthroughBackingInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualCdromRemotePassthroughBackingInfo(Vec<VirtualCdromRemotePassthroughBackingInfo>),
    /// A boxed array of *VirtualCdromOption*. To be used in *Any* placeholders.
    ArrayOfVirtualCdromOption(Vec<VirtualCdromOption>),
    /// A boxed array of *VirtualCdromAtapiBackingOption*. To be used in *Any* placeholders.
    ArrayOfVirtualCdromAtapiBackingOption(Vec<VirtualCdromAtapiBackingOption>),
    /// A boxed array of *VirtualCdromIsoBackingOption*. To be used in *Any* placeholders.
    ArrayOfVirtualCdromIsoBackingOption(Vec<VirtualCdromIsoBackingOption>),
    /// A boxed array of *VirtualCdromPassthroughBackingOption*. To be used in *Any* placeholders.
    ArrayOfVirtualCdromPassthroughBackingOption(Vec<VirtualCdromPassthroughBackingOption>),
    /// A boxed array of *VirtualCdromRemoteAtapiBackingOption*. To be used in *Any* placeholders.
    ArrayOfVirtualCdromRemoteAtapiBackingOption(Vec<VirtualCdromRemoteAtapiBackingOption>),
    /// A boxed array of *VirtualCdromRemotePassthroughBackingOption*. To be used in *Any* placeholders.
    ArrayOfVirtualCdromRemotePassthroughBackingOption(Vec<VirtualCdromRemotePassthroughBackingOption>),
    /// A boxed array of *VirtualController*. To be used in *Any* placeholders.
    ArrayOfVirtualController(Vec<Box<dyn super::traits::VirtualControllerTrait>>),
    /// A boxed array of *VirtualControllerOption*. To be used in *Any* placeholders.
    ArrayOfVirtualControllerOption(Vec<Box<dyn super::traits::VirtualControllerOptionTrait>>),
    /// A boxed array of *VirtualDevice*. To be used in *Any* placeholders.
    ArrayOfVirtualDevice(Vec<Box<dyn super::traits::VirtualDeviceTrait>>),
    /// A boxed array of *VirtualDeviceBackingInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualDeviceBackingInfo(Vec<Box<dyn super::traits::VirtualDeviceBackingInfoTrait>>),
    /// A boxed array of *VirtualDeviceBusSlotInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualDeviceBusSlotInfo(Vec<Box<dyn super::traits::VirtualDeviceBusSlotInfoTrait>>),
    /// A boxed array of *VirtualDeviceConnectInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualDeviceConnectInfo(Vec<VirtualDeviceConnectInfo>),
    /// A boxed array of *VirtualDeviceDeviceBackingInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualDeviceDeviceBackingInfo(Vec<Box<dyn super::traits::VirtualDeviceDeviceBackingInfoTrait>>),
    /// A boxed array of *VirtualDeviceDeviceGroupInfo*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 8.0.0.1
    ArrayOfVirtualDeviceDeviceGroupInfo(Vec<VirtualDeviceDeviceGroupInfo>),
    /// A boxed array of *VirtualDeviceFileBackingInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualDeviceFileBackingInfo(Vec<Box<dyn super::traits::VirtualDeviceFileBackingInfoTrait>>),
    /// A boxed array of *VirtualDevicePciBusSlotInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualDevicePciBusSlotInfo(Vec<Box<dyn super::traits::VirtualDevicePciBusSlotInfoTrait>>),
    /// A boxed array of *VirtualDevicePipeBackingInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualDevicePipeBackingInfo(Vec<Box<dyn super::traits::VirtualDevicePipeBackingInfoTrait>>),
    /// A boxed array of *VirtualDeviceRemoteDeviceBackingInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualDeviceRemoteDeviceBackingInfo(Vec<Box<dyn super::traits::VirtualDeviceRemoteDeviceBackingInfoTrait>>),
    /// A boxed array of *VirtualDeviceURIBackingInfo*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualDeviceURIBackingInfo")]
    ArrayOfVirtualDeviceUriBackingInfo(Vec<Box<dyn super::traits::VirtualDeviceUriBackingInfoTrait>>),
    /// A boxed array of *VirtualDeviceOption*. To be used in *Any* placeholders.
    ArrayOfVirtualDeviceOption(Vec<Box<dyn super::traits::VirtualDeviceOptionTrait>>),
    /// A boxed array of *VirtualDeviceBackingOption*. To be used in *Any* placeholders.
    ArrayOfVirtualDeviceBackingOption(Vec<Box<dyn super::traits::VirtualDeviceBackingOptionTrait>>),
    /// A boxed array of *VirtualDeviceBusSlotOption*. To be used in *Any* placeholders.
    ArrayOfVirtualDeviceBusSlotOption(Vec<VirtualDeviceBusSlotOption>),
    /// A boxed array of *VirtualDeviceConnectOption*. To be used in *Any* placeholders.
    ArrayOfVirtualDeviceConnectOption(Vec<VirtualDeviceConnectOption>),
    /// A boxed array of *VirtualDeviceDeviceBackingOption*. To be used in *Any* placeholders.
    ArrayOfVirtualDeviceDeviceBackingOption(Vec<Box<dyn super::traits::VirtualDeviceDeviceBackingOptionTrait>>),
    /// A boxed array of *VirtualDeviceFileBackingOption*. To be used in *Any* placeholders.
    ArrayOfVirtualDeviceFileBackingOption(Vec<Box<dyn super::traits::VirtualDeviceFileBackingOptionTrait>>),
    /// A boxed array of *VirtualDevicePipeBackingOption*. To be used in *Any* placeholders.
    ArrayOfVirtualDevicePipeBackingOption(Vec<Box<dyn super::traits::VirtualDevicePipeBackingOptionTrait>>),
    /// A boxed array of *VirtualDeviceRemoteDeviceBackingOption*. To be used in *Any* placeholders.
    ArrayOfVirtualDeviceRemoteDeviceBackingOption(Vec<Box<dyn super::traits::VirtualDeviceRemoteDeviceBackingOptionTrait>>),
    /// A boxed array of *VirtualDeviceURIBackingOption*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualDeviceURIBackingOption")]
    ArrayOfVirtualDeviceUriBackingOption(Vec<Box<dyn super::traits::VirtualDeviceUriBackingOptionTrait>>),
    /// A boxed array of *VirtualDeviceConfigSpec*. To be used in *Any* placeholders.
    ArrayOfVirtualDeviceConfigSpec(Vec<Box<dyn super::traits::VirtualDeviceConfigSpecTrait>>),
    /// A boxed array of *VirtualDeviceConfigSpecBackingSpec*. To be used in *Any* placeholders.
    ArrayOfVirtualDeviceConfigSpecBackingSpec(Vec<VirtualDeviceConfigSpecBackingSpec>),
    /// A boxed array of *VirtualDisk*. To be used in *Any* placeholders.
    ArrayOfVirtualDisk(Vec<VirtualDisk>),
    /// A boxed array of *VirtualDiskFlatVer1BackingInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualDiskFlatVer1BackingInfo(Vec<VirtualDiskFlatVer1BackingInfo>),
    /// A boxed array of *VirtualDiskFlatVer2BackingInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualDiskFlatVer2BackingInfo(Vec<VirtualDiskFlatVer2BackingInfo>),
    /// A boxed array of *VirtualDiskLocalPMemBackingInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualDiskLocalPMemBackingInfo(Vec<VirtualDiskLocalPMemBackingInfo>),
    /// A boxed array of *VirtualDiskPartitionedRawDiskVer2BackingInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualDiskPartitionedRawDiskVer2BackingInfo(Vec<VirtualDiskPartitionedRawDiskVer2BackingInfo>),
    /// A boxed array of *VirtualDiskRawDiskMappingVer1BackingInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualDiskRawDiskMappingVer1BackingInfo(Vec<VirtualDiskRawDiskMappingVer1BackingInfo>),
    /// A boxed array of *VirtualDiskRawDiskVer2BackingInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualDiskRawDiskVer2BackingInfo(Vec<Box<dyn super::traits::VirtualDiskRawDiskVer2BackingInfoTrait>>),
    /// A boxed array of *VirtualDiskSeSparseBackingInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualDiskSeSparseBackingInfo(Vec<VirtualDiskSeSparseBackingInfo>),
    /// A boxed array of *VirtualDiskSparseVer1BackingInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualDiskSparseVer1BackingInfo(Vec<VirtualDiskSparseVer1BackingInfo>),
    /// A boxed array of *VirtualDiskSparseVer2BackingInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualDiskSparseVer2BackingInfo(Vec<VirtualDiskSparseVer2BackingInfo>),
    /// A boxed array of *VirtualDiskVFlashCacheConfigInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualDiskVFlashCacheConfigInfo(Vec<VirtualDiskVFlashCacheConfigInfo>),
    /// A boxed array of *VirtualDiskId*. To be used in *Any* placeholders.
    ArrayOfVirtualDiskId(Vec<VirtualDiskId>),
    /// A boxed array of *VirtualDiskOption*. To be used in *Any* placeholders.
    ArrayOfVirtualDiskOption(Vec<VirtualDiskOption>),
    /// A boxed array of *VirtualDiskDeltaDiskFormatsSupported*. To be used in *Any* placeholders.
    ArrayOfVirtualDiskDeltaDiskFormatsSupported(Vec<VirtualDiskDeltaDiskFormatsSupported>),
    /// A boxed array of *VirtualDiskFlatVer1BackingOption*. To be used in *Any* placeholders.
    ArrayOfVirtualDiskFlatVer1BackingOption(Vec<VirtualDiskFlatVer1BackingOption>),
    /// A boxed array of *VirtualDiskFlatVer2BackingOption*. To be used in *Any* placeholders.
    ArrayOfVirtualDiskFlatVer2BackingOption(Vec<VirtualDiskFlatVer2BackingOption>),
    /// A boxed array of *VirtualDiskLocalPMemBackingOption*. To be used in *Any* placeholders.
    ArrayOfVirtualDiskLocalPMemBackingOption(Vec<VirtualDiskLocalPMemBackingOption>),
    /// A boxed array of *VirtualDiskPartitionedRawDiskVer2BackingOption*. To be used in *Any* placeholders.
    ArrayOfVirtualDiskPartitionedRawDiskVer2BackingOption(Vec<VirtualDiskPartitionedRawDiskVer2BackingOption>),
    /// A boxed array of *VirtualDiskRawDiskMappingVer1BackingOption*. To be used in *Any* placeholders.
    ArrayOfVirtualDiskRawDiskMappingVer1BackingOption(Vec<VirtualDiskRawDiskMappingVer1BackingOption>),
    /// A boxed array of *VirtualDiskRawDiskVer2BackingOption*. To be used in *Any* placeholders.
    ArrayOfVirtualDiskRawDiskVer2BackingOption(Vec<Box<dyn super::traits::VirtualDiskRawDiskVer2BackingOptionTrait>>),
    /// A boxed array of *VirtualDiskSeSparseBackingOption*. To be used in *Any* placeholders.
    ArrayOfVirtualDiskSeSparseBackingOption(Vec<VirtualDiskSeSparseBackingOption>),
    /// A boxed array of *VirtualDiskSparseVer1BackingOption*. To be used in *Any* placeholders.
    ArrayOfVirtualDiskSparseVer1BackingOption(Vec<VirtualDiskSparseVer1BackingOption>),
    /// A boxed array of *VirtualDiskSparseVer2BackingOption*. To be used in *Any* placeholders.
    ArrayOfVirtualDiskSparseVer2BackingOption(Vec<VirtualDiskSparseVer2BackingOption>),
    /// A boxed array of *VirtualDiskOptionVFlashCacheConfigOption*. To be used in *Any* placeholders.
    ArrayOfVirtualDiskOptionVFlashCacheConfigOption(Vec<VirtualDiskOptionVFlashCacheConfigOption>),
    /// A boxed array of *VirtualDiskConfigSpec*. To be used in *Any* placeholders.
    ArrayOfVirtualDiskConfigSpec(Vec<VirtualDiskConfigSpec>),
    /// A boxed array of *VirtualE1000*. To be used in *Any* placeholders.
    ArrayOfVirtualE1000(Vec<VirtualE1000>),
    /// A boxed array of *VirtualE1000Option*. To be used in *Any* placeholders.
    ArrayOfVirtualE1000Option(Vec<VirtualE1000Option>),
    /// A boxed array of *VirtualE1000e*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualE1000e")]
    ArrayOfVirtualE1000E(Vec<VirtualE1000E>),
    /// A boxed array of *VirtualE1000eOption*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualE1000eOption")]
    ArrayOfVirtualE1000EOption(Vec<VirtualE1000EOption>),
    /// A boxed array of *VirtualEnsoniq1371*. To be used in *Any* placeholders.
    ArrayOfVirtualEnsoniq1371(Vec<VirtualEnsoniq1371>),
    /// A boxed array of *VirtualEnsoniq1371Option*. To be used in *Any* placeholders.
    ArrayOfVirtualEnsoniq1371Option(Vec<VirtualEnsoniq1371Option>),
    /// A boxed array of *VirtualEthernetCard*. To be used in *Any* placeholders.
    ArrayOfVirtualEthernetCard(Vec<Box<dyn super::traits::VirtualEthernetCardTrait>>),
    /// A boxed array of *VirtualEthernetCardDistributedVirtualPortBackingInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualEthernetCardDistributedVirtualPortBackingInfo(Vec<VirtualEthernetCardDistributedVirtualPortBackingInfo>),
    /// A boxed array of *VirtualEthernetCardLegacyNetworkBackingInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualEthernetCardLegacyNetworkBackingInfo(Vec<VirtualEthernetCardLegacyNetworkBackingInfo>),
    /// A boxed array of *VirtualEthernetCardNetworkBackingInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualEthernetCardNetworkBackingInfo(Vec<VirtualEthernetCardNetworkBackingInfo>),
    /// A boxed array of *VirtualEthernetCardOpaqueNetworkBackingInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualEthernetCardOpaqueNetworkBackingInfo(Vec<VirtualEthernetCardOpaqueNetworkBackingInfo>),
    /// A boxed array of *VirtualEthernetCardResourceAllocation*. To be used in *Any* placeholders.
    ArrayOfVirtualEthernetCardResourceAllocation(Vec<VirtualEthernetCardResourceAllocation>),
    /// A boxed array of *VirtualEthernetCardOption*. To be used in *Any* placeholders.
    ArrayOfVirtualEthernetCardOption(Vec<Box<dyn super::traits::VirtualEthernetCardOptionTrait>>),
    /// A boxed array of *VirtualEthernetCardDVPortBackingOption*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualEthernetCardDVPortBackingOption")]
    ArrayOfVirtualEthernetCardDvPortBackingOption(Vec<VirtualEthernetCardDvPortBackingOption>),
    /// A boxed array of *VirtualEthernetCardLegacyNetworkBackingOption*. To be used in *Any* placeholders.
    ArrayOfVirtualEthernetCardLegacyNetworkBackingOption(Vec<VirtualEthernetCardLegacyNetworkBackingOption>),
    /// A boxed array of *VirtualEthernetCardNetworkBackingOption*. To be used in *Any* placeholders.
    ArrayOfVirtualEthernetCardNetworkBackingOption(Vec<VirtualEthernetCardNetworkBackingOption>),
    /// A boxed array of *VirtualEthernetCardOpaqueNetworkBackingOption*. To be used in *Any* placeholders.
    ArrayOfVirtualEthernetCardOpaqueNetworkBackingOption(Vec<VirtualEthernetCardOpaqueNetworkBackingOption>),
    /// A boxed array of *VirtualFloppy*. To be used in *Any* placeholders.
    ArrayOfVirtualFloppy(Vec<VirtualFloppy>),
    /// A boxed array of *VirtualFloppyDeviceBackingInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualFloppyDeviceBackingInfo(Vec<VirtualFloppyDeviceBackingInfo>),
    /// A boxed array of *VirtualFloppyImageBackingInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualFloppyImageBackingInfo(Vec<VirtualFloppyImageBackingInfo>),
    /// A boxed array of *VirtualFloppyRemoteDeviceBackingInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualFloppyRemoteDeviceBackingInfo(Vec<VirtualFloppyRemoteDeviceBackingInfo>),
    /// A boxed array of *VirtualFloppyOption*. To be used in *Any* placeholders.
    ArrayOfVirtualFloppyOption(Vec<VirtualFloppyOption>),
    /// A boxed array of *VirtualFloppyDeviceBackingOption*. To be used in *Any* placeholders.
    ArrayOfVirtualFloppyDeviceBackingOption(Vec<VirtualFloppyDeviceBackingOption>),
    /// A boxed array of *VirtualFloppyImageBackingOption*. To be used in *Any* placeholders.
    ArrayOfVirtualFloppyImageBackingOption(Vec<VirtualFloppyImageBackingOption>),
    /// A boxed array of *VirtualFloppyRemoteDeviceBackingOption*. To be used in *Any* placeholders.
    ArrayOfVirtualFloppyRemoteDeviceBackingOption(Vec<VirtualFloppyRemoteDeviceBackingOption>),
    /// A boxed array of *VirtualHdAudioCard*. To be used in *Any* placeholders.
    ArrayOfVirtualHdAudioCard(Vec<VirtualHdAudioCard>),
    /// A boxed array of *VirtualHdAudioCardOption*. To be used in *Any* placeholders.
    ArrayOfVirtualHdAudioCardOption(Vec<VirtualHdAudioCardOption>),
    /// A boxed array of *VirtualIDEController*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualIDEController")]
    ArrayOfVirtualIdeController(Vec<VirtualIdeController>),
    /// A boxed array of *VirtualIDEControllerOption*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualIDEControllerOption")]
    ArrayOfVirtualIdeControllerOption(Vec<VirtualIdeControllerOption>),
    /// A boxed array of *VirtualKeyboard*. To be used in *Any* placeholders.
    ArrayOfVirtualKeyboard(Vec<VirtualKeyboard>),
    /// A boxed array of *VirtualKeyboardOption*. To be used in *Any* placeholders.
    ArrayOfVirtualKeyboardOption(Vec<VirtualKeyboardOption>),
    /// A boxed array of *VirtualLsiLogicController*. To be used in *Any* placeholders.
    ArrayOfVirtualLsiLogicController(Vec<VirtualLsiLogicController>),
    /// A boxed array of *VirtualLsiLogicControllerOption*. To be used in *Any* placeholders.
    ArrayOfVirtualLsiLogicControllerOption(Vec<VirtualLsiLogicControllerOption>),
    /// A boxed array of *VirtualLsiLogicSASController*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualLsiLogicSASController")]
    ArrayOfVirtualLsiLogicSasController(Vec<VirtualLsiLogicSasController>),
    /// A boxed array of *VirtualLsiLogicSASControllerOption*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualLsiLogicSASControllerOption")]
    ArrayOfVirtualLsiLogicSasControllerOption(Vec<VirtualLsiLogicSasControllerOption>),
    /// A boxed array of *VirtualNVDIMM*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualNVDIMM")]
    ArrayOfVirtualNvdimm(Vec<VirtualNvdimm>),
    /// A boxed array of *VirtualNVDIMMBackingInfo*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualNVDIMMBackingInfo")]
    ArrayOfVirtualNvdimmBackingInfo(Vec<VirtualNvdimmBackingInfo>),
    /// A boxed array of *VirtualNVDIMMController*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualNVDIMMController")]
    ArrayOfVirtualNvdimmController(Vec<VirtualNvdimmController>),
    /// A boxed array of *VirtualNVDIMMControllerOption*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualNVDIMMControllerOption")]
    ArrayOfVirtualNvdimmControllerOption(Vec<VirtualNvdimmControllerOption>),
    /// A boxed array of *VirtualNVDIMMOption*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualNVDIMMOption")]
    ArrayOfVirtualNvdimmOption(Vec<VirtualNvdimmOption>),
    /// A boxed array of *VirtualNVMEController*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualNVMEController")]
    ArrayOfVirtualNvmeController(Vec<VirtualNvmeController>),
    /// A boxed array of *VirtualNVMEControllerOption*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualNVMEControllerOption")]
    ArrayOfVirtualNvmeControllerOption(Vec<VirtualNvmeControllerOption>),
    /// A boxed array of *VirtualPCIController*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualPCIController")]
    ArrayOfVirtualPciController(Vec<VirtualPciController>),
    /// A boxed array of *VirtualPCIControllerOption*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualPCIControllerOption")]
    ArrayOfVirtualPciControllerOption(Vec<VirtualPciControllerOption>),
    /// A boxed array of *VirtualPCIPassthrough*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualPCIPassthrough")]
    ArrayOfVirtualPciPassthrough(Vec<VirtualPciPassthrough>),
    /// A boxed array of *VirtualPCIPassthroughAllowedDevice*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualPCIPassthroughAllowedDevice")]
    ArrayOfVirtualPciPassthroughAllowedDevice(Vec<VirtualPciPassthroughAllowedDevice>),
    /// A boxed array of *VirtualPCIPassthroughDeviceBackingInfo*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualPCIPassthroughDeviceBackingInfo")]
    ArrayOfVirtualPciPassthroughDeviceBackingInfo(Vec<VirtualPciPassthroughDeviceBackingInfo>),
    /// A boxed array of *VirtualPCIPassthroughDvxBackingInfo*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 8.0.0.1
    #[serde(rename = "ArrayOfVirtualPCIPassthroughDvxBackingInfo")]
    ArrayOfVirtualPciPassthroughDvxBackingInfo(Vec<VirtualPciPassthroughDvxBackingInfo>),
    /// A boxed array of *VirtualPCIPassthroughDynamicBackingInfo*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualPCIPassthroughDynamicBackingInfo")]
    ArrayOfVirtualPciPassthroughDynamicBackingInfo(Vec<VirtualPciPassthroughDynamicBackingInfo>),
    /// A boxed array of *VirtualPCIPassthroughPluginBackingInfo*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualPCIPassthroughPluginBackingInfo")]
    ArrayOfVirtualPciPassthroughPluginBackingInfo(Vec<Box<dyn super::traits::VirtualPciPassthroughPluginBackingInfoTrait>>),
    /// A boxed array of *VirtualPCIPassthroughVmiopBackingInfo*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualPCIPassthroughVmiopBackingInfo")]
    ArrayOfVirtualPciPassthroughVmiopBackingInfo(Vec<VirtualPciPassthroughVmiopBackingInfo>),
    /// A boxed array of *VirtualPCIPassthroughOption*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualPCIPassthroughOption")]
    ArrayOfVirtualPciPassthroughOption(Vec<VirtualPciPassthroughOption>),
    /// A boxed array of *VirtualPCIPassthroughDeviceBackingOption*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualPCIPassthroughDeviceBackingOption")]
    ArrayOfVirtualPciPassthroughDeviceBackingOption(Vec<VirtualPciPassthroughDeviceBackingOption>),
    /// A boxed array of *VirtualPCIPassthroughDvxBackingOption*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 8.0.0.1
    #[serde(rename = "ArrayOfVirtualPCIPassthroughDvxBackingOption")]
    ArrayOfVirtualPciPassthroughDvxBackingOption(Vec<VirtualPciPassthroughDvxBackingOption>),
    /// A boxed array of *VirtualPCIPassthroughDynamicBackingOption*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualPCIPassthroughDynamicBackingOption")]
    ArrayOfVirtualPciPassthroughDynamicBackingOption(Vec<VirtualPciPassthroughDynamicBackingOption>),
    /// A boxed array of *VirtualPCIPassthroughPluginBackingOption*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualPCIPassthroughPluginBackingOption")]
    ArrayOfVirtualPciPassthroughPluginBackingOption(Vec<Box<dyn super::traits::VirtualPciPassthroughPluginBackingOptionTrait>>),
    /// A boxed array of *VirtualPCIPassthroughVmiopBackingOption*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualPCIPassthroughVmiopBackingOption")]
    ArrayOfVirtualPciPassthroughVmiopBackingOption(Vec<VirtualPciPassthroughVmiopBackingOption>),
    /// A boxed array of *VirtualPCNet32*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualPCNet32")]
    ArrayOfVirtualPcNet32(Vec<VirtualPcNet32>),
    /// A boxed array of *VirtualPCNet32Option*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualPCNet32Option")]
    ArrayOfVirtualPcNet32Option(Vec<VirtualPcNet32Option>),
    /// A boxed array of *VirtualPS2Controller*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualPS2Controller")]
    ArrayOfVirtualPs2Controller(Vec<VirtualPs2Controller>),
    /// A boxed array of *VirtualPS2ControllerOption*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualPS2ControllerOption")]
    ArrayOfVirtualPs2ControllerOption(Vec<VirtualPs2ControllerOption>),
    /// A boxed array of *VirtualParallelPort*. To be used in *Any* placeholders.
    ArrayOfVirtualParallelPort(Vec<VirtualParallelPort>),
    /// A boxed array of *VirtualParallelPortDeviceBackingInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualParallelPortDeviceBackingInfo(Vec<VirtualParallelPortDeviceBackingInfo>),
    /// A boxed array of *VirtualParallelPortFileBackingInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualParallelPortFileBackingInfo(Vec<VirtualParallelPortFileBackingInfo>),
    /// A boxed array of *VirtualParallelPortOption*. To be used in *Any* placeholders.
    ArrayOfVirtualParallelPortOption(Vec<VirtualParallelPortOption>),
    /// A boxed array of *VirtualParallelPortDeviceBackingOption*. To be used in *Any* placeholders.
    ArrayOfVirtualParallelPortDeviceBackingOption(Vec<VirtualParallelPortDeviceBackingOption>),
    /// A boxed array of *VirtualParallelPortFileBackingOption*. To be used in *Any* placeholders.
    ArrayOfVirtualParallelPortFileBackingOption(Vec<VirtualParallelPortFileBackingOption>),
    /// A boxed array of *VirtualPointingDevice*. To be used in *Any* placeholders.
    ArrayOfVirtualPointingDevice(Vec<VirtualPointingDevice>),
    /// A boxed array of *VirtualPointingDeviceDeviceBackingInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualPointingDeviceDeviceBackingInfo(Vec<VirtualPointingDeviceDeviceBackingInfo>),
    /// A boxed array of *VirtualPointingDeviceOption*. To be used in *Any* placeholders.
    ArrayOfVirtualPointingDeviceOption(Vec<VirtualPointingDeviceOption>),
    /// A boxed array of *VirtualPointingDeviceBackingOption*. To be used in *Any* placeholders.
    ArrayOfVirtualPointingDeviceBackingOption(Vec<VirtualPointingDeviceBackingOption>),
    /// A boxed array of *VirtualPrecisionClock*. To be used in *Any* placeholders.
    ArrayOfVirtualPrecisionClock(Vec<VirtualPrecisionClock>),
    /// A boxed array of *VirtualPrecisionClockSystemClockBackingInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualPrecisionClockSystemClockBackingInfo(Vec<VirtualPrecisionClockSystemClockBackingInfo>),
    /// A boxed array of *VirtualPrecisionClockOption*. To be used in *Any* placeholders.
    ArrayOfVirtualPrecisionClockOption(Vec<VirtualPrecisionClockOption>),
    /// A boxed array of *VirtualPrecisionClockSystemClockBackingOption*. To be used in *Any* placeholders.
    ArrayOfVirtualPrecisionClockSystemClockBackingOption(Vec<VirtualPrecisionClockSystemClockBackingOption>),
    /// A boxed array of *VirtualSATAController*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualSATAController")]
    ArrayOfVirtualSataController(Vec<Box<dyn super::traits::VirtualSataControllerTrait>>),
    /// A boxed array of *VirtualSATAControllerOption*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualSATAControllerOption")]
    ArrayOfVirtualSataControllerOption(Vec<Box<dyn super::traits::VirtualSataControllerOptionTrait>>),
    /// A boxed array of *VirtualSCSIController*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualSCSIController")]
    ArrayOfVirtualScsiController(Vec<Box<dyn super::traits::VirtualScsiControllerTrait>>),
    /// A boxed array of *VirtualSCSIControllerOption*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualSCSIControllerOption")]
    ArrayOfVirtualScsiControllerOption(Vec<Box<dyn super::traits::VirtualScsiControllerOptionTrait>>),
    /// A boxed array of *VirtualSCSIPassthrough*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualSCSIPassthrough")]
    ArrayOfVirtualScsiPassthrough(Vec<VirtualScsiPassthrough>),
    /// A boxed array of *VirtualSCSIPassthroughDeviceBackingInfo*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualSCSIPassthroughDeviceBackingInfo")]
    ArrayOfVirtualScsiPassthroughDeviceBackingInfo(Vec<VirtualScsiPassthroughDeviceBackingInfo>),
    /// A boxed array of *VirtualSCSIPassthroughOption*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualSCSIPassthroughOption")]
    ArrayOfVirtualScsiPassthroughOption(Vec<VirtualScsiPassthroughOption>),
    /// A boxed array of *VirtualSCSIPassthroughDeviceBackingOption*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualSCSIPassthroughDeviceBackingOption")]
    ArrayOfVirtualScsiPassthroughDeviceBackingOption(Vec<VirtualScsiPassthroughDeviceBackingOption>),
    /// A boxed array of *VirtualSIOController*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualSIOController")]
    ArrayOfVirtualSioController(Vec<VirtualSioController>),
    /// A boxed array of *VirtualSIOControllerOption*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualSIOControllerOption")]
    ArrayOfVirtualSioControllerOption(Vec<VirtualSioControllerOption>),
    /// A boxed array of *VirtualSerialPort*. To be used in *Any* placeholders.
    ArrayOfVirtualSerialPort(Vec<VirtualSerialPort>),
    /// A boxed array of *VirtualSerialPortDeviceBackingInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualSerialPortDeviceBackingInfo(Vec<VirtualSerialPortDeviceBackingInfo>),
    /// A boxed array of *VirtualSerialPortFileBackingInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualSerialPortFileBackingInfo(Vec<VirtualSerialPortFileBackingInfo>),
    /// A boxed array of *VirtualSerialPortPipeBackingInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualSerialPortPipeBackingInfo(Vec<VirtualSerialPortPipeBackingInfo>),
    /// A boxed array of *VirtualSerialPortThinPrintBackingInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualSerialPortThinPrintBackingInfo(Vec<VirtualSerialPortThinPrintBackingInfo>),
    /// A boxed array of *VirtualSerialPortURIBackingInfo*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualSerialPortURIBackingInfo")]
    ArrayOfVirtualSerialPortUriBackingInfo(Vec<VirtualSerialPortUriBackingInfo>),
    /// A boxed array of *VirtualSerialPortOption*. To be used in *Any* placeholders.
    ArrayOfVirtualSerialPortOption(Vec<VirtualSerialPortOption>),
    /// A boxed array of *VirtualSerialPortDeviceBackingOption*. To be used in *Any* placeholders.
    ArrayOfVirtualSerialPortDeviceBackingOption(Vec<VirtualSerialPortDeviceBackingOption>),
    /// A boxed array of *VirtualSerialPortFileBackingOption*. To be used in *Any* placeholders.
    ArrayOfVirtualSerialPortFileBackingOption(Vec<VirtualSerialPortFileBackingOption>),
    /// A boxed array of *VirtualSerialPortPipeBackingOption*. To be used in *Any* placeholders.
    ArrayOfVirtualSerialPortPipeBackingOption(Vec<VirtualSerialPortPipeBackingOption>),
    /// A boxed array of *VirtualSerialPortThinPrintBackingOption*. To be used in *Any* placeholders.
    ArrayOfVirtualSerialPortThinPrintBackingOption(Vec<VirtualSerialPortThinPrintBackingOption>),
    /// A boxed array of *VirtualSerialPortURIBackingOption*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualSerialPortURIBackingOption")]
    ArrayOfVirtualSerialPortUriBackingOption(Vec<VirtualSerialPortUriBackingOption>),
    /// A boxed array of *VirtualSoundBlaster16*. To be used in *Any* placeholders.
    ArrayOfVirtualSoundBlaster16(Vec<VirtualSoundBlaster16>),
    /// A boxed array of *VirtualSoundBlaster16Option*. To be used in *Any* placeholders.
    ArrayOfVirtualSoundBlaster16Option(Vec<VirtualSoundBlaster16Option>),
    /// A boxed array of *VirtualSoundCard*. To be used in *Any* placeholders.
    ArrayOfVirtualSoundCard(Vec<Box<dyn super::traits::VirtualSoundCardTrait>>),
    /// A boxed array of *VirtualSoundCardDeviceBackingInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualSoundCardDeviceBackingInfo(Vec<VirtualSoundCardDeviceBackingInfo>),
    /// A boxed array of *VirtualSoundCardOption*. To be used in *Any* placeholders.
    ArrayOfVirtualSoundCardOption(Vec<Box<dyn super::traits::VirtualSoundCardOptionTrait>>),
    /// A boxed array of *VirtualSoundCardDeviceBackingOption*. To be used in *Any* placeholders.
    ArrayOfVirtualSoundCardDeviceBackingOption(Vec<VirtualSoundCardDeviceBackingOption>),
    /// A boxed array of *VirtualSriovEthernetCard*. To be used in *Any* placeholders.
    ArrayOfVirtualSriovEthernetCard(Vec<VirtualSriovEthernetCard>),
    /// A boxed array of *VirtualSriovEthernetCardSriovBackingInfo*. To be used in *Any* placeholders.
    ArrayOfVirtualSriovEthernetCardSriovBackingInfo(Vec<VirtualSriovEthernetCardSriovBackingInfo>),
    /// A boxed array of *VirtualSriovEthernetCardOption*. To be used in *Any* placeholders.
    ArrayOfVirtualSriovEthernetCardOption(Vec<VirtualSriovEthernetCardOption>),
    /// A boxed array of *VirtualSriovEthernetCardSriovBackingOption*. To be used in *Any* placeholders.
    ArrayOfVirtualSriovEthernetCardSriovBackingOption(Vec<VirtualSriovEthernetCardSriovBackingOption>),
    /// A boxed array of *VirtualTPM*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualTPM")]
    ArrayOfVirtualTpm(Vec<VirtualTpm>),
    /// A boxed array of *VirtualTPMOption*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualTPMOption")]
    ArrayOfVirtualTpmOption(Vec<VirtualTpmOption>),
    /// A boxed array of *VirtualUSB*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualUSB")]
    ArrayOfVirtualUsb(Vec<VirtualUsb>),
    /// A boxed array of *VirtualUSBRemoteClientBackingInfo*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualUSBRemoteClientBackingInfo")]
    ArrayOfVirtualUsbRemoteClientBackingInfo(Vec<VirtualUsbRemoteClientBackingInfo>),
    /// A boxed array of *VirtualUSBRemoteHostBackingInfo*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualUSBRemoteHostBackingInfo")]
    ArrayOfVirtualUsbRemoteHostBackingInfo(Vec<VirtualUsbRemoteHostBackingInfo>),
    /// A boxed array of *VirtualUSBUSBBackingInfo*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualUSBUSBBackingInfo")]
    ArrayOfVirtualUsbusbBackingInfo(Vec<VirtualUsbusbBackingInfo>),
    /// A boxed array of *VirtualUSBController*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualUSBController")]
    ArrayOfVirtualUsbController(Vec<VirtualUsbController>),
    /// A boxed array of *VirtualUSBControllerPciBusSlotInfo*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualUSBControllerPciBusSlotInfo")]
    ArrayOfVirtualUsbControllerPciBusSlotInfo(Vec<VirtualUsbControllerPciBusSlotInfo>),
    /// A boxed array of *VirtualUSBControllerOption*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualUSBControllerOption")]
    ArrayOfVirtualUsbControllerOption(Vec<VirtualUsbControllerOption>),
    /// A boxed array of *VirtualUSBOption*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualUSBOption")]
    ArrayOfVirtualUsbOption(Vec<VirtualUsbOption>),
    /// A boxed array of *VirtualUSBRemoteClientBackingOption*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualUSBRemoteClientBackingOption")]
    ArrayOfVirtualUsbRemoteClientBackingOption(Vec<VirtualUsbRemoteClientBackingOption>),
    /// A boxed array of *VirtualUSBRemoteHostBackingOption*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualUSBRemoteHostBackingOption")]
    ArrayOfVirtualUsbRemoteHostBackingOption(Vec<VirtualUsbRemoteHostBackingOption>),
    /// A boxed array of *VirtualUSBUSBBackingOption*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualUSBUSBBackingOption")]
    ArrayOfVirtualUsbusbBackingOption(Vec<VirtualUsbusbBackingOption>),
    /// A boxed array of *VirtualUSBXHCIController*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualUSBXHCIController")]
    ArrayOfVirtualUsbxhciController(Vec<VirtualUsbxhciController>),
    /// A boxed array of *VirtualUSBXHCIControllerOption*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualUSBXHCIControllerOption")]
    ArrayOfVirtualUsbxhciControllerOption(Vec<VirtualUsbxhciControllerOption>),
    /// A boxed array of *VirtualMachineVMCIDevice*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualMachineVMCIDevice")]
    ArrayOfVirtualMachineVmciDevice(Vec<VirtualMachineVmciDevice>),
    /// A boxed array of *VirtualMachineVMCIDeviceFilterInfo*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualMachineVMCIDeviceFilterInfo")]
    ArrayOfVirtualMachineVmciDeviceFilterInfo(Vec<VirtualMachineVmciDeviceFilterInfo>),
    /// A boxed array of *VirtualMachineVMCIDeviceFilterSpec*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualMachineVMCIDeviceFilterSpec")]
    ArrayOfVirtualMachineVmciDeviceFilterSpec(Vec<VirtualMachineVmciDeviceFilterSpec>),
    /// A boxed array of *VirtualMachineVMCIDeviceOption*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualMachineVMCIDeviceOption")]
    ArrayOfVirtualMachineVmciDeviceOption(Vec<VirtualMachineVmciDeviceOption>),
    /// A boxed array of *VirtualMachineVMCIDeviceOptionFilterSpecOption*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualMachineVMCIDeviceOptionFilterSpecOption")]
    ArrayOfVirtualMachineVmciDeviceOptionFilterSpecOption(Vec<VirtualMachineVmciDeviceOptionFilterSpecOption>),
    /// A boxed array of *VirtualMachineVMIROM*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualMachineVMIROM")]
    ArrayOfVirtualMachineVmirom(Vec<VirtualMachineVmirom>),
    /// A boxed array of *VirtualVMIROMOption*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualVMIROMOption")]
    ArrayOfVirtualVmiromOption(Vec<VirtualVmiromOption>),
    /// A boxed array of *VirtualMachineVideoCard*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineVideoCard(Vec<VirtualMachineVideoCard>),
    /// A boxed array of *VirtualVideoCardOption*. To be used in *Any* placeholders.
    ArrayOfVirtualVideoCardOption(Vec<VirtualVideoCardOption>),
    /// A boxed array of *VirtualVmxnet*. To be used in *Any* placeholders.
    ArrayOfVirtualVmxnet(Vec<Box<dyn super::traits::VirtualVmxnetTrait>>),
    /// A boxed array of *VirtualVmxnet2*. To be used in *Any* placeholders.
    ArrayOfVirtualVmxnet2(Vec<VirtualVmxnet2>),
    /// A boxed array of *VirtualVmxnet2Option*. To be used in *Any* placeholders.
    ArrayOfVirtualVmxnet2Option(Vec<VirtualVmxnet2Option>),
    /// A boxed array of *VirtualVmxnet3*. To be used in *Any* placeholders.
    ArrayOfVirtualVmxnet3(Vec<Box<dyn super::traits::VirtualVmxnet3Trait>>),
    /// A boxed array of *VirtualVmxnet3Option*. To be used in *Any* placeholders.
    ArrayOfVirtualVmxnet3Option(Vec<Box<dyn super::traits::VirtualVmxnet3OptionTrait>>),
    /// A boxed array of *VirtualVmxnet3Vrdma*. To be used in *Any* placeholders.
    ArrayOfVirtualVmxnet3Vrdma(Vec<VirtualVmxnet3Vrdma>),
    /// A boxed array of *VirtualVmxnet3VrdmaOption*. To be used in *Any* placeholders.
    ArrayOfVirtualVmxnet3VrdmaOption(Vec<VirtualVmxnet3VrdmaOption>),
    /// A boxed array of *VirtualVmxnetOption*. To be used in *Any* placeholders.
    ArrayOfVirtualVmxnetOption(Vec<Box<dyn super::traits::VirtualVmxnetOptionTrait>>),
    /// A boxed array of *VirtualWDT*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualWDT")]
    ArrayOfVirtualWdt(Vec<VirtualWdt>),
    /// A boxed array of *VirtualWDTOption*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualWDTOption")]
    ArrayOfVirtualWdtOption(Vec<VirtualWdtOption>),
    /// A boxed array of *GuestAliases*. To be used in *Any* placeholders.
    ArrayOfGuestAliases(Vec<GuestAliases>),
    /// A boxed array of *GuestAuthAliasInfo*. To be used in *Any* placeholders.
    ArrayOfGuestAuthAliasInfo(Vec<GuestAuthAliasInfo>),
    /// A boxed array of *GuestAuthAnySubject*. To be used in *Any* placeholders.
    ArrayOfGuestAuthAnySubject(Vec<GuestAuthAnySubject>),
    /// A boxed array of *GuestAuthNamedSubject*. To be used in *Any* placeholders.
    ArrayOfGuestAuthNamedSubject(Vec<GuestAuthNamedSubject>),
    /// A boxed array of *GuestAuthSubject*. To be used in *Any* placeholders.
    ArrayOfGuestAuthSubject(Vec<Box<dyn super::traits::GuestAuthSubjectTrait>>),
    /// A boxed array of *GuestMappedAliases*. To be used in *Any* placeholders.
    ArrayOfGuestMappedAliases(Vec<GuestMappedAliases>),
    /// A boxed array of *GuestFileAttributes*. To be used in *Any* placeholders.
    ArrayOfGuestFileAttributes(Vec<Box<dyn super::traits::GuestFileAttributesTrait>>),
    /// A boxed array of *GuestFileInfo*. To be used in *Any* placeholders.
    ArrayOfGuestFileInfo(Vec<GuestFileInfo>),
    /// A boxed array of *FileTransferInformation*. To be used in *Any* placeholders.
    ArrayOfFileTransferInformation(Vec<FileTransferInformation>),
    /// A boxed array of *GuestListFileInfo*. To be used in *Any* placeholders.
    ArrayOfGuestListFileInfo(Vec<GuestListFileInfo>),
    /// A boxed array of *GuestPosixFileAttributes*. To be used in *Any* placeholders.
    ArrayOfGuestPosixFileAttributes(Vec<GuestPosixFileAttributes>),
    /// A boxed array of *GuestWindowsFileAttributes*. To be used in *Any* placeholders.
    ArrayOfGuestWindowsFileAttributes(Vec<GuestWindowsFileAttributes>),
    /// A boxed array of *GuestAuthentication*. To be used in *Any* placeholders.
    ArrayOfGuestAuthentication(Vec<Box<dyn super::traits::GuestAuthenticationTrait>>),
    /// A boxed array of *NamePasswordAuthentication*. To be used in *Any* placeholders.
    ArrayOfNamePasswordAuthentication(Vec<NamePasswordAuthentication>),
    /// A boxed array of *GuestProcessInfo*. To be used in *Any* placeholders.
    ArrayOfGuestProcessInfo(Vec<GuestProcessInfo>),
    /// A boxed array of *GuestProgramSpec*. To be used in *Any* placeholders.
    ArrayOfGuestProgramSpec(Vec<Box<dyn super::traits::GuestProgramSpecTrait>>),
    /// A boxed array of *GuestWindowsProgramSpec*. To be used in *Any* placeholders.
    ArrayOfGuestWindowsProgramSpec(Vec<GuestWindowsProgramSpec>),
    /// A boxed array of *SAMLTokenAuthentication*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfSAMLTokenAuthentication")]
    ArrayOfSamlTokenAuthentication(Vec<SamlTokenAuthentication>),
    /// A boxed array of *SSPIAuthentication*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfSSPIAuthentication")]
    ArrayOfSspiAuthentication(Vec<SspiAuthentication>),
    /// A boxed array of *TicketedSessionAuthentication*. To be used in *Any* placeholders.
    ArrayOfTicketedSessionAuthentication(Vec<TicketedSessionAuthentication>),
    /// A boxed array of *GuestRegKeySpec*. To be used in *Any* placeholders.
    ArrayOfGuestRegKeySpec(Vec<GuestRegKeySpec>),
    /// A boxed array of *GuestRegKeyNameSpec*. To be used in *Any* placeholders.
    ArrayOfGuestRegKeyNameSpec(Vec<GuestRegKeyNameSpec>),
    /// A boxed array of *GuestRegKeyRecordSpec*. To be used in *Any* placeholders.
    ArrayOfGuestRegKeyRecordSpec(Vec<GuestRegKeyRecordSpec>),
    /// A boxed array of *GuestRegValueSpec*. To be used in *Any* placeholders.
    ArrayOfGuestRegValueSpec(Vec<GuestRegValueSpec>),
    /// A boxed array of *GuestRegValueBinarySpec*. To be used in *Any* placeholders.
    ArrayOfGuestRegValueBinarySpec(Vec<GuestRegValueBinarySpec>),
    /// A boxed array of *GuestRegValueDataSpec*. To be used in *Any* placeholders.
    ArrayOfGuestRegValueDataSpec(Vec<Box<dyn super::traits::GuestRegValueDataSpecTrait>>),
    /// A boxed array of *GuestRegValueDwordSpec*. To be used in *Any* placeholders.
    ArrayOfGuestRegValueDwordSpec(Vec<GuestRegValueDwordSpec>),
    /// A boxed array of *GuestRegValueExpandStringSpec*. To be used in *Any* placeholders.
    ArrayOfGuestRegValueExpandStringSpec(Vec<GuestRegValueExpandStringSpec>),
    /// A boxed array of *GuestRegValueMultiStringSpec*. To be used in *Any* placeholders.
    ArrayOfGuestRegValueMultiStringSpec(Vec<GuestRegValueMultiStringSpec>),
    /// A boxed array of *GuestRegValueNameSpec*. To be used in *Any* placeholders.
    ArrayOfGuestRegValueNameSpec(Vec<GuestRegValueNameSpec>),
    /// A boxed array of *GuestRegValueQwordSpec*. To be used in *Any* placeholders.
    ArrayOfGuestRegValueQwordSpec(Vec<GuestRegValueQwordSpec>),
    /// A boxed array of *GuestRegValueStringSpec*. To be used in *Any* placeholders.
    ArrayOfGuestRegValueStringSpec(Vec<GuestRegValueStringSpec>),
    /// A boxed array of *DeviceGroupId*. To be used in *Any* placeholders.
    ArrayOfDeviceGroupId(Vec<DeviceGroupId>),
    /// A boxed array of *FaultDomainId*. To be used in *Any* placeholders.
    ArrayOfFaultDomainId(Vec<FaultDomainId>),
    /// A boxed array of *ReplicationGroupId*. To be used in *Any* placeholders.
    ArrayOfReplicationGroupId(Vec<ReplicationGroupId>),
    /// A boxed array of *ReplicationSpec*. To be used in *Any* placeholders.
    ArrayOfReplicationSpec(Vec<ReplicationSpec>),
    /// A boxed array of *VsanClusterConfigInfo*. To be used in *Any* placeholders.
    ArrayOfVsanClusterConfigInfo(Vec<VsanClusterConfigInfo>),
    /// A boxed array of *VsanClusterConfigInfoHostDefaultInfo*. To be used in *Any* placeholders.
    ArrayOfVsanClusterConfigInfoHostDefaultInfo(Vec<VsanClusterConfigInfoHostDefaultInfo>),
    /// A boxed array of *VsanHostClusterStatus*. To be used in *Any* placeholders.
    ArrayOfVsanHostClusterStatus(Vec<VsanHostClusterStatus>),
    /// A boxed array of *VsanHostClusterStatusState*. To be used in *Any* placeholders.
    ArrayOfVsanHostClusterStatusState(Vec<VsanHostClusterStatusState>),
    /// A boxed array of *VsanHostClusterStatusStateCompletionEstimate*. To be used in *Any* placeholders.
    ArrayOfVsanHostClusterStatusStateCompletionEstimate(Vec<VsanHostClusterStatusStateCompletionEstimate>),
    /// A boxed array of *VsanHostConfigInfo*. To be used in *Any* placeholders.
    ArrayOfVsanHostConfigInfo(Vec<VsanHostConfigInfo>),
    /// A boxed array of *VsanHostConfigInfoClusterInfo*. To be used in *Any* placeholders.
    ArrayOfVsanHostConfigInfoClusterInfo(Vec<VsanHostConfigInfoClusterInfo>),
    /// A boxed array of *VsanHostFaultDomainInfo*. To be used in *Any* placeholders.
    ArrayOfVsanHostFaultDomainInfo(Vec<VsanHostFaultDomainInfo>),
    /// A boxed array of *VsanHostConfigInfoNetworkInfo*. To be used in *Any* placeholders.
    ArrayOfVsanHostConfigInfoNetworkInfo(Vec<VsanHostConfigInfoNetworkInfo>),
    /// A boxed array of *VsanHostConfigInfoNetworkInfoPortConfig*. To be used in *Any* placeholders.
    ArrayOfVsanHostConfigInfoNetworkInfoPortConfig(Vec<VsanHostConfigInfoNetworkInfoPortConfig>),
    /// A boxed array of *VsanHostConfigInfoStorageInfo*. To be used in *Any* placeholders.
    ArrayOfVsanHostConfigInfoStorageInfo(Vec<VsanHostConfigInfoStorageInfo>),
    /// A boxed array of *VsanHostDecommissionMode*. To be used in *Any* placeholders.
    ArrayOfVsanHostDecommissionMode(Vec<VsanHostDecommissionMode>),
    /// A boxed array of *VsanHostDiskMapInfo*. To be used in *Any* placeholders.
    ArrayOfVsanHostDiskMapInfo(Vec<VsanHostDiskMapInfo>),
    /// A boxed array of *VsanHostDiskMapResult*. To be used in *Any* placeholders.
    ArrayOfVsanHostDiskMapResult(Vec<VsanHostDiskMapResult>),
    /// A boxed array of *VsanHostDiskMapping*. To be used in *Any* placeholders.
    ArrayOfVsanHostDiskMapping(Vec<VsanHostDiskMapping>),
    /// A boxed array of *VsanHostDiskResult*. To be used in *Any* placeholders.
    ArrayOfVsanHostDiskResult(Vec<VsanHostDiskResult>),
    /// A boxed array of *VsanHostIpConfig*. To be used in *Any* placeholders.
    ArrayOfVsanHostIpConfig(Vec<VsanHostIpConfig>),
    /// A boxed array of *VsanHostMembershipInfo*. To be used in *Any* placeholders.
    ArrayOfVsanHostMembershipInfo(Vec<VsanHostMembershipInfo>),
    /// A boxed array of *VsanHostVsanDiskInfo*. To be used in *Any* placeholders.
    ArrayOfVsanHostVsanDiskInfo(Vec<VsanHostVsanDiskInfo>),
    /// A boxed array of *VsanHostRuntimeInfo*. To be used in *Any* placeholders.
    ArrayOfVsanHostRuntimeInfo(Vec<VsanHostRuntimeInfo>),
    /// A boxed array of *VsanHostRuntimeInfoDiskIssue*. To be used in *Any* placeholders.
    ArrayOfVsanHostRuntimeInfoDiskIssue(Vec<VsanHostRuntimeInfoDiskIssue>),
    /// A boxed array of *BaseConfigInfo*. To be used in *Any* placeholders.
    ArrayOfBaseConfigInfo(Vec<Box<dyn super::traits::BaseConfigInfoTrait>>),
    /// A boxed array of *BaseConfigInfoBackingInfo*. To be used in *Any* placeholders.
    ArrayOfBaseConfigInfoBackingInfo(Vec<Box<dyn super::traits::BaseConfigInfoBackingInfoTrait>>),
    /// A boxed array of *BaseConfigInfoDiskFileBackingInfo*. To be used in *Any* placeholders.
    ArrayOfBaseConfigInfoDiskFileBackingInfo(Vec<BaseConfigInfoDiskFileBackingInfo>),
    /// A boxed array of *BaseConfigInfoFileBackingInfo*. To be used in *Any* placeholders.
    ArrayOfBaseConfigInfoFileBackingInfo(Vec<Box<dyn super::traits::BaseConfigInfoFileBackingInfoTrait>>),
    /// A boxed array of *BaseConfigInfoRawDiskMappingBackingInfo*. To be used in *Any* placeholders.
    ArrayOfBaseConfigInfoRawDiskMappingBackingInfo(Vec<BaseConfigInfoRawDiskMappingBackingInfo>),
    /// A boxed array of *VslmCloneSpec*. To be used in *Any* placeholders.
    ArrayOfVslmCloneSpec(Vec<VslmCloneSpec>),
    /// A boxed array of *VslmCreateSpec*. To be used in *Any* placeholders.
    ArrayOfVslmCreateSpec(Vec<VslmCreateSpec>),
    /// A boxed array of *VslmCreateSpecBackingSpec*. To be used in *Any* placeholders.
    ArrayOfVslmCreateSpecBackingSpec(Vec<Box<dyn super::traits::VslmCreateSpecBackingSpecTrait>>),
    /// A boxed array of *VslmCreateSpecDiskFileBackingSpec*. To be used in *Any* placeholders.
    ArrayOfVslmCreateSpecDiskFileBackingSpec(Vec<VslmCreateSpecDiskFileBackingSpec>),
    /// A boxed array of *VslmCreateSpecRawDiskMappingBackingSpec*. To be used in *Any* placeholders.
    ArrayOfVslmCreateSpecRawDiskMappingBackingSpec(Vec<VslmCreateSpecRawDiskMappingBackingSpec>),
    /// A boxed array of *DiskCryptoSpec*. To be used in *Any* placeholders.
    ArrayOfDiskCryptoSpec(Vec<DiskCryptoSpec>),
    /// A boxed array of *ID*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfID")]
    ArrayOfId(Vec<Id>),
    /// A boxed array of *vslmInfrastructureObjectPolicy*. To be used in *Any* placeholders.
    ArrayOfvslmInfrastructureObjectPolicy(Vec<VslmInfrastructureObjectPolicy>),
    /// A boxed array of *vslmInfrastructureObjectPolicySpec*. To be used in *Any* placeholders.
    ArrayOfvslmInfrastructureObjectPolicySpec(Vec<VslmInfrastructureObjectPolicySpec>),
    /// A boxed array of *VslmMigrateSpec*. To be used in *Any* placeholders.
    ArrayOfVslmMigrateSpec(Vec<Box<dyn super::traits::VslmMigrateSpecTrait>>),
    /// A boxed array of *VslmRelocateSpec*. To be used in *Any* placeholders.
    ArrayOfVslmRelocateSpec(Vec<VslmRelocateSpec>),
    /// A boxed array of *VStorageObjectStateInfo*. To be used in *Any* placeholders.
    ArrayOfVStorageObjectStateInfo(Vec<VStorageObjectStateInfo>),
    /// A boxed array of *VslmTagEntry*. To be used in *Any* placeholders.
    ArrayOfVslmTagEntry(Vec<VslmTagEntry>),
    /// A boxed array of *vslmVClockInfo*. To be used in *Any* placeholders.
    ArrayOfvslmVClockInfo(Vec<VslmVClockInfo>),
    /// A boxed array of *VStorageObject*. To be used in *Any* placeholders.
    ArrayOfVStorageObject(Vec<VStorageObject>),
    /// A boxed array of *VStorageObjectConfigInfo*. To be used in *Any* placeholders.
    ArrayOfVStorageObjectConfigInfo(Vec<VStorageObjectConfigInfo>),
    /// A boxed array of *VStorageObjectSnapshot*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 8.0.2.0
    ArrayOfVStorageObjectSnapshot(Vec<VStorageObjectSnapshot>),
    /// A boxed array of *VStorageObjectSnapshotDetails*. To be used in *Any* placeholders.
    ArrayOfVStorageObjectSnapshotDetails(Vec<VStorageObjectSnapshotDetails>),
    /// A boxed array of *VStorageObjectSnapshotInfo*. To be used in *Any* placeholders.
    ArrayOfVStorageObjectSnapshotInfo(Vec<VStorageObjectSnapshotInfo>),
    /// A boxed array of *VStorageObjectSnapshotInfoVStorageObjectSnapshot*. To be used in *Any* placeholders.
    ArrayOfVStorageObjectSnapshotInfoVStorageObjectSnapshot(Vec<VStorageObjectSnapshotInfoVStorageObjectSnapshot>),
    /// A boxed array of *RetrieveVStorageObjSpec*. To be used in *Any* placeholders.
    ArrayOfRetrieveVStorageObjSpec(Vec<RetrieveVStorageObjSpec>),
    /// A boxed array of *VStorageObjectAssociations*. To be used in *Any* placeholders.
    ArrayOfVStorageObjectAssociations(Vec<VStorageObjectAssociations>),
    /// A boxed array of *VStorageObjectAssociationsVmDiskAssociations*. To be used in *Any* placeholders.
    ArrayOfVStorageObjectAssociationsVmDiskAssociations(Vec<VStorageObjectAssociationsVmDiskAssociations>),
    /// A boxed array of *DataObject*. To be used in *Any* placeholders.
    ArrayOfDataObject(Vec<Box<dyn super::traits::DataObjectTrait>>),
    /// A boxed array of *DynamicArray*. To be used in *Any* placeholders.
    ArrayOfDynamicArray(Vec<DynamicArray>),
    /// A boxed array of *DynamicProperty*. To be used in *Any* placeholders.
    ArrayOfDynamicProperty(Vec<DynamicProperty>),
    /// A boxed array of *KeyAnyValue*. To be used in *Any* placeholders.
    ArrayOfKeyAnyValue(Vec<KeyAnyValue>),
    /// A boxed array of *LocalizableMessage*. To be used in *Any* placeholders.
    ArrayOfLocalizableMessage(Vec<LocalizableMessage>),
    /// A boxed array of *LocalizedMethodFault*. To be used in *Any* placeholders.
    ArrayOfLocalizedMethodFault(Vec<LocalizedMethodFault>),
    /// A boxed array of *MethodFault*. To be used in *Any* placeholders.
    ArrayOfMethodFault(Vec<Box<dyn super::traits::MethodFaultTrait>>),
    /// A boxed array of *RuntimeFault*. To be used in *Any* placeholders.
    ArrayOfRuntimeFault(Vec<Box<dyn super::traits::RuntimeFaultTrait>>),
    /// A boxed array of *HostCommunication*. To be used in *Any* placeholders.
    ArrayOfHostCommunication(Vec<Box<dyn super::traits::HostCommunicationTrait>>),
    /// A boxed array of *HostNotConnected*. To be used in *Any* placeholders.
    ArrayOfHostNotConnected(Vec<HostNotConnected>),
    /// A boxed array of *HostNotReachable*. To be used in *Any* placeholders.
    ArrayOfHostNotReachable(Vec<HostNotReachable>),
    /// A boxed array of *InvalidArgument*. To be used in *Any* placeholders.
    ArrayOfInvalidArgument(Vec<Box<dyn super::traits::InvalidArgumentTrait>>),
    /// A boxed array of *InvalidRequest*. To be used in *Any* placeholders.
    ArrayOfInvalidRequest(Vec<Box<dyn super::traits::InvalidRequestTrait>>),
    /// A boxed array of *InvalidType*. To be used in *Any* placeholders.
    ArrayOfInvalidType(Vec<InvalidType>),
    /// A boxed array of *ManagedObjectNotFound*. To be used in *Any* placeholders.
    ArrayOfManagedObjectNotFound(Vec<ManagedObjectNotFound>),
    /// A boxed array of *MethodNotFound*. To be used in *Any* placeholders.
    ArrayOfMethodNotFound(Vec<MethodNotFound>),
    /// A boxed array of *NotEnoughLicenses*. To be used in *Any* placeholders.
    ArrayOfNotEnoughLicenses(Vec<Box<dyn super::traits::NotEnoughLicensesTrait>>),
    /// A boxed array of *NotImplemented*. To be used in *Any* placeholders.
    ArrayOfNotImplemented(Vec<NotImplemented>),
    /// A boxed array of *NotSupported*. To be used in *Any* placeholders.
    ArrayOfNotSupported(Vec<Box<dyn super::traits::NotSupportedTrait>>),
    /// A boxed array of *RequestCanceled*. To be used in *Any* placeholders.
    ArrayOfRequestCanceled(Vec<RequestCanceled>),
    /// A boxed array of *SecurityError*. To be used in *Any* placeholders.
    ArrayOfSecurityError(Vec<Box<dyn super::traits::SecurityErrorTrait>>),
    /// A boxed array of *SystemError*. To be used in *Any* placeholders.
    ArrayOfSystemError(Vec<SystemError>),
    /// A boxed array of *UnexpectedFault*. To be used in *Any* placeholders.
    ArrayOfUnexpectedFault(Vec<UnexpectedFault>),
    /// A boxed array of *InvalidCollectorVersion*. To be used in *Any* placeholders.
    ArrayOfInvalidCollectorVersion(Vec<InvalidCollectorVersion>),
    /// A boxed array of *InvalidProperty*. To be used in *Any* placeholders.
    ArrayOfInvalidProperty(Vec<InvalidProperty>),
    /// A boxed array of *PropertyChange*. To be used in *Any* placeholders.
    ArrayOfPropertyChange(Vec<PropertyChange>),
    /// A boxed array of *PropertyFilterSpec*. To be used in *Any* placeholders.
    ArrayOfPropertyFilterSpec(Vec<PropertyFilterSpec>),
    /// A boxed array of *PropertyFilterUpdate*. To be used in *Any* placeholders.
    ArrayOfPropertyFilterUpdate(Vec<PropertyFilterUpdate>),
    /// A boxed array of *MissingObject*. To be used in *Any* placeholders.
    ArrayOfMissingObject(Vec<MissingObject>),
    /// A boxed array of *MissingProperty*. To be used in *Any* placeholders.
    ArrayOfMissingProperty(Vec<MissingProperty>),
    /// A boxed array of *ObjectContent*. To be used in *Any* placeholders.
    ArrayOfObjectContent(Vec<ObjectContent>),
    /// A boxed array of *ObjectSpec*. To be used in *Any* placeholders.
    ArrayOfObjectSpec(Vec<ObjectSpec>),
    /// A boxed array of *ObjectUpdate*. To be used in *Any* placeholders.
    ArrayOfObjectUpdate(Vec<ObjectUpdate>),
    /// A boxed array of *PropertySpec*. To be used in *Any* placeholders.
    ArrayOfPropertySpec(Vec<PropertySpec>),
    /// A boxed array of *RetrieveOptions*. To be used in *Any* placeholders.
    ArrayOfRetrieveOptions(Vec<RetrieveOptions>),
    /// A boxed array of *RetrieveResult*. To be used in *Any* placeholders.
    ArrayOfRetrieveResult(Vec<RetrieveResult>),
    /// A boxed array of *SelectionSpec*. To be used in *Any* placeholders.
    ArrayOfSelectionSpec(Vec<Box<dyn super::traits::SelectionSpecTrait>>),
    /// A boxed array of *TraversalSpec*. To be used in *Any* placeholders.
    ArrayOfTraversalSpec(Vec<TraversalSpec>),
    /// A boxed array of *UpdateSet*. To be used in *Any* placeholders.
    ArrayOfUpdateSet(Vec<UpdateSet>),
    /// A boxed array of *WaitOptions*. To be used in *Any* placeholders.
    ArrayOfWaitOptions(Vec<WaitOptions>),
    /// A boxed *ComputeResourceHostSPBMLicenseInfoHostSPBMLicenseState_enum*. To be used in *Any* placeholders.
    #[serde(rename = "ComputeResourceHostSPBMLicenseInfoHostSPBMLicenseState")]
    ComputeResourceHostSpbmLicenseInfoHostSpbmLicenseState(super::enums::ComputeResourceHostSpbmLicenseInfoHostSpbmLicenseStateEnum),
    /// A boxed array of *ComputeResourceHostSPBMLicenseInfoHostSPBMLicenseState_enum*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfComputeResourceHostSPBMLicenseInfoHostSPBMLicenseState")]
    ArrayOfComputeResourceHostSpbmLicenseInfoHostSpbmLicenseState(Vec<super::enums::ComputeResourceHostSpbmLicenseInfoHostSpbmLicenseStateEnum>),
    /// A boxed *DatastoreAccessible_enum*. To be used in *Any* placeholders.
    DatastoreAccessible(super::enums::DatastoreAccessibleEnum),
    /// A boxed array of *DatastoreAccessible_enum*. To be used in *Any* placeholders.
    ArrayOfDatastoreAccessible(Vec<super::enums::DatastoreAccessibleEnum>),
    /// A boxed *DrsInjectorWorkloadCorrelationState_enum*. To be used in *Any* placeholders.
    DrsInjectorWorkloadCorrelationState(super::enums::DrsInjectorWorkloadCorrelationStateEnum),
    /// A boxed array of *DrsInjectorWorkloadCorrelationState_enum*. To be used in *Any* placeholders.
    ArrayOfDrsInjectorWorkloadCorrelationState(Vec<super::enums::DrsInjectorWorkloadCorrelationStateEnum>),
    /// A boxed *HostSystemConnectionState_enum*. To be used in *Any* placeholders.
    HostSystemConnectionState(super::enums::HostSystemConnectionStateEnum),
    /// A boxed array of *HostSystemConnectionState_enum*. To be used in *Any* placeholders.
    ArrayOfHostSystemConnectionState(Vec<super::enums::HostSystemConnectionStateEnum>),
    /// A boxed *HostSystemPowerState_enum*. To be used in *Any* placeholders.
    HostSystemPowerState(super::enums::HostSystemPowerStateEnum),
    /// A boxed array of *HostSystemPowerState_enum*. To be used in *Any* placeholders.
    ArrayOfHostSystemPowerState(Vec<super::enums::HostSystemPowerStateEnum>),
    /// A boxed *HttpNfcLeaseState_enum*. To be used in *Any* placeholders.
    HttpNfcLeaseState(super::enums::HttpNfcLeaseStateEnum),
    /// A boxed array of *HttpNfcLeaseState_enum*. To be used in *Any* placeholders.
    ArrayOfHttpNfcLeaseState(Vec<super::enums::HttpNfcLeaseStateEnum>),
    /// A boxed *LatencySensitivitySensitivityLevel_enum*. To be used in *Any* placeholders.
    LatencySensitivitySensitivityLevel(super::enums::LatencySensitivitySensitivityLevelEnum),
    /// A boxed array of *LatencySensitivitySensitivityLevel_enum*. To be used in *Any* placeholders.
    ArrayOfLatencySensitivitySensitivityLevel(Vec<super::enums::LatencySensitivitySensitivityLevelEnum>),
    /// A boxed *LicenseFeatureInfoState_enum*. To be used in *Any* placeholders.
    LicenseFeatureInfoState(super::enums::LicenseFeatureInfoStateEnum),
    /// A boxed array of *LicenseFeatureInfoState_enum*. To be used in *Any* placeholders.
    ArrayOfLicenseFeatureInfoState(Vec<super::enums::LicenseFeatureInfoStateEnum>),
    /// A boxed *HostLicensableResourceKey_enum*. To be used in *Any* placeholders.
    HostLicensableResourceKey(super::enums::HostLicensableResourceKeyEnum),
    /// A boxed array of *HostLicensableResourceKey_enum*. To be used in *Any* placeholders.
    ArrayOfHostLicensableResourceKey(Vec<super::enums::HostLicensableResourceKeyEnum>),
    /// A boxed *LicenseManagerState_enum*. To be used in *Any* placeholders.
    LicenseManagerState(super::enums::LicenseManagerStateEnum),
    /// A boxed array of *LicenseManagerState_enum*. To be used in *Any* placeholders.
    ArrayOfLicenseManagerState(Vec<super::enums::LicenseManagerStateEnum>),
    /// A boxed *LicenseReservationInfoState_enum*. To be used in *Any* placeholders.
    LicenseReservationInfoState(super::enums::LicenseReservationInfoStateEnum),
    /// A boxed array of *LicenseReservationInfoState_enum*. To be used in *Any* placeholders.
    ArrayOfLicenseReservationInfoState(Vec<super::enums::LicenseReservationInfoStateEnum>),
    /// A boxed *ManagedEntityStatus_enum*. To be used in *Any* placeholders.
    ManagedEntityStatus(super::enums::ManagedEntityStatusEnum),
    /// A boxed array of *ManagedEntityStatus_enum*. To be used in *Any* placeholders.
    ArrayOfManagedEntityStatus(Vec<super::enums::ManagedEntityStatusEnum>),
    /// A boxed *PerfSummaryType_enum*. To be used in *Any* placeholders.
    PerfSummaryType(super::enums::PerfSummaryTypeEnum),
    /// A boxed array of *PerfSummaryType_enum*. To be used in *Any* placeholders.
    ArrayOfPerfSummaryType(Vec<super::enums::PerfSummaryTypeEnum>),
    /// A boxed *PerfStatsType_enum*. To be used in *Any* placeholders.
    PerfStatsType(super::enums::PerfStatsTypeEnum),
    /// A boxed array of *PerfStatsType_enum*. To be used in *Any* placeholders.
    ArrayOfPerfStatsType(Vec<super::enums::PerfStatsTypeEnum>),
    /// A boxed *SharesLevel_enum*. To be used in *Any* placeholders.
    SharesLevel(super::enums::SharesLevelEnum),
    /// A boxed array of *SharesLevel_enum*. To be used in *Any* placeholders.
    ArrayOfSharesLevel(Vec<super::enums::SharesLevelEnum>),
    /// A boxed *SimpleCommandEncoding_enum*. To be used in *Any* placeholders.
    SimpleCommandEncoding(super::enums::SimpleCommandEncodingEnum),
    /// A boxed array of *SimpleCommandEncoding_enum*. To be used in *Any* placeholders.
    ArrayOfSimpleCommandEncoding(Vec<super::enums::SimpleCommandEncodingEnum>),
    /// A boxed *TaskFilterSpecRecursionOption_enum*. To be used in *Any* placeholders.
    TaskFilterSpecRecursionOption(super::enums::TaskFilterSpecRecursionOptionEnum),
    /// A boxed array of *TaskFilterSpecRecursionOption_enum*. To be used in *Any* placeholders.
    ArrayOfTaskFilterSpecRecursionOption(Vec<super::enums::TaskFilterSpecRecursionOptionEnum>),
    /// A boxed *TaskFilterSpecTimeOption_enum*. To be used in *Any* placeholders.
    TaskFilterSpecTimeOption(super::enums::TaskFilterSpecTimeOptionEnum),
    /// A boxed array of *TaskFilterSpecTimeOption_enum*. To be used in *Any* placeholders.
    ArrayOfTaskFilterSpecTimeOption(Vec<super::enums::TaskFilterSpecTimeOptionEnum>),
    /// A boxed *TaskInfoState_enum*. To be used in *Any* placeholders.
    TaskInfoState(super::enums::TaskInfoStateEnum),
    /// A boxed array of *TaskInfoState_enum*. To be used in *Any* placeholders.
    ArrayOfTaskInfoState(Vec<super::enums::TaskInfoStateEnum>),
    /// A boxed *VirtualAppVAppState_enum*. To be used in *Any* placeholders.
    VirtualAppVAppState(super::enums::VirtualAppVAppStateEnum),
    /// A boxed array of *VirtualAppVAppState_enum*. To be used in *Any* placeholders.
    ArrayOfVirtualAppVAppState(Vec<super::enums::VirtualAppVAppStateEnum>),
    /// A boxed *VirtualMachineConnectionState_enum*. To be used in *Any* placeholders.
    VirtualMachineConnectionState(super::enums::VirtualMachineConnectionStateEnum),
    /// A boxed array of *VirtualMachineConnectionState_enum*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineConnectionState(Vec<super::enums::VirtualMachineConnectionStateEnum>),
    /// A boxed *VirtualMachineFaultToleranceState_enum*. To be used in *Any* placeholders.
    VirtualMachineFaultToleranceState(super::enums::VirtualMachineFaultToleranceStateEnum),
    /// A boxed array of *VirtualMachineFaultToleranceState_enum*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineFaultToleranceState(Vec<super::enums::VirtualMachineFaultToleranceStateEnum>),
    /// A boxed *VirtualMachineMovePriority_enum*. To be used in *Any* placeholders.
    VirtualMachineMovePriority(super::enums::VirtualMachineMovePriorityEnum),
    /// A boxed array of *VirtualMachineMovePriority_enum*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineMovePriority(Vec<super::enums::VirtualMachineMovePriorityEnum>),
    /// A boxed *VirtualMachinePowerState_enum*. To be used in *Any* placeholders.
    VirtualMachinePowerState(super::enums::VirtualMachinePowerStateEnum),
    /// A boxed array of *VirtualMachinePowerState_enum*. To be used in *Any* placeholders.
    ArrayOfVirtualMachinePowerState(Vec<super::enums::VirtualMachinePowerStateEnum>),
    /// A boxed *VirtualMachineRecordReplayState_enum*. To be used in *Any* placeholders.
    VirtualMachineRecordReplayState(super::enums::VirtualMachineRecordReplayStateEnum),
    /// A boxed array of *VirtualMachineRecordReplayState_enum*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineRecordReplayState(Vec<super::enums::VirtualMachineRecordReplayStateEnum>),
    /// A boxed *VsanUpgradeSystemUpgradeHistoryDiskGroupOpType_enum*. To be used in *Any* placeholders.
    VsanUpgradeSystemUpgradeHistoryDiskGroupOpType(super::enums::VsanUpgradeSystemUpgradeHistoryDiskGroupOpTypeEnum),
    /// A boxed array of *VsanUpgradeSystemUpgradeHistoryDiskGroupOpType_enum*. To be used in *Any* placeholders.
    ArrayOfVsanUpgradeSystemUpgradeHistoryDiskGroupOpType(Vec<super::enums::VsanUpgradeSystemUpgradeHistoryDiskGroupOpTypeEnum>),
    /// A boxed *MetricAlarmOperator_enum*. To be used in *Any* placeholders.
    MetricAlarmOperator(super::enums::MetricAlarmOperatorEnum),
    /// A boxed array of *MetricAlarmOperator_enum*. To be used in *Any* placeholders.
    ArrayOfMetricAlarmOperator(Vec<super::enums::MetricAlarmOperatorEnum>),
    /// A boxed *StateAlarmOperator_enum*. To be used in *Any* placeholders.
    StateAlarmOperator(super::enums::StateAlarmOperatorEnum),
    /// A boxed array of *StateAlarmOperator_enum*. To be used in *Any* placeholders.
    ArrayOfStateAlarmOperator(Vec<super::enums::StateAlarmOperatorEnum>),
    /// A boxed *DasVmPriority_enum*. To be used in *Any* placeholders.
    DasVmPriority(super::enums::DasVmPriorityEnum),
    /// A boxed array of *DasVmPriority_enum*. To be used in *Any* placeholders.
    ArrayOfDasVmPriority(Vec<super::enums::DasVmPriorityEnum>),
    /// A boxed *DpmBehavior_enum*. To be used in *Any* placeholders.
    DpmBehavior(super::enums::DpmBehaviorEnum),
    /// A boxed array of *DpmBehavior_enum*. To be used in *Any* placeholders.
    ArrayOfDpmBehavior(Vec<super::enums::DpmBehaviorEnum>),
    /// A boxed *DrsBehavior_enum*. To be used in *Any* placeholders.
    DrsBehavior(super::enums::DrsBehaviorEnum),
    /// A boxed array of *DrsBehavior_enum*. To be used in *Any* placeholders.
    ArrayOfDrsBehavior(Vec<super::enums::DrsBehaviorEnum>),
    /// A boxed *HostPowerOperationType_enum*. To be used in *Any* placeholders.
    HostPowerOperationType(super::enums::HostPowerOperationTypeEnum),
    /// A boxed array of *HostPowerOperationType_enum*. To be used in *Any* placeholders.
    ArrayOfHostPowerOperationType(Vec<super::enums::HostPowerOperationTypeEnum>),
    /// A boxed *EventFilterSpecRecursionOption_enum*. To be used in *Any* placeholders.
    EventFilterSpecRecursionOption(super::enums::EventFilterSpecRecursionOptionEnum),
    /// A boxed array of *EventFilterSpecRecursionOption_enum*. To be used in *Any* placeholders.
    ArrayOfEventFilterSpecRecursionOption(Vec<super::enums::EventFilterSpecRecursionOptionEnum>),
    /// A boxed *FtIssuesOnHostHostSelectionType_enum*. To be used in *Any* placeholders.
    FtIssuesOnHostHostSelectionType(super::enums::FtIssuesOnHostHostSelectionTypeEnum),
    /// A boxed array of *FtIssuesOnHostHostSelectionType_enum*. To be used in *Any* placeholders.
    ArrayOfFtIssuesOnHostHostSelectionType(Vec<super::enums::FtIssuesOnHostHostSelectionTypeEnum>),
    /// A boxed *AutoStartWaitHeartbeatSetting_enum*. To be used in *Any* placeholders.
    AutoStartWaitHeartbeatSetting(super::enums::AutoStartWaitHeartbeatSettingEnum),
    /// A boxed array of *AutoStartWaitHeartbeatSetting_enum*. To be used in *Any* placeholders.
    ArrayOfAutoStartWaitHeartbeatSetting(Vec<super::enums::AutoStartWaitHeartbeatSettingEnum>),
    /// A boxed *FibreChannelPortType_enum*. To be used in *Any* placeholders.
    FibreChannelPortType(super::enums::FibreChannelPortTypeEnum),
    /// A boxed array of *FibreChannelPortType_enum*. To be used in *Any* placeholders.
    ArrayOfFibreChannelPortType(Vec<super::enums::FibreChannelPortTypeEnum>),
    /// A boxed *HostAccessMode_enum*. To be used in *Any* placeholders.
    HostAccessMode(super::enums::HostAccessModeEnum),
    /// A boxed array of *HostAccessMode_enum*. To be used in *Any* placeholders.
    ArrayOfHostAccessMode(Vec<super::enums::HostAccessModeEnum>),
    /// A boxed *HostLockdownMode_enum*. To be used in *Any* placeholders.
    HostLockdownMode(super::enums::HostLockdownModeEnum),
    /// A boxed array of *HostLockdownMode_enum*. To be used in *Any* placeholders.
    ArrayOfHostLockdownMode(Vec<super::enums::HostLockdownModeEnum>),
    /// A boxed *HostInternetScsiHbaIscsiIpv6AddressAddressConfigurationType_enum*. To be used in *Any* placeholders.
    HostInternetScsiHbaIscsiIpv6AddressAddressConfigurationType(super::enums::HostInternetScsiHbaIscsiIpv6AddressAddressConfigurationTypeEnum),
    /// A boxed array of *HostInternetScsiHbaIscsiIpv6AddressAddressConfigurationType_enum*. To be used in *Any* placeholders.
    ArrayOfHostInternetScsiHbaIscsiIpv6AddressAddressConfigurationType(Vec<super::enums::HostInternetScsiHbaIscsiIpv6AddressAddressConfigurationTypeEnum>),
    /// A boxed *HostInternetScsiHbaIscsiIpv6AddressIPv6AddressOperation_enum*. To be used in *Any* placeholders.
    HostInternetScsiHbaIscsiIpv6AddressIPv6AddressOperation(super::enums::HostInternetScsiHbaIscsiIpv6AddressIPv6AddressOperationEnum),
    /// A boxed array of *HostInternetScsiHbaIscsiIpv6AddressIPv6AddressOperation_enum*. To be used in *Any* placeholders.
    ArrayOfHostInternetScsiHbaIscsiIpv6AddressIPv6AddressOperation(Vec<super::enums::HostInternetScsiHbaIscsiIpv6AddressIPv6AddressOperationEnum>),
    /// A boxed *HostInternetScsiHbaNetworkBindingSupportType_enum*. To be used in *Any* placeholders.
    HostInternetScsiHbaNetworkBindingSupportType(super::enums::HostInternetScsiHbaNetworkBindingSupportTypeEnum),
    /// A boxed array of *HostInternetScsiHbaNetworkBindingSupportType_enum*. To be used in *Any* placeholders.
    ArrayOfHostInternetScsiHbaNetworkBindingSupportType(Vec<super::enums::HostInternetScsiHbaNetworkBindingSupportTypeEnum>),
    /// A boxed *HostFirewallRuleDirection_enum*. To be used in *Any* placeholders.
    HostFirewallRuleDirection(super::enums::HostFirewallRuleDirectionEnum),
    /// A boxed array of *HostFirewallRuleDirection_enum*. To be used in *Any* placeholders.
    ArrayOfHostFirewallRuleDirection(Vec<super::enums::HostFirewallRuleDirectionEnum>),
    /// A boxed *HostFirewallRulePortType_enum*. To be used in *Any* placeholders.
    HostFirewallRulePortType(super::enums::HostFirewallRulePortTypeEnum),
    /// A boxed array of *HostFirewallRulePortType_enum*. To be used in *Any* placeholders.
    ArrayOfHostFirewallRulePortType(Vec<super::enums::HostFirewallRulePortTypeEnum>),
    /// A boxed *HostSnmpAgentCapability_enum*. To be used in *Any* placeholders.
    HostSnmpAgentCapability(super::enums::HostSnmpAgentCapabilityEnum),
    /// A boxed array of *HostSnmpAgentCapability_enum*. To be used in *Any* placeholders.
    ArrayOfHostSnmpAgentCapability(Vec<super::enums::HostSnmpAgentCapabilityEnum>),
    /// A boxed *HostTpmAttestationInfoAcceptanceStatus_enum*. To be used in *Any* placeholders.
    HostTpmAttestationInfoAcceptanceStatus(super::enums::HostTpmAttestationInfoAcceptanceStatusEnum),
    /// A boxed array of *HostTpmAttestationInfoAcceptanceStatus_enum*. To be used in *Any* placeholders.
    ArrayOfHostTpmAttestationInfoAcceptanceStatus(Vec<super::enums::HostTpmAttestationInfoAcceptanceStatusEnum>),
    /// A boxed *ArrayUpdateOperation_enum*. To be used in *Any* placeholders.
    ArrayUpdateOperation(super::enums::ArrayUpdateOperationEnum),
    /// A boxed array of *ArrayUpdateOperation_enum*. To be used in *Any* placeholders.
    ArrayOfArrayUpdateOperation(Vec<super::enums::ArrayUpdateOperationEnum>),
    /// A boxed *ProfileNumericComparator_enum*. To be used in *Any* placeholders.
    ProfileNumericComparator(super::enums::ProfileNumericComparatorEnum),
    /// A boxed array of *ProfileNumericComparator_enum*. To be used in *Any* placeholders.
    ArrayOfProfileNumericComparator(Vec<super::enums::ProfileNumericComparatorEnum>),
    /// A boxed *DayOfWeek_enum*. To be used in *Any* placeholders.
    DayOfWeek(super::enums::DayOfWeekEnum),
    /// A boxed array of *DayOfWeek_enum*. To be used in *Any* placeholders.
    ArrayOfDayOfWeek(Vec<super::enums::DayOfWeekEnum>),
    /// A boxed *WeekOfMonth_enum*. To be used in *Any* placeholders.
    WeekOfMonth(super::enums::WeekOfMonthEnum),
    /// A boxed array of *WeekOfMonth_enum*. To be used in *Any* placeholders.
    ArrayOfWeekOfMonth(Vec<super::enums::WeekOfMonthEnum>),
    /// A boxed *VirtualMachineCloneSpecTpmProvisionPolicy_enum*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 8.0.0.1
    VirtualMachineCloneSpecTpmProvisionPolicy(super::enums::VirtualMachineCloneSpecTpmProvisionPolicyEnum),
    /// A boxed array of *VirtualMachineCloneSpecTpmProvisionPolicy_enum*. To be used in *Any* placeholders.
    /// 
    /// ***Since:*** vSphere API Release 8.0.0.1
    ArrayOfVirtualMachineCloneSpecTpmProvisionPolicy(Vec<super::enums::VirtualMachineCloneSpecTpmProvisionPolicyEnum>),
    /// A boxed *VirtualMachineConfigInfoNpivWwnType_enum*. To be used in *Any* placeholders.
    VirtualMachineConfigInfoNpivWwnType(super::enums::VirtualMachineConfigInfoNpivWwnTypeEnum),
    /// A boxed array of *VirtualMachineConfigInfoNpivWwnType_enum*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineConfigInfoNpivWwnType(Vec<super::enums::VirtualMachineConfigInfoNpivWwnTypeEnum>),
    /// A boxed *VirtualMachineToolsStatus_enum*. To be used in *Any* placeholders.
    VirtualMachineToolsStatus(super::enums::VirtualMachineToolsStatusEnum),
    /// A boxed array of *VirtualMachineToolsStatus_enum*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineToolsStatus(Vec<super::enums::VirtualMachineToolsStatusEnum>),
    /// A boxed *GuestQuiesceEndGuestQuiesceError_enum*. To be used in *Any* placeholders.
    GuestQuiesceEndGuestQuiesceError(super::enums::GuestQuiesceEndGuestQuiesceErrorEnum),
    /// A boxed array of *GuestQuiesceEndGuestQuiesceError_enum*. To be used in *Any* placeholders.
    ArrayOfGuestQuiesceEndGuestQuiesceError(Vec<super::enums::GuestQuiesceEndGuestQuiesceErrorEnum>),
    /// A boxed *VirtualMachineMetadataManagerVmMetadataOp_enum*. To be used in *Any* placeholders.
    VirtualMachineMetadataManagerVmMetadataOp(super::enums::VirtualMachineMetadataManagerVmMetadataOpEnum),
    /// A boxed array of *VirtualMachineMetadataManagerVmMetadataOp_enum*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineMetadataManagerVmMetadataOp(Vec<super::enums::VirtualMachineMetadataManagerVmMetadataOpEnum>),
    /// A boxed *VirtualMachineRelocateTransformation_enum*. To be used in *Any* placeholders.
    VirtualMachineRelocateTransformation(super::enums::VirtualMachineRelocateTransformationEnum),
    /// A boxed array of *VirtualMachineRelocateTransformation_enum*. To be used in *Any* placeholders.
    ArrayOfVirtualMachineRelocateTransformation(Vec<super::enums::VirtualMachineRelocateTransformationEnum>),
    /// A boxed *CustomizationNetBIOSMode_enum*. To be used in *Any* placeholders.
    #[serde(rename = "CustomizationNetBIOSMode")]
    CustomizationNetBiosMode(super::enums::CustomizationNetBiosModeEnum),
    /// A boxed array of *CustomizationNetBIOSMode_enum*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfCustomizationNetBIOSMode")]
    ArrayOfCustomizationNetBiosMode(Vec<super::enums::CustomizationNetBiosModeEnum>),
    /// A boxed *CustomizationLicenseDataMode_enum*. To be used in *Any* placeholders.
    CustomizationLicenseDataMode(super::enums::CustomizationLicenseDataModeEnum),
    /// A boxed array of *CustomizationLicenseDataMode_enum*. To be used in *Any* placeholders.
    ArrayOfCustomizationLicenseDataMode(Vec<super::enums::CustomizationLicenseDataModeEnum>),
    /// A boxed *CustomizationSysprepRebootOption_enum*. To be used in *Any* placeholders.
    CustomizationSysprepRebootOption(super::enums::CustomizationSysprepRebootOptionEnum),
    /// A boxed array of *CustomizationSysprepRebootOption_enum*. To be used in *Any* placeholders.
    ArrayOfCustomizationSysprepRebootOption(Vec<super::enums::CustomizationSysprepRebootOptionEnum>),
    /// A boxed *VirtualDeviceConfigSpecFileOperation_enum*. To be used in *Any* placeholders.
    VirtualDeviceConfigSpecFileOperation(super::enums::VirtualDeviceConfigSpecFileOperationEnum),
    /// A boxed array of *VirtualDeviceConfigSpecFileOperation_enum*. To be used in *Any* placeholders.
    ArrayOfVirtualDeviceConfigSpecFileOperation(Vec<super::enums::VirtualDeviceConfigSpecFileOperationEnum>),
    /// A boxed *VirtualDeviceConfigSpecOperation_enum*. To be used in *Any* placeholders.
    VirtualDeviceConfigSpecOperation(super::enums::VirtualDeviceConfigSpecOperationEnum),
    /// A boxed array of *VirtualDeviceConfigSpecOperation_enum*. To be used in *Any* placeholders.
    ArrayOfVirtualDeviceConfigSpecOperation(Vec<super::enums::VirtualDeviceConfigSpecOperationEnum>),
    /// A boxed *VirtualSCSISharing_enum*. To be used in *Any* placeholders.
    #[serde(rename = "VirtualSCSISharing")]
    VirtualScsiSharing(super::enums::VirtualScsiSharingEnum),
    /// A boxed array of *VirtualSCSISharing_enum*. To be used in *Any* placeholders.
    #[serde(rename = "ArrayOfVirtualSCSISharing")]
    ArrayOfVirtualScsiSharing(Vec<super::enums::VirtualScsiSharingEnum>),
    /// A boxed *VsanHostDiskResultState_enum*. To be used in *Any* placeholders.
    VsanHostDiskResultState(super::enums::VsanHostDiskResultStateEnum),
    /// A boxed array of *VsanHostDiskResultState_enum*. To be used in *Any* placeholders.
    ArrayOfVsanHostDiskResultState(Vec<super::enums::VsanHostDiskResultStateEnum>),
    /// A boxed *VsanHostHealthState_enum*. To be used in *Any* placeholders.
    VsanHostHealthState(super::enums::VsanHostHealthStateEnum),
    /// A boxed array of *VsanHostHealthState_enum*. To be used in *Any* placeholders.
    ArrayOfVsanHostHealthState(Vec<super::enums::VsanHostHealthStateEnum>),
    /// A boxed *VsanHostNodeState_enum*. To be used in *Any* placeholders.
    VsanHostNodeState(super::enums::VsanHostNodeStateEnum),
    /// A boxed array of *VsanHostNodeState_enum*. To be used in *Any* placeholders.
    ArrayOfVsanHostNodeState(Vec<super::enums::VsanHostNodeStateEnum>),
    /// A boxed *PropertyChangeOp_enum*. To be used in *Any* placeholders.
    PropertyChangeOp(super::enums::PropertyChangeOpEnum),
    /// A boxed array of *PropertyChangeOp_enum*. To be used in *Any* placeholders.
    ArrayOfPropertyChangeOp(Vec<super::enums::PropertyChangeOpEnum>),
    /// A boxed *ObjectUpdateKind_enum*. To be used in *Any* placeholders.
    ObjectUpdateKind(super::enums::ObjectUpdateKindEnum),
    /// A boxed array of *ObjectUpdateKind_enum*. To be used in *Any* placeholders.
    ArrayOfObjectUpdateKind(Vec<super::enums::ObjectUpdateKindEnum>),
}
impl serde::Serialize for ValueElements {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
    S: serde::Serializer,
    {
        let mut state = serializer.serialize_struct("ValueElements", 2)?;
        match self {
            ValueElements::ArrayOfAnyType(value) => {
                state.serialize_field("_typeName", "ArrayOfAnyType")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfManagedObjectReference(value) => {
                state.serialize_field("_typeName", "ArrayOfManagedObjectReference")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::PrimitiveBoolean(value) => {
                state.serialize_field("_typeName", "boolean")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfBoolean(value) => {
                state.serialize_field("_typeName", "ArrayOfBoolean")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::PrimitiveByte(value) => {
                state.serialize_field("_typeName", "byte")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfByte(value) => {
                state.serialize_field("_typeName", "ArrayOfByte")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::PrimitiveShort(value) => {
                state.serialize_field("_typeName", "short")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfShort(value) => {
                state.serialize_field("_typeName", "ArrayOfShort")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::PrimitiveInt(value) => {
                state.serialize_field("_typeName", "int")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInt(value) => {
                state.serialize_field("_typeName", "ArrayOfInt")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::PrimitiveLong(value) => {
                state.serialize_field("_typeName", "long")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfLong(value) => {
                state.serialize_field("_typeName", "ArrayOfLong")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::PrimitiveFloat(value) => {
                state.serialize_field("_typeName", "float")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFloat(value) => {
                state.serialize_field("_typeName", "ArrayOfFloat")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::PrimitiveDouble(value) => {
                state.serialize_field("_typeName", "double")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDouble(value) => {
                state.serialize_field("_typeName", "ArrayOfDouble")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::PrimitiveString(value) => {
                state.serialize_field("_typeName", "string")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfString(value) => {
                state.serialize_field("_typeName", "ArrayOfString")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::PrimitiveDateTime(value) => {
                state.serialize_field("_typeName", "dateTime")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDateTime(value) => {
                state.serialize_field("_typeName", "ArrayOfDateTime")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::PrimitiveUri(value) => {
                state.serialize_field("_typeName", "anyURI")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfUri(value) => {
                state.serialize_field("_typeName", "ArrayOfAnyURI")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::PrimitiveBinary(value) => {
                state.serialize_field("_typeName", "base64Binary")?;
                state.serialize_field("_value", &crate::core::helpers::SerializeBinary { value: value })?;
            },
            ValueElements::ArrayOfBinary(value) => {
                state.serialize_field("_typeName", "ArrayOfBase64Binary")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::PrimitiveTypeName(value) => {
                state.serialize_field("_typeName", "TypeName")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfTypeName(value) => {
                state.serialize_field("_typeName", "ArrayOfTypeName")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::PrimitivePropPath(value) => {
                state.serialize_field("_typeName", "PropertyPath")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPropPath(value) => {
                state.serialize_field("_typeName", "ArrayOfPropertyPath")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::PrimitiveMethodName(value) => {
                state.serialize_field("_typeName", "MethodName")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfMethodName(value) => {
                state.serialize_field("_typeName", "ArrayOfMethodName")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfAboutInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfAboutInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfAuthorizationDescription(value) => {
                state.serialize_field("_typeName", "ArrayOfAuthorizationDescription")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfEntityPrivilege(value) => {
                state.serialize_field("_typeName", "ArrayOfEntityPrivilege")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPermission(value) => {
                state.serialize_field("_typeName", "ArrayOfPermission")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfAuthorizationPrivilege(value) => {
                state.serialize_field("_typeName", "ArrayOfAuthorizationPrivilege")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPrivilegeAvailability(value) => {
                state.serialize_field("_typeName", "ArrayOfPrivilegeAvailability")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfAuthorizationRole(value) => {
                state.serialize_field("_typeName", "ArrayOfAuthorizationRole")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfUserPrivilegeResult(value) => {
                state.serialize_field("_typeName", "ArrayOfUserPrivilegeResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfBatchResult(value) => {
                state.serialize_field("_typeName", "ArrayOfBatchResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfBoolPolicy(value) => {
                state.serialize_field("_typeName", "ArrayOfBoolPolicy")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCapability(value) => {
                state.serialize_field("_typeName", "ArrayOfCapability")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterComputeResourceClusterConfigResult(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterComputeResourceClusterConfigResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterComputeResourceDvsConfigurationValidation(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterComputeResourceDVSConfigurationValidation")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterComputeResourceDvsSetting(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterComputeResourceDVSSetting")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterComputeResourceDvsSettingDvPortgroupToServiceMapping(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterComputeResourceDVSSettingDVPortgroupToServiceMapping")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterComputeResourceDvsProfile(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterComputeResourceDvsProfile")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterComputeResourceDvsProfileDvPortgroupSpecToServiceMapping(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterComputeResourceDvsProfileDVPortgroupSpecToServiceMapping")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterComputeResourceHciConfigInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterComputeResourceHCIConfigInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterComputeResourceHciConfigSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterComputeResourceHCIConfigSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterComputeResourceHostConfigurationInput(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterComputeResourceHostConfigurationInput")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterComputeResourceHostConfigurationProfile(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterComputeResourceHostConfigurationProfile")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterComputeResourceHostConfigurationValidation(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterComputeResourceHostConfigurationValidation")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterComputeResourceHostVmkNicInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterComputeResourceHostVmkNicInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterComputeResourceSummary(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterComputeResourceSummary")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterComputeResourceVcProfile(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterComputeResourceVCProfile")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterComputeResourceValidationResultBase(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterComputeResourceValidationResultBase")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterComputeResourceVcsSlots(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterComputeResourceVcsSlots")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfComputeResourceConfigInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfComputeResourceConfigInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfComputeResourceConfigSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfComputeResourceConfigSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfComputeResourceHostSpbmLicenseInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfComputeResourceHostSPBMLicenseInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfComputeResourceSummary(value) => {
                state.serialize_field("_typeName", "ArrayOfComputeResourceSummary")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCustomFieldDef(value) => {
                state.serialize_field("_typeName", "ArrayOfCustomFieldDef")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCustomFieldStringValue(value) => {
                state.serialize_field("_typeName", "ArrayOfCustomFieldStringValue")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCustomFieldValue(value) => {
                state.serialize_field("_typeName", "ArrayOfCustomFieldValue")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCustomizationSpecInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfCustomizationSpecInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCustomizationSpecItem(value) => {
                state.serialize_field("_typeName", "ArrayOfCustomizationSpecItem")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDatacenterBasicConnectInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfDatacenterBasicConnectInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDatacenterConfigInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfDatacenterConfigInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDatacenterConfigSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfDatacenterConfigSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDatastoreCapability(value) => {
                state.serialize_field("_typeName", "ArrayOfDatastoreCapability")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDatastoreHostMount(value) => {
                state.serialize_field("_typeName", "ArrayOfDatastoreHostMount")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDatastoreInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfDatastoreInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDatastoreMountPathDatastorePair(value) => {
                state.serialize_field("_typeName", "ArrayOfDatastoreMountPathDatastorePair")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDatastoreSummary(value) => {
                state.serialize_field("_typeName", "ArrayOfDatastoreSummary")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDatastoreVVolContainerFailoverPair(value) => {
                state.serialize_field("_typeName", "ArrayOfDatastoreVVolContainerFailoverPair")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDatastoreNamespaceManagerDirectoryInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfDatastoreNamespaceManagerDirectoryInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDescription(value) => {
                state.serialize_field("_typeName", "ArrayOfDescription")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDesiredSoftwareSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfDesiredSoftwareSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDesiredSoftwareSpecBaseImageSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfDesiredSoftwareSpecBaseImageSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDesiredSoftwareSpecComponentSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfDesiredSoftwareSpecComponentSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDesiredSoftwareSpecVendorAddOnSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfDesiredSoftwareSpecVendorAddOnSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDiagnosticManagerAuditRecordResult(value) => {
                state.serialize_field("_typeName", "ArrayOfDiagnosticManagerAuditRecordResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDiagnosticManagerBundleInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfDiagnosticManagerBundleInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDiagnosticManagerLogDescriptor(value) => {
                state.serialize_field("_typeName", "ArrayOfDiagnosticManagerLogDescriptor")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDiagnosticManagerLogHeader(value) => {
                state.serialize_field("_typeName", "ArrayOfDiagnosticManagerLogHeader")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsBackupRestoreCapability(value) => {
                state.serialize_field("_typeName", "ArrayOfDVSBackupRestoreCapability")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsCapability(value) => {
                state.serialize_field("_typeName", "ArrayOfDVSCapability")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsConfigInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfDVSConfigInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsConfigSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfDVSConfigSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsContactInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfDVSContactInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsCreateSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfDVSCreateSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsFeatureCapability(value) => {
                state.serialize_field("_typeName", "ArrayOfDVSFeatureCapability")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsHealthCheckConfig(value) => {
                state.serialize_field("_typeName", "ArrayOfDVSHealthCheckConfig")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsHealthCheckCapability(value) => {
                state.serialize_field("_typeName", "ArrayOfDVSHealthCheckCapability")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsHostInfrastructureTrafficResource(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsHostInfrastructureTrafficResource")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsHostInfrastructureTrafficResourceAllocation(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsHostInfrastructureTrafficResourceAllocation")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsNameArrayUplinkPortPolicy(value) => {
                state.serialize_field("_typeName", "ArrayOfDVSNameArrayUplinkPortPolicy")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsNetworkResourceManagementCapability(value) => {
                state.serialize_field("_typeName", "ArrayOfDVSNetworkResourceManagementCapability")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsResourceRuntimeInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsResourceRuntimeInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsRollbackCapability(value) => {
                state.serialize_field("_typeName", "ArrayOfDVSRollbackCapability")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsRuntimeInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfDVSRuntimeInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsSummary(value) => {
                state.serialize_field("_typeName", "ArrayOfDVSSummary")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsPolicy(value) => {
                state.serialize_field("_typeName", "ArrayOfDVSPolicy")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsUplinkPortPolicy(value) => {
                state.serialize_field("_typeName", "ArrayOfDVSUplinkPortPolicy")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfEvcMode(value) => {
                state.serialize_field("_typeName", "ArrayOfEVCMode")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfElementDescription(value) => {
                state.serialize_field("_typeName", "ArrayOfElementDescription")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfEnumDescription(value) => {
                state.serialize_field("_typeName", "ArrayOfEnumDescription")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfEnvironmentBrowserConfigOptionQuerySpec(value) => {
                state.serialize_field("_typeName", "ArrayOfEnvironmentBrowserConfigOptionQuerySpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfExtendedDescription(value) => {
                state.serialize_field("_typeName", "ArrayOfExtendedDescription")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfExtendedElementDescription(value) => {
                state.serialize_field("_typeName", "ArrayOfExtendedElementDescription")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfExtension(value) => {
                state.serialize_field("_typeName", "ArrayOfExtension")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfExtensionClientInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfExtensionClientInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfExtensionEventTypeInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfExtensionEventTypeInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfExtensionFaultTypeInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfExtensionFaultTypeInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfExtensionHealthInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfExtensionHealthInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfExtensionOvfConsumerInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfExtensionOvfConsumerInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfExtensionPrivilegeInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfExtensionPrivilegeInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfExtensionResourceInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfExtensionResourceInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfExtensionServerInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfExtensionServerInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfExtensionTaskTypeInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfExtensionTaskTypeInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfExtensionManagerIpAllocationUsage(value) => {
                state.serialize_field("_typeName", "ArrayOfExtensionManagerIpAllocationUsage")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFaultsByHost(value) => {
                state.serialize_field("_typeName", "ArrayOfFaultsByHost")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFaultsByVm(value) => {
                state.serialize_field("_typeName", "ArrayOfFaultsByVM")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFeatureEvcMode(value) => {
                state.serialize_field("_typeName", "ArrayOfFeatureEVCMode")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFileLockInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfFileLockInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFileLockInfoResult(value) => {
                state.serialize_field("_typeName", "ArrayOfFileLockInfoResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFolderBatchAddHostsToClusterResult(value) => {
                state.serialize_field("_typeName", "ArrayOfFolderBatchAddHostsToClusterResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFolderBatchAddStandaloneHostsResult(value) => {
                state.serialize_field("_typeName", "ArrayOfFolderBatchAddStandaloneHostsResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFolderFailedHostResult(value) => {
                state.serialize_field("_typeName", "ArrayOfFolderFailedHostResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFolderNewHostSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfFolderNewHostSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHbrManagerReplicationVmInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHbrManagerReplicationVmInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfReplicationVmProgressInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfReplicationVmProgressInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHbrManagerVmReplicationCapability(value) => {
                state.serialize_field("_typeName", "ArrayOfHbrManagerVmReplicationCapability")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHealthUpdate(value) => {
                state.serialize_field("_typeName", "ArrayOfHealthUpdate")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHealthUpdateInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHealthUpdateInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPerfInterval(value) => {
                state.serialize_field("_typeName", "ArrayOfPerfInterval")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostServiceTicket(value) => {
                state.serialize_field("_typeName", "ArrayOfHostServiceTicket")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostSystemComplianceCheckState(value) => {
                state.serialize_field("_typeName", "ArrayOfHostSystemComplianceCheckState")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostSystemReconnectSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfHostSystemReconnectSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostSystemRemediationState(value) => {
                state.serialize_field("_typeName", "ArrayOfHostSystemRemediationState")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHttpNfcLeaseCapabilities(value) => {
                state.serialize_field("_typeName", "ArrayOfHttpNfcLeaseCapabilities")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHttpNfcLeaseDatastoreLeaseInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHttpNfcLeaseDatastoreLeaseInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHttpNfcLeaseDeviceUrl(value) => {
                state.serialize_field("_typeName", "ArrayOfHttpNfcLeaseDeviceUrl")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHttpNfcLeaseHostInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHttpNfcLeaseHostInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHttpNfcLeaseInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHttpNfcLeaseInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHttpNfcLeaseManifestEntry(value) => {
                state.serialize_field("_typeName", "ArrayOfHttpNfcLeaseManifestEntry")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHttpNfcLeaseProbeResult(value) => {
                state.serialize_field("_typeName", "ArrayOfHttpNfcLeaseProbeResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHttpNfcLeaseSourceFile(value) => {
                state.serialize_field("_typeName", "ArrayOfHttpNfcLeaseSourceFile")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfImportSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfImportSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInheritablePolicy(value) => {
                state.serialize_field("_typeName", "ArrayOfInheritablePolicy")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfIntExpression(value) => {
                state.serialize_field("_typeName", "ArrayOfIntExpression")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfIntPolicy(value) => {
                state.serialize_field("_typeName", "ArrayOfIntPolicy")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterIoFilterInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterIoFilterInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostIoFilterInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostIoFilterInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfIoFilterInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfIoFilterInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfIoFilterQueryIssueResult(value) => {
                state.serialize_field("_typeName", "ArrayOfIoFilterQueryIssueResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfIoFilterHostIssue(value) => {
                state.serialize_field("_typeName", "ArrayOfIoFilterHostIssue")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfIpAddress(value) => {
                state.serialize_field("_typeName", "ArrayOfIpAddress")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfIpPoolManagerIpAllocation(value) => {
                state.serialize_field("_typeName", "ArrayOfIpPoolManagerIpAllocation")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfIpRange(value) => {
                state.serialize_field("_typeName", "ArrayOfIpRange")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfKeyValue(value) => {
                state.serialize_field("_typeName", "ArrayOfKeyValue")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfLatencySensitivity(value) => {
                state.serialize_field("_typeName", "ArrayOfLatencySensitivity")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfLicenseAssignmentManagerLicenseAssignment(value) => {
                state.serialize_field("_typeName", "ArrayOfLicenseAssignmentManagerLicenseAssignment")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfLicenseAvailabilityInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfLicenseAvailabilityInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfLicenseDiagnostics(value) => {
                state.serialize_field("_typeName", "ArrayOfLicenseDiagnostics")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfLicenseManagerEvaluationInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfLicenseManagerEvaluationInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfEvaluationLicenseSource(value) => {
                state.serialize_field("_typeName", "ArrayOfEvaluationLicenseSource")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfLicenseFeatureInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfLicenseFeatureInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostLicensableResourceInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostLicensableResourceInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfLicenseManagerLicenseInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfLicenseManagerLicenseInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfLicenseServerSource(value) => {
                state.serialize_field("_typeName", "ArrayOfLicenseServerSource")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfLicenseSource(value) => {
                state.serialize_field("_typeName", "ArrayOfLicenseSource")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfLicenseUsageInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfLicenseUsageInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfLocalLicenseSource(value) => {
                state.serialize_field("_typeName", "ArrayOfLocalLicenseSource")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfLicenseReservationInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfLicenseReservationInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfLocalizationManagerMessageCatalog(value) => {
                state.serialize_field("_typeName", "ArrayOfLocalizationManagerMessageCatalog")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfLongPolicy(value) => {
                state.serialize_field("_typeName", "ArrayOfLongPolicy")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfMacAddress(value) => {
                state.serialize_field("_typeName", "ArrayOfMacAddress")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfMacRange(value) => {
                state.serialize_field("_typeName", "ArrayOfMacRange")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfMethodDescription(value) => {
                state.serialize_field("_typeName", "ArrayOfMethodDescription")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNegatableExpression(value) => {
                state.serialize_field("_typeName", "ArrayOfNegatableExpression")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNetworkSummary(value) => {
                state.serialize_field("_typeName", "ArrayOfNetworkSummary")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNumericRange(value) => {
                state.serialize_field("_typeName", "ArrayOfNumericRange")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOpaqueNetworkCapability(value) => {
                state.serialize_field("_typeName", "ArrayOfOpaqueNetworkCapability")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOpaqueNetworkSummary(value) => {
                state.serialize_field("_typeName", "ArrayOfOpaqueNetworkSummary")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfConsumerOstNode(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfConsumerOstNode")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfConsumerOvfSection(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfConsumerOvfSection")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfManagerCommonParams(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfManagerCommonParams")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfCreateDescriptorParams(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfCreateDescriptorParams")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfCreateDescriptorResult(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfCreateDescriptorResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfCreateImportSpecParams(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfCreateImportSpecParams")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfCreateImportSpecResult(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfCreateImportSpecResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfDeploymentOption(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfDeploymentOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfFileItem(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfFileItem")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfNetworkInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfNetworkInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfNetworkMapping(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfNetworkMapping")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfFile(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfFile")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfOptionInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfOptionInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfParseDescriptorParams(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfParseDescriptorParams")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfParseDescriptorResult(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfParseDescriptorResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfResourceMap(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfResourceMap")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfValidateHostParams(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfValidateHostParams")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfValidateHostResult(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfValidateHostResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPasswordField(value) => {
                state.serialize_field("_typeName", "ArrayOfPasswordField")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPerformanceDescription(value) => {
                state.serialize_field("_typeName", "ArrayOfPerformanceDescription")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPerfCompositeMetric(value) => {
                state.serialize_field("_typeName", "ArrayOfPerfCompositeMetric")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPerfCounterInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfPerfCounterInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPerformanceManagerCounterLevelMapping(value) => {
                state.serialize_field("_typeName", "ArrayOfPerformanceManagerCounterLevelMapping")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPerfEntityMetric(value) => {
                state.serialize_field("_typeName", "ArrayOfPerfEntityMetric")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPerfEntityMetricBase(value) => {
                state.serialize_field("_typeName", "ArrayOfPerfEntityMetricBase")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPerfEntityMetricCsv(value) => {
                state.serialize_field("_typeName", "ArrayOfPerfEntityMetricCSV")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPerfMetricIntSeries(value) => {
                state.serialize_field("_typeName", "ArrayOfPerfMetricIntSeries")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPerfMetricId(value) => {
                state.serialize_field("_typeName", "ArrayOfPerfMetricId")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPerfMetricSeries(value) => {
                state.serialize_field("_typeName", "ArrayOfPerfMetricSeries")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPerfMetricSeriesCsv(value) => {
                state.serialize_field("_typeName", "ArrayOfPerfMetricSeriesCSV")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPerfProviderSummary(value) => {
                state.serialize_field("_typeName", "ArrayOfPerfProviderSummary")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPerfQuerySpec(value) => {
                state.serialize_field("_typeName", "ArrayOfPerfQuerySpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPerfSampleInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfPerfSampleInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPosixUserSearchResult(value) => {
                state.serialize_field("_typeName", "ArrayOfPosixUserSearchResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPrivilegePolicyDef(value) => {
                state.serialize_field("_typeName", "ArrayOfPrivilegePolicyDef")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfResourceAllocationInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfResourceAllocationInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfResourceAllocationOption(value) => {
                state.serialize_field("_typeName", "ArrayOfResourceAllocationOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfResourceConfigOption(value) => {
                state.serialize_field("_typeName", "ArrayOfResourceConfigOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfResourceConfigSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfResourceConfigSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDatabaseSizeEstimate(value) => {
                state.serialize_field("_typeName", "ArrayOfDatabaseSizeEstimate")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDatabaseSizeParam(value) => {
                state.serialize_field("_typeName", "ArrayOfDatabaseSizeParam")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInventoryDescription(value) => {
                state.serialize_field("_typeName", "ArrayOfInventoryDescription")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPerformanceStatisticsDescription(value) => {
                state.serialize_field("_typeName", "ArrayOfPerformanceStatisticsDescription")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfResourcePoolResourceUsage(value) => {
                state.serialize_field("_typeName", "ArrayOfResourcePoolResourceUsage")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfResourcePoolRuntimeInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfResourcePoolRuntimeInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfResourcePoolSummary(value) => {
                state.serialize_field("_typeName", "ArrayOfResourcePoolSummary")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfResourcePoolQuickStats(value) => {
                state.serialize_field("_typeName", "ArrayOfResourcePoolQuickStats")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfSddcBase(value) => {
                state.serialize_field("_typeName", "ArrayOfSDDCBase")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfSelectionSet(value) => {
                state.serialize_field("_typeName", "ArrayOfSelectionSet")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostVMotionCompatibility(value) => {
                state.serialize_field("_typeName", "ArrayOfHostVMotionCompatibility")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfProductComponentInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfProductComponentInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfServiceContent(value) => {
                state.serialize_field("_typeName", "ArrayOfServiceContent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfServiceLocator(value) => {
                state.serialize_field("_typeName", "ArrayOfServiceLocator")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfServiceLocatorCredential(value) => {
                state.serialize_field("_typeName", "ArrayOfServiceLocatorCredential")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfServiceLocatorNamePassword(value) => {
                state.serialize_field("_typeName", "ArrayOfServiceLocatorNamePassword")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfServiceLocatorSamlCredential(value) => {
                state.serialize_field("_typeName", "ArrayOfServiceLocatorSAMLCredential")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfServiceManagerServiceInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfServiceManagerServiceInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfSessionManagerGenericServiceTicket(value) => {
                state.serialize_field("_typeName", "ArrayOfSessionManagerGenericServiceTicket")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfSessionManagerHttpServiceRequestSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfSessionManagerHttpServiceRequestSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfSessionManagerLocalTicket(value) => {
                state.serialize_field("_typeName", "ArrayOfSessionManagerLocalTicket")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfSessionManagerServiceRequestSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfSessionManagerServiceRequestSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfSessionManagerVmomiServiceRequestSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfSessionManagerVmomiServiceRequestSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfSharesInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfSharesInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfSharesOption(value) => {
                state.serialize_field("_typeName", "ArrayOfSharesOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfSingleIp(value) => {
                state.serialize_field("_typeName", "ArrayOfSingleIp")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfSingleMac(value) => {
                state.serialize_field("_typeName", "ArrayOfSingleMac")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfSiteInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfSiteInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfStoragePodSummary(value) => {
                state.serialize_field("_typeName", "ArrayOfStoragePodSummary")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfStorageIoAllocationInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfStorageIOAllocationInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfStorageIoAllocationOption(value) => {
                state.serialize_field("_typeName", "ArrayOfStorageIOAllocationOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfStorageIormInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfStorageIORMInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfStorageIormConfigOption(value) => {
                state.serialize_field("_typeName", "ArrayOfStorageIORMConfigOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfStorageIormConfigSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfStorageIORMConfigSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPodStorageDrsEntry(value) => {
                state.serialize_field("_typeName", "ArrayOfPodStorageDrsEntry")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfStoragePerformanceSummary(value) => {
                state.serialize_field("_typeName", "ArrayOfStoragePerformanceSummary")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfStorageResourceManagerStorageProfileStatistics(value) => {
                state.serialize_field("_typeName", "ArrayOfStorageResourceManagerStorageProfileStatistics")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfStringExpression(value) => {
                state.serialize_field("_typeName", "ArrayOfStringExpression")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfStringPolicy(value) => {
                state.serialize_field("_typeName", "ArrayOfStringPolicy")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfTag(value) => {
                state.serialize_field("_typeName", "ArrayOfTag")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfTaskDescription(value) => {
                state.serialize_field("_typeName", "ArrayOfTaskDescription")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfTaskFilterSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfTaskFilterSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfTaskFilterSpecByEntity(value) => {
                state.serialize_field("_typeName", "ArrayOfTaskFilterSpecByEntity")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfTaskFilterSpecByTime(value) => {
                state.serialize_field("_typeName", "ArrayOfTaskFilterSpecByTime")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfTaskFilterSpecByUsername(value) => {
                state.serialize_field("_typeName", "ArrayOfTaskFilterSpecByUsername")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfTaskInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfTaskInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfTaskReason(value) => {
                state.serialize_field("_typeName", "ArrayOfTaskReason")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfTaskReasonAlarm(value) => {
                state.serialize_field("_typeName", "ArrayOfTaskReasonAlarm")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfTaskReasonSchedule(value) => {
                state.serialize_field("_typeName", "ArrayOfTaskReasonSchedule")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfTaskReasonSystem(value) => {
                state.serialize_field("_typeName", "ArrayOfTaskReasonSystem")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfTaskReasonUser(value) => {
                state.serialize_field("_typeName", "ArrayOfTaskReasonUser")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfTypeDescription(value) => {
                state.serialize_field("_typeName", "ArrayOfTypeDescription")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfUpdateVirtualMachineFilesResult(value) => {
                state.serialize_field("_typeName", "ArrayOfUpdateVirtualMachineFilesResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfUpdateVirtualMachineFilesResultFailedVmFileInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfUpdateVirtualMachineFilesResultFailedVmFileInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfUserSearchResult(value) => {
                state.serialize_field("_typeName", "ArrayOfUserSearchResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfUserSession(value) => {
                state.serialize_field("_typeName", "ArrayOfUserSession")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVVolVmConfigFileUpdateResult(value) => {
                state.serialize_field("_typeName", "ArrayOfVVolVmConfigFileUpdateResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVVolVmConfigFileUpdateResultFailedVmConfigFileInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVVolVmConfigFileUpdateResultFailedVmConfigFileInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVasaStorageArray(value) => {
                state.serialize_field("_typeName", "ArrayOfVASAStorageArray")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVasaStorageArrayDiscoveryFcTransport(value) => {
                state.serialize_field("_typeName", "ArrayOfVASAStorageArrayDiscoveryFcTransport")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVasaStorageArrayDiscoveryIpTransport(value) => {
                state.serialize_field("_typeName", "ArrayOfVASAStorageArrayDiscoveryIpTransport")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVasaStorageArrayDiscoverySvcInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVASAStorageArrayDiscoverySvcInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVasaProviderContainerSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfVasaProviderContainerSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVimVasaProvider(value) => {
                state.serialize_field("_typeName", "ArrayOfVimVasaProvider")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVimVasaProviderStatePerArray(value) => {
                state.serialize_field("_typeName", "ArrayOfVimVasaProviderStatePerArray")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVimVasaProviderVirtualHostConfig(value) => {
                state.serialize_field("_typeName", "ArrayOfVimVasaProviderVirtualHostConfig")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVimVasaProviderInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVimVasaProviderInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualAppLinkInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualAppLinkInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualAppSummary(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualAppSummary")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDeviceBackedVirtualDiskSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfDeviceBackedVirtualDiskSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFileBackedVirtualDiskSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfFileBackedVirtualDiskSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfSeSparseVirtualDiskSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfSeSparseVirtualDiskSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualDiskSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualDiskSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineConnection(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineConnection")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDiskChangeInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfDiskChangeInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDiskChangeExtent(value) => {
                state.serialize_field("_typeName", "ArrayOfDiskChangeExtent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineDisplayTopology(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineDisplayTopology")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineMksConnection(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineMksConnection")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineMksTicket(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineMksTicket")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfStorageRequirement(value) => {
                state.serialize_field("_typeName", "ArrayOfStorageRequirement")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineTicket(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineTicket")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineWipeResult(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineWipeResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVsanUpgradeSystemApiBrokenIssue(value) => {
                state.serialize_field("_typeName", "ArrayOfVsanUpgradeSystemAPIBrokenIssue")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVsanUpgradeSystemAutoClaimEnabledOnHostsIssue(value) => {
                state.serialize_field("_typeName", "ArrayOfVsanUpgradeSystemAutoClaimEnabledOnHostsIssue")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVsanUpgradeSystemHostsDisconnectedIssue(value) => {
                state.serialize_field("_typeName", "ArrayOfVsanUpgradeSystemHostsDisconnectedIssue")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVsanUpgradeSystemMissingHostsInClusterIssue(value) => {
                state.serialize_field("_typeName", "ArrayOfVsanUpgradeSystemMissingHostsInClusterIssue")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVsanUpgradeSystemNetworkPartitionInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVsanUpgradeSystemNetworkPartitionInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVsanUpgradeSystemNetworkPartitionIssue(value) => {
                state.serialize_field("_typeName", "ArrayOfVsanUpgradeSystemNetworkPartitionIssue")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVsanUpgradeSystemNotEnoughFreeCapacityIssue(value) => {
                state.serialize_field("_typeName", "ArrayOfVsanUpgradeSystemNotEnoughFreeCapacityIssue")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVsanUpgradeSystemPreflightCheckIssue(value) => {
                state.serialize_field("_typeName", "ArrayOfVsanUpgradeSystemPreflightCheckIssue")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVsanUpgradeSystemPreflightCheckResult(value) => {
                state.serialize_field("_typeName", "ArrayOfVsanUpgradeSystemPreflightCheckResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVsanUpgradeSystemRogueHostsInClusterIssue(value) => {
                state.serialize_field("_typeName", "ArrayOfVsanUpgradeSystemRogueHostsInClusterIssue")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVsanUpgradeSystemUpgradeHistoryDiskGroupOp(value) => {
                state.serialize_field("_typeName", "ArrayOfVsanUpgradeSystemUpgradeHistoryDiskGroupOp")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVsanUpgradeSystemUpgradeHistoryItem(value) => {
                state.serialize_field("_typeName", "ArrayOfVsanUpgradeSystemUpgradeHistoryItem")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVsanUpgradeSystemUpgradeHistoryPreflightFail(value) => {
                state.serialize_field("_typeName", "ArrayOfVsanUpgradeSystemUpgradeHistoryPreflightFail")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVsanUpgradeSystemUpgradeStatus(value) => {
                state.serialize_field("_typeName", "ArrayOfVsanUpgradeSystemUpgradeStatus")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVsanUpgradeSystemV2ObjectsPresentDuringDowngradeIssue(value) => {
                state.serialize_field("_typeName", "ArrayOfVsanUpgradeSystemV2ObjectsPresentDuringDowngradeIssue")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVsanUpgradeSystemWrongEsxVersionIssue(value) => {
                state.serialize_field("_typeName", "ArrayOfVsanUpgradeSystemWrongEsxVersionIssue")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfAction(value) => {
                state.serialize_field("_typeName", "ArrayOfAction")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCreateTaskAction(value) => {
                state.serialize_field("_typeName", "ArrayOfCreateTaskAction")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfMethodAction(value) => {
                state.serialize_field("_typeName", "ArrayOfMethodAction")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfMethodActionArgument(value) => {
                state.serialize_field("_typeName", "ArrayOfMethodActionArgument")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfRunScriptAction(value) => {
                state.serialize_field("_typeName", "ArrayOfRunScriptAction")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfSendEmailAction(value) => {
                state.serialize_field("_typeName", "ArrayOfSendEmailAction")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfSendSnmpAction(value) => {
                state.serialize_field("_typeName", "ArrayOfSendSNMPAction")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfAlarmAction(value) => {
                state.serialize_field("_typeName", "ArrayOfAlarmAction")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfAlarmDescription(value) => {
                state.serialize_field("_typeName", "ArrayOfAlarmDescription")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfAlarmExpression(value) => {
                state.serialize_field("_typeName", "ArrayOfAlarmExpression")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfAlarmFilterSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfAlarmFilterSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfAlarmInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfAlarmInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfAlarmSetting(value) => {
                state.serialize_field("_typeName", "ArrayOfAlarmSetting")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfAlarmSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfAlarmSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfAlarmState(value) => {
                state.serialize_field("_typeName", "ArrayOfAlarmState")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfAlarmTriggeringAction(value) => {
                state.serialize_field("_typeName", "ArrayOfAlarmTriggeringAction")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfAlarmTriggeringActionTransitionSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfAlarmTriggeringActionTransitionSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfAndAlarmExpression(value) => {
                state.serialize_field("_typeName", "ArrayOfAndAlarmExpression")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfEventAlarmExpression(value) => {
                state.serialize_field("_typeName", "ArrayOfEventAlarmExpression")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfEventAlarmExpressionComparison(value) => {
                state.serialize_field("_typeName", "ArrayOfEventAlarmExpressionComparison")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGroupAlarmAction(value) => {
                state.serialize_field("_typeName", "ArrayOfGroupAlarmAction")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfMetricAlarmExpression(value) => {
                state.serialize_field("_typeName", "ArrayOfMetricAlarmExpression")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOrAlarmExpression(value) => {
                state.serialize_field("_typeName", "ArrayOfOrAlarmExpression")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfStateAlarmExpression(value) => {
                state.serialize_field("_typeName", "ArrayOfStateAlarmExpression")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterAction(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterAction")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterActionHistory(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterActionHistory")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterAffinityRuleSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterAffinityRuleSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterAntiAffinityRuleSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterAntiAffinityRuleSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterAttemptedVmInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterAttemptedVmInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterClusterInitialPlacementAction(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterClusterInitialPlacementAction")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterConfigInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterConfigInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterConfigInfoEx(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterConfigInfoEx")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterConfigSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterConfigSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterConfigSpecEx(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterConfigSpecEx")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterCryptoConfigInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterCryptoConfigInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterDasAamHostInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterDasAamHostInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterDasAamNodeState(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterDasAamNodeState")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterDasAdmissionControlInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterDasAdmissionControlInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterDasAdmissionControlPolicy(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterDasAdmissionControlPolicy")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterDasAdvancedRuntimeInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterDasAdvancedRuntimeInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDasHeartbeatDatastoreInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfDasHeartbeatDatastoreInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterDasAdvancedRuntimeInfoVmcpCapabilityInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterDasAdvancedRuntimeInfoVmcpCapabilityInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterDasConfigInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterDasConfigInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterDasData(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterDasData")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterDasDataSummary(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterDasDataSummary")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterDasFailoverLevelAdvancedRuntimeInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterDasFailoverLevelAdvancedRuntimeInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterDasFailoverLevelAdvancedRuntimeInfoSlotInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterDasFailoverLevelAdvancedRuntimeInfoSlotInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterDasFdmHostState(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterDasFdmHostState")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterDasHostInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterDasHostInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterDasHostRecommendation(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterDasHostRecommendation")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterDasVmConfigInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterDasVmConfigInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterDasVmConfigSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterDasVmConfigSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterDasVmSettings(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterDasVmSettings")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterDatastoreUpdateSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterDatastoreUpdateSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterDependencyRuleInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterDependencyRuleInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterDpmConfigInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterDpmConfigInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterDpmHostConfigInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterDpmHostConfigInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterDpmHostConfigSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterDpmHostConfigSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterDrsConfigInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterDrsConfigInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterDrsFaults(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterDrsFaults")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterDrsFaultsFaultsByVirtualDisk(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterDrsFaultsFaultsByVirtualDisk")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterDrsFaultsFaultsByVm(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterDrsFaultsFaultsByVm")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterDrsMigration(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterDrsMigration")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterDrsRecommendation(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterDrsRecommendation")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterDrsVmConfigInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterDrsVmConfigInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterDrsVmConfigSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterDrsVmConfigSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterEvcManagerCheckResult(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterEVCManagerCheckResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterEvcManagerEvcState(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterEVCManagerEVCState")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterEnterMaintenanceResult(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterEnterMaintenanceResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterFailoverHostAdmissionControlInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterFailoverHostAdmissionControlInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterFailoverHostAdmissionControlInfoHostStatus(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterFailoverHostAdmissionControlInfoHostStatus")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterFailoverHostAdmissionControlPolicy(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterFailoverHostAdmissionControlPolicy")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterFailoverLevelAdmissionControlInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterFailoverLevelAdmissionControlInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterFailoverLevelAdmissionControlPolicy(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterFailoverLevelAdmissionControlPolicy")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterFailoverResourcesAdmissionControlInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterFailoverResourcesAdmissionControlInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterFailoverResourcesAdmissionControlPolicy(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterFailoverResourcesAdmissionControlPolicy")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterFixedSizeSlotPolicy(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterFixedSizeSlotPolicy")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterGroupInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterGroupInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterGroupSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterGroupSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterHostGroup(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterHostGroup")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterHostInfraUpdateHaModeAction(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterHostInfraUpdateHaModeAction")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterHostPowerAction(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterHostPowerAction")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterHostRecommendation(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterHostRecommendation")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterInfraUpdateHaConfigInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterInfraUpdateHaConfigInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterInitialPlacementAction(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterInitialPlacementAction")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterMigrationAction(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterMigrationAction")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterNotAttemptedVmInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterNotAttemptedVmInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterOrchestrationInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterOrchestrationInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPlacementAction(value) => {
                state.serialize_field("_typeName", "ArrayOfPlacementAction")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPlacementResult(value) => {
                state.serialize_field("_typeName", "ArrayOfPlacementResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPlacementSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfPlacementSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterPowerOnVmResult(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterPowerOnVmResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterPreemptibleVmPairInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterPreemptibleVmPairInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterPreemptibleVmPairSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterPreemptibleVmPairSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterProactiveDrsConfigInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterProactiveDrsConfigInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterRecommendation(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterRecommendation")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterResourceUsageSummary(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterResourceUsageSummary")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterRuleInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterRuleInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterRuleSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterRuleSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterSlotPolicy(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterSlotPolicy")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterSystemVMsConfigInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterSystemVMsConfigInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterSystemVMsConfigSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterSystemVMsConfigSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterTagCategoryUpdateSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterTagCategoryUpdateSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterUsageSummary(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterUsageSummary")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterVmComponentProtectionSettings(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterVmComponentProtectionSettings")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterVmGroup(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterVmGroup")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterVmHostRuleInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterVmHostRuleInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterVmOrchestrationInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterVmOrchestrationInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterVmOrchestrationSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterVmOrchestrationSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterVmReadiness(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterVmReadiness")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterVmToolsMonitoringSettings(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterVmToolsMonitoringSettings")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDistributedVirtualPort(value) => {
                state.serialize_field("_typeName", "ArrayOfDistributedVirtualPort")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvPortConfigInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfDVPortConfigInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvPortConfigSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfDVPortConfigSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsFilterConfig(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsFilterConfig")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsFilterConfigSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsFilterConfigSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsFilterParameter(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsFilterParameter")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsFilterPolicy(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsFilterPolicy")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsHostLocalPortInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfDVSHostLocalPortInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvPortStatus(value) => {
                state.serialize_field("_typeName", "ArrayOfDVPortStatus")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvPortSetting(value) => {
                state.serialize_field("_typeName", "ArrayOfDVPortSetting")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvPortState(value) => {
                state.serialize_field("_typeName", "ArrayOfDVPortState")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsTrafficFilterConfig(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsTrafficFilterConfig")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsTrafficFilterConfigSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsTrafficFilterConfigSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsTrafficShapingPolicy(value) => {
                state.serialize_field("_typeName", "ArrayOfDVSTrafficShapingPolicy")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsVendorSpecificConfig(value) => {
                state.serialize_field("_typeName", "ArrayOfDVSVendorSpecificConfig")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvPortgroupConfigInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfDVPortgroupConfigInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvPortgroupConfigSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfDVPortgroupConfigSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDistributedVirtualPortgroupNsxPortgroupOperationResult(value) => {
                state.serialize_field("_typeName", "ArrayOfDistributedVirtualPortgroupNsxPortgroupOperationResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvPortgroupPolicy(value) => {
                state.serialize_field("_typeName", "ArrayOfDVPortgroupPolicy")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDistributedVirtualPortgroupProblem(value) => {
                state.serialize_field("_typeName", "ArrayOfDistributedVirtualPortgroupProblem")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDistributedVirtualPortgroupInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfDistributedVirtualPortgroupInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvPortgroupSelection(value) => {
                state.serialize_field("_typeName", "ArrayOfDVPortgroupSelection")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDistributedVirtualSwitchInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfDistributedVirtualSwitchInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDistributedVirtualSwitchManagerCompatibilityResult(value) => {
                state.serialize_field("_typeName", "ArrayOfDistributedVirtualSwitchManagerCompatibilityResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsManagerDvsConfigTarget(value) => {
                state.serialize_field("_typeName", "ArrayOfDVSManagerDvsConfigTarget")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDistributedVirtualSwitchManagerDvsProductSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfDistributedVirtualSwitchManagerDvsProductSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDistributedVirtualSwitchManagerHostArrayFilter(value) => {
                state.serialize_field("_typeName", "ArrayOfDistributedVirtualSwitchManagerHostArrayFilter")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDistributedVirtualSwitchManagerHostContainer(value) => {
                state.serialize_field("_typeName", "ArrayOfDistributedVirtualSwitchManagerHostContainer")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDistributedVirtualSwitchManagerHostContainerFilter(value) => {
                state.serialize_field("_typeName", "ArrayOfDistributedVirtualSwitchManagerHostContainerFilter")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDistributedVirtualSwitchManagerHostDvsFilterSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfDistributedVirtualSwitchManagerHostDvsFilterSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDistributedVirtualSwitchManagerHostDvsMembershipFilter(value) => {
                state.serialize_field("_typeName", "ArrayOfDistributedVirtualSwitchManagerHostDvsMembershipFilter")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDistributedVirtualSwitchManagerImportResult(value) => {
                state.serialize_field("_typeName", "ArrayOfDistributedVirtualSwitchManagerImportResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsManagerPhysicalNicsList(value) => {
                state.serialize_field("_typeName", "ArrayOfDVSManagerPhysicalNicsList")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsSelection(value) => {
                state.serialize_field("_typeName", "ArrayOfDVSSelection")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfEntityBackup(value) => {
                state.serialize_field("_typeName", "ArrayOfEntityBackup")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfEntityBackupConfig(value) => {
                state.serialize_field("_typeName", "ArrayOfEntityBackupConfig")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDistributedVirtualSwitchHostMember(value) => {
                state.serialize_field("_typeName", "ArrayOfDistributedVirtualSwitchHostMember")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDistributedVirtualSwitchHostMemberBacking(value) => {
                state.serialize_field("_typeName", "ArrayOfDistributedVirtualSwitchHostMemberBacking")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDistributedVirtualSwitchHostMemberConfigInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfDistributedVirtualSwitchHostMemberConfigInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDistributedVirtualSwitchHostMemberConfigSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfDistributedVirtualSwitchHostMemberConfigSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostMemberHealthCheckResult(value) => {
                state.serialize_field("_typeName", "ArrayOfHostMemberHealthCheckResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDistributedVirtualSwitchHostMemberPnicBacking(value) => {
                state.serialize_field("_typeName", "ArrayOfDistributedVirtualSwitchHostMemberPnicBacking")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDistributedVirtualSwitchHostMemberPnicSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfDistributedVirtualSwitchHostMemberPnicSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostMemberRuntimeInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostMemberRuntimeInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDistributedVirtualSwitchHostMemberRuntimeState(value) => {
                state.serialize_field("_typeName", "ArrayOfDistributedVirtualSwitchHostMemberRuntimeState")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDistributedVirtualSwitchHostMemberTransportZoneInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfDistributedVirtualSwitchHostMemberTransportZoneInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostMemberUplinkHealthCheckResult(value) => {
                state.serialize_field("_typeName", "ArrayOfHostMemberUplinkHealthCheckResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDistributedVirtualSwitchHostProductSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfDistributedVirtualSwitchHostProductSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDistributedVirtualSwitchKeyedOpaqueBlob(value) => {
                state.serialize_field("_typeName", "ArrayOfDistributedVirtualSwitchKeyedOpaqueBlob")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDistributedVirtualSwitchNetworkOffloadSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfDistributedVirtualSwitchNetworkOffloadSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsNetworkResourcePool(value) => {
                state.serialize_field("_typeName", "ArrayOfDVSNetworkResourcePool")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsNetworkResourcePoolAllocationInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfDVSNetworkResourcePoolAllocationInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsNetworkResourcePoolConfigSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfDVSNetworkResourcePoolConfigSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDistributedVirtualSwitchPortConnectee(value) => {
                state.serialize_field("_typeName", "ArrayOfDistributedVirtualSwitchPortConnectee")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDistributedVirtualSwitchPortConnection(value) => {
                state.serialize_field("_typeName", "ArrayOfDistributedVirtualSwitchPortConnection")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDistributedVirtualSwitchPortCriteria(value) => {
                state.serialize_field("_typeName", "ArrayOfDistributedVirtualSwitchPortCriteria")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDistributedVirtualSwitchPortStatistics(value) => {
                state.serialize_field("_typeName", "ArrayOfDistributedVirtualSwitchPortStatistics")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDistributedVirtualSwitchProductSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfDistributedVirtualSwitchProductSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsTrafficRule(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsTrafficRule")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsAcceptNetworkRuleAction(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsAcceptNetworkRuleAction")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsNetworkRuleAction(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsNetworkRuleAction")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsCopyNetworkRuleAction(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsCopyNetworkRuleAction")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsDropNetworkRuleAction(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsDropNetworkRuleAction")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsGreEncapNetworkRuleAction(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsGreEncapNetworkRuleAction")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsIpPort(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsIpPort")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsIpPortRange(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsIpPortRange")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsIpNetworkRuleQualifier(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsIpNetworkRuleQualifier")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsLogNetworkRuleAction(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsLogNetworkRuleAction")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsMacNetworkRuleQualifier(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsMacNetworkRuleQualifier")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsMacRewriteNetworkRuleAction(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsMacRewriteNetworkRuleAction")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsPuntNetworkRuleAction(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsPuntNetworkRuleAction")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsNetworkRuleQualifier(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsNetworkRuleQualifier")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsRateLimitNetworkRuleAction(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsRateLimitNetworkRuleAction")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsSingleIpPort(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsSingleIpPort")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsSystemTrafficNetworkRuleQualifier(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsSystemTrafficNetworkRuleQualifier")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsUpdateTagNetworkRuleAction(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsUpdateTagNetworkRuleAction")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsTrafficRuleset(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsTrafficRuleset")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsVmVnicNetworkResourcePool(value) => {
                state.serialize_field("_typeName", "ArrayOfDVSVmVnicNetworkResourcePool")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsVmVnicResourcePoolConfigSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsVmVnicResourcePoolConfigSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsVmVnicResourceAllocation(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsVmVnicResourceAllocation")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsVmVnicNetworkResourcePoolRuntimeInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsVmVnicNetworkResourcePoolRuntimeInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsVnicAllocatedResource(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsVnicAllocatedResource")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVMwareDvsConfigInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVMwareDVSConfigInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVMwareDvsConfigSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfVMwareDVSConfigSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVMwareDvsDpuCapability(value) => {
                state.serialize_field("_typeName", "ArrayOfVMwareDvsDpuCapability")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsFailureCriteria(value) => {
                state.serialize_field("_typeName", "ArrayOfDVSFailureCriteria")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVMwareDvsFeatureCapability(value) => {
                state.serialize_field("_typeName", "ArrayOfVMwareDVSFeatureCapability")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVMwareIpfixConfig(value) => {
                state.serialize_field("_typeName", "ArrayOfVMwareIpfixConfig")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVMwareDvsIpfixCapability(value) => {
                state.serialize_field("_typeName", "ArrayOfVMwareDvsIpfixCapability")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVMwareDvsLacpCapability(value) => {
                state.serialize_field("_typeName", "ArrayOfVMwareDvsLacpCapability")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVMwareDvsLacpGroupConfig(value) => {
                state.serialize_field("_typeName", "ArrayOfVMwareDvsLacpGroupConfig")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVMwareDvsLacpGroupSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfVMwareDvsLacpGroupSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVMwareDvsLagIpfixConfig(value) => {
                state.serialize_field("_typeName", "ArrayOfVMwareDvsLagIpfixConfig")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVMwareDvsLagVlanConfig(value) => {
                state.serialize_field("_typeName", "ArrayOfVMwareDvsLagVlanConfig")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsMacLearningPolicy(value) => {
                state.serialize_field("_typeName", "ArrayOfDVSMacLearningPolicy")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsMacManagementPolicy(value) => {
                state.serialize_field("_typeName", "ArrayOfDVSMacManagementPolicy")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVMwareDvsMtuCapability(value) => {
                state.serialize_field("_typeName", "ArrayOfVMwareDvsMtuCapability")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVMwareDvsMtuHealthCheckResult(value) => {
                state.serialize_field("_typeName", "ArrayOfVMwareDVSMtuHealthCheckResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVMwareDvsPvlanConfigSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfVMwareDVSPvlanConfigSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVMwareDvsPvlanMapEntry(value) => {
                state.serialize_field("_typeName", "ArrayOfVMwareDVSPvlanMapEntry")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmwareDistributedVirtualSwitchPvlanSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfVmwareDistributedVirtualSwitchPvlanSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsSecurityPolicy(value) => {
                state.serialize_field("_typeName", "ArrayOfDVSSecurityPolicy")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVMwareDvsTeamingHealthCheckConfig(value) => {
                state.serialize_field("_typeName", "ArrayOfVMwareDVSTeamingHealthCheckConfig")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVMwareDvsTeamingHealthCheckResult(value) => {
                state.serialize_field("_typeName", "ArrayOfVMwareDVSTeamingHealthCheckResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmwareDistributedVirtualSwitchTrunkVlanSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfVmwareDistributedVirtualSwitchTrunkVlanSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVMwareUplinkLacpPolicy(value) => {
                state.serialize_field("_typeName", "ArrayOfVMwareUplinkLacpPolicy")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVMwareUplinkPortOrderPolicy(value) => {
                state.serialize_field("_typeName", "ArrayOfVMwareUplinkPortOrderPolicy")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmwareUplinkPortTeamingPolicy(value) => {
                state.serialize_field("_typeName", "ArrayOfVmwareUplinkPortTeamingPolicy")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVMwareDvsPortgroupPolicy(value) => {
                state.serialize_field("_typeName", "ArrayOfVMwareDVSPortgroupPolicy")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVMwareDvsVlanHealthCheckResult(value) => {
                state.serialize_field("_typeName", "ArrayOfVMwareDVSVlanHealthCheckResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmwareDistributedVirtualSwitchVlanIdSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfVmwareDistributedVirtualSwitchVlanIdSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVMwareDvsVlanMtuHealthCheckConfig(value) => {
                state.serialize_field("_typeName", "ArrayOfVMwareDVSVlanMtuHealthCheckConfig")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmwareDistributedVirtualSwitchVlanSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfVmwareDistributedVirtualSwitchVlanSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVMwareDvsHealthCheckConfig(value) => {
                state.serialize_field("_typeName", "ArrayOfVMwareDVSHealthCheckConfig")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVMwareDvsHealthCheckCapability(value) => {
                state.serialize_field("_typeName", "ArrayOfVMwareDVSHealthCheckCapability")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVMwareDvsPortSetting(value) => {
                state.serialize_field("_typeName", "ArrayOfVMwareDVSPortSetting")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVMwareDvsVspanConfigSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfVMwareDVSVspanConfigSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVMwareDvsVspanCapability(value) => {
                state.serialize_field("_typeName", "ArrayOfVMwareDVSVspanCapability")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVMwareVspanPort(value) => {
                state.serialize_field("_typeName", "ArrayOfVMwareVspanPort")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVMwareVspanSession(value) => {
                state.serialize_field("_typeName", "ArrayOfVMwareVspanSession")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCryptoKeyId(value) => {
                state.serialize_field("_typeName", "ArrayOfCryptoKeyId")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCryptoKeyPlain(value) => {
                state.serialize_field("_typeName", "ArrayOfCryptoKeyPlain")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCryptoKeyResult(value) => {
                state.serialize_field("_typeName", "ArrayOfCryptoKeyResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCryptoManagerHostKeyStatus(value) => {
                state.serialize_field("_typeName", "ArrayOfCryptoManagerHostKeyStatus")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCryptoManagerKmipCertSignRequest(value) => {
                state.serialize_field("_typeName", "ArrayOfCryptoManagerKmipCertSignRequest")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCryptoManagerKmipCertificateInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfCryptoManagerKmipCertificateInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCryptoManagerKmipClusterStatus(value) => {
                state.serialize_field("_typeName", "ArrayOfCryptoManagerKmipClusterStatus")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCryptoManagerKmipCryptoKeyStatus(value) => {
                state.serialize_field("_typeName", "ArrayOfCryptoManagerKmipCryptoKeyStatus")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCryptoManagerKmipCustomAttributeSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfCryptoManagerKmipCustomAttributeSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCryptoManagerKmipServerCertInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfCryptoManagerKmipServerCertInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCryptoManagerKmipServerStatus(value) => {
                state.serialize_field("_typeName", "ArrayOfCryptoManagerKmipServerStatus")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCryptoSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfCryptoSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCryptoSpecDecrypt(value) => {
                state.serialize_field("_typeName", "ArrayOfCryptoSpecDecrypt")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCryptoSpecDeepRecrypt(value) => {
                state.serialize_field("_typeName", "ArrayOfCryptoSpecDeepRecrypt")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCryptoSpecEncrypt(value) => {
                state.serialize_field("_typeName", "ArrayOfCryptoSpecEncrypt")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCryptoSpecNoOp(value) => {
                state.serialize_field("_typeName", "ArrayOfCryptoSpecNoOp")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCryptoSpecRegister(value) => {
                state.serialize_field("_typeName", "ArrayOfCryptoSpecRegister")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCryptoSpecShallowRecrypt(value) => {
                state.serialize_field("_typeName", "ArrayOfCryptoSpecShallowRecrypt")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfKeyProviderId(value) => {
                state.serialize_field("_typeName", "ArrayOfKeyProviderId")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfKmipClusterInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfKmipClusterInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfKmipServerInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfKmipServerInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfKmipServerSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfKmipServerSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfKmipServerStatus(value) => {
                state.serialize_field("_typeName", "ArrayOfKmipServerStatus")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfAccountCreatedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfAccountCreatedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfAccountRemovedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfAccountRemovedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfAccountUpdatedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfAccountUpdatedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfAdminPasswordNotChangedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfAdminPasswordNotChangedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfAlarmAcknowledgedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfAlarmAcknowledgedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfAlarmActionTriggeredEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfAlarmActionTriggeredEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfAlarmClearedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfAlarmClearedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfAlarmCreatedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfAlarmCreatedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfAlarmEmailCompletedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfAlarmEmailCompletedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfAlarmEmailFailedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfAlarmEmailFailedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfAlarmEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfAlarmEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfAlarmEventArgument(value) => {
                state.serialize_field("_typeName", "ArrayOfAlarmEventArgument")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfAlarmReconfiguredEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfAlarmReconfiguredEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfAlarmRemovedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfAlarmRemovedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfAlarmScriptCompleteEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfAlarmScriptCompleteEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfAlarmScriptFailedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfAlarmScriptFailedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfAlarmSnmpCompletedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfAlarmSnmpCompletedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfAlarmSnmpFailedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfAlarmSnmpFailedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfAlarmStatusChangedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfAlarmStatusChangedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfAllVirtualMachinesLicensedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfAllVirtualMachinesLicensedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfAlreadyAuthenticatedSessionEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfAlreadyAuthenticatedSessionEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfAuthorizationEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfAuthorizationEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfBadUsernameSessionEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfBadUsernameSessionEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCanceledHostOperationEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfCanceledHostOperationEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfChangesInfoEventArgument(value) => {
                state.serialize_field("_typeName", "ArrayOfChangesInfoEventArgument")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterComplianceCheckedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterComplianceCheckedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterCreatedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterCreatedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterDestroyedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterDestroyedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterOvercommittedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterOvercommittedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterReconfiguredEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterReconfiguredEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterStatusChangedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterStatusChangedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfComputeResourceEventArgument(value) => {
                state.serialize_field("_typeName", "ArrayOfComputeResourceEventArgument")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCustomFieldDefAddedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfCustomFieldDefAddedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCustomFieldDefEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfCustomFieldDefEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCustomFieldDefRemovedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfCustomFieldDefRemovedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCustomFieldDefRenamedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfCustomFieldDefRenamedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCustomFieldEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfCustomFieldEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCustomFieldValueChangedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfCustomFieldValueChangedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCustomizationEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfCustomizationEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCustomizationFailed(value) => {
                state.serialize_field("_typeName", "ArrayOfCustomizationFailed")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCustomizationLinuxIdentityFailed(value) => {
                state.serialize_field("_typeName", "ArrayOfCustomizationLinuxIdentityFailed")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCustomizationNetworkSetupFailed(value) => {
                state.serialize_field("_typeName", "ArrayOfCustomizationNetworkSetupFailed")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCustomizationStartedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfCustomizationStartedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCustomizationSucceeded(value) => {
                state.serialize_field("_typeName", "ArrayOfCustomizationSucceeded")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCustomizationSysprepFailed(value) => {
                state.serialize_field("_typeName", "ArrayOfCustomizationSysprepFailed")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCustomizationUnknownFailure(value) => {
                state.serialize_field("_typeName", "ArrayOfCustomizationUnknownFailure")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvPortgroupCreatedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDVPortgroupCreatedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvPortgroupDestroyedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDVPortgroupDestroyedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvPortgroupEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDVPortgroupEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvPortgroupReconfiguredEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDVPortgroupReconfiguredEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvPortgroupRenamedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDVPortgroupRenamedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDasAdmissionControlDisabledEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDasAdmissionControlDisabledEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDasAdmissionControlEnabledEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDasAdmissionControlEnabledEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDasAgentFoundEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDasAgentFoundEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDasAgentUnavailableEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDasAgentUnavailableEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDasClusterIsolatedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDasClusterIsolatedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDasDisabledEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDasDisabledEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDasEnabledEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDasEnabledEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDasHostFailedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDasHostFailedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDasHostIsolatedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDasHostIsolatedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDatacenterCreatedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDatacenterCreatedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDatacenterEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDatacenterEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDatacenterEventArgument(value) => {
                state.serialize_field("_typeName", "ArrayOfDatacenterEventArgument")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDatacenterRenamedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDatacenterRenamedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDatastoreCapacityIncreasedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDatastoreCapacityIncreasedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDatastoreDestroyedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDatastoreDestroyedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDatastoreDiscoveredEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDatastoreDiscoveredEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDatastoreDuplicatedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDatastoreDuplicatedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDatastoreEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDatastoreEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDatastoreEventArgument(value) => {
                state.serialize_field("_typeName", "ArrayOfDatastoreEventArgument")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDatastoreFileCopiedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDatastoreFileCopiedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDatastoreFileDeletedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDatastoreFileDeletedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDatastoreFileEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDatastoreFileEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDatastoreFileMovedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDatastoreFileMovedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDatastoreIormReconfiguredEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDatastoreIORMReconfiguredEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDatastorePrincipalConfigured(value) => {
                state.serialize_field("_typeName", "ArrayOfDatastorePrincipalConfigured")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDatastoreRemovedOnHostEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDatastoreRemovedOnHostEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDatastoreRenamedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDatastoreRenamedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDatastoreRenamedOnHostEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDatastoreRenamedOnHostEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDrsDisabledEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDrsDisabledEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDrsEnabledEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDrsEnabledEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDrsEnteredStandbyModeEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDrsEnteredStandbyModeEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDrsEnteringStandbyModeEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDrsEnteringStandbyModeEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDrsExitStandbyModeFailedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDrsExitStandbyModeFailedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDrsExitedStandbyModeEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDrsExitedStandbyModeEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDrsExitingStandbyModeEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDrsExitingStandbyModeEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDrsInvocationFailedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDrsInvocationFailedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDrsRecoveredFromFailureEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDrsRecoveredFromFailureEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDrsResourceConfigureFailedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDrsResourceConfigureFailedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDrsResourceConfigureSyncedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDrsResourceConfigureSyncedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDrsRuleComplianceEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDrsRuleComplianceEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDrsRuleViolationEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDrsRuleViolationEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDrsSoftRuleViolationEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDrsSoftRuleViolationEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDrsVmMigratedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDrsVmMigratedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDrsVmPoweredOnEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDrsVmPoweredOnEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDuplicateIpDetectedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDuplicateIpDetectedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvpgImportEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDvpgImportEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvpgRestoreEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDvpgRestoreEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsCreatedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsCreatedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsDestroyedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsDestroyedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsEventArgument(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsEventArgument")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsHealthStatusChangeEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsHealthStatusChangeEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsHostBackInSyncEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsHostBackInSyncEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsHostJoinedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsHostJoinedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsHostLeftEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsHostLeftEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsHostStatusUpdated(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsHostStatusUpdated")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsHostWentOutOfSyncEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsHostWentOutOfSyncEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsImportEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsImportEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsMergedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsMergedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsOutOfSyncHostArgument(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsOutOfSyncHostArgument")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsPortBlockedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsPortBlockedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsPortConnectedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsPortConnectedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsPortCreatedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsPortCreatedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsPortDeletedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsPortDeletedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsPortDisconnectedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsPortDisconnectedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsPortEnteredPassthruEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsPortEnteredPassthruEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsPortExitedPassthruEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsPortExitedPassthruEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsPortJoinPortgroupEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsPortJoinPortgroupEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsPortLeavePortgroupEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsPortLeavePortgroupEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsPortLinkDownEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsPortLinkDownEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsPortLinkUpEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsPortLinkUpEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsPortReconfiguredEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsPortReconfiguredEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsPortRuntimeChangeEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsPortRuntimeChangeEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsPortUnblockedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsPortUnblockedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsPortVendorSpecificStateChangeEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsPortVendorSpecificStateChangeEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsReconfiguredEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsReconfiguredEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsRenamedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsRenamedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsRestoreEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsRestoreEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsUpgradeAvailableEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsUpgradeAvailableEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsUpgradeInProgressEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsUpgradeInProgressEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsUpgradeRejectedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsUpgradeRejectedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsUpgradedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsUpgradedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfEnteredMaintenanceModeEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfEnteredMaintenanceModeEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfEnteredStandbyModeEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfEnteredStandbyModeEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfEnteringMaintenanceModeEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfEnteringMaintenanceModeEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfEnteringStandbyModeEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfEnteringStandbyModeEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfEntityEventArgument(value) => {
                state.serialize_field("_typeName", "ArrayOfEntityEventArgument")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfErrorUpgradeEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfErrorUpgradeEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfEventArgument(value) => {
                state.serialize_field("_typeName", "ArrayOfEventArgument")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfEventDescription(value) => {
                state.serialize_field("_typeName", "ArrayOfEventDescription")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfEventArgDesc(value) => {
                state.serialize_field("_typeName", "ArrayOfEventArgDesc")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfEventDescriptionEventDetail(value) => {
                state.serialize_field("_typeName", "ArrayOfEventDescriptionEventDetail")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfEventEx(value) => {
                state.serialize_field("_typeName", "ArrayOfEventEx")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfEventFilterSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfEventFilterSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfEventFilterSpecByEntity(value) => {
                state.serialize_field("_typeName", "ArrayOfEventFilterSpecByEntity")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfEventFilterSpecByTime(value) => {
                state.serialize_field("_typeName", "ArrayOfEventFilterSpecByTime")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfEventFilterSpecByUsername(value) => {
                state.serialize_field("_typeName", "ArrayOfEventFilterSpecByUsername")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfExitMaintenanceModeEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfExitMaintenanceModeEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfExitStandbyModeFailedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfExitStandbyModeFailedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfExitedStandbyModeEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfExitedStandbyModeEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfExitingStandbyModeEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfExitingStandbyModeEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfExtendedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfExtendedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfExtendedEventPair(value) => {
                state.serialize_field("_typeName", "ArrayOfExtendedEventPair")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFailoverLevelRestored(value) => {
                state.serialize_field("_typeName", "ArrayOfFailoverLevelRestored")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFolderEventArgument(value) => {
                state.serialize_field("_typeName", "ArrayOfFolderEventArgument")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGeneralEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfGeneralEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGeneralHostErrorEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfGeneralHostErrorEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGeneralHostInfoEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfGeneralHostInfoEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGeneralHostWarningEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfGeneralHostWarningEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGeneralUserEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfGeneralUserEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGeneralVmErrorEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfGeneralVmErrorEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGeneralVmInfoEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfGeneralVmInfoEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGeneralVmWarningEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfGeneralVmWarningEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGhostDvsProxySwitchDetectedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfGhostDvsProxySwitchDetectedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGhostDvsProxySwitchRemovedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfGhostDvsProxySwitchRemovedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGlobalMessageChangedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfGlobalMessageChangedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHealthStatusChangedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHealthStatusChangedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostAddFailedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostAddFailedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostAddedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostAddedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostAdminDisableEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostAdminDisableEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostAdminEnableEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostAdminEnableEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostCnxFailedAccountFailedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostCnxFailedAccountFailedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostCnxFailedAlreadyManagedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostCnxFailedAlreadyManagedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostCnxFailedBadCcagentEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostCnxFailedBadCcagentEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostCnxFailedBadUsernameEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostCnxFailedBadUsernameEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostCnxFailedBadVersionEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostCnxFailedBadVersionEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostCnxFailedCcagentUpgradeEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostCnxFailedCcagentUpgradeEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostCnxFailedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostCnxFailedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostCnxFailedNetworkErrorEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostCnxFailedNetworkErrorEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostCnxFailedNoAccessEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostCnxFailedNoAccessEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostCnxFailedNoConnectionEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostCnxFailedNoConnectionEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostCnxFailedNoLicenseEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostCnxFailedNoLicenseEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostCnxFailedNotFoundEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostCnxFailedNotFoundEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostCnxFailedTimeoutEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostCnxFailedTimeoutEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostComplianceCheckedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostComplianceCheckedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostCompliantEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostCompliantEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostConfigAppliedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostConfigAppliedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostConnectedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostConnectedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostConnectionLostEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostConnectionLostEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostDasDisabledEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostDasDisabledEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostDasDisablingEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostDasDisablingEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostDasEnabledEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostDasEnabledEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostDasEnablingEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostDasEnablingEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostDasErrorEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostDasErrorEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostDasEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostDasEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostDasOkEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostDasOkEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostDisconnectedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostDisconnectedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostEnableAdminFailedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostEnableAdminFailedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostEventArgument(value) => {
                state.serialize_field("_typeName", "ArrayOfHostEventArgument")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostExtraNetworksEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostExtraNetworksEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostGetShortNameFailedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostGetShortNameFailedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostInAuditModeEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostInAuditModeEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostInventoryFullEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostInventoryFullEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostInventoryUnreadableEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostInventoryUnreadableEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostIpChangedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostIpChangedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostIpInconsistentEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostIpInconsistentEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostIpToShortNameFailedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostIpToShortNameFailedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostIsolationIpPingFailedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostIsolationIpPingFailedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostLicenseExpiredEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostLicenseExpiredEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostLocalPortCreatedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostLocalPortCreatedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostMissingNetworksEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostMissingNetworksEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostMonitoringStateChangedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostMonitoringStateChangedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostNoAvailableNetworksEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostNoAvailableNetworksEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostNoHaEnabledPortGroupsEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostNoHAEnabledPortGroupsEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostNoRedundantManagementNetworkEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostNoRedundantManagementNetworkEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostNonCompliantEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostNonCompliantEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostNotInClusterEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostNotInClusterEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostOvercommittedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostOvercommittedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostPrimaryAgentNotShortNameEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostPrimaryAgentNotShortNameEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostProfileAppliedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostProfileAppliedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostReconnectionFailedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostReconnectionFailedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostRemovedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostRemovedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostShortNameInconsistentEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostShortNameInconsistentEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostShortNameToIpFailedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostShortNameToIpFailedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostShutdownEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostShutdownEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostSpecificationChangedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostSpecificationChangedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostSpecificationRequireEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostSpecificationRequireEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostSpecificationUpdateEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostSpecificationUpdateEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostStatusChangedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostStatusChangedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostSubSpecificationDeleteEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostSubSpecificationDeleteEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostSubSpecificationUpdateEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostSubSpecificationUpdateEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostSyncFailedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostSyncFailedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostUpgradeFailedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostUpgradeFailedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostUserWorldSwapNotEnabledEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostUserWorldSwapNotEnabledEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostVnicConnectedToCustomizedDvPortEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostVnicConnectedToCustomizedDVPortEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostWwnChangedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostWwnChangedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostWwnConflictEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostWwnConflictEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfIncorrectHostInformationEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfIncorrectHostInformationEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInfoUpgradeEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfInfoUpgradeEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInsufficientFailoverResourcesEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfInsufficientFailoverResourcesEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInvalidEditionEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfInvalidEditionEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfLicenseEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfLicenseEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfLicenseExpiredEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfLicenseExpiredEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfLicenseNonComplianceEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfLicenseNonComplianceEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfLicenseRestrictedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfLicenseRestrictedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfLicenseServerAvailableEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfLicenseServerAvailableEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfLicenseServerUnavailableEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfLicenseServerUnavailableEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfLocalDatastoreCreatedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfLocalDatastoreCreatedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfLocalTsmEnabledEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfLocalTSMEnabledEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfLockerMisconfiguredEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfLockerMisconfiguredEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfLockerReconfiguredEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfLockerReconfiguredEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfManagedEntityEventArgument(value) => {
                state.serialize_field("_typeName", "ArrayOfManagedEntityEventArgument")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfMigrationErrorEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfMigrationErrorEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfMigrationEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfMigrationEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfMigrationHostErrorEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfMigrationHostErrorEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfMigrationHostWarningEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfMigrationHostWarningEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfMigrationResourceErrorEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfMigrationResourceErrorEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfMigrationResourceWarningEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfMigrationResourceWarningEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfMigrationWarningEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfMigrationWarningEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfMtuMatchEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfMtuMatchEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfMtuMismatchEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfMtuMismatchEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNasDatastoreCreatedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfNASDatastoreCreatedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNetworkEventArgument(value) => {
                state.serialize_field("_typeName", "ArrayOfNetworkEventArgument")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNetworkRollbackEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfNetworkRollbackEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNoAccessUserEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfNoAccessUserEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNoDatastoresConfiguredEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfNoDatastoresConfiguredEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNoLicenseEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfNoLicenseEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNoMaintenanceModeDrsRecommendationForVm(value) => {
                state.serialize_field("_typeName", "ArrayOfNoMaintenanceModeDrsRecommendationForVM")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNonViWorkloadDetectedOnDatastoreEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfNonVIWorkloadDetectedOnDatastoreEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNotEnoughResourcesToStartVmEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfNotEnoughResourcesToStartVmEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOutOfSyncDvsHost(value) => {
                state.serialize_field("_typeName", "ArrayOfOutOfSyncDvsHost")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPermissionAddedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfPermissionAddedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPermissionEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfPermissionEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPermissionRemovedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfPermissionRemovedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPermissionUpdatedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfPermissionUpdatedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfProfileAssociatedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfProfileAssociatedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfProfileChangedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfProfileChangedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfProfileCreatedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfProfileCreatedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfProfileDissociatedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfProfileDissociatedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfProfileEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfProfileEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfProfileEventArgument(value) => {
                state.serialize_field("_typeName", "ArrayOfProfileEventArgument")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfProfileReferenceHostChangedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfProfileReferenceHostChangedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfProfileRemovedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfProfileRemovedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfRecoveryEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfRecoveryEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfRemoteTsmEnabledEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfRemoteTSMEnabledEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfResourcePoolCreatedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfResourcePoolCreatedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfResourcePoolDestroyedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfResourcePoolDestroyedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfResourcePoolEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfResourcePoolEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfResourcePoolEventArgument(value) => {
                state.serialize_field("_typeName", "ArrayOfResourcePoolEventArgument")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfResourcePoolMovedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfResourcePoolMovedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfResourcePoolReconfiguredEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfResourcePoolReconfiguredEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfResourceViolatedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfResourceViolatedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfRoleAddedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfRoleAddedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfRoleEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfRoleEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfRoleEventArgument(value) => {
                state.serialize_field("_typeName", "ArrayOfRoleEventArgument")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfRoleRemovedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfRoleRemovedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfRoleUpdatedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfRoleUpdatedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfRollbackEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfRollbackEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfScheduledTaskCompletedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfScheduledTaskCompletedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfScheduledTaskCreatedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfScheduledTaskCreatedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfScheduledTaskEmailCompletedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfScheduledTaskEmailCompletedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfScheduledTaskEmailFailedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfScheduledTaskEmailFailedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfScheduledTaskEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfScheduledTaskEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfScheduledTaskEventArgument(value) => {
                state.serialize_field("_typeName", "ArrayOfScheduledTaskEventArgument")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfScheduledTaskFailedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfScheduledTaskFailedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfScheduledTaskReconfiguredEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfScheduledTaskReconfiguredEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfScheduledTaskRemovedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfScheduledTaskRemovedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfScheduledTaskStartedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfScheduledTaskStartedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfServerLicenseExpiredEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfServerLicenseExpiredEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfServerStartedSessionEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfServerStartedSessionEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfSessionEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfSessionEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfSessionTerminatedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfSessionTerminatedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfTaskEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfTaskEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfTaskTimeoutEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfTaskTimeoutEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfTeamingMatchEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfTeamingMatchEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfTeamingMisMatchEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfTeamingMisMatchEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfTemplateBeingUpgradedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfTemplateBeingUpgradedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfTemplateUpgradeEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfTemplateUpgradeEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfTemplateUpgradeFailedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfTemplateUpgradeFailedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfTemplateUpgradedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfTemplateUpgradedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfTimedOutHostOperationEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfTimedOutHostOperationEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfUnlicensedVirtualMachinesEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfUnlicensedVirtualMachinesEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfUnlicensedVirtualMachinesFoundEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfUnlicensedVirtualMachinesFoundEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfUpdatedAgentBeingRestartedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfUpdatedAgentBeingRestartedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfUpgradeEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfUpgradeEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfUplinkPortMtuNotSupportEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfUplinkPortMtuNotSupportEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfUplinkPortMtuSupportEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfUplinkPortMtuSupportEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfUplinkPortVlanTrunkedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfUplinkPortVlanTrunkedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfUplinkPortVlanUntrunkedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfUplinkPortVlanUntrunkedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfUserAssignedToGroup(value) => {
                state.serialize_field("_typeName", "ArrayOfUserAssignedToGroup")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfUserLoginSessionEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfUserLoginSessionEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfUserLogoutSessionEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfUserLogoutSessionEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfUserPasswordChanged(value) => {
                state.serialize_field("_typeName", "ArrayOfUserPasswordChanged")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfUserUnassignedFromGroup(value) => {
                state.serialize_field("_typeName", "ArrayOfUserUnassignedFromGroup")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfUserUpgradeEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfUserUpgradeEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmfsDatastoreCreatedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVMFSDatastoreCreatedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmfsDatastoreExpandedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVMFSDatastoreExpandedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmfsDatastoreExtendedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVMFSDatastoreExtendedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVMotionLicenseExpiredEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVMotionLicenseExpiredEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVcAgentUninstallFailedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVcAgentUninstallFailedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVcAgentUninstalledEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVcAgentUninstalledEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVcAgentUpgradeFailedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVcAgentUpgradeFailedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVcAgentUpgradedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVcAgentUpgradedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVimAccountPasswordChangedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVimAccountPasswordChangedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmAcquiredMksTicketEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmAcquiredMksTicketEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmAcquiredTicketEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmAcquiredTicketEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmAutoRenameEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmAutoRenameEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmBeingClonedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmBeingClonedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmBeingClonedNoFolderEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmBeingClonedNoFolderEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmBeingCreatedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmBeingCreatedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmBeingDeployedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmBeingDeployedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmBeingHotMigratedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmBeingHotMigratedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmBeingMigratedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmBeingMigratedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmBeingRelocatedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmBeingRelocatedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmCloneEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmCloneEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmCloneFailedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmCloneFailedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmClonedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmClonedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmConfigMissingEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmConfigMissingEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmConnectedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmConnectedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmCreatedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmCreatedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmDasBeingResetEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmDasBeingResetEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmDasBeingResetWithScreenshotEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmDasBeingResetWithScreenshotEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmDasResetFailedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmDasResetFailedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmDasUpdateErrorEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmDasUpdateErrorEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmDasUpdateOkEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmDasUpdateOkEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmDateRolledBackEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmDateRolledBackEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmDeployFailedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmDeployFailedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmDeployedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmDeployedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmDisconnectedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmDisconnectedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmDiscoveredEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmDiscoveredEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmDiskFailedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmDiskFailedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmEmigratingEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmEmigratingEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmEndRecordingEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmEndRecordingEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmEndReplayingEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmEndReplayingEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmEventArgument(value) => {
                state.serialize_field("_typeName", "ArrayOfVmEventArgument")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmFailedMigrateEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmFailedMigrateEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmFailedRelayoutEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmFailedRelayoutEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmFailedRelayoutOnVmfs2DatastoreEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmFailedRelayoutOnVmfs2DatastoreEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmFailedStartingSecondaryEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmFailedStartingSecondaryEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmFailedToPowerOffEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmFailedToPowerOffEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmFailedToPowerOnEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmFailedToPowerOnEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmFailedToRebootGuestEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmFailedToRebootGuestEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmFailedToResetEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmFailedToResetEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmFailedToShutdownGuestEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmFailedToShutdownGuestEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmFailedToStandbyGuestEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmFailedToStandbyGuestEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmFailedToSuspendEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmFailedToSuspendEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmFailedUpdatingSecondaryConfig(value) => {
                state.serialize_field("_typeName", "ArrayOfVmFailedUpdatingSecondaryConfig")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmFailoverFailed(value) => {
                state.serialize_field("_typeName", "ArrayOfVmFailoverFailed")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmFaultToleranceStateChangedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmFaultToleranceStateChangedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmFaultToleranceTurnedOffEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmFaultToleranceTurnedOffEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmFaultToleranceVmTerminatedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmFaultToleranceVmTerminatedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmGuestOsCrashedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmGuestOSCrashedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmGuestRebootEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmGuestRebootEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmGuestShutdownEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmGuestShutdownEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmGuestStandbyEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmGuestStandbyEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmHealthMonitoringStateChangedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmHealthMonitoringStateChangedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmInstanceUuidAssignedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmInstanceUuidAssignedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmInstanceUuidChangedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmInstanceUuidChangedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmInstanceUuidConflictEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmInstanceUuidConflictEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmMacAssignedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmMacAssignedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmMacChangedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmMacChangedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmMacConflictEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmMacConflictEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmMaxFtRestartCountReached(value) => {
                state.serialize_field("_typeName", "ArrayOfVmMaxFTRestartCountReached")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmMaxRestartCountReached(value) => {
                state.serialize_field("_typeName", "ArrayOfVmMaxRestartCountReached")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmMessageErrorEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmMessageErrorEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmMessageEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmMessageEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmMessageWarningEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmMessageWarningEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmMigratedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmMigratedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmNoCompatibleHostForSecondaryEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmNoCompatibleHostForSecondaryEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmNoNetworkAccessEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmNoNetworkAccessEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmOrphanedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmOrphanedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmPowerOffOnIsolationEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmPowerOffOnIsolationEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmPoweredOffEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmPoweredOffEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmPoweredOnEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmPoweredOnEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmPoweringOnWithCustomizedDvPortEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmPoweringOnWithCustomizedDVPortEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmPrimaryFailoverEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmPrimaryFailoverEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmReconfiguredEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmReconfiguredEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmRegisteredEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmRegisteredEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmRelayoutSuccessfulEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmRelayoutSuccessfulEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmRelayoutUpToDateEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmRelayoutUpToDateEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmReloadFromPathEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmReloadFromPathEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmReloadFromPathFailedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmReloadFromPathFailedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmRelocateFailedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmRelocateFailedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmRelocateSpecEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmRelocateSpecEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmRelocatedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmRelocatedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmRemoteConsoleConnectedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmRemoteConsoleConnectedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmRemoteConsoleDisconnectedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmRemoteConsoleDisconnectedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmRemovedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmRemovedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmRenamedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmRenamedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmRequirementsExceedCurrentEvcModeEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmRequirementsExceedCurrentEVCModeEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmResettingEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmResettingEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmResourcePoolMovedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmResourcePoolMovedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmResourceReallocatedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmResourceReallocatedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmRestartedOnAlternateHostEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmRestartedOnAlternateHostEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmResumingEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmResumingEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmSecondaryAddedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmSecondaryAddedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmSecondaryDisabledBySystemEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmSecondaryDisabledBySystemEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmSecondaryDisabledEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmSecondaryDisabledEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmSecondaryEnabledEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmSecondaryEnabledEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmSecondaryStartedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmSecondaryStartedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmShutdownOnIsolationEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmShutdownOnIsolationEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmStartRecordingEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmStartRecordingEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmStartReplayingEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmStartReplayingEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmStartingEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmStartingEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmStartingSecondaryEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmStartingSecondaryEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmStaticMacConflictEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmStaticMacConflictEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmStoppingEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmStoppingEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmSuspendedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmSuspendedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmSuspendingEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmSuspendingEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmTimedoutStartingSecondaryEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmTimedoutStartingSecondaryEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmUnsupportedStartingEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmUnsupportedStartingEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmUpgradeCompleteEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmUpgradeCompleteEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmUpgradeFailedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmUpgradeFailedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmUpgradingEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmUpgradingEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmUuidAssignedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmUuidAssignedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmUuidChangedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmUuidChangedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmUuidConflictEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmUuidConflictEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmVnicPoolReservationViolationClearEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmVnicPoolReservationViolationClearEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmVnicPoolReservationViolationRaiseEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmVnicPoolReservationViolationRaiseEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmWwnAssignedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmWwnAssignedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmWwnChangedEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmWwnChangedEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmWwnConflictEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfVmWwnConflictEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVnicPortArgument(value) => {
                state.serialize_field("_typeName", "ArrayOfVnicPortArgument")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfWarningUpgradeEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfWarningUpgradeEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfIScsiBootFailureEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfIScsiBootFailureEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfExtExtendedProductInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfExtExtendedProductInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfManagedByInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfManagedByInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfExtManagedEntityInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfExtManagedEntityInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfExtSolutionManagerInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfExtSolutionManagerInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfExtSolutionManagerInfoTabInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfExtSolutionManagerInfoTabInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfActiveDirectoryFault(value) => {
                state.serialize_field("_typeName", "ArrayOfActiveDirectoryFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfActiveVMsBlockingEvc(value) => {
                state.serialize_field("_typeName", "ArrayOfActiveVMsBlockingEVC")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfAdminDisabled(value) => {
                state.serialize_field("_typeName", "ArrayOfAdminDisabled")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfAdminNotDisabled(value) => {
                state.serialize_field("_typeName", "ArrayOfAdminNotDisabled")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfAffinityConfigured(value) => {
                state.serialize_field("_typeName", "ArrayOfAffinityConfigured")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfAgentInstallFailed(value) => {
                state.serialize_field("_typeName", "ArrayOfAgentInstallFailed")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfAlreadyBeingManaged(value) => {
                state.serialize_field("_typeName", "ArrayOfAlreadyBeingManaged")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfAlreadyConnected(value) => {
                state.serialize_field("_typeName", "ArrayOfAlreadyConnected")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfAlreadyExists(value) => {
                state.serialize_field("_typeName", "ArrayOfAlreadyExists")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfAlreadyUpgraded(value) => {
                state.serialize_field("_typeName", "ArrayOfAlreadyUpgraded")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfAnswerFileUpdateFailed(value) => {
                state.serialize_field("_typeName", "ArrayOfAnswerFileUpdateFailed")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfAnswerFileUpdateFailure(value) => {
                state.serialize_field("_typeName", "ArrayOfAnswerFileUpdateFailure")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfApplicationQuiesceFault(value) => {
                state.serialize_field("_typeName", "ArrayOfApplicationQuiesceFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfAuthMinimumAdminPermission(value) => {
                state.serialize_field("_typeName", "ArrayOfAuthMinimumAdminPermission")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfBackupBlobReadFailure(value) => {
                state.serialize_field("_typeName", "ArrayOfBackupBlobReadFailure")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfBackupBlobWriteFailure(value) => {
                state.serialize_field("_typeName", "ArrayOfBackupBlobWriteFailure")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfBlockedByFirewall(value) => {
                state.serialize_field("_typeName", "ArrayOfBlockedByFirewall")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCamServerRefusedConnection(value) => {
                state.serialize_field("_typeName", "ArrayOfCAMServerRefusedConnection")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCannotAccessFile(value) => {
                state.serialize_field("_typeName", "ArrayOfCannotAccessFile")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCannotAccessLocalSource(value) => {
                state.serialize_field("_typeName", "ArrayOfCannotAccessLocalSource")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCannotAccessNetwork(value) => {
                state.serialize_field("_typeName", "ArrayOfCannotAccessNetwork")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCannotAccessVmComponent(value) => {
                state.serialize_field("_typeName", "ArrayOfCannotAccessVmComponent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCannotAccessVmConfig(value) => {
                state.serialize_field("_typeName", "ArrayOfCannotAccessVmConfig")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCannotAccessVmDevice(value) => {
                state.serialize_field("_typeName", "ArrayOfCannotAccessVmDevice")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCannotAccessVmDisk(value) => {
                state.serialize_field("_typeName", "ArrayOfCannotAccessVmDisk")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCannotAddHostWithFtVmAsStandalone(value) => {
                state.serialize_field("_typeName", "ArrayOfCannotAddHostWithFTVmAsStandalone")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCannotAddHostWithFtVmToDifferentCluster(value) => {
                state.serialize_field("_typeName", "ArrayOfCannotAddHostWithFTVmToDifferentCluster")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCannotAddHostWithFtVmToNonHaCluster(value) => {
                state.serialize_field("_typeName", "ArrayOfCannotAddHostWithFTVmToNonHACluster")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCannotChangeDrsBehaviorForFtSecondary(value) => {
                state.serialize_field("_typeName", "ArrayOfCannotChangeDrsBehaviorForFtSecondary")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCannotChangeHaSettingsForFtSecondary(value) => {
                state.serialize_field("_typeName", "ArrayOfCannotChangeHaSettingsForFtSecondary")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCannotChangeVsanClusterUuid(value) => {
                state.serialize_field("_typeName", "ArrayOfCannotChangeVsanClusterUuid")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCannotChangeVsanNodeUuid(value) => {
                state.serialize_field("_typeName", "ArrayOfCannotChangeVsanNodeUuid")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCannotComputeFtCompatibleHosts(value) => {
                state.serialize_field("_typeName", "ArrayOfCannotComputeFTCompatibleHosts")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCannotCreateFile(value) => {
                state.serialize_field("_typeName", "ArrayOfCannotCreateFile")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCannotDecryptPasswords(value) => {
                state.serialize_field("_typeName", "ArrayOfCannotDecryptPasswords")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCannotDeleteFile(value) => {
                state.serialize_field("_typeName", "ArrayOfCannotDeleteFile")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCannotDisableDrsOnClustersWithVApps(value) => {
                state.serialize_field("_typeName", "ArrayOfCannotDisableDrsOnClustersWithVApps")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCannotDisableSnapshot(value) => {
                state.serialize_field("_typeName", "ArrayOfCannotDisableSnapshot")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCannotDisconnectHostWithFaultToleranceVm(value) => {
                state.serialize_field("_typeName", "ArrayOfCannotDisconnectHostWithFaultToleranceVm")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCannotEnableVmcpForCluster(value) => {
                state.serialize_field("_typeName", "ArrayOfCannotEnableVmcpForCluster")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCannotModifyConfigCpuRequirements(value) => {
                state.serialize_field("_typeName", "ArrayOfCannotModifyConfigCpuRequirements")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCannotMoveFaultToleranceVm(value) => {
                state.serialize_field("_typeName", "ArrayOfCannotMoveFaultToleranceVm")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCannotMoveHostWithFaultToleranceVm(value) => {
                state.serialize_field("_typeName", "ArrayOfCannotMoveHostWithFaultToleranceVm")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCannotMoveVmWithDeltaDisk(value) => {
                state.serialize_field("_typeName", "ArrayOfCannotMoveVmWithDeltaDisk")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCannotMoveVmWithNativeDeltaDisk(value) => {
                state.serialize_field("_typeName", "ArrayOfCannotMoveVmWithNativeDeltaDisk")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCannotMoveVsanEnabledHost(value) => {
                state.serialize_field("_typeName", "ArrayOfCannotMoveVsanEnabledHost")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCannotPlaceWithoutPrerequisiteMoves(value) => {
                state.serialize_field("_typeName", "ArrayOfCannotPlaceWithoutPrerequisiteMoves")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCannotPowerOffVmInCluster(value) => {
                state.serialize_field("_typeName", "ArrayOfCannotPowerOffVmInCluster")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCannotReconfigureVsanWhenHaEnabled(value) => {
                state.serialize_field("_typeName", "ArrayOfCannotReconfigureVsanWhenHaEnabled")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCannotUseNetwork(value) => {
                state.serialize_field("_typeName", "ArrayOfCannotUseNetwork")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClockSkew(value) => {
                state.serialize_field("_typeName", "ArrayOfClockSkew")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCloneFromSnapshotNotSupported(value) => {
                state.serialize_field("_typeName", "ArrayOfCloneFromSnapshotNotSupported")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCollectorAddressUnset(value) => {
                state.serialize_field("_typeName", "ArrayOfCollectorAddressUnset")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfConcurrentAccess(value) => {
                state.serialize_field("_typeName", "ArrayOfConcurrentAccess")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfConflictingConfiguration(value) => {
                state.serialize_field("_typeName", "ArrayOfConflictingConfiguration")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfConflictingConfigurationConfig(value) => {
                state.serialize_field("_typeName", "ArrayOfConflictingConfigurationConfig")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfConflictingDatastoreFound(value) => {
                state.serialize_field("_typeName", "ArrayOfConflictingDatastoreFound")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfConnectedIso(value) => {
                state.serialize_field("_typeName", "ArrayOfConnectedIso")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCpuCompatibilityUnknown(value) => {
                state.serialize_field("_typeName", "ArrayOfCpuCompatibilityUnknown")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCpuHotPlugNotSupported(value) => {
                state.serialize_field("_typeName", "ArrayOfCpuHotPlugNotSupported")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCpuIncompatible(value) => {
                state.serialize_field("_typeName", "ArrayOfCpuIncompatible")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCpuIncompatible1Ecx(value) => {
                state.serialize_field("_typeName", "ArrayOfCpuIncompatible1ECX")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCpuIncompatible81Edx(value) => {
                state.serialize_field("_typeName", "ArrayOfCpuIncompatible81EDX")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCustomizationFault(value) => {
                state.serialize_field("_typeName", "ArrayOfCustomizationFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCustomizationPending(value) => {
                state.serialize_field("_typeName", "ArrayOfCustomizationPending")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvPortNotSupported(value) => {
                state.serialize_field("_typeName", "ArrayOfDVPortNotSupported")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDasConfigFault(value) => {
                state.serialize_field("_typeName", "ArrayOfDasConfigFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDatabaseError(value) => {
                state.serialize_field("_typeName", "ArrayOfDatabaseError")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDatacenterMismatch(value) => {
                state.serialize_field("_typeName", "ArrayOfDatacenterMismatch")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDatacenterMismatchArgument(value) => {
                state.serialize_field("_typeName", "ArrayOfDatacenterMismatchArgument")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDatastoreNotWritableOnHost(value) => {
                state.serialize_field("_typeName", "ArrayOfDatastoreNotWritableOnHost")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDeltaDiskFormatNotSupported(value) => {
                state.serialize_field("_typeName", "ArrayOfDeltaDiskFormatNotSupported")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDestinationSwitchFull(value) => {
                state.serialize_field("_typeName", "ArrayOfDestinationSwitchFull")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDestinationVsanDisabled(value) => {
                state.serialize_field("_typeName", "ArrayOfDestinationVsanDisabled")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDeviceBackingNotSupported(value) => {
                state.serialize_field("_typeName", "ArrayOfDeviceBackingNotSupported")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDeviceControllerNotSupported(value) => {
                state.serialize_field("_typeName", "ArrayOfDeviceControllerNotSupported")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDeviceHotPlugNotSupported(value) => {
                state.serialize_field("_typeName", "ArrayOfDeviceHotPlugNotSupported")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDeviceNotFound(value) => {
                state.serialize_field("_typeName", "ArrayOfDeviceNotFound")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDeviceNotSupported(value) => {
                state.serialize_field("_typeName", "ArrayOfDeviceNotSupported")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDeviceUnsupportedForVmPlatform(value) => {
                state.serialize_field("_typeName", "ArrayOfDeviceUnsupportedForVmPlatform")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDeviceUnsupportedForVmVersion(value) => {
                state.serialize_field("_typeName", "ArrayOfDeviceUnsupportedForVmVersion")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDigestNotSupported(value) => {
                state.serialize_field("_typeName", "ArrayOfDigestNotSupported")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDirectoryNotEmpty(value) => {
                state.serialize_field("_typeName", "ArrayOfDirectoryNotEmpty")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDisableAdminNotSupported(value) => {
                state.serialize_field("_typeName", "ArrayOfDisableAdminNotSupported")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDisallowedChangeByService(value) => {
                state.serialize_field("_typeName", "ArrayOfDisallowedChangeByService")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDisallowedDiskModeChange(value) => {
                state.serialize_field("_typeName", "ArrayOfDisallowedDiskModeChange")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDisallowedMigrationDeviceAttached(value) => {
                state.serialize_field("_typeName", "ArrayOfDisallowedMigrationDeviceAttached")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDisallowedOperationOnFailoverHost(value) => {
                state.serialize_field("_typeName", "ArrayOfDisallowedOperationOnFailoverHost")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDisconnectedHostsBlockingEvc(value) => {
                state.serialize_field("_typeName", "ArrayOfDisconnectedHostsBlockingEVC")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDiskHasPartitions(value) => {
                state.serialize_field("_typeName", "ArrayOfDiskHasPartitions")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDiskIsLastRemainingNonSsd(value) => {
                state.serialize_field("_typeName", "ArrayOfDiskIsLastRemainingNonSSD")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDiskIsNonLocal(value) => {
                state.serialize_field("_typeName", "ArrayOfDiskIsNonLocal")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDiskIsUsb(value) => {
                state.serialize_field("_typeName", "ArrayOfDiskIsUSB")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDiskMoveTypeNotSupported(value) => {
                state.serialize_field("_typeName", "ArrayOfDiskMoveTypeNotSupported")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDiskNotSupported(value) => {
                state.serialize_field("_typeName", "ArrayOfDiskNotSupported")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDiskTooSmall(value) => {
                state.serialize_field("_typeName", "ArrayOfDiskTooSmall")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDomainNotFound(value) => {
                state.serialize_field("_typeName", "ArrayOfDomainNotFound")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDrsDisabledOnVm(value) => {
                state.serialize_field("_typeName", "ArrayOfDrsDisabledOnVm")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDrsVmotionIncompatibleFault(value) => {
                state.serialize_field("_typeName", "ArrayOfDrsVmotionIncompatibleFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDuplicateDisks(value) => {
                state.serialize_field("_typeName", "ArrayOfDuplicateDisks")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDuplicateName(value) => {
                state.serialize_field("_typeName", "ArrayOfDuplicateName")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDuplicateVsanNetworkInterface(value) => {
                state.serialize_field("_typeName", "ArrayOfDuplicateVsanNetworkInterface")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsApplyOperationFault(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsApplyOperationFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsApplyOperationFaultFaultOnObject(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsApplyOperationFaultFaultOnObject")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsFault(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsNotAuthorized(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsNotAuthorized")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsOperationBulkFault(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsOperationBulkFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsOperationBulkFaultFaultOnHost(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsOperationBulkFaultFaultOnHost")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsScopeViolated(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsScopeViolated")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfEvcAdmissionFailed(value) => {
                state.serialize_field("_typeName", "ArrayOfEVCAdmissionFailed")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfEvcAdmissionFailedCpuFeaturesForMode(value) => {
                state.serialize_field("_typeName", "ArrayOfEVCAdmissionFailedCPUFeaturesForMode")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfEvcAdmissionFailedCpuModel(value) => {
                state.serialize_field("_typeName", "ArrayOfEVCAdmissionFailedCPUModel")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfEvcAdmissionFailedCpuModelForMode(value) => {
                state.serialize_field("_typeName", "ArrayOfEVCAdmissionFailedCPUModelForMode")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfEvcAdmissionFailedCpuVendor(value) => {
                state.serialize_field("_typeName", "ArrayOfEVCAdmissionFailedCPUVendor")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfEvcAdmissionFailedCpuVendorUnknown(value) => {
                state.serialize_field("_typeName", "ArrayOfEVCAdmissionFailedCPUVendorUnknown")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfEvcAdmissionFailedHostDisconnected(value) => {
                state.serialize_field("_typeName", "ArrayOfEVCAdmissionFailedHostDisconnected")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfEvcAdmissionFailedHostSoftware(value) => {
                state.serialize_field("_typeName", "ArrayOfEVCAdmissionFailedHostSoftware")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfEvcAdmissionFailedHostSoftwareForMode(value) => {
                state.serialize_field("_typeName", "ArrayOfEVCAdmissionFailedHostSoftwareForMode")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfEvcAdmissionFailedVmActive(value) => {
                state.serialize_field("_typeName", "ArrayOfEVCAdmissionFailedVmActive")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfEvcConfigFault(value) => {
                state.serialize_field("_typeName", "ArrayOfEVCConfigFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfEvcModeIllegalByVendor(value) => {
                state.serialize_field("_typeName", "ArrayOfEVCModeIllegalByVendor")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfEvcModeUnsupportedByHosts(value) => {
                state.serialize_field("_typeName", "ArrayOfEVCModeUnsupportedByHosts")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfEvcUnsupportedByHostHardware(value) => {
                state.serialize_field("_typeName", "ArrayOfEVCUnsupportedByHostHardware")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfEvcUnsupportedByHostSoftware(value) => {
                state.serialize_field("_typeName", "ArrayOfEVCUnsupportedByHostSoftware")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfEightHostLimitViolated(value) => {
                state.serialize_field("_typeName", "ArrayOfEightHostLimitViolated")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfEncryptionKeyRequired(value) => {
                state.serialize_field("_typeName", "ArrayOfEncryptionKeyRequired")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfExpiredAddonLicense(value) => {
                state.serialize_field("_typeName", "ArrayOfExpiredAddonLicense")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfExpiredEditionLicense(value) => {
                state.serialize_field("_typeName", "ArrayOfExpiredEditionLicense")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfExpiredFeatureLicense(value) => {
                state.serialize_field("_typeName", "ArrayOfExpiredFeatureLicense")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfExtendedFault(value) => {
                state.serialize_field("_typeName", "ArrayOfExtendedFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFailToEnableSpbm(value) => {
                state.serialize_field("_typeName", "ArrayOfFailToEnableSPBM")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFailToLockFaultToleranceVMs(value) => {
                state.serialize_field("_typeName", "ArrayOfFailToLockFaultToleranceVMs")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFaultToleranceAntiAffinityViolated(value) => {
                state.serialize_field("_typeName", "ArrayOfFaultToleranceAntiAffinityViolated")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFaultToleranceCannotEditMem(value) => {
                state.serialize_field("_typeName", "ArrayOfFaultToleranceCannotEditMem")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFaultToleranceCpuIncompatible(value) => {
                state.serialize_field("_typeName", "ArrayOfFaultToleranceCpuIncompatible")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFaultToleranceNeedsThickDisk(value) => {
                state.serialize_field("_typeName", "ArrayOfFaultToleranceNeedsThickDisk")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFaultToleranceNotLicensed(value) => {
                state.serialize_field("_typeName", "ArrayOfFaultToleranceNotLicensed")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFaultToleranceNotSameBuild(value) => {
                state.serialize_field("_typeName", "ArrayOfFaultToleranceNotSameBuild")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFaultTolerancePrimaryPowerOnNotAttempted(value) => {
                state.serialize_field("_typeName", "ArrayOfFaultTolerancePrimaryPowerOnNotAttempted")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFaultToleranceVmNotDasProtected(value) => {
                state.serialize_field("_typeName", "ArrayOfFaultToleranceVmNotDasProtected")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFcoeFault(value) => {
                state.serialize_field("_typeName", "ArrayOfFcoeFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFcoeFaultPnicHasNoPortSet(value) => {
                state.serialize_field("_typeName", "ArrayOfFcoeFaultPnicHasNoPortSet")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFeatureRequirementsNotMet(value) => {
                state.serialize_field("_typeName", "ArrayOfFeatureRequirementsNotMet")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFileAlreadyExists(value) => {
                state.serialize_field("_typeName", "ArrayOfFileAlreadyExists")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFileBackedPortNotSupported(value) => {
                state.serialize_field("_typeName", "ArrayOfFileBackedPortNotSupported")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFileFault(value) => {
                state.serialize_field("_typeName", "ArrayOfFileFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFileLocked(value) => {
                state.serialize_field("_typeName", "ArrayOfFileLocked")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFileNameTooLong(value) => {
                state.serialize_field("_typeName", "ArrayOfFileNameTooLong")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFileNotFound(value) => {
                state.serialize_field("_typeName", "ArrayOfFileNotFound")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFileNotWritable(value) => {
                state.serialize_field("_typeName", "ArrayOfFileNotWritable")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFileTooLarge(value) => {
                state.serialize_field("_typeName", "ArrayOfFileTooLarge")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFilesystemQuiesceFault(value) => {
                state.serialize_field("_typeName", "ArrayOfFilesystemQuiesceFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFilterInUse(value) => {
                state.serialize_field("_typeName", "ArrayOfFilterInUse")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFtIssuesOnHost(value) => {
                state.serialize_field("_typeName", "ArrayOfFtIssuesOnHost")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFullStorageVMotionNotSupported(value) => {
                state.serialize_field("_typeName", "ArrayOfFullStorageVMotionNotSupported")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGatewayConnectFault(value) => {
                state.serialize_field("_typeName", "ArrayOfGatewayConnectFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGatewayHostNotReachable(value) => {
                state.serialize_field("_typeName", "ArrayOfGatewayHostNotReachable")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGatewayNotFound(value) => {
                state.serialize_field("_typeName", "ArrayOfGatewayNotFound")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGatewayNotReachable(value) => {
                state.serialize_field("_typeName", "ArrayOfGatewayNotReachable")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGatewayOperationRefused(value) => {
                state.serialize_field("_typeName", "ArrayOfGatewayOperationRefused")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGatewayToHostAuthFault(value) => {
                state.serialize_field("_typeName", "ArrayOfGatewayToHostAuthFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGatewayToHostConnectFault(value) => {
                state.serialize_field("_typeName", "ArrayOfGatewayToHostConnectFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGatewayToHostTrustVerifyFault(value) => {
                state.serialize_field("_typeName", "ArrayOfGatewayToHostTrustVerifyFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGenericDrsFault(value) => {
                state.serialize_field("_typeName", "ArrayOfGenericDrsFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGenericVmConfigFault(value) => {
                state.serialize_field("_typeName", "ArrayOfGenericVmConfigFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGuestAuthenticationChallenge(value) => {
                state.serialize_field("_typeName", "ArrayOfGuestAuthenticationChallenge")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGuestComponentsOutOfDate(value) => {
                state.serialize_field("_typeName", "ArrayOfGuestComponentsOutOfDate")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGuestMultipleMappings(value) => {
                state.serialize_field("_typeName", "ArrayOfGuestMultipleMappings")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGuestOperationsFault(value) => {
                state.serialize_field("_typeName", "ArrayOfGuestOperationsFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGuestOperationsUnavailable(value) => {
                state.serialize_field("_typeName", "ArrayOfGuestOperationsUnavailable")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGuestPermissionDenied(value) => {
                state.serialize_field("_typeName", "ArrayOfGuestPermissionDenied")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGuestProcessNotFound(value) => {
                state.serialize_field("_typeName", "ArrayOfGuestProcessNotFound")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGuestRegistryFault(value) => {
                state.serialize_field("_typeName", "ArrayOfGuestRegistryFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGuestRegistryKeyAlreadyExists(value) => {
                state.serialize_field("_typeName", "ArrayOfGuestRegistryKeyAlreadyExists")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGuestRegistryKeyFault(value) => {
                state.serialize_field("_typeName", "ArrayOfGuestRegistryKeyFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGuestRegistryKeyHasSubkeys(value) => {
                state.serialize_field("_typeName", "ArrayOfGuestRegistryKeyHasSubkeys")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGuestRegistryKeyInvalid(value) => {
                state.serialize_field("_typeName", "ArrayOfGuestRegistryKeyInvalid")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGuestRegistryKeyParentVolatile(value) => {
                state.serialize_field("_typeName", "ArrayOfGuestRegistryKeyParentVolatile")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGuestRegistryValueFault(value) => {
                state.serialize_field("_typeName", "ArrayOfGuestRegistryValueFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGuestRegistryValueNotFound(value) => {
                state.serialize_field("_typeName", "ArrayOfGuestRegistryValueNotFound")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHaErrorsAtDest(value) => {
                state.serialize_field("_typeName", "ArrayOfHAErrorsAtDest")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHeterogenousHostsBlockingEvc(value) => {
                state.serialize_field("_typeName", "ArrayOfHeterogenousHostsBlockingEVC")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostAccessRestrictedToManagementServer(value) => {
                state.serialize_field("_typeName", "ArrayOfHostAccessRestrictedToManagementServer")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostConfigFailed(value) => {
                state.serialize_field("_typeName", "ArrayOfHostConfigFailed")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostConfigFault(value) => {
                state.serialize_field("_typeName", "ArrayOfHostConfigFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostConnectFault(value) => {
                state.serialize_field("_typeName", "ArrayOfHostConnectFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostHasComponentFailure(value) => {
                state.serialize_field("_typeName", "ArrayOfHostHasComponentFailure")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostInDomain(value) => {
                state.serialize_field("_typeName", "ArrayOfHostInDomain")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostIncompatibleForFaultTolerance(value) => {
                state.serialize_field("_typeName", "ArrayOfHostIncompatibleForFaultTolerance")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostIncompatibleForRecordReplay(value) => {
                state.serialize_field("_typeName", "ArrayOfHostIncompatibleForRecordReplay")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostInventoryFull(value) => {
                state.serialize_field("_typeName", "ArrayOfHostInventoryFull")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostPowerOpFailed(value) => {
                state.serialize_field("_typeName", "ArrayOfHostPowerOpFailed")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostSpecificationOperationFailed(value) => {
                state.serialize_field("_typeName", "ArrayOfHostSpecificationOperationFailed")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHotSnapshotMoveNotSupported(value) => {
                state.serialize_field("_typeName", "ArrayOfHotSnapshotMoveNotSupported")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHttpFault(value) => {
                state.serialize_field("_typeName", "ArrayOfHttpFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfIdeDiskNotSupported(value) => {
                state.serialize_field("_typeName", "ArrayOfIDEDiskNotSupported")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfIormNotSupportedHostOnDatastore(value) => {
                state.serialize_field("_typeName", "ArrayOfIORMNotSupportedHostOnDatastore")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfImportHostAddFailure(value) => {
                state.serialize_field("_typeName", "ArrayOfImportHostAddFailure")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfImportOperationBulkFault(value) => {
                state.serialize_field("_typeName", "ArrayOfImportOperationBulkFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfImportOperationBulkFaultFaultOnImport(value) => {
                state.serialize_field("_typeName", "ArrayOfImportOperationBulkFaultFaultOnImport")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInUseFeatureManipulationDisallowed(value) => {
                state.serialize_field("_typeName", "ArrayOfInUseFeatureManipulationDisallowed")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInaccessibleDatastore(value) => {
                state.serialize_field("_typeName", "ArrayOfInaccessibleDatastore")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInaccessibleFtMetadataDatastore(value) => {
                state.serialize_field("_typeName", "ArrayOfInaccessibleFTMetadataDatastore")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInaccessibleVFlashSource(value) => {
                state.serialize_field("_typeName", "ArrayOfInaccessibleVFlashSource")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfIncompatibleDefaultDevice(value) => {
                state.serialize_field("_typeName", "ArrayOfIncompatibleDefaultDevice")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfIncompatibleHostForFtSecondary(value) => {
                state.serialize_field("_typeName", "ArrayOfIncompatibleHostForFtSecondary")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfIncompatibleHostForVmReplication(value) => {
                state.serialize_field("_typeName", "ArrayOfIncompatibleHostForVmReplication")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfIncompatibleSetting(value) => {
                state.serialize_field("_typeName", "ArrayOfIncompatibleSetting")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfIncorrectFileType(value) => {
                state.serialize_field("_typeName", "ArrayOfIncorrectFileType")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfIncorrectHostInformation(value) => {
                state.serialize_field("_typeName", "ArrayOfIncorrectHostInformation")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfIndependentDiskVMotionNotSupported(value) => {
                state.serialize_field("_typeName", "ArrayOfIndependentDiskVMotionNotSupported")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInsufficientAgentVmsDeployed(value) => {
                state.serialize_field("_typeName", "ArrayOfInsufficientAgentVmsDeployed")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInsufficientCpuResourcesFault(value) => {
                state.serialize_field("_typeName", "ArrayOfInsufficientCpuResourcesFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInsufficientDisks(value) => {
                state.serialize_field("_typeName", "ArrayOfInsufficientDisks")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInsufficientFailoverResourcesFault(value) => {
                state.serialize_field("_typeName", "ArrayOfInsufficientFailoverResourcesFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInsufficientGraphicsResourcesFault(value) => {
                state.serialize_field("_typeName", "ArrayOfInsufficientGraphicsResourcesFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInsufficientHostCapacityFault(value) => {
                state.serialize_field("_typeName", "ArrayOfInsufficientHostCapacityFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInsufficientHostCpuCapacityFault(value) => {
                state.serialize_field("_typeName", "ArrayOfInsufficientHostCpuCapacityFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInsufficientHostMemoryCapacityFault(value) => {
                state.serialize_field("_typeName", "ArrayOfInsufficientHostMemoryCapacityFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInsufficientMemoryResourcesFault(value) => {
                state.serialize_field("_typeName", "ArrayOfInsufficientMemoryResourcesFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInsufficientNetworkCapacity(value) => {
                state.serialize_field("_typeName", "ArrayOfInsufficientNetworkCapacity")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInsufficientNetworkResourcePoolCapacity(value) => {
                state.serialize_field("_typeName", "ArrayOfInsufficientNetworkResourcePoolCapacity")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInsufficientPerCpuCapacity(value) => {
                state.serialize_field("_typeName", "ArrayOfInsufficientPerCpuCapacity")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInsufficientResourcesFault(value) => {
                state.serialize_field("_typeName", "ArrayOfInsufficientResourcesFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInsufficientStandbyCpuResource(value) => {
                state.serialize_field("_typeName", "ArrayOfInsufficientStandbyCpuResource")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInsufficientStandbyMemoryResource(value) => {
                state.serialize_field("_typeName", "ArrayOfInsufficientStandbyMemoryResource")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInsufficientStandbyResource(value) => {
                state.serialize_field("_typeName", "ArrayOfInsufficientStandbyResource")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInsufficientStorageIops(value) => {
                state.serialize_field("_typeName", "ArrayOfInsufficientStorageIops")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInsufficientStorageSpace(value) => {
                state.serialize_field("_typeName", "ArrayOfInsufficientStorageSpace")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInsufficientVFlashResourcesFault(value) => {
                state.serialize_field("_typeName", "ArrayOfInsufficientVFlashResourcesFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInvalidAffinitySettingFault(value) => {
                state.serialize_field("_typeName", "ArrayOfInvalidAffinitySettingFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInvalidBmcRole(value) => {
                state.serialize_field("_typeName", "ArrayOfInvalidBmcRole")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInvalidBundle(value) => {
                state.serialize_field("_typeName", "ArrayOfInvalidBundle")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInvalidCamCertificate(value) => {
                state.serialize_field("_typeName", "ArrayOfInvalidCAMCertificate")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInvalidCamServer(value) => {
                state.serialize_field("_typeName", "ArrayOfInvalidCAMServer")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInvalidClientCertificate(value) => {
                state.serialize_field("_typeName", "ArrayOfInvalidClientCertificate")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInvalidController(value) => {
                state.serialize_field("_typeName", "ArrayOfInvalidController")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInvalidDasConfigArgument(value) => {
                state.serialize_field("_typeName", "ArrayOfInvalidDasConfigArgument")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInvalidDasRestartPriorityForFtVm(value) => {
                state.serialize_field("_typeName", "ArrayOfInvalidDasRestartPriorityForFtVm")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInvalidDatastore(value) => {
                state.serialize_field("_typeName", "ArrayOfInvalidDatastore")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInvalidDatastorePath(value) => {
                state.serialize_field("_typeName", "ArrayOfInvalidDatastorePath")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInvalidDatastoreState(value) => {
                state.serialize_field("_typeName", "ArrayOfInvalidDatastoreState")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInvalidDeviceBacking(value) => {
                state.serialize_field("_typeName", "ArrayOfInvalidDeviceBacking")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInvalidDeviceOperation(value) => {
                state.serialize_field("_typeName", "ArrayOfInvalidDeviceOperation")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInvalidDeviceSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfInvalidDeviceSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInvalidDiskFormat(value) => {
                state.serialize_field("_typeName", "ArrayOfInvalidDiskFormat")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInvalidDrsBehaviorForFtVm(value) => {
                state.serialize_field("_typeName", "ArrayOfInvalidDrsBehaviorForFtVm")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInvalidEditionLicense(value) => {
                state.serialize_field("_typeName", "ArrayOfInvalidEditionLicense")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInvalidEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfInvalidEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInvalidFolder(value) => {
                state.serialize_field("_typeName", "ArrayOfInvalidFolder")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInvalidFormat(value) => {
                state.serialize_field("_typeName", "ArrayOfInvalidFormat")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInvalidGuestLogin(value) => {
                state.serialize_field("_typeName", "ArrayOfInvalidGuestLogin")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInvalidHostConnectionState(value) => {
                state.serialize_field("_typeName", "ArrayOfInvalidHostConnectionState")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInvalidHostName(value) => {
                state.serialize_field("_typeName", "ArrayOfInvalidHostName")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInvalidHostState(value) => {
                state.serialize_field("_typeName", "ArrayOfInvalidHostState")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInvalidIndexArgument(value) => {
                state.serialize_field("_typeName", "ArrayOfInvalidIndexArgument")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInvalidIpfixConfig(value) => {
                state.serialize_field("_typeName", "ArrayOfInvalidIpfixConfig")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInvalidIpmiLoginInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfInvalidIpmiLoginInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInvalidIpmiMacAddress(value) => {
                state.serialize_field("_typeName", "ArrayOfInvalidIpmiMacAddress")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInvalidLicense(value) => {
                state.serialize_field("_typeName", "ArrayOfInvalidLicense")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInvalidLocale(value) => {
                state.serialize_field("_typeName", "ArrayOfInvalidLocale")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInvalidLogin(value) => {
                state.serialize_field("_typeName", "ArrayOfInvalidLogin")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInvalidName(value) => {
                state.serialize_field("_typeName", "ArrayOfInvalidName")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInvalidNasCredentials(value) => {
                state.serialize_field("_typeName", "ArrayOfInvalidNasCredentials")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInvalidNetworkInType(value) => {
                state.serialize_field("_typeName", "ArrayOfInvalidNetworkInType")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInvalidNetworkResource(value) => {
                state.serialize_field("_typeName", "ArrayOfInvalidNetworkResource")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInvalidOperationOnSecondaryVm(value) => {
                state.serialize_field("_typeName", "ArrayOfInvalidOperationOnSecondaryVm")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInvalidPowerState(value) => {
                state.serialize_field("_typeName", "ArrayOfInvalidPowerState")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInvalidPrivilege(value) => {
                state.serialize_field("_typeName", "ArrayOfInvalidPrivilege")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInvalidProfileReferenceHost(value) => {
                state.serialize_field("_typeName", "ArrayOfInvalidProfileReferenceHost")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInvalidPropertyType(value) => {
                state.serialize_field("_typeName", "ArrayOfInvalidPropertyType")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInvalidPropertyValue(value) => {
                state.serialize_field("_typeName", "ArrayOfInvalidPropertyValue")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInvalidResourcePoolStructureFault(value) => {
                state.serialize_field("_typeName", "ArrayOfInvalidResourcePoolStructureFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInvalidScheduledTask(value) => {
                state.serialize_field("_typeName", "ArrayOfInvalidScheduledTask")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInvalidSnapshotFormat(value) => {
                state.serialize_field("_typeName", "ArrayOfInvalidSnapshotFormat")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInvalidState(value) => {
                state.serialize_field("_typeName", "ArrayOfInvalidState")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInvalidVmConfig(value) => {
                state.serialize_field("_typeName", "ArrayOfInvalidVmConfig")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInvalidVmState(value) => {
                state.serialize_field("_typeName", "ArrayOfInvalidVmState")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInventoryHasStandardAloneHosts(value) => {
                state.serialize_field("_typeName", "ArrayOfInventoryHasStandardAloneHosts")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfIpHostnameGeneratorError(value) => {
                state.serialize_field("_typeName", "ArrayOfIpHostnameGeneratorError")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfIscsiFault(value) => {
                state.serialize_field("_typeName", "ArrayOfIscsiFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfIscsiFaultInvalidVnic(value) => {
                state.serialize_field("_typeName", "ArrayOfIscsiFaultInvalidVnic")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfIscsiFaultPnicInUse(value) => {
                state.serialize_field("_typeName", "ArrayOfIscsiFaultPnicInUse")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfIscsiFaultVnicAlreadyBound(value) => {
                state.serialize_field("_typeName", "ArrayOfIscsiFaultVnicAlreadyBound")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfIscsiFaultVnicHasActivePaths(value) => {
                state.serialize_field("_typeName", "ArrayOfIscsiFaultVnicHasActivePaths")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfIscsiFaultVnicHasMultipleUplinks(value) => {
                state.serialize_field("_typeName", "ArrayOfIscsiFaultVnicHasMultipleUplinks")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfIscsiFaultVnicHasNoUplinks(value) => {
                state.serialize_field("_typeName", "ArrayOfIscsiFaultVnicHasNoUplinks")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfIscsiFaultVnicHasWrongUplink(value) => {
                state.serialize_field("_typeName", "ArrayOfIscsiFaultVnicHasWrongUplink")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfIscsiFaultVnicInUse(value) => {
                state.serialize_field("_typeName", "ArrayOfIscsiFaultVnicInUse")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfIscsiFaultVnicIsLastPath(value) => {
                state.serialize_field("_typeName", "ArrayOfIscsiFaultVnicIsLastPath")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfIscsiFaultVnicNotBound(value) => {
                state.serialize_field("_typeName", "ArrayOfIscsiFaultVnicNotBound")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfIscsiFaultVnicNotFound(value) => {
                state.serialize_field("_typeName", "ArrayOfIscsiFaultVnicNotFound")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfKeyNotFound(value) => {
                state.serialize_field("_typeName", "ArrayOfKeyNotFound")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfLargeRdmConversionNotSupported(value) => {
                state.serialize_field("_typeName", "ArrayOfLargeRDMConversionNotSupported")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfLargeRdmNotSupportedOnDatastore(value) => {
                state.serialize_field("_typeName", "ArrayOfLargeRDMNotSupportedOnDatastore")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfLegacyNetworkInterfaceInUse(value) => {
                state.serialize_field("_typeName", "ArrayOfLegacyNetworkInterfaceInUse")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfLicenseAssignmentFailed(value) => {
                state.serialize_field("_typeName", "ArrayOfLicenseAssignmentFailed")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfLicenseDowngradeDisallowed(value) => {
                state.serialize_field("_typeName", "ArrayOfLicenseDowngradeDisallowed")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfLicenseEntityNotFound(value) => {
                state.serialize_field("_typeName", "ArrayOfLicenseEntityNotFound")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfLicenseExpired(value) => {
                state.serialize_field("_typeName", "ArrayOfLicenseExpired")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfLicenseKeyEntityMismatch(value) => {
                state.serialize_field("_typeName", "ArrayOfLicenseKeyEntityMismatch")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfLicenseRestricted(value) => {
                state.serialize_field("_typeName", "ArrayOfLicenseRestricted")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfLicenseServerUnavailable(value) => {
                state.serialize_field("_typeName", "ArrayOfLicenseServerUnavailable")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfLicenseSourceUnavailable(value) => {
                state.serialize_field("_typeName", "ArrayOfLicenseSourceUnavailable")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfLimitExceeded(value) => {
                state.serialize_field("_typeName", "ArrayOfLimitExceeded")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfLinuxVolumeNotClean(value) => {
                state.serialize_field("_typeName", "ArrayOfLinuxVolumeNotClean")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfLogBundlingFailed(value) => {
                state.serialize_field("_typeName", "ArrayOfLogBundlingFailed")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfMaintenanceModeFileMove(value) => {
                state.serialize_field("_typeName", "ArrayOfMaintenanceModeFileMove")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfMemoryFileFormatNotSupportedByDatastore(value) => {
                state.serialize_field("_typeName", "ArrayOfMemoryFileFormatNotSupportedByDatastore")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfMemoryHotPlugNotSupported(value) => {
                state.serialize_field("_typeName", "ArrayOfMemoryHotPlugNotSupported")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfMemorySizeNotRecommended(value) => {
                state.serialize_field("_typeName", "ArrayOfMemorySizeNotRecommended")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfMemorySizeNotSupported(value) => {
                state.serialize_field("_typeName", "ArrayOfMemorySizeNotSupported")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfMemorySizeNotSupportedByDatastore(value) => {
                state.serialize_field("_typeName", "ArrayOfMemorySizeNotSupportedByDatastore")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfMemorySnapshotOnIndependentDisk(value) => {
                state.serialize_field("_typeName", "ArrayOfMemorySnapshotOnIndependentDisk")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfMethodAlreadyDisabledFault(value) => {
                state.serialize_field("_typeName", "ArrayOfMethodAlreadyDisabledFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfMethodDisabled(value) => {
                state.serialize_field("_typeName", "ArrayOfMethodDisabled")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfMigrationDisabled(value) => {
                state.serialize_field("_typeName", "ArrayOfMigrationDisabled")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfMigrationFault(value) => {
                state.serialize_field("_typeName", "ArrayOfMigrationFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfMigrationFeatureNotSupported(value) => {
                state.serialize_field("_typeName", "ArrayOfMigrationFeatureNotSupported")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfMigrationNotReady(value) => {
                state.serialize_field("_typeName", "ArrayOfMigrationNotReady")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfMismatchedBundle(value) => {
                state.serialize_field("_typeName", "ArrayOfMismatchedBundle")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfMismatchedNetworkPolicies(value) => {
                state.serialize_field("_typeName", "ArrayOfMismatchedNetworkPolicies")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfMismatchedVMotionNetworkNames(value) => {
                state.serialize_field("_typeName", "ArrayOfMismatchedVMotionNetworkNames")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfMissingBmcSupport(value) => {
                state.serialize_field("_typeName", "ArrayOfMissingBmcSupport")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfMissingController(value) => {
                state.serialize_field("_typeName", "ArrayOfMissingController")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfMissingIpPool(value) => {
                state.serialize_field("_typeName", "ArrayOfMissingIpPool")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfMissingLinuxCustResources(value) => {
                state.serialize_field("_typeName", "ArrayOfMissingLinuxCustResources")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfMissingNetworkIpConfig(value) => {
                state.serialize_field("_typeName", "ArrayOfMissingNetworkIpConfig")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfMissingPowerOffConfiguration(value) => {
                state.serialize_field("_typeName", "ArrayOfMissingPowerOffConfiguration")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfMissingPowerOnConfiguration(value) => {
                state.serialize_field("_typeName", "ArrayOfMissingPowerOnConfiguration")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfMissingWindowsCustResources(value) => {
                state.serialize_field("_typeName", "ArrayOfMissingWindowsCustResources")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfMksConnectionLimitReached(value) => {
                state.serialize_field("_typeName", "ArrayOfMksConnectionLimitReached")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfMountError(value) => {
                state.serialize_field("_typeName", "ArrayOfMountError")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfMultiWriterNotSupported(value) => {
                state.serialize_field("_typeName", "ArrayOfMultiWriterNotSupported")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfMultipleCertificatesVerifyFault(value) => {
                state.serialize_field("_typeName", "ArrayOfMultipleCertificatesVerifyFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfMultipleCertificatesVerifyFaultThumbprintData(value) => {
                state.serialize_field("_typeName", "ArrayOfMultipleCertificatesVerifyFaultThumbprintData")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfMultipleSnapshotsNotSupported(value) => {
                state.serialize_field("_typeName", "ArrayOfMultipleSnapshotsNotSupported")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNamespaceFull(value) => {
                state.serialize_field("_typeName", "ArrayOfNamespaceFull")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNamespaceLimitReached(value) => {
                state.serialize_field("_typeName", "ArrayOfNamespaceLimitReached")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNamespaceWriteProtected(value) => {
                state.serialize_field("_typeName", "ArrayOfNamespaceWriteProtected")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNasConfigFault(value) => {
                state.serialize_field("_typeName", "ArrayOfNasConfigFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNasConnectionLimitReached(value) => {
                state.serialize_field("_typeName", "ArrayOfNasConnectionLimitReached")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNasSessionCredentialConflict(value) => {
                state.serialize_field("_typeName", "ArrayOfNasSessionCredentialConflict")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNasVolumeNotMounted(value) => {
                state.serialize_field("_typeName", "ArrayOfNasVolumeNotMounted")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNetworkCopyFault(value) => {
                state.serialize_field("_typeName", "ArrayOfNetworkCopyFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNetworkDisruptedAndConfigRolledBack(value) => {
                state.serialize_field("_typeName", "ArrayOfNetworkDisruptedAndConfigRolledBack")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNetworkInaccessible(value) => {
                state.serialize_field("_typeName", "ArrayOfNetworkInaccessible")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNetworksMayNotBeTheSame(value) => {
                state.serialize_field("_typeName", "ArrayOfNetworksMayNotBeTheSame")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNicSettingMismatch(value) => {
                state.serialize_field("_typeName", "ArrayOfNicSettingMismatch")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNoActiveHostInCluster(value) => {
                state.serialize_field("_typeName", "ArrayOfNoActiveHostInCluster")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNoAvailableIp(value) => {
                state.serialize_field("_typeName", "ArrayOfNoAvailableIp")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNoClientCertificate(value) => {
                state.serialize_field("_typeName", "ArrayOfNoClientCertificate")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNoCompatibleDatastore(value) => {
                state.serialize_field("_typeName", "ArrayOfNoCompatibleDatastore")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNoCompatibleHardAffinityHost(value) => {
                state.serialize_field("_typeName", "ArrayOfNoCompatibleHardAffinityHost")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNoCompatibleHost(value) => {
                state.serialize_field("_typeName", "ArrayOfNoCompatibleHost")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNoCompatibleHostWithAccessToDevice(value) => {
                state.serialize_field("_typeName", "ArrayOfNoCompatibleHostWithAccessToDevice")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNoCompatibleSoftAffinityHost(value) => {
                state.serialize_field("_typeName", "ArrayOfNoCompatibleSoftAffinityHost")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNoConnectedDatastore(value) => {
                state.serialize_field("_typeName", "ArrayOfNoConnectedDatastore")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNoDiskFound(value) => {
                state.serialize_field("_typeName", "ArrayOfNoDiskFound")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNoDiskSpace(value) => {
                state.serialize_field("_typeName", "ArrayOfNoDiskSpace")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNoDisksToCustomize(value) => {
                state.serialize_field("_typeName", "ArrayOfNoDisksToCustomize")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNoGateway(value) => {
                state.serialize_field("_typeName", "ArrayOfNoGateway")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNoGuestHeartbeat(value) => {
                state.serialize_field("_typeName", "ArrayOfNoGuestHeartbeat")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNoHost(value) => {
                state.serialize_field("_typeName", "ArrayOfNoHost")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNoHostSuitableForFtSecondary(value) => {
                state.serialize_field("_typeName", "ArrayOfNoHostSuitableForFtSecondary")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNoLicenseServerConfigured(value) => {
                state.serialize_field("_typeName", "ArrayOfNoLicenseServerConfigured")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNoPeerHostFound(value) => {
                state.serialize_field("_typeName", "ArrayOfNoPeerHostFound")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNoPermission(value) => {
                state.serialize_field("_typeName", "ArrayOfNoPermission")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNoPermissionEntityPrivileges(value) => {
                state.serialize_field("_typeName", "ArrayOfNoPermissionEntityPrivileges")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNoPermissionOnAd(value) => {
                state.serialize_field("_typeName", "ArrayOfNoPermissionOnAD")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNoPermissionOnHost(value) => {
                state.serialize_field("_typeName", "ArrayOfNoPermissionOnHost")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNoPermissionOnNasVolume(value) => {
                state.serialize_field("_typeName", "ArrayOfNoPermissionOnNasVolume")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNoSubjectName(value) => {
                state.serialize_field("_typeName", "ArrayOfNoSubjectName")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNoVcManagedIpConfigured(value) => {
                state.serialize_field("_typeName", "ArrayOfNoVcManagedIpConfigured")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNoVirtualNic(value) => {
                state.serialize_field("_typeName", "ArrayOfNoVirtualNic")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNoVmInVApp(value) => {
                state.serialize_field("_typeName", "ArrayOfNoVmInVApp")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNonAdUserRequired(value) => {
                state.serialize_field("_typeName", "ArrayOfNonADUserRequired")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNonHomeRdmvMotionNotSupported(value) => {
                state.serialize_field("_typeName", "ArrayOfNonHomeRDMVMotionNotSupported")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNonPersistentDisksNotSupported(value) => {
                state.serialize_field("_typeName", "ArrayOfNonPersistentDisksNotSupported")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNonVmwareOuiMacNotSupportedHost(value) => {
                state.serialize_field("_typeName", "ArrayOfNonVmwareOuiMacNotSupportedHost")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNotADirectory(value) => {
                state.serialize_field("_typeName", "ArrayOfNotADirectory")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNotAFile(value) => {
                state.serialize_field("_typeName", "ArrayOfNotAFile")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNotAuthenticated(value) => {
                state.serialize_field("_typeName", "ArrayOfNotAuthenticated")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNotEnoughCpus(value) => {
                state.serialize_field("_typeName", "ArrayOfNotEnoughCpus")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNotEnoughLogicalCpus(value) => {
                state.serialize_field("_typeName", "ArrayOfNotEnoughLogicalCpus")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNotFound(value) => {
                state.serialize_field("_typeName", "ArrayOfNotFound")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNotSupportedDeviceForFt(value) => {
                state.serialize_field("_typeName", "ArrayOfNotSupportedDeviceForFT")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNotSupportedHost(value) => {
                state.serialize_field("_typeName", "ArrayOfNotSupportedHost")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNotSupportedHostForChecksum(value) => {
                state.serialize_field("_typeName", "ArrayOfNotSupportedHostForChecksum")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNotSupportedHostForVFlash(value) => {
                state.serialize_field("_typeName", "ArrayOfNotSupportedHostForVFlash")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNotSupportedHostForVmcp(value) => {
                state.serialize_field("_typeName", "ArrayOfNotSupportedHostForVmcp")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNotSupportedHostForVmemFile(value) => {
                state.serialize_field("_typeName", "ArrayOfNotSupportedHostForVmemFile")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNotSupportedHostForVsan(value) => {
                state.serialize_field("_typeName", "ArrayOfNotSupportedHostForVsan")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNotSupportedHostInCluster(value) => {
                state.serialize_field("_typeName", "ArrayOfNotSupportedHostInCluster")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNotSupportedHostInDvs(value) => {
                state.serialize_field("_typeName", "ArrayOfNotSupportedHostInDvs")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNotSupportedHostInHaCluster(value) => {
                state.serialize_field("_typeName", "ArrayOfNotSupportedHostInHACluster")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNotUserConfigurableProperty(value) => {
                state.serialize_field("_typeName", "ArrayOfNotUserConfigurableProperty")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNumVirtualCoresPerSocketNotSupported(value) => {
                state.serialize_field("_typeName", "ArrayOfNumVirtualCoresPerSocketNotSupported")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNumVirtualCpusExceedsLimit(value) => {
                state.serialize_field("_typeName", "ArrayOfNumVirtualCpusExceedsLimit")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNumVirtualCpusIncompatible(value) => {
                state.serialize_field("_typeName", "ArrayOfNumVirtualCpusIncompatible")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNumVirtualCpusNotSupported(value) => {
                state.serialize_field("_typeName", "ArrayOfNumVirtualCpusNotSupported")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOperationDisabledByGuest(value) => {
                state.serialize_field("_typeName", "ArrayOfOperationDisabledByGuest")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOperationDisallowedOnHost(value) => {
                state.serialize_field("_typeName", "ArrayOfOperationDisallowedOnHost")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOperationNotSupportedByGuest(value) => {
                state.serialize_field("_typeName", "ArrayOfOperationNotSupportedByGuest")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOutOfBounds(value) => {
                state.serialize_field("_typeName", "ArrayOfOutOfBounds")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfAttribute(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfAttribute")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfConnectedDevice(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfConnectedDevice")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfConnectedDeviceFloppy(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfConnectedDeviceFloppy")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfConnectedDeviceIso(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfConnectedDeviceIso")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfConstraint(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfConstraint")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfConsumerCallbackFault(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfConsumerCallbackFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfConsumerCommunicationError(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfConsumerCommunicationError")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfConsumerFault(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfConsumerFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfConsumerInvalidSection(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfConsumerInvalidSection")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfConsumerPowerOnFault(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfConsumerPowerOnFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfConsumerUndeclaredSection(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfConsumerUndeclaredSection")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfConsumerUndefinedPrefix(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfConsumerUndefinedPrefix")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfConsumerValidationFault(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfConsumerValidationFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfCpuCompatibility(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfCpuCompatibility")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfCpuCompatibilityCheckNotSupported(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfCpuCompatibilityCheckNotSupported")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfDiskMappingNotFound(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfDiskMappingNotFound")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfDiskOrderConstraint(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfDiskOrderConstraint")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfDuplicateElement(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfDuplicateElement")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfDuplicatedElementBoundary(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfDuplicatedElementBoundary")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfDuplicatedPropertyIdExport(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfDuplicatedPropertyIdExport")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfDuplicatedPropertyIdImport(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfDuplicatedPropertyIdImport")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfElement(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfElement")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfElementInvalidValue(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfElementInvalidValue")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfExport(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfExport")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfExportFailed(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfExportFailed")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfFault(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfHardwareCheck(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfHardwareCheck")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfHardwareExport(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfHardwareExport")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfHostResourceConstraint(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfHostResourceConstraint")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfHostValueNotParsed(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfHostValueNotParsed")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfImport(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfImport")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfImportFailed(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfImportFailed")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfInternalError(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfInternalError")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfInvalidPackage(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfInvalidPackage")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfInvalidValue(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfInvalidValue")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfInvalidValueConfiguration(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfInvalidValueConfiguration")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfInvalidValueEmpty(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfInvalidValueEmpty")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfInvalidValueFormatMalformed(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfInvalidValueFormatMalformed")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfInvalidValueReference(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfInvalidValueReference")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfInvalidVmName(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfInvalidVmName")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfMappedOsId(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfMappedOsId")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfMissingAttribute(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfMissingAttribute")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfMissingElement(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfMissingElement")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfMissingElementNormalBoundary(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfMissingElementNormalBoundary")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfMissingHardware(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfMissingHardware")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfNetworkMappingNotSupported(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfNetworkMappingNotSupported")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfNoHostNic(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfNoHostNic")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfNoSpaceOnController(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfNoSpaceOnController")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfNoSupportedHardwareFamily(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfNoSupportedHardwareFamily")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfProperty(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfProperty")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfPropertyExport(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfPropertyExport")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfPropertyNetwork(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfPropertyNetwork")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfPropertyNetworkExport(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfPropertyNetworkExport")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfPropertyQualifier(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfPropertyQualifier")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfPropertyQualifierDuplicate(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfPropertyQualifierDuplicate")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfPropertyQualifierIgnored(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfPropertyQualifierIgnored")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfPropertyType(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfPropertyType")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfPropertyValue(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfPropertyValue")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfSystemFault(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfSystemFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfToXmlUnsupportedElement(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfToXmlUnsupportedElement")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfUnableToExportDisk(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfUnableToExportDisk")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfUnexpectedElement(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfUnexpectedElement")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfUnknownDevice(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfUnknownDevice")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfUnknownDeviceBacking(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfUnknownDeviceBacking")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfUnknownEntity(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfUnknownEntity")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfUnsupportedAttribute(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfUnsupportedAttribute")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfUnsupportedAttributeValue(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfUnsupportedAttributeValue")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfUnsupportedDeviceBackingInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfUnsupportedDeviceBackingInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfUnsupportedDeviceBackingOption(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfUnsupportedDeviceBackingOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfUnsupportedDeviceExport(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfUnsupportedDeviceExport")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfUnsupportedDiskProvisioning(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfUnsupportedDiskProvisioning")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfUnsupportedElement(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfUnsupportedElement")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfUnsupportedElementValue(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfUnsupportedElementValue")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfUnsupportedPackage(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfUnsupportedPackage")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfUnsupportedSection(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfUnsupportedSection")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfUnsupportedSubType(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfUnsupportedSubType")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfUnsupportedType(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfUnsupportedType")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfWrongElement(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfWrongElement")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfWrongNamespace(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfWrongNamespace")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOvfXmlFormat(value) => {
                state.serialize_field("_typeName", "ArrayOfOvfXmlFormat")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPasswordExpired(value) => {
                state.serialize_field("_typeName", "ArrayOfPasswordExpired")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPatchAlreadyInstalled(value) => {
                state.serialize_field("_typeName", "ArrayOfPatchAlreadyInstalled")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPatchBinariesNotFound(value) => {
                state.serialize_field("_typeName", "ArrayOfPatchBinariesNotFound")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPatchInstallFailed(value) => {
                state.serialize_field("_typeName", "ArrayOfPatchInstallFailed")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPatchIntegrityError(value) => {
                state.serialize_field("_typeName", "ArrayOfPatchIntegrityError")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPatchMetadataCorrupted(value) => {
                state.serialize_field("_typeName", "ArrayOfPatchMetadataCorrupted")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPatchMetadataInvalid(value) => {
                state.serialize_field("_typeName", "ArrayOfPatchMetadataInvalid")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPatchMetadataNotFound(value) => {
                state.serialize_field("_typeName", "ArrayOfPatchMetadataNotFound")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPatchMissingDependencies(value) => {
                state.serialize_field("_typeName", "ArrayOfPatchMissingDependencies")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPatchNotApplicable(value) => {
                state.serialize_field("_typeName", "ArrayOfPatchNotApplicable")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPatchSuperseded(value) => {
                state.serialize_field("_typeName", "ArrayOfPatchSuperseded")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPhysCompatRdmNotSupported(value) => {
                state.serialize_field("_typeName", "ArrayOfPhysCompatRDMNotSupported")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPlatformConfigFault(value) => {
                state.serialize_field("_typeName", "ArrayOfPlatformConfigFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPowerOnFtSecondaryFailed(value) => {
                state.serialize_field("_typeName", "ArrayOfPowerOnFtSecondaryFailed")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPowerOnFtSecondaryTimedout(value) => {
                state.serialize_field("_typeName", "ArrayOfPowerOnFtSecondaryTimedout")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfProfileUpdateFailed(value) => {
                state.serialize_field("_typeName", "ArrayOfProfileUpdateFailed")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfProfileUpdateFailedUpdateFailure(value) => {
                state.serialize_field("_typeName", "ArrayOfProfileUpdateFailedUpdateFailure")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfQuarantineModeFault(value) => {
                state.serialize_field("_typeName", "ArrayOfQuarantineModeFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfQuestionPending(value) => {
                state.serialize_field("_typeName", "ArrayOfQuestionPending")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfQuiesceDatastoreIoForHaFailed(value) => {
                state.serialize_field("_typeName", "ArrayOfQuiesceDatastoreIOForHAFailed")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfRdmConversionNotSupported(value) => {
                state.serialize_field("_typeName", "ArrayOfRDMConversionNotSupported")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfRdmNotPreserved(value) => {
                state.serialize_field("_typeName", "ArrayOfRDMNotPreserved")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfRdmNotSupported(value) => {
                state.serialize_field("_typeName", "ArrayOfRDMNotSupported")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfRdmNotSupportedOnDatastore(value) => {
                state.serialize_field("_typeName", "ArrayOfRDMNotSupportedOnDatastore")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfRdmPointsToInaccessibleDisk(value) => {
                state.serialize_field("_typeName", "ArrayOfRDMPointsToInaccessibleDisk")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfRawDiskNotSupported(value) => {
                state.serialize_field("_typeName", "ArrayOfRawDiskNotSupported")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfReadHostResourcePoolTreeFailed(value) => {
                state.serialize_field("_typeName", "ArrayOfReadHostResourcePoolTreeFailed")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfReadOnlyDisksWithLegacyDestination(value) => {
                state.serialize_field("_typeName", "ArrayOfReadOnlyDisksWithLegacyDestination")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfRebootRequired(value) => {
                state.serialize_field("_typeName", "ArrayOfRebootRequired")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfRecordReplayDisabled(value) => {
                state.serialize_field("_typeName", "ArrayOfRecordReplayDisabled")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfRemoteDeviceNotSupported(value) => {
                state.serialize_field("_typeName", "ArrayOfRemoteDeviceNotSupported")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfRemoveFailed(value) => {
                state.serialize_field("_typeName", "ArrayOfRemoveFailed")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfReplicationConfigFault(value) => {
                state.serialize_field("_typeName", "ArrayOfReplicationConfigFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfReplicationDiskConfigFault(value) => {
                state.serialize_field("_typeName", "ArrayOfReplicationDiskConfigFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfReplicationFault(value) => {
                state.serialize_field("_typeName", "ArrayOfReplicationFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfReplicationIncompatibleWithFt(value) => {
                state.serialize_field("_typeName", "ArrayOfReplicationIncompatibleWithFT")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfReplicationInvalidOptions(value) => {
                state.serialize_field("_typeName", "ArrayOfReplicationInvalidOptions")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfReplicationNotSupportedOnHost(value) => {
                state.serialize_field("_typeName", "ArrayOfReplicationNotSupportedOnHost")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfReplicationVmConfigFault(value) => {
                state.serialize_field("_typeName", "ArrayOfReplicationVmConfigFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfReplicationVmFault(value) => {
                state.serialize_field("_typeName", "ArrayOfReplicationVmFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfReplicationVmInProgressFault(value) => {
                state.serialize_field("_typeName", "ArrayOfReplicationVmInProgressFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfResourceInUse(value) => {
                state.serialize_field("_typeName", "ArrayOfResourceInUse")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfResourceNotAvailable(value) => {
                state.serialize_field("_typeName", "ArrayOfResourceNotAvailable")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfRestrictedByAdministrator(value) => {
                state.serialize_field("_typeName", "ArrayOfRestrictedByAdministrator")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfRestrictedVersion(value) => {
                state.serialize_field("_typeName", "ArrayOfRestrictedVersion")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfRollbackFailure(value) => {
                state.serialize_field("_typeName", "ArrayOfRollbackFailure")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfRuleViolation(value) => {
                state.serialize_field("_typeName", "ArrayOfRuleViolation")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfSslDisabledFault(value) => {
                state.serialize_field("_typeName", "ArrayOfSSLDisabledFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfSslVerifyFault(value) => {
                state.serialize_field("_typeName", "ArrayOfSSLVerifyFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfSspiChallenge(value) => {
                state.serialize_field("_typeName", "ArrayOfSSPIChallenge")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfSecondaryVmAlreadyDisabled(value) => {
                state.serialize_field("_typeName", "ArrayOfSecondaryVmAlreadyDisabled")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfSecondaryVmAlreadyEnabled(value) => {
                state.serialize_field("_typeName", "ArrayOfSecondaryVmAlreadyEnabled")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfSecondaryVmAlreadyRegistered(value) => {
                state.serialize_field("_typeName", "ArrayOfSecondaryVmAlreadyRegistered")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfSecondaryVmNotRegistered(value) => {
                state.serialize_field("_typeName", "ArrayOfSecondaryVmNotRegistered")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfSharedBusControllerNotSupported(value) => {
                state.serialize_field("_typeName", "ArrayOfSharedBusControllerNotSupported")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfShrinkDiskFault(value) => {
                state.serialize_field("_typeName", "ArrayOfShrinkDiskFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfSnapshotCloneNotSupported(value) => {
                state.serialize_field("_typeName", "ArrayOfSnapshotCloneNotSupported")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfSnapshotCopyNotSupported(value) => {
                state.serialize_field("_typeName", "ArrayOfSnapshotCopyNotSupported")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfSnapshotDisabled(value) => {
                state.serialize_field("_typeName", "ArrayOfSnapshotDisabled")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfSnapshotFault(value) => {
                state.serialize_field("_typeName", "ArrayOfSnapshotFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfSnapshotIncompatibleDeviceInVm(value) => {
                state.serialize_field("_typeName", "ArrayOfSnapshotIncompatibleDeviceInVm")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfSnapshotLocked(value) => {
                state.serialize_field("_typeName", "ArrayOfSnapshotLocked")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfSnapshotMoveFromNonHomeNotSupported(value) => {
                state.serialize_field("_typeName", "ArrayOfSnapshotMoveFromNonHomeNotSupported")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfSnapshotMoveNotSupported(value) => {
                state.serialize_field("_typeName", "ArrayOfSnapshotMoveNotSupported")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfSnapshotMoveToNonHomeNotSupported(value) => {
                state.serialize_field("_typeName", "ArrayOfSnapshotMoveToNonHomeNotSupported")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfSnapshotNoChange(value) => {
                state.serialize_field("_typeName", "ArrayOfSnapshotNoChange")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfSnapshotRevertIssue(value) => {
                state.serialize_field("_typeName", "ArrayOfSnapshotRevertIssue")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfSoftRuleVioCorrectionDisallowed(value) => {
                state.serialize_field("_typeName", "ArrayOfSoftRuleVioCorrectionDisallowed")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfSoftRuleVioCorrectionImpact(value) => {
                state.serialize_field("_typeName", "ArrayOfSoftRuleVioCorrectionImpact")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfSolutionUserRequired(value) => {
                state.serialize_field("_typeName", "ArrayOfSolutionUserRequired")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfSsdDiskNotAvailable(value) => {
                state.serialize_field("_typeName", "ArrayOfSsdDiskNotAvailable")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfStorageDrsCannotMoveDiskInMultiWriterMode(value) => {
                state.serialize_field("_typeName", "ArrayOfStorageDrsCannotMoveDiskInMultiWriterMode")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfStorageDrsCannotMoveFtVm(value) => {
                state.serialize_field("_typeName", "ArrayOfStorageDrsCannotMoveFTVm")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfStorageDrsCannotMoveIndependentDisk(value) => {
                state.serialize_field("_typeName", "ArrayOfStorageDrsCannotMoveIndependentDisk")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfStorageDrsCannotMoveManuallyPlacedSwapFile(value) => {
                state.serialize_field("_typeName", "ArrayOfStorageDrsCannotMoveManuallyPlacedSwapFile")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfStorageDrsCannotMoveManuallyPlacedVm(value) => {
                state.serialize_field("_typeName", "ArrayOfStorageDrsCannotMoveManuallyPlacedVm")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfStorageDrsCannotMoveSharedDisk(value) => {
                state.serialize_field("_typeName", "ArrayOfStorageDrsCannotMoveSharedDisk")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfStorageDrsCannotMoveTemplate(value) => {
                state.serialize_field("_typeName", "ArrayOfStorageDrsCannotMoveTemplate")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfStorageDrsCannotMoveVmInUserFolder(value) => {
                state.serialize_field("_typeName", "ArrayOfStorageDrsCannotMoveVmInUserFolder")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfStorageDrsCannotMoveVmWithMountedCdrom(value) => {
                state.serialize_field("_typeName", "ArrayOfStorageDrsCannotMoveVmWithMountedCDROM")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfStorageDrsCannotMoveVmWithNoFilesInLayout(value) => {
                state.serialize_field("_typeName", "ArrayOfStorageDrsCannotMoveVmWithNoFilesInLayout")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfStorageDrsDatacentersCannotShareDatastore(value) => {
                state.serialize_field("_typeName", "ArrayOfStorageDrsDatacentersCannotShareDatastore")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfStorageDrsDisabledOnVm(value) => {
                state.serialize_field("_typeName", "ArrayOfStorageDrsDisabledOnVm")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfStorageDrsHbrDiskNotMovable(value) => {
                state.serialize_field("_typeName", "ArrayOfStorageDrsHbrDiskNotMovable")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfStorageDrsHmsMoveInProgress(value) => {
                state.serialize_field("_typeName", "ArrayOfStorageDrsHmsMoveInProgress")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfStorageDrsHmsUnreachable(value) => {
                state.serialize_field("_typeName", "ArrayOfStorageDrsHmsUnreachable")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfStorageDrsIolbDisabledInternally(value) => {
                state.serialize_field("_typeName", "ArrayOfStorageDrsIolbDisabledInternally")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfStorageDrsRelocateDisabled(value) => {
                state.serialize_field("_typeName", "ArrayOfStorageDrsRelocateDisabled")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfStorageDrsStaleHmsCollection(value) => {
                state.serialize_field("_typeName", "ArrayOfStorageDrsStaleHmsCollection")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfStorageDrsUnableToMoveFiles(value) => {
                state.serialize_field("_typeName", "ArrayOfStorageDrsUnableToMoveFiles")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfStorageVMotionNotSupported(value) => {
                state.serialize_field("_typeName", "ArrayOfStorageVMotionNotSupported")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfStorageVmotionIncompatible(value) => {
                state.serialize_field("_typeName", "ArrayOfStorageVmotionIncompatible")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfSuspendedRelocateNotSupported(value) => {
                state.serialize_field("_typeName", "ArrayOfSuspendedRelocateNotSupported")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfSwapDatastoreNotWritableOnHost(value) => {
                state.serialize_field("_typeName", "ArrayOfSwapDatastoreNotWritableOnHost")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfSwapDatastoreUnset(value) => {
                state.serialize_field("_typeName", "ArrayOfSwapDatastoreUnset")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfSwapPlacementOverrideNotSupported(value) => {
                state.serialize_field("_typeName", "ArrayOfSwapPlacementOverrideNotSupported")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfSwitchIpUnset(value) => {
                state.serialize_field("_typeName", "ArrayOfSwitchIpUnset")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfSwitchNotInUpgradeMode(value) => {
                state.serialize_field("_typeName", "ArrayOfSwitchNotInUpgradeMode")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfTaskInProgress(value) => {
                state.serialize_field("_typeName", "ArrayOfTaskInProgress")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfThirdPartyLicenseAssignmentFailed(value) => {
                state.serialize_field("_typeName", "ArrayOfThirdPartyLicenseAssignmentFailed")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfTimedout(value) => {
                state.serialize_field("_typeName", "ArrayOfTimedout")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfTooManyConcurrentNativeClones(value) => {
                state.serialize_field("_typeName", "ArrayOfTooManyConcurrentNativeClones")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfTooManyConsecutiveOverrides(value) => {
                state.serialize_field("_typeName", "ArrayOfTooManyConsecutiveOverrides")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfTooManyDevices(value) => {
                state.serialize_field("_typeName", "ArrayOfTooManyDevices")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfTooManyDisksOnLegacyHost(value) => {
                state.serialize_field("_typeName", "ArrayOfTooManyDisksOnLegacyHost")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfTooManyGuestLogons(value) => {
                state.serialize_field("_typeName", "ArrayOfTooManyGuestLogons")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfTooManyHosts(value) => {
                state.serialize_field("_typeName", "ArrayOfTooManyHosts")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfTooManyNativeCloneLevels(value) => {
                state.serialize_field("_typeName", "ArrayOfTooManyNativeCloneLevels")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfTooManyNativeClonesOnFile(value) => {
                state.serialize_field("_typeName", "ArrayOfTooManyNativeClonesOnFile")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfTooManySnapshotLevels(value) => {
                state.serialize_field("_typeName", "ArrayOfTooManySnapshotLevels")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfToolsAlreadyUpgraded(value) => {
                state.serialize_field("_typeName", "ArrayOfToolsAlreadyUpgraded")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfToolsAutoUpgradeNotSupported(value) => {
                state.serialize_field("_typeName", "ArrayOfToolsAutoUpgradeNotSupported")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfToolsImageCopyFailed(value) => {
                state.serialize_field("_typeName", "ArrayOfToolsImageCopyFailed")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfToolsImageNotAvailable(value) => {
                state.serialize_field("_typeName", "ArrayOfToolsImageNotAvailable")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfToolsImageSignatureCheckFailed(value) => {
                state.serialize_field("_typeName", "ArrayOfToolsImageSignatureCheckFailed")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfToolsInstallationInProgress(value) => {
                state.serialize_field("_typeName", "ArrayOfToolsInstallationInProgress")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfToolsUnavailable(value) => {
                state.serialize_field("_typeName", "ArrayOfToolsUnavailable")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfToolsUpgradeCancelled(value) => {
                state.serialize_field("_typeName", "ArrayOfToolsUpgradeCancelled")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfUnSupportedDatastoreForVFlash(value) => {
                state.serialize_field("_typeName", "ArrayOfUnSupportedDatastoreForVFlash")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfUncommittedUndoableDisk(value) => {
                state.serialize_field("_typeName", "ArrayOfUncommittedUndoableDisk")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfUnconfiguredPropertyValue(value) => {
                state.serialize_field("_typeName", "ArrayOfUnconfiguredPropertyValue")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfUncustomizableGuest(value) => {
                state.serialize_field("_typeName", "ArrayOfUncustomizableGuest")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfUnexpectedCustomizationFault(value) => {
                state.serialize_field("_typeName", "ArrayOfUnexpectedCustomizationFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfUnrecognizedHost(value) => {
                state.serialize_field("_typeName", "ArrayOfUnrecognizedHost")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfUnsharedSwapVMotionNotSupported(value) => {
                state.serialize_field("_typeName", "ArrayOfUnsharedSwapVMotionNotSupported")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfUnsupportedDatastore(value) => {
                state.serialize_field("_typeName", "ArrayOfUnsupportedDatastore")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfUnsupportedGuest(value) => {
                state.serialize_field("_typeName", "ArrayOfUnsupportedGuest")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfUnsupportedVimApiVersion(value) => {
                state.serialize_field("_typeName", "ArrayOfUnsupportedVimApiVersion")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfUnsupportedVmxLocation(value) => {
                state.serialize_field("_typeName", "ArrayOfUnsupportedVmxLocation")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfUnusedVirtualDiskBlocksNotScrubbed(value) => {
                state.serialize_field("_typeName", "ArrayOfUnusedVirtualDiskBlocksNotScrubbed")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfUserNotFound(value) => {
                state.serialize_field("_typeName", "ArrayOfUserNotFound")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVAppConfigFault(value) => {
                state.serialize_field("_typeName", "ArrayOfVAppConfigFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVAppNotRunning(value) => {
                state.serialize_field("_typeName", "ArrayOfVAppNotRunning")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVAppOperationInProgress(value) => {
                state.serialize_field("_typeName", "ArrayOfVAppOperationInProgress")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVAppPropertyFault(value) => {
                state.serialize_field("_typeName", "ArrayOfVAppPropertyFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVAppTaskInProgress(value) => {
                state.serialize_field("_typeName", "ArrayOfVAppTaskInProgress")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVFlashCacheHotConfigNotSupported(value) => {
                state.serialize_field("_typeName", "ArrayOfVFlashCacheHotConfigNotSupported")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVFlashModuleNotSupported(value) => {
                state.serialize_field("_typeName", "ArrayOfVFlashModuleNotSupported")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVFlashModuleVersionIncompatible(value) => {
                state.serialize_field("_typeName", "ArrayOfVFlashModuleVersionIncompatible")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmiNotSupported(value) => {
                state.serialize_field("_typeName", "ArrayOfVMINotSupported")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmOnConflictDvPort(value) => {
                state.serialize_field("_typeName", "ArrayOfVMOnConflictDVPort")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmOnVirtualIntranet(value) => {
                state.serialize_field("_typeName", "ArrayOfVMOnVirtualIntranet")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVMotionAcrossNetworkNotSupported(value) => {
                state.serialize_field("_typeName", "ArrayOfVMotionAcrossNetworkNotSupported")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVMotionInterfaceIssue(value) => {
                state.serialize_field("_typeName", "ArrayOfVMotionInterfaceIssue")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVMotionLinkCapacityLow(value) => {
                state.serialize_field("_typeName", "ArrayOfVMotionLinkCapacityLow")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVMotionLinkDown(value) => {
                state.serialize_field("_typeName", "ArrayOfVMotionLinkDown")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVMotionNotConfigured(value) => {
                state.serialize_field("_typeName", "ArrayOfVMotionNotConfigured")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVMotionNotLicensed(value) => {
                state.serialize_field("_typeName", "ArrayOfVMotionNotLicensed")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVMotionNotSupported(value) => {
                state.serialize_field("_typeName", "ArrayOfVMotionNotSupported")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVMotionProtocolIncompatible(value) => {
                state.serialize_field("_typeName", "ArrayOfVMotionProtocolIncompatible")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVimFault(value) => {
                state.serialize_field("_typeName", "ArrayOfVimFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualDiskBlocksNotFullyProvisioned(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualDiskBlocksNotFullyProvisioned")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualDiskModeNotSupported(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualDiskModeNotSupported")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualEthernetCardNotSupported(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualEthernetCardNotSupported")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualHardwareCompatibilityIssue(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualHardwareCompatibilityIssue")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualHardwareVersionNotSupported(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualHardwareVersionNotSupported")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmAlreadyExistsInDatacenter(value) => {
                state.serialize_field("_typeName", "ArrayOfVmAlreadyExistsInDatacenter")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmConfigFault(value) => {
                state.serialize_field("_typeName", "ArrayOfVmConfigFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmConfigIncompatibleForFaultTolerance(value) => {
                state.serialize_field("_typeName", "ArrayOfVmConfigIncompatibleForFaultTolerance")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmConfigIncompatibleForRecordReplay(value) => {
                state.serialize_field("_typeName", "ArrayOfVmConfigIncompatibleForRecordReplay")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmFaultToleranceConfigIssue(value) => {
                state.serialize_field("_typeName", "ArrayOfVmFaultToleranceConfigIssue")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmFaultToleranceConfigIssueWrapper(value) => {
                state.serialize_field("_typeName", "ArrayOfVmFaultToleranceConfigIssueWrapper")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmFaultToleranceInvalidFileBacking(value) => {
                state.serialize_field("_typeName", "ArrayOfVmFaultToleranceInvalidFileBacking")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmFaultToleranceIssue(value) => {
                state.serialize_field("_typeName", "ArrayOfVmFaultToleranceIssue")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmFaultToleranceOpIssuesList(value) => {
                state.serialize_field("_typeName", "ArrayOfVmFaultToleranceOpIssuesList")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmFaultToleranceTooManyFtVcpusOnHost(value) => {
                state.serialize_field("_typeName", "ArrayOfVmFaultToleranceTooManyFtVcpusOnHost")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmFaultToleranceTooManyVMsOnHost(value) => {
                state.serialize_field("_typeName", "ArrayOfVmFaultToleranceTooManyVMsOnHost")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmHostAffinityRuleViolation(value) => {
                state.serialize_field("_typeName", "ArrayOfVmHostAffinityRuleViolation")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmLimitLicense(value) => {
                state.serialize_field("_typeName", "ArrayOfVmLimitLicense")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmMetadataManagerFault(value) => {
                state.serialize_field("_typeName", "ArrayOfVmMetadataManagerFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmMonitorIncompatibleForFaultTolerance(value) => {
                state.serialize_field("_typeName", "ArrayOfVmMonitorIncompatibleForFaultTolerance")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmPowerOnDisabled(value) => {
                state.serialize_field("_typeName", "ArrayOfVmPowerOnDisabled")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmSmpFaultToleranceTooManyVMsOnHost(value) => {
                state.serialize_field("_typeName", "ArrayOfVmSmpFaultToleranceTooManyVMsOnHost")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmToolsUpgradeFault(value) => {
                state.serialize_field("_typeName", "ArrayOfVmToolsUpgradeFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmValidateMaxDevice(value) => {
                state.serialize_field("_typeName", "ArrayOfVmValidateMaxDevice")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmWwnConflict(value) => {
                state.serialize_field("_typeName", "ArrayOfVmWwnConflict")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmfsAlreadyMounted(value) => {
                state.serialize_field("_typeName", "ArrayOfVmfsAlreadyMounted")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmfsAmbiguousMount(value) => {
                state.serialize_field("_typeName", "ArrayOfVmfsAmbiguousMount")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmfsMountFault(value) => {
                state.serialize_field("_typeName", "ArrayOfVmfsMountFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmotionInterfaceNotEnabled(value) => {
                state.serialize_field("_typeName", "ArrayOfVmotionInterfaceNotEnabled")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVolumeEditorError(value) => {
                state.serialize_field("_typeName", "ArrayOfVolumeEditorError")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVramLimitLicense(value) => {
                state.serialize_field("_typeName", "ArrayOfVramLimitLicense")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVsanClusterUuidMismatch(value) => {
                state.serialize_field("_typeName", "ArrayOfVsanClusterUuidMismatch")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVsanDiskFault(value) => {
                state.serialize_field("_typeName", "ArrayOfVsanDiskFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVsanFault(value) => {
                state.serialize_field("_typeName", "ArrayOfVsanFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVsanIncompatibleDiskMapping(value) => {
                state.serialize_field("_typeName", "ArrayOfVsanIncompatibleDiskMapping")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVspanDestPortConflict(value) => {
                state.serialize_field("_typeName", "ArrayOfVspanDestPortConflict")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVspanPortConflict(value) => {
                state.serialize_field("_typeName", "ArrayOfVspanPortConflict")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVspanPortMoveFault(value) => {
                state.serialize_field("_typeName", "ArrayOfVspanPortMoveFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVspanPortPromiscChangeFault(value) => {
                state.serialize_field("_typeName", "ArrayOfVspanPortPromiscChangeFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVspanPortgroupPromiscChangeFault(value) => {
                state.serialize_field("_typeName", "ArrayOfVspanPortgroupPromiscChangeFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVspanPortgroupTypeChangeFault(value) => {
                state.serialize_field("_typeName", "ArrayOfVspanPortgroupTypeChangeFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVspanPromiscuousPortNotSupported(value) => {
                state.serialize_field("_typeName", "ArrayOfVspanPromiscuousPortNotSupported")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVspanSameSessionPortConflict(value) => {
                state.serialize_field("_typeName", "ArrayOfVspanSameSessionPortConflict")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfWakeOnLanNotSupported(value) => {
                state.serialize_field("_typeName", "ArrayOfWakeOnLanNotSupported")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfWakeOnLanNotSupportedByVmotionNic(value) => {
                state.serialize_field("_typeName", "ArrayOfWakeOnLanNotSupportedByVmotionNIC")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfWillLoseHaProtection(value) => {
                state.serialize_field("_typeName", "ArrayOfWillLoseHAProtection")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfWillModifyConfigCpuRequirements(value) => {
                state.serialize_field("_typeName", "ArrayOfWillModifyConfigCpuRequirements")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfWillResetSnapshotDirectory(value) => {
                state.serialize_field("_typeName", "ArrayOfWillResetSnapshotDirectory")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfWipeDiskFault(value) => {
                state.serialize_field("_typeName", "ArrayOfWipeDiskFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostActiveDirectoryInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostActiveDirectoryInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostActiveDirectory(value) => {
                state.serialize_field("_typeName", "ArrayOfHostActiveDirectory")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostActiveDirectorySpec(value) => {
                state.serialize_field("_typeName", "ArrayOfHostActiveDirectorySpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostAssignableHardwareBinding(value) => {
                state.serialize_field("_typeName", "ArrayOfHostAssignableHardwareBinding")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostAssignableHardwareConfig(value) => {
                state.serialize_field("_typeName", "ArrayOfHostAssignableHardwareConfig")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostAssignableHardwareConfigAttributeOverride(value) => {
                state.serialize_field("_typeName", "ArrayOfHostAssignableHardwareConfigAttributeOverride")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostAuthenticationManagerInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostAuthenticationManagerInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostAuthenticationStoreInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostAuthenticationStoreInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfAutoStartPowerInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfAutoStartPowerInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostAutoStartManagerConfig(value) => {
                state.serialize_field("_typeName", "ArrayOfHostAutoStartManagerConfig")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfAutoStartDefaults(value) => {
                state.serialize_field("_typeName", "ArrayOfAutoStartDefaults")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostBiosInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostBIOSInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostBlockAdapterTargetTransport(value) => {
                state.serialize_field("_typeName", "ArrayOfHostBlockAdapterTargetTransport")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostBlockHba(value) => {
                state.serialize_field("_typeName", "ArrayOfHostBlockHba")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostBootDeviceInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostBootDeviceInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostBootDevice(value) => {
                state.serialize_field("_typeName", "ArrayOfHostBootDevice")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostCacheConfigurationInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostCacheConfigurationInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostCacheConfigurationSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfHostCacheConfigurationSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostCapability(value) => {
                state.serialize_field("_typeName", "ArrayOfHostCapability")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostCertificateManagerCertificateInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostCertificateManagerCertificateInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostCertificateManagerCertificateSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfHostCertificateManagerCertificateSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostConfigChange(value) => {
                state.serialize_field("_typeName", "ArrayOfHostConfigChange")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostConfigInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostConfigInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostConfigManager(value) => {
                state.serialize_field("_typeName", "ArrayOfHostConfigManager")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostConfigSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfHostConfigSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostConnectInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostConnectInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostDatastoreExistsConnectInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostDatastoreExistsConnectInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostDatastoreConnectInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostDatastoreConnectInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostDatastoreNameConflictConnectInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostDatastoreNameConflictConnectInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostLicenseConnectInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostLicenseConnectInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostConnectInfoNetworkInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostConnectInfoNetworkInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostNewNetworkConnectInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostNewNetworkConnectInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostConnectSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfHostConnectSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostCpuIdInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostCpuIdInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostCpuInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostCpuInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostCpuPackage(value) => {
                state.serialize_field("_typeName", "ArrayOfHostCpuPackage")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostCpuPowerManagementInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostCpuPowerManagementInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostHyperThreadScheduleInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostHyperThreadScheduleInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostDataTransportConnectionInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostDataTransportConnectionInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFileInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfFileInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFileQueryFlags(value) => {
                state.serialize_field("_typeName", "ArrayOfFileQueryFlags")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFloppyImageFileInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfFloppyImageFileInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFloppyImageFileQuery(value) => {
                state.serialize_field("_typeName", "ArrayOfFloppyImageFileQuery")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFolderFileInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfFolderFileInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFolderFileQuery(value) => {
                state.serialize_field("_typeName", "ArrayOfFolderFileQuery")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfIsoImageFileInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfIsoImageFileInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfIsoImageFileQuery(value) => {
                state.serialize_field("_typeName", "ArrayOfIsoImageFileQuery")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFileQuery(value) => {
                state.serialize_field("_typeName", "ArrayOfFileQuery")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostDatastoreBrowserSearchResults(value) => {
                state.serialize_field("_typeName", "ArrayOfHostDatastoreBrowserSearchResults")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostDatastoreBrowserSearchSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfHostDatastoreBrowserSearchSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfTemplateConfigFileInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfTemplateConfigFileInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfTemplateConfigFileQuery(value) => {
                state.serialize_field("_typeName", "ArrayOfTemplateConfigFileQuery")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmConfigFileInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVmConfigFileInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmConfigFileEncryptionInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVmConfigFileEncryptionInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmConfigFileQuery(value) => {
                state.serialize_field("_typeName", "ArrayOfVmConfigFileQuery")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmConfigFileQueryFlags(value) => {
                state.serialize_field("_typeName", "ArrayOfVmConfigFileQueryFlags")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmConfigFileQueryFilter(value) => {
                state.serialize_field("_typeName", "ArrayOfVmConfigFileQueryFilter")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmDiskFileInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVmDiskFileInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmDiskFileEncryptionInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVmDiskFileEncryptionInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmDiskFileQuery(value) => {
                state.serialize_field("_typeName", "ArrayOfVmDiskFileQuery")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmDiskFileQueryFlags(value) => {
                state.serialize_field("_typeName", "ArrayOfVmDiskFileQueryFlags")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmDiskFileQueryFilter(value) => {
                state.serialize_field("_typeName", "ArrayOfVmDiskFileQueryFilter")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmLogFileInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVmLogFileInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmLogFileQuery(value) => {
                state.serialize_field("_typeName", "ArrayOfVmLogFileQuery")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmNvramFileInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVmNvramFileInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmNvramFileQuery(value) => {
                state.serialize_field("_typeName", "ArrayOfVmNvramFileQuery")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmSnapshotFileInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVmSnapshotFileInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmSnapshotFileQuery(value) => {
                state.serialize_field("_typeName", "ArrayOfVmSnapshotFileQuery")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostDatastoreSystemCapabilities(value) => {
                state.serialize_field("_typeName", "ArrayOfHostDatastoreSystemCapabilities")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostDatastoreSystemDatastoreResult(value) => {
                state.serialize_field("_typeName", "ArrayOfHostDatastoreSystemDatastoreResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostDatastoreSystemVvolDatastoreSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfHostDatastoreSystemVvolDatastoreSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostDateTimeConfig(value) => {
                state.serialize_field("_typeName", "ArrayOfHostDateTimeConfig")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostDateTimeInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostDateTimeInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostDateTimeSystemServiceTestResult(value) => {
                state.serialize_field("_typeName", "ArrayOfHostDateTimeSystemServiceTestResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostDateTimeSystemTimeZone(value) => {
                state.serialize_field("_typeName", "ArrayOfHostDateTimeSystemTimeZone")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostDeploymentInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostDeploymentInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostDevice(value) => {
                state.serialize_field("_typeName", "ArrayOfHostDevice")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostDhcpService(value) => {
                state.serialize_field("_typeName", "ArrayOfHostDhcpService")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostDhcpServiceConfig(value) => {
                state.serialize_field("_typeName", "ArrayOfHostDhcpServiceConfig")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostDhcpServiceSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfHostDhcpServiceSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostDiagnosticPartition(value) => {
                state.serialize_field("_typeName", "ArrayOfHostDiagnosticPartition")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostDiagnosticPartitionCreateDescription(value) => {
                state.serialize_field("_typeName", "ArrayOfHostDiagnosticPartitionCreateDescription")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostDiagnosticPartitionCreateOption(value) => {
                state.serialize_field("_typeName", "ArrayOfHostDiagnosticPartitionCreateOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostDiagnosticPartitionCreateSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfHostDiagnosticPartitionCreateSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostDigestInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostDigestInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostDirectoryStoreInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostDirectoryStoreInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostDiskConfigurationResult(value) => {
                state.serialize_field("_typeName", "ArrayOfHostDiskConfigurationResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostDiskDimensions(value) => {
                state.serialize_field("_typeName", "ArrayOfHostDiskDimensions")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostDiskDimensionsChs(value) => {
                state.serialize_field("_typeName", "ArrayOfHostDiskDimensionsChs")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostDiskDimensionsLba(value) => {
                state.serialize_field("_typeName", "ArrayOfHostDiskDimensionsLba")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostDiskPartitionInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostDiskPartitionInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostDiskPartitionBlockRange(value) => {
                state.serialize_field("_typeName", "ArrayOfHostDiskPartitionBlockRange")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostDiskPartitionLayout(value) => {
                state.serialize_field("_typeName", "ArrayOfHostDiskPartitionLayout")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostDiskPartitionAttributes(value) => {
                state.serialize_field("_typeName", "ArrayOfHostDiskPartitionAttributes")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostDiskPartitionSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfHostDiskPartitionSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostDnsConfig(value) => {
                state.serialize_field("_typeName", "ArrayOfHostDnsConfig")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostDnsConfigSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfHostDnsConfigSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostDvxClass(value) => {
                state.serialize_field("_typeName", "ArrayOfHostDvxClass")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostEnterMaintenanceResult(value) => {
                state.serialize_field("_typeName", "ArrayOfHostEnterMaintenanceResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostEsxAgentHostManagerConfigInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostEsxAgentHostManagerConfigInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostFaultToleranceManagerComponentHealthInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostFaultToleranceManagerComponentHealthInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFcoeConfig(value) => {
                state.serialize_field("_typeName", "ArrayOfFcoeConfig")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFcoeConfigFcoeCapabilities(value) => {
                state.serialize_field("_typeName", "ArrayOfFcoeConfigFcoeCapabilities")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFcoeConfigFcoeSpecification(value) => {
                state.serialize_field("_typeName", "ArrayOfFcoeConfigFcoeSpecification")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFcoeConfigVlanRange(value) => {
                state.serialize_field("_typeName", "ArrayOfFcoeConfigVlanRange")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostFeatureCapability(value) => {
                state.serialize_field("_typeName", "ArrayOfHostFeatureCapability")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostFeatureMask(value) => {
                state.serialize_field("_typeName", "ArrayOfHostFeatureMask")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostFeatureVersionInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostFeatureVersionInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostFibreChannelHba(value) => {
                state.serialize_field("_typeName", "ArrayOfHostFibreChannelHba")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostFibreChannelOverEthernetHba(value) => {
                state.serialize_field("_typeName", "ArrayOfHostFibreChannelOverEthernetHba")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostFibreChannelOverEthernetHbaLinkInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostFibreChannelOverEthernetHbaLinkInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostFibreChannelOverEthernetTargetTransport(value) => {
                state.serialize_field("_typeName", "ArrayOfHostFibreChannelOverEthernetTargetTransport")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostFibreChannelTargetTransport(value) => {
                state.serialize_field("_typeName", "ArrayOfHostFibreChannelTargetTransport")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostFileAccess(value) => {
                state.serialize_field("_typeName", "ArrayOfHostFileAccess")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfModeInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfModeInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostFileSystemMountInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostFileSystemMountInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostFileSystemVolume(value) => {
                state.serialize_field("_typeName", "ArrayOfHostFileSystemVolume")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostFileSystemVolumeInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostFileSystemVolumeInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostFirewallConfig(value) => {
                state.serialize_field("_typeName", "ArrayOfHostFirewallConfig")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostFirewallConfigRuleSetConfig(value) => {
                state.serialize_field("_typeName", "ArrayOfHostFirewallConfigRuleSetConfig")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostFirewallInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostFirewallInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostFirewallDefaultPolicy(value) => {
                state.serialize_field("_typeName", "ArrayOfHostFirewallDefaultPolicy")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostFlagInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostFlagInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostForceMountedInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostForceMountedInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostFru(value) => {
                state.serialize_field("_typeName", "ArrayOfHostFru")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostGatewaySpec(value) => {
                state.serialize_field("_typeName", "ArrayOfHostGatewaySpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostGraphicsConfig(value) => {
                state.serialize_field("_typeName", "ArrayOfHostGraphicsConfig")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostGraphicsConfigDeviceType(value) => {
                state.serialize_field("_typeName", "ArrayOfHostGraphicsConfigDeviceType")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostGraphicsInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostGraphicsInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostHardwareInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostHardwareInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostHardwareStatusInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostHardwareStatusInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDpuStatusInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfDpuStatusInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDpuStatusInfoOperationalInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfDpuStatusInfoOperationalInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostHardwareElementInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostHardwareElementInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostStorageElementInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostStorageElementInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostStorageOperationalInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostStorageOperationalInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostHbaCreateSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfHostHbaCreateSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHealthSystemRuntime(value) => {
                state.serialize_field("_typeName", "ArrayOfHealthSystemRuntime")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostAccessControlEntry(value) => {
                state.serialize_field("_typeName", "ArrayOfHostAccessControlEntry")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostHostBusAdapter(value) => {
                state.serialize_field("_typeName", "ArrayOfHostHostBusAdapter")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostProxySwitch(value) => {
                state.serialize_field("_typeName", "ArrayOfHostProxySwitch")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostProxySwitchConfig(value) => {
                state.serialize_field("_typeName", "ArrayOfHostProxySwitchConfig")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostProxySwitchEnsInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostProxySwitchEnsInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostProxySwitchHostLagConfig(value) => {
                state.serialize_field("_typeName", "ArrayOfHostProxySwitchHostLagConfig")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostProxySwitchSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfHostProxySwitchSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostImageProfileSummary(value) => {
                state.serialize_field("_typeName", "ArrayOfHostImageProfileSummary")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostInternetScsiHba(value) => {
                state.serialize_field("_typeName", "ArrayOfHostInternetScsiHba")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostInternetScsiHbaAuthenticationCapabilities(value) => {
                state.serialize_field("_typeName", "ArrayOfHostInternetScsiHbaAuthenticationCapabilities")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostInternetScsiHbaAuthenticationProperties(value) => {
                state.serialize_field("_typeName", "ArrayOfHostInternetScsiHbaAuthenticationProperties")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostInternetScsiHbaDigestCapabilities(value) => {
                state.serialize_field("_typeName", "ArrayOfHostInternetScsiHbaDigestCapabilities")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostInternetScsiHbaDigestProperties(value) => {
                state.serialize_field("_typeName", "ArrayOfHostInternetScsiHbaDigestProperties")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostInternetScsiHbaDiscoveryCapabilities(value) => {
                state.serialize_field("_typeName", "ArrayOfHostInternetScsiHbaDiscoveryCapabilities")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostInternetScsiHbaDiscoveryProperties(value) => {
                state.serialize_field("_typeName", "ArrayOfHostInternetScsiHbaDiscoveryProperties")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostInternetScsiHbaIpCapabilities(value) => {
                state.serialize_field("_typeName", "ArrayOfHostInternetScsiHbaIPCapabilities")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostInternetScsiHbaIpProperties(value) => {
                state.serialize_field("_typeName", "ArrayOfHostInternetScsiHbaIPProperties")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostInternetScsiHbaIPv6Properties(value) => {
                state.serialize_field("_typeName", "ArrayOfHostInternetScsiHbaIPv6Properties")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostInternetScsiHbaIscsiIpv6Address(value) => {
                state.serialize_field("_typeName", "ArrayOfHostInternetScsiHbaIscsiIpv6Address")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostInternetScsiHbaParamValue(value) => {
                state.serialize_field("_typeName", "ArrayOfHostInternetScsiHbaParamValue")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostInternetScsiHbaSendTarget(value) => {
                state.serialize_field("_typeName", "ArrayOfHostInternetScsiHbaSendTarget")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostInternetScsiHbaStaticTarget(value) => {
                state.serialize_field("_typeName", "ArrayOfHostInternetScsiHbaStaticTarget")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostInternetScsiHbaTargetSet(value) => {
                state.serialize_field("_typeName", "ArrayOfHostInternetScsiHbaTargetSet")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostInternetScsiTargetTransport(value) => {
                state.serialize_field("_typeName", "ArrayOfHostInternetScsiTargetTransport")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostIpConfig(value) => {
                state.serialize_field("_typeName", "ArrayOfHostIpConfig")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostIpConfigIpV6Address(value) => {
                state.serialize_field("_typeName", "ArrayOfHostIpConfigIpV6Address")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostIpConfigIpV6AddressConfiguration(value) => {
                state.serialize_field("_typeName", "ArrayOfHostIpConfigIpV6AddressConfiguration")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostIpRouteConfig(value) => {
                state.serialize_field("_typeName", "ArrayOfHostIpRouteConfig")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostIpRouteConfigSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfHostIpRouteConfigSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostIpRouteEntry(value) => {
                state.serialize_field("_typeName", "ArrayOfHostIpRouteEntry")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostIpRouteOp(value) => {
                state.serialize_field("_typeName", "ArrayOfHostIpRouteOp")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostIpRouteTableConfig(value) => {
                state.serialize_field("_typeName", "ArrayOfHostIpRouteTableConfig")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostIpRouteTableInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostIpRouteTableInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostIpmiInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostIpmiInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfIscsiDependencyEntity(value) => {
                state.serialize_field("_typeName", "ArrayOfIscsiDependencyEntity")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfIscsiMigrationDependency(value) => {
                state.serialize_field("_typeName", "ArrayOfIscsiMigrationDependency")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfIscsiPortInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfIscsiPortInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfIscsiStatus(value) => {
                state.serialize_field("_typeName", "ArrayOfIscsiStatus")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfKernelModuleInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfKernelModuleInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfKernelModuleSectionInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfKernelModuleSectionInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostLicenseSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfHostLicenseSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfLinkDiscoveryProtocolConfig(value) => {
                state.serialize_field("_typeName", "ArrayOfLinkDiscoveryProtocolConfig")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostAccountSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfHostAccountSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostPosixAccountSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfHostPosixAccountSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostLocalAuthenticationInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostLocalAuthenticationInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfLocalDatastoreInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfLocalDatastoreInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostLocalFileSystemVolume(value) => {
                state.serialize_field("_typeName", "ArrayOfHostLocalFileSystemVolume")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostLocalFileSystemVolumeSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfHostLocalFileSystemVolumeSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostLowLevelProvisioningManagerDiskLayoutSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfHostLowLevelProvisioningManagerDiskLayoutSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostLowLevelProvisioningManagerFileDeleteResult(value) => {
                state.serialize_field("_typeName", "ArrayOfHostLowLevelProvisioningManagerFileDeleteResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostLowLevelProvisioningManagerFileDeleteSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfHostLowLevelProvisioningManagerFileDeleteSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostLowLevelProvisioningManagerFileReserveResult(value) => {
                state.serialize_field("_typeName", "ArrayOfHostLowLevelProvisioningManagerFileReserveResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostLowLevelProvisioningManagerFileReserveSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfHostLowLevelProvisioningManagerFileReserveSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostLowLevelProvisioningManagerSnapshotLayoutSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfHostLowLevelProvisioningManagerSnapshotLayoutSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostLowLevelProvisioningManagerVmMigrationStatus(value) => {
                state.serialize_field("_typeName", "ArrayOfHostLowLevelProvisioningManagerVmMigrationStatus")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostLowLevelProvisioningManagerVmRecoveryInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostLowLevelProvisioningManagerVmRecoveryInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostMaintenanceSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfHostMaintenanceSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfServiceConsoleReservationInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfServiceConsoleReservationInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineMemoryReservationInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineMemoryReservationInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineMemoryReservationSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineMemoryReservationSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostMemorySpec(value) => {
                state.serialize_field("_typeName", "ArrayOfHostMemorySpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostMemoryTierInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostMemoryTierInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostMountInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostMountInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostMultipathInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostMultipathInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostMultipathInfoFixedLogicalUnitPolicy(value) => {
                state.serialize_field("_typeName", "ArrayOfHostMultipathInfoFixedLogicalUnitPolicy")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostMultipathInfoHppLogicalUnitPolicy(value) => {
                state.serialize_field("_typeName", "ArrayOfHostMultipathInfoHppLogicalUnitPolicy")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostMultipathInfoLogicalUnit(value) => {
                state.serialize_field("_typeName", "ArrayOfHostMultipathInfoLogicalUnit")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostMultipathInfoLogicalUnitPolicy(value) => {
                state.serialize_field("_typeName", "ArrayOfHostMultipathInfoLogicalUnitPolicy")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostMultipathInfoLogicalUnitStorageArrayTypePolicy(value) => {
                state.serialize_field("_typeName", "ArrayOfHostMultipathInfoLogicalUnitStorageArrayTypePolicy")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostMultipathInfoPath(value) => {
                state.serialize_field("_typeName", "ArrayOfHostMultipathInfoPath")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostMultipathStateInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostMultipathStateInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostMultipathStateInfoPath(value) => {
                state.serialize_field("_typeName", "ArrayOfHostMultipathStateInfoPath")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNasDatastoreInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfNasDatastoreInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostNasVolume(value) => {
                state.serialize_field("_typeName", "ArrayOfHostNasVolume")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostNasVolumeConfig(value) => {
                state.serialize_field("_typeName", "ArrayOfHostNasVolumeConfig")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostNasVolumeSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfHostNasVolumeSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostNasVolumeUserInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostNasVolumeUserInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostNatService(value) => {
                state.serialize_field("_typeName", "ArrayOfHostNatService")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostNatServiceConfig(value) => {
                state.serialize_field("_typeName", "ArrayOfHostNatServiceConfig")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostNatServiceNameServiceSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfHostNatServiceNameServiceSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostNatServicePortForwardSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfHostNatServicePortForwardSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostNatServiceSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfHostNatServiceSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostNetCapabilities(value) => {
                state.serialize_field("_typeName", "ArrayOfHostNetCapabilities")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostNetOffloadCapabilities(value) => {
                state.serialize_field("_typeName", "ArrayOfHostNetOffloadCapabilities")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostNetStackInstance(value) => {
                state.serialize_field("_typeName", "ArrayOfHostNetStackInstance")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostNetworkConfig(value) => {
                state.serialize_field("_typeName", "ArrayOfHostNetworkConfig")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostNetworkConfigNetStackSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfHostNetworkConfigNetStackSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostNetworkConfigResult(value) => {
                state.serialize_field("_typeName", "ArrayOfHostNetworkConfigResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostNetworkInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostNetworkInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostNetworkPolicy(value) => {
                state.serialize_field("_typeName", "ArrayOfHostNetworkPolicy")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostNicFailureCriteria(value) => {
                state.serialize_field("_typeName", "ArrayOfHostNicFailureCriteria")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostNicOrderPolicy(value) => {
                state.serialize_field("_typeName", "ArrayOfHostNicOrderPolicy")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostNicTeamingPolicy(value) => {
                state.serialize_field("_typeName", "ArrayOfHostNicTeamingPolicy")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostNetworkSecurityPolicy(value) => {
                state.serialize_field("_typeName", "ArrayOfHostNetworkSecurityPolicy")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostNetworkTrafficShapingPolicy(value) => {
                state.serialize_field("_typeName", "ArrayOfHostNetworkTrafficShapingPolicy")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostNfcConnectionInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostNfcConnectionInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostNtpConfig(value) => {
                state.serialize_field("_typeName", "ArrayOfHostNtpConfig")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostNumaInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostNumaInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostNumaNode(value) => {
                state.serialize_field("_typeName", "ArrayOfHostNumaNode")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostNumericSensorInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostNumericSensorInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNvdimmDimmInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfNvdimmDimmInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNvdimmGuid(value) => {
                state.serialize_field("_typeName", "ArrayOfNvdimmGuid")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNvdimmHealthInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfNvdimmHealthInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNvdimmInterleaveSetInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfNvdimmInterleaveSetInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNvdimmNamespaceCreateSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfNvdimmNamespaceCreateSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNvdimmNamespaceDeleteSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfNvdimmNamespaceDeleteSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNvdimmNamespaceDetails(value) => {
                state.serialize_field("_typeName", "ArrayOfNvdimmNamespaceDetails")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNvdimmNamespaceInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfNvdimmNamespaceInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNvdimmSystemInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfNvdimmSystemInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNvdimmPMemNamespaceCreateSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfNvdimmPMemNamespaceCreateSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNvdimmRegionInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfNvdimmRegionInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNvdimmSummary(value) => {
                state.serialize_field("_typeName", "ArrayOfNvdimmSummary")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostNvmeConnectSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfHostNvmeConnectSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostNvmeController(value) => {
                state.serialize_field("_typeName", "ArrayOfHostNvmeController")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostNvmeDisconnectSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfHostNvmeDisconnectSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostNvmeDiscoverSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfHostNvmeDiscoverSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostNvmeDiscoveryLog(value) => {
                state.serialize_field("_typeName", "ArrayOfHostNvmeDiscoveryLog")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostNvmeDiscoveryLogEntry(value) => {
                state.serialize_field("_typeName", "ArrayOfHostNvmeDiscoveryLogEntry")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostNvmeNamespace(value) => {
                state.serialize_field("_typeName", "ArrayOfHostNvmeNamespace")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostNvmeOpaqueTransportParameters(value) => {
                state.serialize_field("_typeName", "ArrayOfHostNvmeOpaqueTransportParameters")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostNvmeOverFibreChannelParameters(value) => {
                state.serialize_field("_typeName", "ArrayOfHostNvmeOverFibreChannelParameters")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostNvmeOverRdmaParameters(value) => {
                state.serialize_field("_typeName", "ArrayOfHostNvmeOverRdmaParameters")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostNvmeOverTcpParameters(value) => {
                state.serialize_field("_typeName", "ArrayOfHostNvmeOverTcpParameters")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostNvmeSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfHostNvmeSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostNvmeTopology(value) => {
                state.serialize_field("_typeName", "ArrayOfHostNvmeTopology")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostNvmeTopologyInterface(value) => {
                state.serialize_field("_typeName", "ArrayOfHostNvmeTopologyInterface")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostNvmeTransportParameters(value) => {
                state.serialize_field("_typeName", "ArrayOfHostNvmeTransportParameters")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostOpaqueNetworkInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostOpaqueNetworkInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostOpaqueSwitch(value) => {
                state.serialize_field("_typeName", "ArrayOfHostOpaqueSwitch")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostOpaqueSwitchPhysicalNicZone(value) => {
                state.serialize_field("_typeName", "ArrayOfHostOpaqueSwitchPhysicalNicZone")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPMemDatastoreInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfPMemDatastoreInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostPMemVolume(value) => {
                state.serialize_field("_typeName", "ArrayOfHostPMemVolume")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostParallelScsiHba(value) => {
                state.serialize_field("_typeName", "ArrayOfHostParallelScsiHba")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostParallelScsiTargetTransport(value) => {
                state.serialize_field("_typeName", "ArrayOfHostParallelScsiTargetTransport")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostPatchManagerLocator(value) => {
                state.serialize_field("_typeName", "ArrayOfHostPatchManagerLocator")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostPatchManagerPatchManagerOperationSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfHostPatchManagerPatchManagerOperationSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostPatchManagerResult(value) => {
                state.serialize_field("_typeName", "ArrayOfHostPatchManagerResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostPatchManagerStatus(value) => {
                state.serialize_field("_typeName", "ArrayOfHostPatchManagerStatus")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostPatchManagerStatusPrerequisitePatch(value) => {
                state.serialize_field("_typeName", "ArrayOfHostPatchManagerStatusPrerequisitePatch")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostPathSelectionPolicyOption(value) => {
                state.serialize_field("_typeName", "ArrayOfHostPathSelectionPolicyOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostPciDevice(value) => {
                state.serialize_field("_typeName", "ArrayOfHostPciDevice")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostPciPassthruConfig(value) => {
                state.serialize_field("_typeName", "ArrayOfHostPciPassthruConfig")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostPciPassthruInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostPciPassthruInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostPcieHba(value) => {
                state.serialize_field("_typeName", "ArrayOfHostPcieHba")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostPcieTargetTransport(value) => {
                state.serialize_field("_typeName", "ArrayOfHostPcieTargetTransport")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostPersistentMemoryInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostPersistentMemoryInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPhysicalNic(value) => {
                state.serialize_field("_typeName", "ArrayOfPhysicalNic")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPhysicalNicCdpDeviceCapability(value) => {
                state.serialize_field("_typeName", "ArrayOfPhysicalNicCdpDeviceCapability")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPhysicalNicCdpInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfPhysicalNicCdpInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPhysicalNicConfig(value) => {
                state.serialize_field("_typeName", "ArrayOfPhysicalNicConfig")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPhysicalNicLinkInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfPhysicalNicLinkInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfLinkLayerDiscoveryProtocolInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfLinkLayerDiscoveryProtocolInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPhysicalNicHintInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfPhysicalNicHintInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPhysicalNicHint(value) => {
                state.serialize_field("_typeName", "ArrayOfPhysicalNicHint")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPhysicalNicIpHint(value) => {
                state.serialize_field("_typeName", "ArrayOfPhysicalNicIpHint")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPhysicalNicNameHint(value) => {
                state.serialize_field("_typeName", "ArrayOfPhysicalNicNameHint")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPhysicalNicSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfPhysicalNicSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostPlugStoreTopology(value) => {
                state.serialize_field("_typeName", "ArrayOfHostPlugStoreTopology")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostPlugStoreTopologyAdapter(value) => {
                state.serialize_field("_typeName", "ArrayOfHostPlugStoreTopologyAdapter")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostPlugStoreTopologyDevice(value) => {
                state.serialize_field("_typeName", "ArrayOfHostPlugStoreTopologyDevice")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostPlugStoreTopologyPath(value) => {
                state.serialize_field("_typeName", "ArrayOfHostPlugStoreTopologyPath")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostPlugStoreTopologyPlugin(value) => {
                state.serialize_field("_typeName", "ArrayOfHostPlugStoreTopologyPlugin")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostPlugStoreTopologyTarget(value) => {
                state.serialize_field("_typeName", "ArrayOfHostPlugStoreTopologyTarget")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostPortGroup(value) => {
                state.serialize_field("_typeName", "ArrayOfHostPortGroup")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostPortGroupConfig(value) => {
                state.serialize_field("_typeName", "ArrayOfHostPortGroupConfig")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostPortGroupPort(value) => {
                state.serialize_field("_typeName", "ArrayOfHostPortGroupPort")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostPortGroupSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfHostPortGroupSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPowerSystemCapability(value) => {
                state.serialize_field("_typeName", "ArrayOfPowerSystemCapability")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPowerSystemInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfPowerSystemInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostPowerPolicy(value) => {
                state.serialize_field("_typeName", "ArrayOfHostPowerPolicy")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostProtocolEndpoint(value) => {
                state.serialize_field("_typeName", "ArrayOfHostProtocolEndpoint")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostPtpConfig(value) => {
                state.serialize_field("_typeName", "ArrayOfHostPtpConfig")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostPtpConfigPtpPort(value) => {
                state.serialize_field("_typeName", "ArrayOfHostPtpConfigPtpPort")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostQualifiedName(value) => {
                state.serialize_field("_typeName", "ArrayOfHostQualifiedName")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostRdmaDevice(value) => {
                state.serialize_field("_typeName", "ArrayOfHostRdmaDevice")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostRdmaDeviceBacking(value) => {
                state.serialize_field("_typeName", "ArrayOfHostRdmaDeviceBacking")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostRdmaDeviceCapability(value) => {
                state.serialize_field("_typeName", "ArrayOfHostRdmaDeviceCapability")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostRdmaDeviceConnectionInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostRdmaDeviceConnectionInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostRdmaDevicePnicBacking(value) => {
                state.serialize_field("_typeName", "ArrayOfHostRdmaDevicePnicBacking")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostRdmaHba(value) => {
                state.serialize_field("_typeName", "ArrayOfHostRdmaHba")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostRdmaTargetTransport(value) => {
                state.serialize_field("_typeName", "ArrayOfHostRdmaTargetTransport")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostReliableMemoryInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostReliableMemoryInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostResignatureRescanResult(value) => {
                state.serialize_field("_typeName", "ArrayOfHostResignatureRescanResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostFirewallRuleset(value) => {
                state.serialize_field("_typeName", "ArrayOfHostFirewallRuleset")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostFirewallRulesetIpList(value) => {
                state.serialize_field("_typeName", "ArrayOfHostFirewallRulesetIpList")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostFirewallRulesetIpNetwork(value) => {
                state.serialize_field("_typeName", "ArrayOfHostFirewallRulesetIpNetwork")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostFirewallRule(value) => {
                state.serialize_field("_typeName", "ArrayOfHostFirewallRule")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostFirewallRulesetRulesetSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfHostFirewallRulesetRulesetSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostRuntimeInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostRuntimeInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostRuntimeInfoNetStackInstanceRuntimeInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostRuntimeInfoNetStackInstanceRuntimeInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostNetworkResourceRuntime(value) => {
                state.serialize_field("_typeName", "ArrayOfHostNetworkResourceRuntime")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostRuntimeInfoNetworkRuntimeInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostRuntimeInfoNetworkRuntimeInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostPlacedVirtualNicIdentifier(value) => {
                state.serialize_field("_typeName", "ArrayOfHostPlacedVirtualNicIdentifier")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostPnicNetworkResourceInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostPnicNetworkResourceInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostRuntimeInfoStateEncryptionInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostRuntimeInfoStateEncryptionInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostScsiDisk(value) => {
                state.serialize_field("_typeName", "ArrayOfHostScsiDisk")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostScsiDiskPartition(value) => {
                state.serialize_field("_typeName", "ArrayOfHostScsiDiskPartition")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfScsiLun(value) => {
                state.serialize_field("_typeName", "ArrayOfScsiLun")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfScsiLunCapabilities(value) => {
                state.serialize_field("_typeName", "ArrayOfScsiLunCapabilities")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfScsiLunDescriptor(value) => {
                state.serialize_field("_typeName", "ArrayOfScsiLunDescriptor")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfScsiLunDurableName(value) => {
                state.serialize_field("_typeName", "ArrayOfScsiLunDurableName")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostScsiTopology(value) => {
                state.serialize_field("_typeName", "ArrayOfHostScsiTopology")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostScsiTopologyInterface(value) => {
                state.serialize_field("_typeName", "ArrayOfHostScsiTopologyInterface")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostScsiTopologyLun(value) => {
                state.serialize_field("_typeName", "ArrayOfHostScsiTopologyLun")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostScsiTopologyTarget(value) => {
                state.serialize_field("_typeName", "ArrayOfHostScsiTopologyTarget")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostSecuritySpec(value) => {
                state.serialize_field("_typeName", "ArrayOfHostSecuritySpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostSerialAttachedHba(value) => {
                state.serialize_field("_typeName", "ArrayOfHostSerialAttachedHba")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostSerialAttachedTargetTransport(value) => {
                state.serialize_field("_typeName", "ArrayOfHostSerialAttachedTargetTransport")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostService(value) => {
                state.serialize_field("_typeName", "ArrayOfHostService")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostServiceSourcePackage(value) => {
                state.serialize_field("_typeName", "ArrayOfHostServiceSourcePackage")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostServiceConfig(value) => {
                state.serialize_field("_typeName", "ArrayOfHostServiceConfig")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostServiceInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostServiceInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostSevInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostSevInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostSgxInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostSgxInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostSgxRegistrationInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostSgxRegistrationInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostSharedGpuCapabilities(value) => {
                state.serialize_field("_typeName", "ArrayOfHostSharedGpuCapabilities")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostSnmpSystemAgentLimits(value) => {
                state.serialize_field("_typeName", "ArrayOfHostSnmpSystemAgentLimits")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostSnmpConfigSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfHostSnmpConfigSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostSnmpDestination(value) => {
                state.serialize_field("_typeName", "ArrayOfHostSnmpDestination")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfSoftwarePackage(value) => {
                state.serialize_field("_typeName", "ArrayOfSoftwarePackage")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfSoftwarePackageCapability(value) => {
                state.serialize_field("_typeName", "ArrayOfSoftwarePackageCapability")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfRelation(value) => {
                state.serialize_field("_typeName", "ArrayOfRelation")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostSriovConfig(value) => {
                state.serialize_field("_typeName", "ArrayOfHostSriovConfig")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostSriovDevicePoolInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostSriovDevicePoolInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostSriovInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostSriovInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostSriovNetworkDevicePoolInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostSriovNetworkDevicePoolInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostSslThumbprintInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostSslThumbprintInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostStorageArrayTypePolicyOption(value) => {
                state.serialize_field("_typeName", "ArrayOfHostStorageArrayTypePolicyOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostStorageDeviceInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostStorageDeviceInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostStorageSystemDiskLocatorLedResult(value) => {
                state.serialize_field("_typeName", "ArrayOfHostStorageSystemDiskLocatorLedResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostStorageSystemScsiLunResult(value) => {
                state.serialize_field("_typeName", "ArrayOfHostStorageSystemScsiLunResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostStorageSystemVmfsVolumeResult(value) => {
                state.serialize_field("_typeName", "ArrayOfHostStorageSystemVmfsVolumeResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostListSummary(value) => {
                state.serialize_field("_typeName", "ArrayOfHostListSummary")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostConfigSummary(value) => {
                state.serialize_field("_typeName", "ArrayOfHostConfigSummary")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostListSummaryGatewaySummary(value) => {
                state.serialize_field("_typeName", "ArrayOfHostListSummaryGatewaySummary")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostHardwareSummary(value) => {
                state.serialize_field("_typeName", "ArrayOfHostHardwareSummary")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostListSummaryQuickStats(value) => {
                state.serialize_field("_typeName", "ArrayOfHostListSummaryQuickStats")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfSystemEventInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfSystemEventInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostSystemHealthInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostSystemHealthInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostSystemIdentificationInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostSystemIdentificationInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostSystemInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostSystemInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostSystemResourceInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostSystemResourceInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostSystemSwapConfiguration(value) => {
                state.serialize_field("_typeName", "ArrayOfHostSystemSwapConfiguration")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostSystemSwapConfigurationDatastoreOption(value) => {
                state.serialize_field("_typeName", "ArrayOfHostSystemSwapConfigurationDatastoreOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostSystemSwapConfigurationDisabledOption(value) => {
                state.serialize_field("_typeName", "ArrayOfHostSystemSwapConfigurationDisabledOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostSystemSwapConfigurationHostCacheOption(value) => {
                state.serialize_field("_typeName", "ArrayOfHostSystemSwapConfigurationHostCacheOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostSystemSwapConfigurationHostLocalSwapOption(value) => {
                state.serialize_field("_typeName", "ArrayOfHostSystemSwapConfigurationHostLocalSwapOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostSystemSwapConfigurationSystemSwapOption(value) => {
                state.serialize_field("_typeName", "ArrayOfHostSystemSwapConfigurationSystemSwapOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostTargetTransport(value) => {
                state.serialize_field("_typeName", "ArrayOfHostTargetTransport")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostTcpHba(value) => {
                state.serialize_field("_typeName", "ArrayOfHostTcpHba")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostTcpHbaCreateSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfHostTcpHbaCreateSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostTcpTargetTransport(value) => {
                state.serialize_field("_typeName", "ArrayOfHostTcpTargetTransport")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostTpmAttestationInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostTpmAttestationInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostTpmAttestationReport(value) => {
                state.serialize_field("_typeName", "ArrayOfHostTpmAttestationReport")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostTpmBootCompleteEventDetails(value) => {
                state.serialize_field("_typeName", "ArrayOfHostTpmBootCompleteEventDetails")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostTpmBootSecurityOptionEventDetails(value) => {
                state.serialize_field("_typeName", "ArrayOfHostTpmBootSecurityOptionEventDetails")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostTpmCommandEventDetails(value) => {
                state.serialize_field("_typeName", "ArrayOfHostTpmCommandEventDetails")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostTpmDigestInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostTpmDigestInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostTpmEventDetails(value) => {
                state.serialize_field("_typeName", "ArrayOfHostTpmEventDetails")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostTpmEventLogEntry(value) => {
                state.serialize_field("_typeName", "ArrayOfHostTpmEventLogEntry")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostTpmNvTagEventDetails(value) => {
                state.serialize_field("_typeName", "ArrayOfHostTpmNvTagEventDetails")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostTpmOptionEventDetails(value) => {
                state.serialize_field("_typeName", "ArrayOfHostTpmOptionEventDetails")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostTpmSignerEventDetails(value) => {
                state.serialize_field("_typeName", "ArrayOfHostTpmSignerEventDetails")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostTpmSoftwareComponentEventDetails(value) => {
                state.serialize_field("_typeName", "ArrayOfHostTpmSoftwareComponentEventDetails")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostTpmVersionEventDetails(value) => {
                state.serialize_field("_typeName", "ArrayOfHostTpmVersionEventDetails")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostTrustAuthorityAttestationInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostTrustAuthorityAttestationInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostUnresolvedVmfsExtent(value) => {
                state.serialize_field("_typeName", "ArrayOfHostUnresolvedVmfsExtent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostUnresolvedVmfsResignatureSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfHostUnresolvedVmfsResignatureSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostUnresolvedVmfsResolutionResult(value) => {
                state.serialize_field("_typeName", "ArrayOfHostUnresolvedVmfsResolutionResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostUnresolvedVmfsResolutionSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfHostUnresolvedVmfsResolutionSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostUnresolvedVmfsVolume(value) => {
                state.serialize_field("_typeName", "ArrayOfHostUnresolvedVmfsVolume")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostUnresolvedVmfsVolumeResolveStatus(value) => {
                state.serialize_field("_typeName", "ArrayOfHostUnresolvedVmfsVolumeResolveStatus")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostVFlashManagerVFlashCacheConfigInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostVFlashManagerVFlashCacheConfigInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption(value) => {
                state.serialize_field("_typeName", "ArrayOfHostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostVFlashManagerVFlashCacheConfigSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfHostVFlashManagerVFlashCacheConfigSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostVFlashManagerVFlashConfigInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostVFlashManagerVFlashConfigInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostVFlashManagerVFlashResourceConfigInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostVFlashManagerVFlashResourceConfigInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostVFlashManagerVFlashResourceConfigSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfHostVFlashManagerVFlashResourceConfigSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostVFlashManagerVFlashResourceRunTimeInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostVFlashManagerVFlashResourceRunTimeInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostVFlashResourceConfigurationResult(value) => {
                state.serialize_field("_typeName", "ArrayOfHostVFlashResourceConfigurationResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostVMotionConfig(value) => {
                state.serialize_field("_typeName", "ArrayOfHostVMotionConfig")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostVMotionInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostVMotionInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostVMotionManagerDstInstantCloneResult(value) => {
                state.serialize_field("_typeName", "ArrayOfHostVMotionManagerDstInstantCloneResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostVMotionManagerSrcInstantCloneResult(value) => {
                state.serialize_field("_typeName", "ArrayOfHostVMotionManagerSrcInstantCloneResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostVMotionNetConfig(value) => {
                state.serialize_field("_typeName", "ArrayOfHostVMotionNetConfig")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostVfatVolume(value) => {
                state.serialize_field("_typeName", "ArrayOfHostVfatVolume")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostVffsVolume(value) => {
                state.serialize_field("_typeName", "ArrayOfHostVffsVolume")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostVffsSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfHostVffsSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostVirtualNic(value) => {
                state.serialize_field("_typeName", "ArrayOfHostVirtualNic")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostVirtualNicConfig(value) => {
                state.serialize_field("_typeName", "ArrayOfHostVirtualNicConfig")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostVirtualNicIpRouteSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfHostVirtualNicIpRouteSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostVirtualNicOpaqueNetworkSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfHostVirtualNicOpaqueNetworkSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostVirtualNicSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfHostVirtualNicSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostVirtualNicConnection(value) => {
                state.serialize_field("_typeName", "ArrayOfHostVirtualNicConnection")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualNicManagerNetConfig(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualNicManagerNetConfig")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostVirtualNicManagerNicTypeSelection(value) => {
                state.serialize_field("_typeName", "ArrayOfHostVirtualNicManagerNicTypeSelection")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostVirtualNicManagerInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostVirtualNicManagerInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostVirtualSwitch(value) => {
                state.serialize_field("_typeName", "ArrayOfHostVirtualSwitch")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostVirtualSwitchAutoBridge(value) => {
                state.serialize_field("_typeName", "ArrayOfHostVirtualSwitchAutoBridge")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostVirtualSwitchBeaconConfig(value) => {
                state.serialize_field("_typeName", "ArrayOfHostVirtualSwitchBeaconConfig")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostVirtualSwitchBondBridge(value) => {
                state.serialize_field("_typeName", "ArrayOfHostVirtualSwitchBondBridge")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostVirtualSwitchBridge(value) => {
                state.serialize_field("_typeName", "ArrayOfHostVirtualSwitchBridge")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostVirtualSwitchConfig(value) => {
                state.serialize_field("_typeName", "ArrayOfHostVirtualSwitchConfig")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostVirtualSwitchSimpleBridge(value) => {
                state.serialize_field("_typeName", "ArrayOfHostVirtualSwitchSimpleBridge")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostVirtualSwitchSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfHostVirtualSwitchSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostVmciAccessManagerAccessSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfHostVmciAccessManagerAccessSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmfsDatastoreCreateSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfVmfsDatastoreCreateSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmfsDatastoreExpandSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfVmfsDatastoreExpandSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmfsDatastoreExtendSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfVmfsDatastoreExtendSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmfsDatastoreInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVmfsDatastoreInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmfsDatastoreOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVmfsDatastoreOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmfsDatastoreAllExtentOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVmfsDatastoreAllExtentOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmfsDatastoreBaseOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVmfsDatastoreBaseOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmfsDatastoreMultipleExtentOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVmfsDatastoreMultipleExtentOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmfsDatastoreSingleExtentOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVmfsDatastoreSingleExtentOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmfsDatastoreSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfVmfsDatastoreSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostVmfsRescanResult(value) => {
                state.serialize_field("_typeName", "ArrayOfHostVmfsRescanResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostVmfsVolume(value) => {
                state.serialize_field("_typeName", "ArrayOfHostVmfsVolume")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmfsConfigOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVmfsConfigOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostVmfsSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfHostVmfsSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmfsUnmapBandwidthSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfVmfsUnmapBandwidthSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVsanDatastoreInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVsanDatastoreInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostVsanInternalSystemCmmdsQuery(value) => {
                state.serialize_field("_typeName", "ArrayOfHostVsanInternalSystemCmmdsQuery")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostVsanInternalSystemDeleteVsanObjectsResult(value) => {
                state.serialize_field("_typeName", "ArrayOfHostVsanInternalSystemDeleteVsanObjectsResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVsanNewPolicyBatch(value) => {
                state.serialize_field("_typeName", "ArrayOfVsanNewPolicyBatch")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVsanPolicyChangeBatch(value) => {
                state.serialize_field("_typeName", "ArrayOfVsanPolicyChangeBatch")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVsanPolicyCost(value) => {
                state.serialize_field("_typeName", "ArrayOfVsanPolicyCost")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVsanPolicySatisfiability(value) => {
                state.serialize_field("_typeName", "ArrayOfVsanPolicySatisfiability")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostVsanInternalSystemVsanObjectOperationResult(value) => {
                state.serialize_field("_typeName", "ArrayOfHostVsanInternalSystemVsanObjectOperationResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostVsanInternalSystemVsanPhysicalDiskDiagnosticsResult(value) => {
                state.serialize_field("_typeName", "ArrayOfHostVsanInternalSystemVsanPhysicalDiskDiagnosticsResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVvolDatastoreInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVvolDatastoreInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostVvolNqn(value) => {
                state.serialize_field("_typeName", "ArrayOfHostVvolNQN")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostVvolVolume(value) => {
                state.serialize_field("_typeName", "ArrayOfHostVvolVolume")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVVolHostPe(value) => {
                state.serialize_field("_typeName", "ArrayOfVVolHostPE")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostVvolVolumeHostVvolNqn(value) => {
                state.serialize_field("_typeName", "ArrayOfHostVvolVolumeHostVvolNQN")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostVvolVolumeSpecification(value) => {
                state.serialize_field("_typeName", "ArrayOfHostVvolVolumeSpecification")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNetDhcpConfigInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfNetDhcpConfigInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNetDhcpConfigInfoDhcpOptions(value) => {
                state.serialize_field("_typeName", "ArrayOfNetDhcpConfigInfoDhcpOptions")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNetDhcpConfigSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfNetDhcpConfigSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNetDhcpConfigSpecDhcpOptionsSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfNetDhcpConfigSpecDhcpOptionsSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNetDnsConfigInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfNetDnsConfigInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNetDnsConfigSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfNetDnsConfigSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNetIpConfigInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfNetIpConfigInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNetIpConfigInfoIpAddress(value) => {
                state.serialize_field("_typeName", "ArrayOfNetIpConfigInfoIpAddress")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNetIpConfigSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfNetIpConfigSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNetIpConfigSpecIpAddressSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfNetIpConfigSpecIpAddressSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNetIpRouteConfigInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfNetIpRouteConfigInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNetIpRouteConfigInfoGateway(value) => {
                state.serialize_field("_typeName", "ArrayOfNetIpRouteConfigInfoGateway")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNetIpRouteConfigInfoIpRoute(value) => {
                state.serialize_field("_typeName", "ArrayOfNetIpRouteConfigInfoIpRoute")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNetIpRouteConfigSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfNetIpRouteConfigSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNetIpRouteConfigSpecGatewaySpec(value) => {
                state.serialize_field("_typeName", "ArrayOfNetIpRouteConfigSpecGatewaySpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNetIpRouteConfigSpecIpRouteSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfNetIpRouteConfigSpecIpRouteSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNetIpStackInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfNetIpStackInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNetIpStackInfoDefaultRouter(value) => {
                state.serialize_field("_typeName", "ArrayOfNetIpStackInfoDefaultRouter")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNetIpStackInfoNetToMedia(value) => {
                state.serialize_field("_typeName", "ArrayOfNetIpStackInfoNetToMedia")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNetBiosConfigInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfNetBIOSConfigInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfWinNetBiosConfigInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfWinNetBIOSConfigInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfArrayUpdateSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfArrayUpdateSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfBoolOption(value) => {
                state.serialize_field("_typeName", "ArrayOfBoolOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfChoiceOption(value) => {
                state.serialize_field("_typeName", "ArrayOfChoiceOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFloatOption(value) => {
                state.serialize_field("_typeName", "ArrayOfFloatOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfIntOption(value) => {
                state.serialize_field("_typeName", "ArrayOfIntOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfLongOption(value) => {
                state.serialize_field("_typeName", "ArrayOfLongOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOptionDef(value) => {
                state.serialize_field("_typeName", "ArrayOfOptionDef")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOptionType(value) => {
                state.serialize_field("_typeName", "ArrayOfOptionType")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOptionValue(value) => {
                state.serialize_field("_typeName", "ArrayOfOptionValue")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfStringOption(value) => {
                state.serialize_field("_typeName", "ArrayOfStringOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfApplyProfile(value) => {
                state.serialize_field("_typeName", "ArrayOfApplyProfile")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfProfileApplyProfileElement(value) => {
                state.serialize_field("_typeName", "ArrayOfProfileApplyProfileElement")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfProfileApplyProfileProperty(value) => {
                state.serialize_field("_typeName", "ArrayOfProfileApplyProfileProperty")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfComplianceLocator(value) => {
                state.serialize_field("_typeName", "ArrayOfComplianceLocator")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfComplianceProfile(value) => {
                state.serialize_field("_typeName", "ArrayOfComplianceProfile")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfComplianceResult(value) => {
                state.serialize_field("_typeName", "ArrayOfComplianceResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfComplianceFailure(value) => {
                state.serialize_field("_typeName", "ArrayOfComplianceFailure")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfComplianceFailureComplianceFailureValues(value) => {
                state.serialize_field("_typeName", "ArrayOfComplianceFailureComplianceFailureValues")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfProfileCompositeExpression(value) => {
                state.serialize_field("_typeName", "ArrayOfProfileCompositeExpression")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCompositePolicyOption(value) => {
                state.serialize_field("_typeName", "ArrayOfCompositePolicyOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfProfileCompositePolicyOptionMetadata(value) => {
                state.serialize_field("_typeName", "ArrayOfProfileCompositePolicyOptionMetadata")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfProfileDeferredPolicyOptionParameter(value) => {
                state.serialize_field("_typeName", "ArrayOfProfileDeferredPolicyOptionParameter")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfProfileExpression(value) => {
                state.serialize_field("_typeName", "ArrayOfProfileExpression")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfProfileExpressionMetadata(value) => {
                state.serialize_field("_typeName", "ArrayOfProfileExpressionMetadata")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfProfileParameterMetadata(value) => {
                state.serialize_field("_typeName", "ArrayOfProfileParameterMetadata")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfProfileParameterMetadataParameterRelationMetadata(value) => {
                state.serialize_field("_typeName", "ArrayOfProfileParameterMetadataParameterRelationMetadata")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfProfilePolicy(value) => {
                state.serialize_field("_typeName", "ArrayOfProfilePolicy")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfProfilePolicyMetadata(value) => {
                state.serialize_field("_typeName", "ArrayOfProfilePolicyMetadata")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPolicyOption(value) => {
                state.serialize_field("_typeName", "ArrayOfPolicyOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfProfilePolicyOptionMetadata(value) => {
                state.serialize_field("_typeName", "ArrayOfProfilePolicyOptionMetadata")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfProfileConfigInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfProfileConfigInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfProfileCreateSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfProfileCreateSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfProfileDescription(value) => {
                state.serialize_field("_typeName", "ArrayOfProfileDescription")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfProfileDescriptionSection(value) => {
                state.serialize_field("_typeName", "ArrayOfProfileDescriptionSection")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfProfileSerializedCreateSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfProfileSerializedCreateSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfProfileMetadata(value) => {
                state.serialize_field("_typeName", "ArrayOfProfileMetadata")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfProfileMetadataProfileOperationMessage(value) => {
                state.serialize_field("_typeName", "ArrayOfProfileMetadataProfileOperationMessage")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfProfileMetadataProfileSortSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfProfileMetadataProfileSortSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfProfilePropertyPath(value) => {
                state.serialize_field("_typeName", "ArrayOfProfilePropertyPath")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfProfileProfileStructure(value) => {
                state.serialize_field("_typeName", "ArrayOfProfileProfileStructure")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfProfileProfileStructureProperty(value) => {
                state.serialize_field("_typeName", "ArrayOfProfileProfileStructureProperty")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfProfileSimpleExpression(value) => {
                state.serialize_field("_typeName", "ArrayOfProfileSimpleExpression")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfUserInputRequiredParameterMetadata(value) => {
                state.serialize_field("_typeName", "ArrayOfUserInputRequiredParameterMetadata")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterProfileCompleteConfigSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterProfileCompleteConfigSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterProfileConfigInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterProfileConfigInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterProfileConfigServiceCreateSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterProfileConfigServiceCreateSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterProfileConfigSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterProfileConfigSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterProfileCreateSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterProfileCreateSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfActiveDirectoryProfile(value) => {
                state.serialize_field("_typeName", "ArrayOfActiveDirectoryProfile")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfAnswerFile(value) => {
                state.serialize_field("_typeName", "ArrayOfAnswerFile")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfAnswerFileStatusResult(value) => {
                state.serialize_field("_typeName", "ArrayOfAnswerFileStatusResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfAnswerFileStatusError(value) => {
                state.serialize_field("_typeName", "ArrayOfAnswerFileStatusError")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfAuthenticationProfile(value) => {
                state.serialize_field("_typeName", "ArrayOfAuthenticationProfile")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDateTimeProfile(value) => {
                state.serialize_field("_typeName", "ArrayOfDateTimeProfile")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsHostVNicProfile(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsHostVNicProfile")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsProfile(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsProfile")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsServiceConsoleVNicProfile(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsServiceConsoleVNicProfile")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDvsVNicProfile(value) => {
                state.serialize_field("_typeName", "ArrayOfDvsVNicProfile")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfProfileExecuteResult(value) => {
                state.serialize_field("_typeName", "ArrayOfProfileExecuteResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfProfileExecuteError(value) => {
                state.serialize_field("_typeName", "ArrayOfProfileExecuteError")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFirewallProfile(value) => {
                state.serialize_field("_typeName", "ArrayOfFirewallProfile")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFirewallProfileRulesetProfile(value) => {
                state.serialize_field("_typeName", "ArrayOfFirewallProfileRulesetProfile")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostApplyProfile(value) => {
                state.serialize_field("_typeName", "ArrayOfHostApplyProfile")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostMemoryProfile(value) => {
                state.serialize_field("_typeName", "ArrayOfHostMemoryProfile")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostPortGroupProfile(value) => {
                state.serialize_field("_typeName", "ArrayOfHostPortGroupProfile")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostProfileCompleteConfigSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfHostProfileCompleteConfigSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostProfileConfigInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostProfileConfigInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostProfileConfigSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfHostProfileConfigSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostProfileHostBasedConfigSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfHostProfileHostBasedConfigSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostProfileSerializedHostProfileSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfHostProfileSerializedHostProfileSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostProfileValidationFailureInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostProfileValidationFailureInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostSpecification(value) => {
                state.serialize_field("_typeName", "ArrayOfHostSpecification")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostSubSpecification(value) => {
                state.serialize_field("_typeName", "ArrayOfHostSubSpecification")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfIpAddressProfile(value) => {
                state.serialize_field("_typeName", "ArrayOfIpAddressProfile")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfIpRouteProfile(value) => {
                state.serialize_field("_typeName", "ArrayOfIpRouteProfile")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNasStorageProfile(value) => {
                state.serialize_field("_typeName", "ArrayOfNasStorageProfile")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNetStackInstanceProfile(value) => {
                state.serialize_field("_typeName", "ArrayOfNetStackInstanceProfile")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNetworkPolicyProfile(value) => {
                state.serialize_field("_typeName", "ArrayOfNetworkPolicyProfile")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNetworkProfile(value) => {
                state.serialize_field("_typeName", "ArrayOfNetworkProfile")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNetworkProfileDnsConfigProfile(value) => {
                state.serialize_field("_typeName", "ArrayOfNetworkProfileDnsConfigProfile")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNsxHostVNicProfile(value) => {
                state.serialize_field("_typeName", "ArrayOfNsxHostVNicProfile")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOpaqueSwitchProfile(value) => {
                state.serialize_field("_typeName", "ArrayOfOpaqueSwitchProfile")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOptionProfile(value) => {
                state.serialize_field("_typeName", "ArrayOfOptionProfile")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPermissionProfile(value) => {
                state.serialize_field("_typeName", "ArrayOfPermissionProfile")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPhysicalNicProfile(value) => {
                state.serialize_field("_typeName", "ArrayOfPhysicalNicProfile")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPnicUplinkProfile(value) => {
                state.serialize_field("_typeName", "ArrayOfPnicUplinkProfile")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPortGroupProfile(value) => {
                state.serialize_field("_typeName", "ArrayOfPortGroupProfile")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualSwitchSelectionProfile(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualSwitchSelectionProfile")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVlanProfile(value) => {
                state.serialize_field("_typeName", "ArrayOfVlanProfile")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfAnswerFileCreateSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfAnswerFileCreateSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfAnswerFileOptionsCreateSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfAnswerFileOptionsCreateSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfAnswerFileSerializedCreateSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfAnswerFileSerializedCreateSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfApplyHostProfileConfigurationResult(value) => {
                state.serialize_field("_typeName", "ArrayOfApplyHostProfileConfigurationResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfApplyHostProfileConfigurationSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfApplyHostProfileConfigurationSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostProfileManagerCompositionResult(value) => {
                state.serialize_field("_typeName", "ArrayOfHostProfileManagerCompositionResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostProfileManagerCompositionResultResultElement(value) => {
                state.serialize_field("_typeName", "ArrayOfHostProfileManagerCompositionResultResultElement")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostProfileManagerCompositionValidationResult(value) => {
                state.serialize_field("_typeName", "ArrayOfHostProfileManagerCompositionValidationResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostProfileManagerCompositionValidationResultResultElement(value) => {
                state.serialize_field("_typeName", "ArrayOfHostProfileManagerCompositionValidationResultResultElement")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostProfileManagerConfigTaskList(value) => {
                state.serialize_field("_typeName", "ArrayOfHostProfileManagerConfigTaskList")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostProfilesEntityCustomizations(value) => {
                state.serialize_field("_typeName", "ArrayOfHostProfilesEntityCustomizations")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostProfileManagerHostToConfigSpecMap(value) => {
                state.serialize_field("_typeName", "ArrayOfHostProfileManagerHostToConfigSpecMap")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfStructuredCustomizations(value) => {
                state.serialize_field("_typeName", "ArrayOfStructuredCustomizations")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfSecurityProfile(value) => {
                state.serialize_field("_typeName", "ArrayOfSecurityProfile")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfServiceConsolePortGroupProfile(value) => {
                state.serialize_field("_typeName", "ArrayOfServiceConsolePortGroupProfile")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfServiceProfile(value) => {
                state.serialize_field("_typeName", "ArrayOfServiceProfile")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfStaticRouteProfile(value) => {
                state.serialize_field("_typeName", "ArrayOfStaticRouteProfile")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfStorageProfile(value) => {
                state.serialize_field("_typeName", "ArrayOfStorageProfile")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfUserGroupProfile(value) => {
                state.serialize_field("_typeName", "ArrayOfUserGroupProfile")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfUserProfile(value) => {
                state.serialize_field("_typeName", "ArrayOfUserProfile")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualSwitchProfile(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualSwitchProfile")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfLinkProfile(value) => {
                state.serialize_field("_typeName", "ArrayOfLinkProfile")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNumPortsProfile(value) => {
                state.serialize_field("_typeName", "ArrayOfNumPortsProfile")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmPortGroupProfile(value) => {
                state.serialize_field("_typeName", "ArrayOfVmPortGroupProfile")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfAfterStartupTaskScheduler(value) => {
                state.serialize_field("_typeName", "ArrayOfAfterStartupTaskScheduler")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDailyTaskScheduler(value) => {
                state.serialize_field("_typeName", "ArrayOfDailyTaskScheduler")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHourlyTaskScheduler(value) => {
                state.serialize_field("_typeName", "ArrayOfHourlyTaskScheduler")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfMonthlyByDayTaskScheduler(value) => {
                state.serialize_field("_typeName", "ArrayOfMonthlyByDayTaskScheduler")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfMonthlyByWeekdayTaskScheduler(value) => {
                state.serialize_field("_typeName", "ArrayOfMonthlyByWeekdayTaskScheduler")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfMonthlyTaskScheduler(value) => {
                state.serialize_field("_typeName", "ArrayOfMonthlyTaskScheduler")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOnceTaskScheduler(value) => {
                state.serialize_field("_typeName", "ArrayOfOnceTaskScheduler")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfRecurrentTaskScheduler(value) => {
                state.serialize_field("_typeName", "ArrayOfRecurrentTaskScheduler")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfScheduledTaskDescription(value) => {
                state.serialize_field("_typeName", "ArrayOfScheduledTaskDescription")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfScheduledTaskDetail(value) => {
                state.serialize_field("_typeName", "ArrayOfScheduledTaskDetail")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfScheduledTaskInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfScheduledTaskInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfScheduledTaskSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfScheduledTaskSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfTaskScheduler(value) => {
                state.serialize_field("_typeName", "ArrayOfTaskScheduler")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfWeeklyTaskScheduler(value) => {
                state.serialize_field("_typeName", "ArrayOfWeeklyTaskScheduler")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfApplyStorageRecommendationResult(value) => {
                state.serialize_field("_typeName", "ArrayOfApplyStorageRecommendationResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfStorageDrsAutomationConfig(value) => {
                state.serialize_field("_typeName", "ArrayOfStorageDrsAutomationConfig")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfStorageDrsConfigInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfStorageDrsConfigInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfStorageDrsConfigSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfStorageDrsConfigSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHbrDiskMigrationAction(value) => {
                state.serialize_field("_typeName", "ArrayOfHbrDiskMigrationAction")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfStorageDrsIoLoadBalanceConfig(value) => {
                state.serialize_field("_typeName", "ArrayOfStorageDrsIoLoadBalanceConfig")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfStorageDrsOptionSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfStorageDrsOptionSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPlacementAffinityRule(value) => {
                state.serialize_field("_typeName", "ArrayOfPlacementAffinityRule")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPlacementRankResult(value) => {
                state.serialize_field("_typeName", "ArrayOfPlacementRankResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPlacementRankSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfPlacementRankSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfStorageDrsPlacementRankVmSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfStorageDrsPlacementRankVmSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfStorageDrsPodConfigInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfStorageDrsPodConfigInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfStorageDrsPodConfigSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfStorageDrsPodConfigSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfStorageDrsPodSelectionSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfStorageDrsPodSelectionSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPodDiskLocator(value) => {
                state.serialize_field("_typeName", "ArrayOfPodDiskLocator")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmPodConfigForPlacement(value) => {
                state.serialize_field("_typeName", "ArrayOfVmPodConfigForPlacement")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfStorageDrsSpaceLoadBalanceConfig(value) => {
                state.serialize_field("_typeName", "ArrayOfStorageDrsSpaceLoadBalanceConfig")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfStorageMigrationAction(value) => {
                state.serialize_field("_typeName", "ArrayOfStorageMigrationAction")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfStoragePlacementAction(value) => {
                state.serialize_field("_typeName", "ArrayOfStoragePlacementAction")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfStoragePlacementResult(value) => {
                state.serialize_field("_typeName", "ArrayOfStoragePlacementResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfStoragePlacementSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfStoragePlacementSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualDiskAntiAffinityRuleSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualDiskAntiAffinityRuleSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualDiskRuleSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualDiskRuleSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfStorageDrsVmConfigInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfStorageDrsVmConfigInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfStorageDrsVmConfigSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfStorageDrsVmConfigSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVAppCloneSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfVAppCloneSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVAppCloneSpecNetworkMappingPair(value) => {
                state.serialize_field("_typeName", "ArrayOfVAppCloneSpecNetworkMappingPair")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVAppCloneSpecResourceMap(value) => {
                state.serialize_field("_typeName", "ArrayOfVAppCloneSpecResourceMap")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVAppEntityConfigInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVAppEntityConfigInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVAppIpAssignmentInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVAppIPAssignmentInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfIpPool(value) => {
                state.serialize_field("_typeName", "ArrayOfIpPool")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfIpPoolAssociation(value) => {
                state.serialize_field("_typeName", "ArrayOfIpPoolAssociation")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfIpPoolIpPoolConfigInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfIpPoolIpPoolConfigInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVAppOvfSectionInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVAppOvfSectionInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVAppOvfSectionSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfVAppOvfSectionSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVAppProductInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVAppProductInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVAppProductSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfVAppProductSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVAppPropertyInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVAppPropertyInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVAppPropertySpec(value) => {
                state.serialize_field("_typeName", "ArrayOfVAppPropertySpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVAppConfigInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVAppConfigInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVAppConfigSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfVAppConfigSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualAppImportSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualAppImportSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmConfigInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVmConfigInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVmConfigSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfVmConfigSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfClusterNetworkConfigSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfClusterNetworkConfigSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFailoverNodeInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfFailoverNodeInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNodeDeploymentSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfNodeDeploymentSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNodeNetworkSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfNodeNetworkSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPassiveNodeDeploymentSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfPassiveNodeDeploymentSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPassiveNodeNetworkSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfPassiveNodeNetworkSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfSourceNodeSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfSourceNodeSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVchaClusterConfigInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVchaClusterConfigInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVchaClusterConfigSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfVchaClusterConfigSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVchaClusterDeploymentSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfVchaClusterDeploymentSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVchaClusterNetworkSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfVchaClusterNetworkSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfWitnessNodeInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfWitnessNodeInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVchaClusterHealth(value) => {
                state.serialize_field("_typeName", "ArrayOfVchaClusterHealth")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVchaClusterRuntimeInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVchaClusterRuntimeInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVchaNodeRuntimeInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVchaNodeRuntimeInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineAffinityInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineAffinityInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineBaseIndependentFilterSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineBaseIndependentFilterSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineBootOptions(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineBootOptions")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineBootOptionsBootableCdromDevice(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineBootOptionsBootableCdromDevice")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineBootOptionsBootableDevice(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineBootOptionsBootableDevice")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineBootOptionsBootableDiskDevice(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineBootOptionsBootableDiskDevice")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineBootOptionsBootableEthernetDevice(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineBootOptionsBootableEthernetDevice")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineBootOptionsBootableFloppyDevice(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineBootOptionsBootableFloppyDevice")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineCapability(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineCapability")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineCdromInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineCdromInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineCertThumbprint(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineCertThumbprint")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineCloneSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineCloneSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineConfigInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineConfigInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineConfigInfoDatastoreUrlPair(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineConfigInfoDatastoreUrlPair")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineConfigInfoOverheadInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineConfigInfoOverheadInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineConfigOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineConfigOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineConfigOptionDescriptor(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineConfigOptionDescriptor")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineConfigSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineConfigSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineCpuIdInfoSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineCpuIdInfoSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfConfigTarget(value) => {
                state.serialize_field("_typeName", "ArrayOfConfigTarget")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineConsolePreferences(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineConsolePreferences")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineContentLibraryItemInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineContentLibraryItemInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineDatastoreInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineDatastoreInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDatastoreOption(value) => {
                state.serialize_field("_typeName", "ArrayOfDatastoreOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineDatastoreVolumeOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineDatastoreVolumeOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineDefaultPowerOpInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineDefaultPowerOpInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineDefaultProfileSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineDefaultProfileSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineDefinedProfileSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineDefinedProfileSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineDeviceRuntimeInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineDeviceRuntimeInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineDeviceRuntimeInfoDeviceRuntimeState(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineDeviceRuntimeInfoDeviceRuntimeState")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeState(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeState")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineDiskDeviceInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineDiskDeviceInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineDvxClassInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineDvxClassInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineDynamicPassthroughInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineDynamicPassthroughInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineEmptyIndependentFilterSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineEmptyIndependentFilterSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineEmptyProfileSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineEmptyProfileSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFaultToleranceConfigInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfFaultToleranceConfigInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFaultToleranceConfigSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfFaultToleranceConfigSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFaultToleranceMetaSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfFaultToleranceMetaSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFaultTolerancePrimaryConfigInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfFaultTolerancePrimaryConfigInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFaultToleranceSecondaryConfigInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfFaultToleranceSecondaryConfigInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFaultToleranceSecondaryOpResult(value) => {
                state.serialize_field("_typeName", "ArrayOfFaultToleranceSecondaryOpResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFaultToleranceVmConfigSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfFaultToleranceVMConfigSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFaultToleranceDiskSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfFaultToleranceDiskSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineFeatureRequirement(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineFeatureRequirement")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineFileInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineFileInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineFileLayout(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineFileLayout")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineFileLayoutDiskLayout(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineFileLayoutDiskLayout")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineFileLayoutSnapshotLayout(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineFileLayoutSnapshotLayout")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineFileLayoutEx(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineFileLayoutEx")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineFileLayoutExDiskLayout(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineFileLayoutExDiskLayout")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineFileLayoutExDiskUnit(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineFileLayoutExDiskUnit")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineFileLayoutExFileInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineFileLayoutExFileInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineFileLayoutExSnapshotLayout(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineFileLayoutExSnapshotLayout")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineFlagInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineFlagInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineFloppyInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineFloppyInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineForkConfigInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineForkConfigInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGuestInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfGuestInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGuestInfoCustomizationInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfGuestInfoCustomizationInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGuestDiskInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfGuestDiskInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGuestInfoNamespaceGenerationInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfGuestInfoNamespaceGenerationInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGuestNicInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfGuestNicInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGuestScreenInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfGuestScreenInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGuestStackInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfGuestStackInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGuestInfoVirtualDiskMapping(value) => {
                state.serialize_field("_typeName", "ArrayOfGuestInfoVirtualDiskMapping")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineGuestIntegrityInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineGuestIntegrityInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineGuestMonitoringModeInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineGuestMonitoringModeInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGuestOsDescriptor(value) => {
                state.serialize_field("_typeName", "ArrayOfGuestOsDescriptor")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineGuestQuiesceSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineGuestQuiesceSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineIdeDiskDeviceInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineIdeDiskDeviceInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineIdeDiskDevicePartitionInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineIdeDiskDevicePartitionInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineIndependentFilterSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineIndependentFilterSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineInstantCloneSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineInstantCloneSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineLegacyNetworkSwitchInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineLegacyNetworkSwitchInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineMessage(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineMessage")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineMetadataManagerVmMetadata(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineMetadataManagerVmMetadata")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineMetadataManagerVmMetadataInput(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineMetadataManagerVmMetadataInput")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineMetadataManagerVmMetadataOwner(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineMetadataManagerVmMetadataOwner")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineMetadataManagerVmMetadataResult(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineMetadataManagerVmMetadataResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineNetworkInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineNetworkInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineNetworkShaperInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineNetworkShaperInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfOpaqueNetworkTargetInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfOpaqueNetworkTargetInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineParallelInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineParallelInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachinePciPassthroughInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachinePciPassthroughInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachinePciSharedGpuPassthroughInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachinePciSharedGpuPassthroughInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachinePrecisionClockInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachinePrecisionClockInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineProfileDetails(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineProfileDetails")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineProfileDetailsDiskProfileDetails(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineProfileDetailsDiskProfileDetails")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineProfileRawData(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineProfileRawData")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineProfileSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineProfileSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachinePropertyRelation(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachinePropertyRelation")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineQuestionInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineQuestionInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineRelocateSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineRelocateSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineRelocateSpecDiskLocator(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineRelocateSpecDiskLocator")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineRelocateSpecDiskLocatorBackingSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineRelocateSpecDiskLocatorBackingSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfReplicationConfigSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfReplicationConfigSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfReplicationInfoDiskSettings(value) => {
                state.serialize_field("_typeName", "ArrayOfReplicationInfoDiskSettings")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineRuntimeInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineRuntimeInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineRuntimeInfoDasProtectionState(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineRuntimeInfoDasProtectionState")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfScheduledHardwareUpgradeInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfScheduledHardwareUpgradeInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineScsiDiskDeviceInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineScsiDiskDeviceInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineScsiPassthroughInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineScsiPassthroughInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineSerialInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineSerialInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineSgxInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineSgxInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineSgxTargetInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineSgxTargetInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineSnapshotInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineSnapshotInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineSnapshotTree(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineSnapshotTree")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineSoundInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineSoundInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineSriovDevicePoolInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineSriovDevicePoolInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineSriovInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineSriovInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineSriovNetworkDevicePoolInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineSriovNetworkDevicePoolInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineStorageInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineStorageInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineUsageOnDatastore(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineUsageOnDatastore")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineSummary(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineSummary")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineConfigSummary(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineConfigSummary")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineGuestSummary(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineGuestSummary")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineQuickStats(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineQuickStats")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineQuickStatsMemoryTierStats(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineQuickStatsMemoryTierStats")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineStorageSummary(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineStorageSummary")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineTargetInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineTargetInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfToolsConfigInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfToolsConfigInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfToolsConfigInfoToolsLastInstallInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfToolsConfigInfoToolsLastInstallInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineUsbInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineUsbInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfUsbScanCodeSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfUsbScanCodeSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfUsbScanCodeSpecKeyEvent(value) => {
                state.serialize_field("_typeName", "ArrayOfUsbScanCodeSpecKeyEvent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfUsbScanCodeSpecModifierType(value) => {
                state.serialize_field("_typeName", "ArrayOfUsbScanCodeSpecModifierType")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineVFlashModuleInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineVFlashModuleInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineVMotionStunTimeInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineVMotionStunTimeInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineVcpuConfig(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineVcpuConfig")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineVendorDeviceGroupInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineVendorDeviceGroupInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineVendorDeviceGroupInfoComponentDeviceInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineVendorDeviceGroupInfoComponentDeviceInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineVgpuDeviceInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineVgpuDeviceInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineVgpuProfileInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineVgpuProfileInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineVirtualDeviceGroups(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineVirtualDeviceGroups")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineVirtualDeviceGroupsDeviceGroup(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineVirtualDeviceGroupsDeviceGroup")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineVirtualDeviceGroupsVendorDeviceGroup(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineVirtualDeviceGroupsVendorDeviceGroup")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineVirtualDeviceSwap(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineVirtualDeviceSwap")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineVirtualDeviceSwapDeviceSwapInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineVirtualDeviceSwapDeviceSwapInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualHardware(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualHardware")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualHardwareOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualHardwareOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineVirtualNuma(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineVirtualNuma")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineVirtualNumaInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineVirtualNumaInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineVirtualPMem(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineVirtualPMem")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineImportSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineImportSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineWindowsQuiesceSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineWindowsQuiesceSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCheckResult(value) => {
                state.serialize_field("_typeName", "ArrayOfCheckResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCustomizationAdapterMapping(value) => {
                state.serialize_field("_typeName", "ArrayOfCustomizationAdapterMapping")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCustomizationAutoIpV6Generator(value) => {
                state.serialize_field("_typeName", "ArrayOfCustomizationAutoIpV6Generator")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCustomizationCloudinitPrep(value) => {
                state.serialize_field("_typeName", "ArrayOfCustomizationCloudinitPrep")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCustomizationCustomIpGenerator(value) => {
                state.serialize_field("_typeName", "ArrayOfCustomizationCustomIpGenerator")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCustomizationCustomIpV6Generator(value) => {
                state.serialize_field("_typeName", "ArrayOfCustomizationCustomIpV6Generator")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCustomizationCustomName(value) => {
                state.serialize_field("_typeName", "ArrayOfCustomizationCustomName")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCustomizationDhcpIpGenerator(value) => {
                state.serialize_field("_typeName", "ArrayOfCustomizationDhcpIpGenerator")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCustomizationDhcpIpV6Generator(value) => {
                state.serialize_field("_typeName", "ArrayOfCustomizationDhcpIpV6Generator")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCustomizationFixedIp(value) => {
                state.serialize_field("_typeName", "ArrayOfCustomizationFixedIp")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCustomizationFixedIpV6(value) => {
                state.serialize_field("_typeName", "ArrayOfCustomizationFixedIpV6")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCustomizationFixedName(value) => {
                state.serialize_field("_typeName", "ArrayOfCustomizationFixedName")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCustomizationGlobalIpSettings(value) => {
                state.serialize_field("_typeName", "ArrayOfCustomizationGlobalIPSettings")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCustomizationGuiRunOnce(value) => {
                state.serialize_field("_typeName", "ArrayOfCustomizationGuiRunOnce")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCustomizationGuiUnattended(value) => {
                state.serialize_field("_typeName", "ArrayOfCustomizationGuiUnattended")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCustomizationIpSettings(value) => {
                state.serialize_field("_typeName", "ArrayOfCustomizationIPSettings")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCustomizationIpSettingsIpV6AddressSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfCustomizationIPSettingsIpV6AddressSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCustomizationIdentification(value) => {
                state.serialize_field("_typeName", "ArrayOfCustomizationIdentification")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCustomizationIdentitySettings(value) => {
                state.serialize_field("_typeName", "ArrayOfCustomizationIdentitySettings")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCustomizationIpGenerator(value) => {
                state.serialize_field("_typeName", "ArrayOfCustomizationIpGenerator")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCustomizationIpV6Generator(value) => {
                state.serialize_field("_typeName", "ArrayOfCustomizationIpV6Generator")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCustomizationLicenseFilePrintData(value) => {
                state.serialize_field("_typeName", "ArrayOfCustomizationLicenseFilePrintData")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCustomizationLinuxOptions(value) => {
                state.serialize_field("_typeName", "ArrayOfCustomizationLinuxOptions")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCustomizationLinuxPrep(value) => {
                state.serialize_field("_typeName", "ArrayOfCustomizationLinuxPrep")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCustomizationName(value) => {
                state.serialize_field("_typeName", "ArrayOfCustomizationName")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCustomizationOptions(value) => {
                state.serialize_field("_typeName", "ArrayOfCustomizationOptions")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCustomizationPassword(value) => {
                state.serialize_field("_typeName", "ArrayOfCustomizationPassword")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCustomizationPrefixName(value) => {
                state.serialize_field("_typeName", "ArrayOfCustomizationPrefixName")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCustomizationSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfCustomizationSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCustomizationStatelessIpV6Generator(value) => {
                state.serialize_field("_typeName", "ArrayOfCustomizationStatelessIpV6Generator")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCustomizationSysprep(value) => {
                state.serialize_field("_typeName", "ArrayOfCustomizationSysprep")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCustomizationSysprepText(value) => {
                state.serialize_field("_typeName", "ArrayOfCustomizationSysprepText")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCustomizationUnknownIpGenerator(value) => {
                state.serialize_field("_typeName", "ArrayOfCustomizationUnknownIpGenerator")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCustomizationUnknownIpV6Generator(value) => {
                state.serialize_field("_typeName", "ArrayOfCustomizationUnknownIpV6Generator")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCustomizationUnknownName(value) => {
                state.serialize_field("_typeName", "ArrayOfCustomizationUnknownName")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCustomizationUserData(value) => {
                state.serialize_field("_typeName", "ArrayOfCustomizationUserData")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCustomizationVirtualMachineName(value) => {
                state.serialize_field("_typeName", "ArrayOfCustomizationVirtualMachineName")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCustomizationWinOptions(value) => {
                state.serialize_field("_typeName", "ArrayOfCustomizationWinOptions")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostDiskMappingInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostDiskMappingInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostDiskMappingPartitionInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfHostDiskMappingPartitionInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostDiskMappingOption(value) => {
                state.serialize_field("_typeName", "ArrayOfHostDiskMappingOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostDiskMappingPartitionOption(value) => {
                state.serialize_field("_typeName", "ArrayOfHostDiskMappingPartitionOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfParaVirtualScsiController(value) => {
                state.serialize_field("_typeName", "ArrayOfParaVirtualSCSIController")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfParaVirtualScsiControllerOption(value) => {
                state.serialize_field("_typeName", "ArrayOfParaVirtualSCSIControllerOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualAhciController(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualAHCIController")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualAhciControllerOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualAHCIControllerOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualBusLogicController(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualBusLogicController")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualBusLogicControllerOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualBusLogicControllerOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualCdrom(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualCdrom")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualCdromAtapiBackingInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualCdromAtapiBackingInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualCdromIsoBackingInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualCdromIsoBackingInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualCdromPassthroughBackingInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualCdromPassthroughBackingInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualCdromRemoteAtapiBackingInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualCdromRemoteAtapiBackingInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualCdromRemotePassthroughBackingInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualCdromRemotePassthroughBackingInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualCdromOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualCdromOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualCdromAtapiBackingOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualCdromAtapiBackingOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualCdromIsoBackingOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualCdromIsoBackingOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualCdromPassthroughBackingOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualCdromPassthroughBackingOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualCdromRemoteAtapiBackingOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualCdromRemoteAtapiBackingOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualCdromRemotePassthroughBackingOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualCdromRemotePassthroughBackingOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualController(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualController")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualControllerOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualControllerOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualDevice(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualDevice")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualDeviceBackingInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualDeviceBackingInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualDeviceBusSlotInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualDeviceBusSlotInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualDeviceConnectInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualDeviceConnectInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualDeviceDeviceBackingInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualDeviceDeviceBackingInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualDeviceDeviceGroupInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualDeviceDeviceGroupInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualDeviceFileBackingInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualDeviceFileBackingInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualDevicePciBusSlotInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualDevicePciBusSlotInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualDevicePipeBackingInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualDevicePipeBackingInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualDeviceRemoteDeviceBackingInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualDeviceRemoteDeviceBackingInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualDeviceUriBackingInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualDeviceURIBackingInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualDeviceOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualDeviceOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualDeviceBackingOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualDeviceBackingOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualDeviceBusSlotOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualDeviceBusSlotOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualDeviceConnectOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualDeviceConnectOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualDeviceDeviceBackingOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualDeviceDeviceBackingOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualDeviceFileBackingOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualDeviceFileBackingOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualDevicePipeBackingOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualDevicePipeBackingOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualDeviceRemoteDeviceBackingOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualDeviceRemoteDeviceBackingOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualDeviceUriBackingOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualDeviceURIBackingOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualDeviceConfigSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualDeviceConfigSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualDeviceConfigSpecBackingSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualDeviceConfigSpecBackingSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualDisk(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualDisk")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualDiskFlatVer1BackingInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualDiskFlatVer1BackingInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualDiskFlatVer2BackingInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualDiskFlatVer2BackingInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualDiskLocalPMemBackingInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualDiskLocalPMemBackingInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualDiskPartitionedRawDiskVer2BackingInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualDiskPartitionedRawDiskVer2BackingInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualDiskRawDiskMappingVer1BackingInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualDiskRawDiskMappingVer1BackingInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualDiskRawDiskVer2BackingInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualDiskRawDiskVer2BackingInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualDiskSeSparseBackingInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualDiskSeSparseBackingInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualDiskSparseVer1BackingInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualDiskSparseVer1BackingInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualDiskSparseVer2BackingInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualDiskSparseVer2BackingInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualDiskVFlashCacheConfigInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualDiskVFlashCacheConfigInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualDiskId(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualDiskId")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualDiskOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualDiskOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualDiskDeltaDiskFormatsSupported(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualDiskDeltaDiskFormatsSupported")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualDiskFlatVer1BackingOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualDiskFlatVer1BackingOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualDiskFlatVer2BackingOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualDiskFlatVer2BackingOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualDiskLocalPMemBackingOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualDiskLocalPMemBackingOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualDiskPartitionedRawDiskVer2BackingOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualDiskPartitionedRawDiskVer2BackingOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualDiskRawDiskMappingVer1BackingOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualDiskRawDiskMappingVer1BackingOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualDiskRawDiskVer2BackingOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualDiskRawDiskVer2BackingOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualDiskSeSparseBackingOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualDiskSeSparseBackingOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualDiskSparseVer1BackingOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualDiskSparseVer1BackingOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualDiskSparseVer2BackingOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualDiskSparseVer2BackingOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualDiskOptionVFlashCacheConfigOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualDiskOptionVFlashCacheConfigOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualDiskConfigSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualDiskConfigSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualE1000(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualE1000")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualE1000Option(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualE1000Option")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualE1000E(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualE1000e")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualE1000EOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualE1000eOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualEnsoniq1371(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualEnsoniq1371")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualEnsoniq1371Option(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualEnsoniq1371Option")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualEthernetCard(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualEthernetCard")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualEthernetCardDistributedVirtualPortBackingInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualEthernetCardDistributedVirtualPortBackingInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualEthernetCardLegacyNetworkBackingInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualEthernetCardLegacyNetworkBackingInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualEthernetCardNetworkBackingInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualEthernetCardNetworkBackingInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualEthernetCardOpaqueNetworkBackingInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualEthernetCardOpaqueNetworkBackingInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualEthernetCardResourceAllocation(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualEthernetCardResourceAllocation")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualEthernetCardOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualEthernetCardOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualEthernetCardDvPortBackingOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualEthernetCardDVPortBackingOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualEthernetCardLegacyNetworkBackingOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualEthernetCardLegacyNetworkBackingOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualEthernetCardNetworkBackingOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualEthernetCardNetworkBackingOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualEthernetCardOpaqueNetworkBackingOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualEthernetCardOpaqueNetworkBackingOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualFloppy(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualFloppy")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualFloppyDeviceBackingInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualFloppyDeviceBackingInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualFloppyImageBackingInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualFloppyImageBackingInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualFloppyRemoteDeviceBackingInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualFloppyRemoteDeviceBackingInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualFloppyOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualFloppyOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualFloppyDeviceBackingOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualFloppyDeviceBackingOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualFloppyImageBackingOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualFloppyImageBackingOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualFloppyRemoteDeviceBackingOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualFloppyRemoteDeviceBackingOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualHdAudioCard(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualHdAudioCard")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualHdAudioCardOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualHdAudioCardOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualIdeController(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualIDEController")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualIdeControllerOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualIDEControllerOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualKeyboard(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualKeyboard")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualKeyboardOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualKeyboardOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualLsiLogicController(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualLsiLogicController")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualLsiLogicControllerOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualLsiLogicControllerOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualLsiLogicSasController(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualLsiLogicSASController")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualLsiLogicSasControllerOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualLsiLogicSASControllerOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualNvdimm(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualNVDIMM")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualNvdimmBackingInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualNVDIMMBackingInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualNvdimmController(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualNVDIMMController")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualNvdimmControllerOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualNVDIMMControllerOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualNvdimmOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualNVDIMMOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualNvmeController(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualNVMEController")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualNvmeControllerOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualNVMEControllerOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualPciController(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualPCIController")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualPciControllerOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualPCIControllerOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualPciPassthrough(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualPCIPassthrough")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualPciPassthroughAllowedDevice(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualPCIPassthroughAllowedDevice")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualPciPassthroughDeviceBackingInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualPCIPassthroughDeviceBackingInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualPciPassthroughDvxBackingInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualPCIPassthroughDvxBackingInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualPciPassthroughDynamicBackingInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualPCIPassthroughDynamicBackingInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualPciPassthroughPluginBackingInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualPCIPassthroughPluginBackingInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualPciPassthroughVmiopBackingInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualPCIPassthroughVmiopBackingInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualPciPassthroughOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualPCIPassthroughOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualPciPassthroughDeviceBackingOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualPCIPassthroughDeviceBackingOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualPciPassthroughDvxBackingOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualPCIPassthroughDvxBackingOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualPciPassthroughDynamicBackingOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualPCIPassthroughDynamicBackingOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualPciPassthroughPluginBackingOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualPCIPassthroughPluginBackingOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualPciPassthroughVmiopBackingOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualPCIPassthroughVmiopBackingOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualPcNet32(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualPCNet32")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualPcNet32Option(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualPCNet32Option")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualPs2Controller(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualPS2Controller")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualPs2ControllerOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualPS2ControllerOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualParallelPort(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualParallelPort")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualParallelPortDeviceBackingInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualParallelPortDeviceBackingInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualParallelPortFileBackingInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualParallelPortFileBackingInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualParallelPortOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualParallelPortOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualParallelPortDeviceBackingOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualParallelPortDeviceBackingOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualParallelPortFileBackingOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualParallelPortFileBackingOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualPointingDevice(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualPointingDevice")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualPointingDeviceDeviceBackingInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualPointingDeviceDeviceBackingInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualPointingDeviceOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualPointingDeviceOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualPointingDeviceBackingOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualPointingDeviceBackingOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualPrecisionClock(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualPrecisionClock")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualPrecisionClockSystemClockBackingInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualPrecisionClockSystemClockBackingInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualPrecisionClockOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualPrecisionClockOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualPrecisionClockSystemClockBackingOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualPrecisionClockSystemClockBackingOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualSataController(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualSATAController")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualSataControllerOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualSATAControllerOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualScsiController(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualSCSIController")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualScsiControllerOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualSCSIControllerOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualScsiPassthrough(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualSCSIPassthrough")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualScsiPassthroughDeviceBackingInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualSCSIPassthroughDeviceBackingInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualScsiPassthroughOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualSCSIPassthroughOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualScsiPassthroughDeviceBackingOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualSCSIPassthroughDeviceBackingOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualSioController(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualSIOController")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualSioControllerOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualSIOControllerOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualSerialPort(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualSerialPort")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualSerialPortDeviceBackingInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualSerialPortDeviceBackingInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualSerialPortFileBackingInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualSerialPortFileBackingInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualSerialPortPipeBackingInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualSerialPortPipeBackingInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualSerialPortThinPrintBackingInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualSerialPortThinPrintBackingInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualSerialPortUriBackingInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualSerialPortURIBackingInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualSerialPortOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualSerialPortOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualSerialPortDeviceBackingOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualSerialPortDeviceBackingOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualSerialPortFileBackingOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualSerialPortFileBackingOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualSerialPortPipeBackingOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualSerialPortPipeBackingOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualSerialPortThinPrintBackingOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualSerialPortThinPrintBackingOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualSerialPortUriBackingOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualSerialPortURIBackingOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualSoundBlaster16(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualSoundBlaster16")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualSoundBlaster16Option(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualSoundBlaster16Option")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualSoundCard(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualSoundCard")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualSoundCardDeviceBackingInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualSoundCardDeviceBackingInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualSoundCardOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualSoundCardOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualSoundCardDeviceBackingOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualSoundCardDeviceBackingOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualSriovEthernetCard(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualSriovEthernetCard")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualSriovEthernetCardSriovBackingInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualSriovEthernetCardSriovBackingInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualSriovEthernetCardOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualSriovEthernetCardOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualSriovEthernetCardSriovBackingOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualSriovEthernetCardSriovBackingOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualTpm(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualTPM")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualTpmOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualTPMOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualUsb(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualUSB")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualUsbRemoteClientBackingInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualUSBRemoteClientBackingInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualUsbRemoteHostBackingInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualUSBRemoteHostBackingInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualUsbusbBackingInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualUSBUSBBackingInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualUsbController(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualUSBController")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualUsbControllerPciBusSlotInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualUSBControllerPciBusSlotInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualUsbControllerOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualUSBControllerOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualUsbOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualUSBOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualUsbRemoteClientBackingOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualUSBRemoteClientBackingOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualUsbRemoteHostBackingOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualUSBRemoteHostBackingOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualUsbusbBackingOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualUSBUSBBackingOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualUsbxhciController(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualUSBXHCIController")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualUsbxhciControllerOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualUSBXHCIControllerOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineVmciDevice(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineVMCIDevice")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineVmciDeviceFilterInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineVMCIDeviceFilterInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineVmciDeviceFilterSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineVMCIDeviceFilterSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineVmciDeviceOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineVMCIDeviceOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineVmciDeviceOptionFilterSpecOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineVMCIDeviceOptionFilterSpecOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineVmirom(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineVMIROM")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualVmiromOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualVMIROMOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineVideoCard(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineVideoCard")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualVideoCardOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualVideoCardOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualVmxnet(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualVmxnet")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualVmxnet2(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualVmxnet2")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualVmxnet2Option(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualVmxnet2Option")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualVmxnet3(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualVmxnet3")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualVmxnet3Option(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualVmxnet3Option")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualVmxnet3Vrdma(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualVmxnet3Vrdma")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualVmxnet3VrdmaOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualVmxnet3VrdmaOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualVmxnetOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualVmxnetOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualWdt(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualWDT")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualWdtOption(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualWDTOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGuestAliases(value) => {
                state.serialize_field("_typeName", "ArrayOfGuestAliases")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGuestAuthAliasInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfGuestAuthAliasInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGuestAuthAnySubject(value) => {
                state.serialize_field("_typeName", "ArrayOfGuestAuthAnySubject")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGuestAuthNamedSubject(value) => {
                state.serialize_field("_typeName", "ArrayOfGuestAuthNamedSubject")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGuestAuthSubject(value) => {
                state.serialize_field("_typeName", "ArrayOfGuestAuthSubject")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGuestMappedAliases(value) => {
                state.serialize_field("_typeName", "ArrayOfGuestMappedAliases")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGuestFileAttributes(value) => {
                state.serialize_field("_typeName", "ArrayOfGuestFileAttributes")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGuestFileInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfGuestFileInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFileTransferInformation(value) => {
                state.serialize_field("_typeName", "ArrayOfFileTransferInformation")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGuestListFileInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfGuestListFileInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGuestPosixFileAttributes(value) => {
                state.serialize_field("_typeName", "ArrayOfGuestPosixFileAttributes")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGuestWindowsFileAttributes(value) => {
                state.serialize_field("_typeName", "ArrayOfGuestWindowsFileAttributes")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGuestAuthentication(value) => {
                state.serialize_field("_typeName", "ArrayOfGuestAuthentication")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNamePasswordAuthentication(value) => {
                state.serialize_field("_typeName", "ArrayOfNamePasswordAuthentication")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGuestProcessInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfGuestProcessInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGuestProgramSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfGuestProgramSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGuestWindowsProgramSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfGuestWindowsProgramSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfSamlTokenAuthentication(value) => {
                state.serialize_field("_typeName", "ArrayOfSAMLTokenAuthentication")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfSspiAuthentication(value) => {
                state.serialize_field("_typeName", "ArrayOfSSPIAuthentication")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfTicketedSessionAuthentication(value) => {
                state.serialize_field("_typeName", "ArrayOfTicketedSessionAuthentication")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGuestRegKeySpec(value) => {
                state.serialize_field("_typeName", "ArrayOfGuestRegKeySpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGuestRegKeyNameSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfGuestRegKeyNameSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGuestRegKeyRecordSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfGuestRegKeyRecordSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGuestRegValueSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfGuestRegValueSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGuestRegValueBinarySpec(value) => {
                state.serialize_field("_typeName", "ArrayOfGuestRegValueBinarySpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGuestRegValueDataSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfGuestRegValueDataSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGuestRegValueDwordSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfGuestRegValueDwordSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGuestRegValueExpandStringSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfGuestRegValueExpandStringSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGuestRegValueMultiStringSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfGuestRegValueMultiStringSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGuestRegValueNameSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfGuestRegValueNameSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGuestRegValueQwordSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfGuestRegValueQwordSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGuestRegValueStringSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfGuestRegValueStringSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDeviceGroupId(value) => {
                state.serialize_field("_typeName", "ArrayOfDeviceGroupId")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFaultDomainId(value) => {
                state.serialize_field("_typeName", "ArrayOfFaultDomainId")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfReplicationGroupId(value) => {
                state.serialize_field("_typeName", "ArrayOfReplicationGroupId")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfReplicationSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfReplicationSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVsanClusterConfigInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVsanClusterConfigInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVsanClusterConfigInfoHostDefaultInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVsanClusterConfigInfoHostDefaultInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVsanHostClusterStatus(value) => {
                state.serialize_field("_typeName", "ArrayOfVsanHostClusterStatus")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVsanHostClusterStatusState(value) => {
                state.serialize_field("_typeName", "ArrayOfVsanHostClusterStatusState")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVsanHostClusterStatusStateCompletionEstimate(value) => {
                state.serialize_field("_typeName", "ArrayOfVsanHostClusterStatusStateCompletionEstimate")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVsanHostConfigInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVsanHostConfigInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVsanHostConfigInfoClusterInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVsanHostConfigInfoClusterInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVsanHostFaultDomainInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVsanHostFaultDomainInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVsanHostConfigInfoNetworkInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVsanHostConfigInfoNetworkInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVsanHostConfigInfoNetworkInfoPortConfig(value) => {
                state.serialize_field("_typeName", "ArrayOfVsanHostConfigInfoNetworkInfoPortConfig")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVsanHostConfigInfoStorageInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVsanHostConfigInfoStorageInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVsanHostDecommissionMode(value) => {
                state.serialize_field("_typeName", "ArrayOfVsanHostDecommissionMode")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVsanHostDiskMapInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVsanHostDiskMapInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVsanHostDiskMapResult(value) => {
                state.serialize_field("_typeName", "ArrayOfVsanHostDiskMapResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVsanHostDiskMapping(value) => {
                state.serialize_field("_typeName", "ArrayOfVsanHostDiskMapping")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVsanHostDiskResult(value) => {
                state.serialize_field("_typeName", "ArrayOfVsanHostDiskResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVsanHostIpConfig(value) => {
                state.serialize_field("_typeName", "ArrayOfVsanHostIpConfig")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVsanHostMembershipInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVsanHostMembershipInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVsanHostVsanDiskInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVsanHostVsanDiskInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVsanHostRuntimeInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVsanHostRuntimeInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVsanHostRuntimeInfoDiskIssue(value) => {
                state.serialize_field("_typeName", "ArrayOfVsanHostRuntimeInfoDiskIssue")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfBaseConfigInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfBaseConfigInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfBaseConfigInfoBackingInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfBaseConfigInfoBackingInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfBaseConfigInfoDiskFileBackingInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfBaseConfigInfoDiskFileBackingInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfBaseConfigInfoFileBackingInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfBaseConfigInfoFileBackingInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfBaseConfigInfoRawDiskMappingBackingInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfBaseConfigInfoRawDiskMappingBackingInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVslmCloneSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfVslmCloneSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVslmCreateSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfVslmCreateSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVslmCreateSpecBackingSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfVslmCreateSpecBackingSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVslmCreateSpecDiskFileBackingSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfVslmCreateSpecDiskFileBackingSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVslmCreateSpecRawDiskMappingBackingSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfVslmCreateSpecRawDiskMappingBackingSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDiskCryptoSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfDiskCryptoSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfId(value) => {
                state.serialize_field("_typeName", "ArrayOfID")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfvslmInfrastructureObjectPolicy(value) => {
                state.serialize_field("_typeName", "ArrayOfvslmInfrastructureObjectPolicy")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfvslmInfrastructureObjectPolicySpec(value) => {
                state.serialize_field("_typeName", "ArrayOfvslmInfrastructureObjectPolicySpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVslmMigrateSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfVslmMigrateSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVslmRelocateSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfVslmRelocateSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVStorageObjectStateInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVStorageObjectStateInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVslmTagEntry(value) => {
                state.serialize_field("_typeName", "ArrayOfVslmTagEntry")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfvslmVClockInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfvslmVClockInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVStorageObject(value) => {
                state.serialize_field("_typeName", "ArrayOfVStorageObject")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVStorageObjectConfigInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVStorageObjectConfigInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVStorageObjectSnapshot(value) => {
                state.serialize_field("_typeName", "ArrayOfVStorageObjectSnapshot")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVStorageObjectSnapshotDetails(value) => {
                state.serialize_field("_typeName", "ArrayOfVStorageObjectSnapshotDetails")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVStorageObjectSnapshotInfo(value) => {
                state.serialize_field("_typeName", "ArrayOfVStorageObjectSnapshotInfo")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVStorageObjectSnapshotInfoVStorageObjectSnapshot(value) => {
                state.serialize_field("_typeName", "ArrayOfVStorageObjectSnapshotInfoVStorageObjectSnapshot")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfRetrieveVStorageObjSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfRetrieveVStorageObjSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVStorageObjectAssociations(value) => {
                state.serialize_field("_typeName", "ArrayOfVStorageObjectAssociations")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVStorageObjectAssociationsVmDiskAssociations(value) => {
                state.serialize_field("_typeName", "ArrayOfVStorageObjectAssociationsVmDiskAssociations")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDataObject(value) => {
                state.serialize_field("_typeName", "ArrayOfDataObject")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDynamicArray(value) => {
                state.serialize_field("_typeName", "ArrayOfDynamicArray")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDynamicProperty(value) => {
                state.serialize_field("_typeName", "ArrayOfDynamicProperty")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfKeyAnyValue(value) => {
                state.serialize_field("_typeName", "ArrayOfKeyAnyValue")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfLocalizableMessage(value) => {
                state.serialize_field("_typeName", "ArrayOfLocalizableMessage")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfLocalizedMethodFault(value) => {
                state.serialize_field("_typeName", "ArrayOfLocalizedMethodFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfMethodFault(value) => {
                state.serialize_field("_typeName", "ArrayOfMethodFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfRuntimeFault(value) => {
                state.serialize_field("_typeName", "ArrayOfRuntimeFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostCommunication(value) => {
                state.serialize_field("_typeName", "ArrayOfHostCommunication")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostNotConnected(value) => {
                state.serialize_field("_typeName", "ArrayOfHostNotConnected")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostNotReachable(value) => {
                state.serialize_field("_typeName", "ArrayOfHostNotReachable")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInvalidArgument(value) => {
                state.serialize_field("_typeName", "ArrayOfInvalidArgument")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInvalidRequest(value) => {
                state.serialize_field("_typeName", "ArrayOfInvalidRequest")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInvalidType(value) => {
                state.serialize_field("_typeName", "ArrayOfInvalidType")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfManagedObjectNotFound(value) => {
                state.serialize_field("_typeName", "ArrayOfManagedObjectNotFound")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfMethodNotFound(value) => {
                state.serialize_field("_typeName", "ArrayOfMethodNotFound")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNotEnoughLicenses(value) => {
                state.serialize_field("_typeName", "ArrayOfNotEnoughLicenses")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNotImplemented(value) => {
                state.serialize_field("_typeName", "ArrayOfNotImplemented")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfNotSupported(value) => {
                state.serialize_field("_typeName", "ArrayOfNotSupported")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfRequestCanceled(value) => {
                state.serialize_field("_typeName", "ArrayOfRequestCanceled")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfSecurityError(value) => {
                state.serialize_field("_typeName", "ArrayOfSecurityError")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfSystemError(value) => {
                state.serialize_field("_typeName", "ArrayOfSystemError")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfUnexpectedFault(value) => {
                state.serialize_field("_typeName", "ArrayOfUnexpectedFault")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInvalidCollectorVersion(value) => {
                state.serialize_field("_typeName", "ArrayOfInvalidCollectorVersion")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfInvalidProperty(value) => {
                state.serialize_field("_typeName", "ArrayOfInvalidProperty")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPropertyChange(value) => {
                state.serialize_field("_typeName", "ArrayOfPropertyChange")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPropertyFilterSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfPropertyFilterSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPropertyFilterUpdate(value) => {
                state.serialize_field("_typeName", "ArrayOfPropertyFilterUpdate")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfMissingObject(value) => {
                state.serialize_field("_typeName", "ArrayOfMissingObject")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfMissingProperty(value) => {
                state.serialize_field("_typeName", "ArrayOfMissingProperty")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfObjectContent(value) => {
                state.serialize_field("_typeName", "ArrayOfObjectContent")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfObjectSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfObjectSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfObjectUpdate(value) => {
                state.serialize_field("_typeName", "ArrayOfObjectUpdate")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPropertySpec(value) => {
                state.serialize_field("_typeName", "ArrayOfPropertySpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfRetrieveOptions(value) => {
                state.serialize_field("_typeName", "ArrayOfRetrieveOptions")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfRetrieveResult(value) => {
                state.serialize_field("_typeName", "ArrayOfRetrieveResult")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfSelectionSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfSelectionSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfTraversalSpec(value) => {
                state.serialize_field("_typeName", "ArrayOfTraversalSpec")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfUpdateSet(value) => {
                state.serialize_field("_typeName", "ArrayOfUpdateSet")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfWaitOptions(value) => {
                state.serialize_field("_typeName", "ArrayOfWaitOptions")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ComputeResourceHostSpbmLicenseInfoHostSpbmLicenseState(value) => {
                state.serialize_field("_typeName", "ComputeResourceHostSPBMLicenseInfoHostSPBMLicenseState")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfComputeResourceHostSpbmLicenseInfoHostSpbmLicenseState(value) => {
                state.serialize_field("_typeName", "ArrayOfComputeResourceHostSPBMLicenseInfoHostSPBMLicenseState")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::DatastoreAccessible(value) => {
                state.serialize_field("_typeName", "DatastoreAccessible")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDatastoreAccessible(value) => {
                state.serialize_field("_typeName", "ArrayOfDatastoreAccessible")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::DrsInjectorWorkloadCorrelationState(value) => {
                state.serialize_field("_typeName", "DrsInjectorWorkloadCorrelationState")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDrsInjectorWorkloadCorrelationState(value) => {
                state.serialize_field("_typeName", "ArrayOfDrsInjectorWorkloadCorrelationState")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::HostSystemConnectionState(value) => {
                state.serialize_field("_typeName", "HostSystemConnectionState")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostSystemConnectionState(value) => {
                state.serialize_field("_typeName", "ArrayOfHostSystemConnectionState")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::HostSystemPowerState(value) => {
                state.serialize_field("_typeName", "HostSystemPowerState")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostSystemPowerState(value) => {
                state.serialize_field("_typeName", "ArrayOfHostSystemPowerState")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::HttpNfcLeaseState(value) => {
                state.serialize_field("_typeName", "HttpNfcLeaseState")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHttpNfcLeaseState(value) => {
                state.serialize_field("_typeName", "ArrayOfHttpNfcLeaseState")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::LatencySensitivitySensitivityLevel(value) => {
                state.serialize_field("_typeName", "LatencySensitivitySensitivityLevel")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfLatencySensitivitySensitivityLevel(value) => {
                state.serialize_field("_typeName", "ArrayOfLatencySensitivitySensitivityLevel")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::LicenseFeatureInfoState(value) => {
                state.serialize_field("_typeName", "LicenseFeatureInfoState")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfLicenseFeatureInfoState(value) => {
                state.serialize_field("_typeName", "ArrayOfLicenseFeatureInfoState")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::HostLicensableResourceKey(value) => {
                state.serialize_field("_typeName", "HostLicensableResourceKey")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostLicensableResourceKey(value) => {
                state.serialize_field("_typeName", "ArrayOfHostLicensableResourceKey")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::LicenseManagerState(value) => {
                state.serialize_field("_typeName", "LicenseManagerState")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfLicenseManagerState(value) => {
                state.serialize_field("_typeName", "ArrayOfLicenseManagerState")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::LicenseReservationInfoState(value) => {
                state.serialize_field("_typeName", "LicenseReservationInfoState")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfLicenseReservationInfoState(value) => {
                state.serialize_field("_typeName", "ArrayOfLicenseReservationInfoState")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ManagedEntityStatus(value) => {
                state.serialize_field("_typeName", "ManagedEntityStatus")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfManagedEntityStatus(value) => {
                state.serialize_field("_typeName", "ArrayOfManagedEntityStatus")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::PerfSummaryType(value) => {
                state.serialize_field("_typeName", "PerfSummaryType")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPerfSummaryType(value) => {
                state.serialize_field("_typeName", "ArrayOfPerfSummaryType")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::PerfStatsType(value) => {
                state.serialize_field("_typeName", "PerfStatsType")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPerfStatsType(value) => {
                state.serialize_field("_typeName", "ArrayOfPerfStatsType")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::SharesLevel(value) => {
                state.serialize_field("_typeName", "SharesLevel")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfSharesLevel(value) => {
                state.serialize_field("_typeName", "ArrayOfSharesLevel")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::SimpleCommandEncoding(value) => {
                state.serialize_field("_typeName", "SimpleCommandEncoding")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfSimpleCommandEncoding(value) => {
                state.serialize_field("_typeName", "ArrayOfSimpleCommandEncoding")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::TaskFilterSpecRecursionOption(value) => {
                state.serialize_field("_typeName", "TaskFilterSpecRecursionOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfTaskFilterSpecRecursionOption(value) => {
                state.serialize_field("_typeName", "ArrayOfTaskFilterSpecRecursionOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::TaskFilterSpecTimeOption(value) => {
                state.serialize_field("_typeName", "TaskFilterSpecTimeOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfTaskFilterSpecTimeOption(value) => {
                state.serialize_field("_typeName", "ArrayOfTaskFilterSpecTimeOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::TaskInfoState(value) => {
                state.serialize_field("_typeName", "TaskInfoState")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfTaskInfoState(value) => {
                state.serialize_field("_typeName", "ArrayOfTaskInfoState")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::VirtualAppVAppState(value) => {
                state.serialize_field("_typeName", "VirtualAppVAppState")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualAppVAppState(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualAppVAppState")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::VirtualMachineConnectionState(value) => {
                state.serialize_field("_typeName", "VirtualMachineConnectionState")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineConnectionState(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineConnectionState")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::VirtualMachineFaultToleranceState(value) => {
                state.serialize_field("_typeName", "VirtualMachineFaultToleranceState")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineFaultToleranceState(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineFaultToleranceState")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::VirtualMachineMovePriority(value) => {
                state.serialize_field("_typeName", "VirtualMachineMovePriority")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineMovePriority(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineMovePriority")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::VirtualMachinePowerState(value) => {
                state.serialize_field("_typeName", "VirtualMachinePowerState")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachinePowerState(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachinePowerState")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::VirtualMachineRecordReplayState(value) => {
                state.serialize_field("_typeName", "VirtualMachineRecordReplayState")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineRecordReplayState(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineRecordReplayState")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::VsanUpgradeSystemUpgradeHistoryDiskGroupOpType(value) => {
                state.serialize_field("_typeName", "VsanUpgradeSystemUpgradeHistoryDiskGroupOpType")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVsanUpgradeSystemUpgradeHistoryDiskGroupOpType(value) => {
                state.serialize_field("_typeName", "ArrayOfVsanUpgradeSystemUpgradeHistoryDiskGroupOpType")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::MetricAlarmOperator(value) => {
                state.serialize_field("_typeName", "MetricAlarmOperator")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfMetricAlarmOperator(value) => {
                state.serialize_field("_typeName", "ArrayOfMetricAlarmOperator")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::StateAlarmOperator(value) => {
                state.serialize_field("_typeName", "StateAlarmOperator")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfStateAlarmOperator(value) => {
                state.serialize_field("_typeName", "ArrayOfStateAlarmOperator")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::DasVmPriority(value) => {
                state.serialize_field("_typeName", "DasVmPriority")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDasVmPriority(value) => {
                state.serialize_field("_typeName", "ArrayOfDasVmPriority")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::DpmBehavior(value) => {
                state.serialize_field("_typeName", "DpmBehavior")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDpmBehavior(value) => {
                state.serialize_field("_typeName", "ArrayOfDpmBehavior")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::DrsBehavior(value) => {
                state.serialize_field("_typeName", "DrsBehavior")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDrsBehavior(value) => {
                state.serialize_field("_typeName", "ArrayOfDrsBehavior")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::HostPowerOperationType(value) => {
                state.serialize_field("_typeName", "HostPowerOperationType")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostPowerOperationType(value) => {
                state.serialize_field("_typeName", "ArrayOfHostPowerOperationType")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::EventFilterSpecRecursionOption(value) => {
                state.serialize_field("_typeName", "EventFilterSpecRecursionOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfEventFilterSpecRecursionOption(value) => {
                state.serialize_field("_typeName", "ArrayOfEventFilterSpecRecursionOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::FtIssuesOnHostHostSelectionType(value) => {
                state.serialize_field("_typeName", "FtIssuesOnHostHostSelectionType")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFtIssuesOnHostHostSelectionType(value) => {
                state.serialize_field("_typeName", "ArrayOfFtIssuesOnHostHostSelectionType")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::AutoStartWaitHeartbeatSetting(value) => {
                state.serialize_field("_typeName", "AutoStartWaitHeartbeatSetting")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfAutoStartWaitHeartbeatSetting(value) => {
                state.serialize_field("_typeName", "ArrayOfAutoStartWaitHeartbeatSetting")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::FibreChannelPortType(value) => {
                state.serialize_field("_typeName", "FibreChannelPortType")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfFibreChannelPortType(value) => {
                state.serialize_field("_typeName", "ArrayOfFibreChannelPortType")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::HostAccessMode(value) => {
                state.serialize_field("_typeName", "HostAccessMode")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostAccessMode(value) => {
                state.serialize_field("_typeName", "ArrayOfHostAccessMode")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::HostLockdownMode(value) => {
                state.serialize_field("_typeName", "HostLockdownMode")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostLockdownMode(value) => {
                state.serialize_field("_typeName", "ArrayOfHostLockdownMode")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::HostInternetScsiHbaIscsiIpv6AddressAddressConfigurationType(value) => {
                state.serialize_field("_typeName", "HostInternetScsiHbaIscsiIpv6AddressAddressConfigurationType")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostInternetScsiHbaIscsiIpv6AddressAddressConfigurationType(value) => {
                state.serialize_field("_typeName", "ArrayOfHostInternetScsiHbaIscsiIpv6AddressAddressConfigurationType")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::HostInternetScsiHbaIscsiIpv6AddressIPv6AddressOperation(value) => {
                state.serialize_field("_typeName", "HostInternetScsiHbaIscsiIpv6AddressIPv6AddressOperation")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostInternetScsiHbaIscsiIpv6AddressIPv6AddressOperation(value) => {
                state.serialize_field("_typeName", "ArrayOfHostInternetScsiHbaIscsiIpv6AddressIPv6AddressOperation")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::HostInternetScsiHbaNetworkBindingSupportType(value) => {
                state.serialize_field("_typeName", "HostInternetScsiHbaNetworkBindingSupportType")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostInternetScsiHbaNetworkBindingSupportType(value) => {
                state.serialize_field("_typeName", "ArrayOfHostInternetScsiHbaNetworkBindingSupportType")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::HostFirewallRuleDirection(value) => {
                state.serialize_field("_typeName", "HostFirewallRuleDirection")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostFirewallRuleDirection(value) => {
                state.serialize_field("_typeName", "ArrayOfHostFirewallRuleDirection")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::HostFirewallRulePortType(value) => {
                state.serialize_field("_typeName", "HostFirewallRulePortType")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostFirewallRulePortType(value) => {
                state.serialize_field("_typeName", "ArrayOfHostFirewallRulePortType")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::HostSnmpAgentCapability(value) => {
                state.serialize_field("_typeName", "HostSnmpAgentCapability")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostSnmpAgentCapability(value) => {
                state.serialize_field("_typeName", "ArrayOfHostSnmpAgentCapability")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::HostTpmAttestationInfoAcceptanceStatus(value) => {
                state.serialize_field("_typeName", "HostTpmAttestationInfoAcceptanceStatus")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfHostTpmAttestationInfoAcceptanceStatus(value) => {
                state.serialize_field("_typeName", "ArrayOfHostTpmAttestationInfoAcceptanceStatus")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayUpdateOperation(value) => {
                state.serialize_field("_typeName", "ArrayUpdateOperation")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfArrayUpdateOperation(value) => {
                state.serialize_field("_typeName", "ArrayOfArrayUpdateOperation")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ProfileNumericComparator(value) => {
                state.serialize_field("_typeName", "ProfileNumericComparator")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfProfileNumericComparator(value) => {
                state.serialize_field("_typeName", "ArrayOfProfileNumericComparator")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::DayOfWeek(value) => {
                state.serialize_field("_typeName", "DayOfWeek")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfDayOfWeek(value) => {
                state.serialize_field("_typeName", "ArrayOfDayOfWeek")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::WeekOfMonth(value) => {
                state.serialize_field("_typeName", "WeekOfMonth")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfWeekOfMonth(value) => {
                state.serialize_field("_typeName", "ArrayOfWeekOfMonth")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::VirtualMachineCloneSpecTpmProvisionPolicy(value) => {
                state.serialize_field("_typeName", "VirtualMachineCloneSpecTpmProvisionPolicy")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineCloneSpecTpmProvisionPolicy(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineCloneSpecTpmProvisionPolicy")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::VirtualMachineConfigInfoNpivWwnType(value) => {
                state.serialize_field("_typeName", "VirtualMachineConfigInfoNpivWwnType")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineConfigInfoNpivWwnType(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineConfigInfoNpivWwnType")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::VirtualMachineToolsStatus(value) => {
                state.serialize_field("_typeName", "VirtualMachineToolsStatus")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineToolsStatus(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineToolsStatus")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::GuestQuiesceEndGuestQuiesceError(value) => {
                state.serialize_field("_typeName", "GuestQuiesceEndGuestQuiesceError")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfGuestQuiesceEndGuestQuiesceError(value) => {
                state.serialize_field("_typeName", "ArrayOfGuestQuiesceEndGuestQuiesceError")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::VirtualMachineMetadataManagerVmMetadataOp(value) => {
                state.serialize_field("_typeName", "VirtualMachineMetadataManagerVmMetadataOp")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineMetadataManagerVmMetadataOp(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineMetadataManagerVmMetadataOp")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::VirtualMachineRelocateTransformation(value) => {
                state.serialize_field("_typeName", "VirtualMachineRelocateTransformation")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualMachineRelocateTransformation(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualMachineRelocateTransformation")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::CustomizationNetBiosMode(value) => {
                state.serialize_field("_typeName", "CustomizationNetBIOSMode")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCustomizationNetBiosMode(value) => {
                state.serialize_field("_typeName", "ArrayOfCustomizationNetBIOSMode")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::CustomizationLicenseDataMode(value) => {
                state.serialize_field("_typeName", "CustomizationLicenseDataMode")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCustomizationLicenseDataMode(value) => {
                state.serialize_field("_typeName", "ArrayOfCustomizationLicenseDataMode")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::CustomizationSysprepRebootOption(value) => {
                state.serialize_field("_typeName", "CustomizationSysprepRebootOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfCustomizationSysprepRebootOption(value) => {
                state.serialize_field("_typeName", "ArrayOfCustomizationSysprepRebootOption")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::VirtualDeviceConfigSpecFileOperation(value) => {
                state.serialize_field("_typeName", "VirtualDeviceConfigSpecFileOperation")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualDeviceConfigSpecFileOperation(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualDeviceConfigSpecFileOperation")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::VirtualDeviceConfigSpecOperation(value) => {
                state.serialize_field("_typeName", "VirtualDeviceConfigSpecOperation")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualDeviceConfigSpecOperation(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualDeviceConfigSpecOperation")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::VirtualScsiSharing(value) => {
                state.serialize_field("_typeName", "VirtualSCSISharing")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVirtualScsiSharing(value) => {
                state.serialize_field("_typeName", "ArrayOfVirtualSCSISharing")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::VsanHostDiskResultState(value) => {
                state.serialize_field("_typeName", "VsanHostDiskResultState")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVsanHostDiskResultState(value) => {
                state.serialize_field("_typeName", "ArrayOfVsanHostDiskResultState")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::VsanHostHealthState(value) => {
                state.serialize_field("_typeName", "VsanHostHealthState")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVsanHostHealthState(value) => {
                state.serialize_field("_typeName", "ArrayOfVsanHostHealthState")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::VsanHostNodeState(value) => {
                state.serialize_field("_typeName", "VsanHostNodeState")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfVsanHostNodeState(value) => {
                state.serialize_field("_typeName", "ArrayOfVsanHostNodeState")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::PropertyChangeOp(value) => {
                state.serialize_field("_typeName", "PropertyChangeOp")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfPropertyChangeOp(value) => {
                state.serialize_field("_typeName", "ArrayOfPropertyChangeOp")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ObjectUpdateKind(value) => {
                state.serialize_field("_typeName", "ObjectUpdateKind")?;
                state.serialize_field("_value", value)?;
            },
            ValueElements::ArrayOfObjectUpdateKind(value) => {
                state.serialize_field("_typeName", "ArrayOfObjectUpdateKind")?;
                state.serialize_field("_value", value)?;
            },
        }
        state.end()
    }
}
