use std::fmt;
use serde::Deserializer;
use serde::de;
use super::boxed_types::ValueElements;
use super::structs::*;
use super::vim_any::VimAny;

fn to_u64(text: &str) -> Option<u64> {
    if text.len() != 8 {
        return None;
    }
    let bytes: &[u8; 8] = text.as_bytes().try_into().ok()?;
    Some(u64::from_be_bytes(*bytes))
}

fn to_u32(text: &str) -> Option<u32> {
    if text.len() != 4 {
        return None;
    }
    let bytes: &[u8; 4] = text.as_bytes().try_into().ok()?;
    Some(u32::from_be_bytes(*bytes))
}

pub struct VimAnyVisitor;

impl<'de> de::Visitor<'de> for VimAnyVisitor {
    type Value = VimAny;

    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
        formatter.write_str("vim JSON object with _typeName field discrimnator")
    }

    fn visit_map<A: de::MapAccess<'de>>(self, mut map: A) -> Result<Self::Value, A::Error> {
        let mut type_name = None;
        let mut map_data: Vec<(String, &serde_json::value::RawValue)> = Vec::new();
        while let Some(key) = map.next_key::<String>()? {
            if key == "_typeName" {
                if type_name.is_none() {
                    let value: String = map.next_value()?;
                    type_name = Some(value);
                } // ignore subsequent _typeName fields
                if map_data.is_empty() {
                    break
                };
            } else {
                let value: &serde_json::value::RawValue = map.next_value()?;
                map_data.push((key, value));
            }
        }
        let Some(type_name) = type_name else {
                return Err(de::Error::missing_field("_typeName"));
        };
        if map_data.is_empty() { // Optimize the case when the first element is the discriminator
            // Attempt to deserialize object from type_name and map
            if let Some(dsfunc) = get_object_deserializer(&type_name) {
                let ds = de::value::MapAccessDeserializer::new(map);
                return dsfunc(ds, &type_name).map_err(de::Error::custom);
            } else {
                let Some(dsfunc) = get_value_deserializer(&type_name) else {
                    return Err(de::Error::custom(format!("Unknown variant: {}", type_name)));
                };
                let Some(key) = map.next_key::<String>()? else {
                    return Err(de::Error::custom("Missing key"));
                };
                if key == "_value" {
                    let v: &serde_json::value::RawValue = map.next_value()?;
                    return dsfunc(v).map_err(de::Error::custom).map(VimAny::Value);
                }
                return Err(de::Error::custom(format!("Expected key '_value' and found {}", key)));
            }
        };

        // We have buffered all keys try to make sense of it
        // Process value elements
        if let Some(dsfunc) = get_object_deserializer(&type_name) {
            let map = de::value::MapDeserializer::new(map_data.into_iter());
            let ds = de::value::MapAccessDeserializer::new(map);
            return dsfunc(ds, &type_name).map_err(de::Error::custom);
        }

        // Process value elements
        let Some(dsfunc) = get_value_deserializer(&type_name) else {
            return Err(de::Error::custom(format!("Unknown variant: {}", type_name)));
        };
        if map_data.len() == 1 && map_data[0].0 == "_value" {
            let v: &serde_json::value::RawValue = map_data
                .get(0)
                .ok_or_else(|| de::Error::missing_field("_value"))?
                .1;
            return dsfunc(v).map_err(de::Error::custom).map(VimAny::Value);
        }
        Err(de::Error::custom("Invalid format for boxed value element."))
    }
}
fn get_object_deserializer<'de, A: de::MapAccess<'de>>(type_name: &str) -> Option<fn(de::value::MapAccessDeserializer<A>, &str) -> Result<VimAny, A::Error>> {
    match type_name.len() {
        2 => {
            if type_name == "ID" {
                Some(|ds, _| {
                    let obj: Id = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        }
        3 => {
            if type_name == "Tag" {
                Some(|ds, _| {
                    let obj: Tag = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        }
        5 => {
            if type_name == "Event" {
                Some(|ds, _| {
                    let obj: Event = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        }
        6 => {
            get_object_deserializer_6(type_name)
        }
        7 => {
            get_object_deserializer_7(type_name)
        }
        8 => {
            get_object_deserializer_8(type_name)
        }
        9 => {
            get_object_deserializer_9(type_name)
        }
        10 => {
            get_object_deserializer_10(type_name)
        }
        11 => {
            get_object_deserializer_11(type_name)
        }
        12 => {
            get_object_deserializer_12(type_name)
        }
        13 => {
            get_object_deserializer_13(type_name)
        }
        14 => {
            get_object_deserializer_14(type_name)
        }
        15 => {
            get_object_deserializer_15(type_name)
        }
        16 => {
            get_object_deserializer_16(type_name)
        }
        17 => {
            get_object_deserializer_17(type_name)
        }
        18 => {
            get_object_deserializer_18(type_name)
        }
        19 => {
            get_object_deserializer_19(type_name)
        }
        20 => {
            get_object_deserializer_20(type_name)
        }
        21 => {
            get_object_deserializer_21(type_name)
        }
        22 => {
            get_object_deserializer_22(type_name)
        }
        23 => {
            get_object_deserializer_23(type_name)
        }
        24 => {
            get_object_deserializer_24(type_name)
        }
        25 => {
            get_object_deserializer_25(type_name)
        }
        26 => {
            get_object_deserializer_26(type_name)
        }
        27 => {
            get_object_deserializer_27(type_name)
        }
        28 => {
            get_object_deserializer_28(type_name)
        }
        29 => {
            get_object_deserializer_29(type_name)
        }
        30 => {
            get_object_deserializer_30(type_name)
        }
        31 => {
            get_object_deserializer_31(type_name)
        }
        32 => {
            get_object_deserializer_32(type_name)
        }
        33 => {
            get_object_deserializer_33(type_name)
        }
        34 => {
            get_object_deserializer_34(type_name)
        }
        35 => {
            get_object_deserializer_35(type_name)
        }
        36 => {
            get_object_deserializer_36(type_name)
        }
        37 => {
            get_object_deserializer_37(type_name)
        }
        38 => {
            get_object_deserializer_38(type_name)
        }
        39 => {
            get_object_deserializer_39(type_name)
        }
        40 => {
            get_object_deserializer_40(type_name)
        }
        41 => {
            get_object_deserializer_41(type_name)
        }
        42 => {
            get_object_deserializer_42(type_name)
        }
        43 => {
            get_object_deserializer_43(type_name)
        }
        44 => {
            get_object_deserializer_44(type_name)
        }
        45 => {
            get_object_deserializer_45(type_name)
        }
        46 => {
            get_object_deserializer_46(type_name)
        }
        47 => {
            get_object_deserializer_47(type_name)
        }
        48 => {
            get_object_deserializer_48(type_name)
        }
        49 => {
            get_object_deserializer_49(type_name)
        }
        50 => {
            get_object_deserializer_50(type_name)
        }
        51 => {
            get_object_deserializer_51(type_name)
        }
        52 => {
            if type_name == "VirtualEthernetCardDistributedVirtualPortBackingInfo" {
                Some(|ds, _| {
                    let obj: VirtualEthernetCardDistributedVirtualPortBackingInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        }
        53 => {
            if type_name == "VsanUpgradeSystemV2ObjectsPresentDuringDowngradeIssue" {
                Some(|ds, _| {
                    let obj: VsanUpgradeSystemV2ObjectsPresentDuringDowngradeIssue = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        }
        54 => {
            get_object_deserializer_54(type_name)
        }
        55 => {
            if type_name == "HostVsanInternalSystemVsanPhysicalDiskDiagnosticsResult" {
                Some(|ds, _| {
                    let obj: HostVsanInternalSystemVsanPhysicalDiskDiagnosticsResult = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        }
        58 => {
            if type_name == "HostProfileManagerCompositionValidationResultResultElement" {
                Some(|ds, _| {
                    let obj: HostProfileManagerCompositionValidationResultResultElement = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        }
        59 => {
            if type_name == "ClusterComputeResourceDVSSettingDVPortgroupToServiceMapping" {
                Some(|ds, _| {
                    let obj: ClusterComputeResourceDvsSettingDvPortgroupToServiceMapping = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        }
        62 => {
            get_object_deserializer_62(type_name)
        }
        63 => {
            if type_name == "ClusterComputeResourceDvsProfileDVPortgroupSpecToServiceMapping" {
                Some(|ds, _| {
                    let obj: ClusterComputeResourceDvsProfileDvPortgroupSpecToServiceMapping = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        }
        _ => None,
    }
}
fn get_object_deserializer_6<'de, A: de::MapAccess<'de>>(type_name: &str) -> Option<fn(de::value::MapAccessDeserializer<A>, &str) -> Result<VimAny, A::Error>> {
    match type_name {
        "Action" => {
            Some(|ds, _| {
                let obj: Action = de::Deserialize::deserialize(ds)?;
                Ok(VimAny::Object(Box::new(obj)))
            })
        }
        "IpPool" => {
            Some(|ds, _| {
                let obj: IpPool = de::Deserialize::deserialize(ds)?;
                Ok(VimAny::Object(Box::new(obj)))
            })
        }
        "NoHost" => {
            Some(|ds, type_name| {
                let v = __MethodFaultVisitor(Some(type_name.to_string()));
                Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
            })
        }
        _ => None
    }
}
fn get_object_deserializer_7<'de, A: de::MapAccess<'de>>(type_name: &str) -> Option<fn(de::value::MapAccessDeserializer<A>, &str) -> Result<VimAny, A::Error>> {
    let s = &type_name[0..4];
    let Some(type_ord) = to_u32(s) else {
        return None;
    };
    match type_ord {
        0x4556434d => { // EVCM
            if type_name == "EVCMode" {
                Some(|ds, _| {
                    let obj: EvcMode = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4576656e => { // Even
            if type_name == "EventEx" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x486f7374 => { // Host
            if type_name == "HostFru" {
                Some(|ds, _| {
                    let obj: HostFru = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x49705261 => { // IpRa
            if type_name == "IpRange" {
                Some(|ds, _| {
                    let obj: IpRange = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4f766646 => { // OvfF
            if type_name == "OvfFile" {
                Some(|ds, _| {
                    let obj: OvfFile = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x53637369 => { // Scsi
            if type_name == "ScsiLun" {
                Some(|ds, _| {
                    let obj: ScsiLun = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x566d4576 => { // VmEv
            if type_name == "VmEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_object_deserializer_8<'de, A: de::MapAccess<'de>>(type_name: &str) -> Option<fn(de::value::MapAccessDeserializer<A>, &str) -> Result<VimAny, A::Error>> {
    let s = &type_name[0..4];
    let Some(type_ord) = to_u32(s) else {
        return None;
    };
    match type_ord {
        0x44767345 => { // DvsE
            if type_name == "DvsEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x44767346 => { // DvsF
            if type_name == "DvsFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x46696c65 => { // File
            if type_name == "FileInfo" {
                Some(|ds, _| {
                    let obj: FileInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4b657956 => { // KeyV
            if type_name == "KeyValue" {
                Some(|ds, _| {
                    let obj: KeyValue = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4d616352 => { // MacR
            if type_name == "MacRange" {
                Some(|ds, _| {
                    let obj: MacRange = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4d6f6465 => { // Mode
            if type_name == "ModeInfo" {
                Some(|ds, _| {
                    let obj: ModeInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4e6f7441 => { // NotA
            if type_name == "NotAFile" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4e6f7446 => { // NotF
            if type_name == "NotFound" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4f766646 => { // OvfF
            if type_name == "OvfFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x52656c61 => { // Rela
            if type_name == "Relation" {
                Some(|ds, _| {
                    let obj: Relation = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x53444443 => { // SDDC
            if type_name == "SDDCBase" {
                Some(|ds, _| {
                    let obj: SddcBase = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x53696e67 => { // Sing
            if type_name == "SingleIp" {
                Some(|ds, _| {
                    let obj: SingleIp = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x53697465 => { // Site
            if type_name == "SiteInfo" {
                Some(|ds, _| {
                    let obj: SiteInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x5461736b => { // Task
            if type_name == "TaskInfo" {
                Some(|ds, _| {
                    let obj: TaskInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x54696d65 => { // Time
            if type_name == "Timedout" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x56696d46 => { // VimF
            if type_name == "VimFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_object_deserializer_9<'de, A: de::MapAccess<'de>>(type_name: &str) -> Option<fn(de::value::MapAccessDeserializer<A>, &str) -> Result<VimAny, A::Error>> {
    let s = &type_name[2..6];
    let Some(type_ord) = to_u32(s) else {
        return None;
    };
    match type_ord {
        0x41646472 => { // Addr
            if type_name == "IpAddress" {
                Some(|ds, _| {
                    let obj: IpAddress = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x47617465 => { // Gate
            if type_name == "NoGateway" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x53506f6c => { // SPol
            if type_name == "DVSPolicy" {
                Some(|ds, _| {
                    let obj: DvsPolicy = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x616e4661 => { // anFa
            if type_name == "VsanFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x61726d49 => { // armI
            if type_name == "AlarmInfo" {
                Some(|ds, _| {
                    let obj: AlarmInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x61726d53 => { // armS
            if type_name == "AlarmSpec" {
                Some(|ds, _| {
                    let obj: AlarmSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x64617465 => { // date
            if type_name == "UpdateSet" {
                Some(|ds, _| {
                    let obj: UpdateSet = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x65737449 => { // estI
            if type_name == "GuestInfo" {
                Some(|ds, _| {
                    let obj: GuestInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x66457870 => { // fExp
            if type_name == "OvfExport" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x66496d70 => { // fImp
            if type_name == "OvfImport" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6c654576 => { // leEv
            if type_name == "RoleEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6c654661 => { // leFa
            if type_name == "FileFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6c655175 => { // leQu
            if type_name == "FileQuery" {
                Some(|ds, _| {
                    let obj: FileQuery = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6e676c65 => { // ngle
            if type_name == "SingleMac" {
                Some(|ds, _| {
                    let obj: SingleMac = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f636b53 => { // ockS
            if type_name == "ClockSkew" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f654661 => { // oeFa
            if type_name == "FcoeFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f757449 => { // outI
            if type_name == "AboutInfo" {
                Some(|ds, _| {
                    let obj: AboutInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x73497050 => { // sIpP
            if type_name == "DvsIpPort" {
                Some(|ds, _| {
                    let obj: DvsIpPort = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x736b4576 => { // skEv
            if type_name == "TaskEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x736b4973 => { // skIs
            if type_name == "DiskIsUSB" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x73744576 => { // stEv
            if type_name == "HostEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x744f7074 => { // tOpt
            if type_name == "IntOption" {
                Some(|ds, _| {
                    let obj: IntOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x74506f6c => { // tPol
            if type_name == "IntPolicy" {
                Some(|ds, _| {
                    let obj: IntPolicy = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x74656e73 => { // tens
            if type_name == "Extension" {
                Some(|ds, _| {
                    let obj: Extension = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x74696f6e => { // tion
            if type_name == "OptionDef" {
                Some(|ds, _| {
                    let obj: OptionDef = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x74704661 => { // tpFa
            if type_name == "HttpFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_object_deserializer_10<'de, A: de::MapAccess<'de>>(type_name: &str) -> Option<fn(de::value::MapAccessDeserializer<A>, &str) -> Result<VimAny, A::Error>> {
    let s = &type_name[0..8];
    let Some(type_ord) = to_u64(s) else {
        return None;
    };
    match type_ord {
        0x416c61726d457665 => { // AlarmEve
            if type_name == "AlarmEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x416c61726d537461 => { // AlarmSta
            if type_name == "AlarmState" {
                Some(|ds, _| {
                    let obj: AlarmState = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x416e737765724669 => { // AnswerFi
            if type_name == "AnswerFile" {
                Some(|ds, _| {
                    let obj: AnswerFile = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x426f6f6c4f707469 => { // BoolOpti
            if type_name == "BoolOption" {
                Some(|ds, _| {
                    let obj: BoolOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x426f6f6c506f6c69 => { // BoolPoli
            if type_name == "BoolPolicy" {
                Some(|ds, _| {
                    let obj: BoolPolicy = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4361706162696c69 => { // Capabili
            if type_name == "Capability" {
                Some(|ds, _| {
                    let obj: Capability = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x43727970746f5370 => { // CryptoSp
            if type_name == "CryptoSpec" {
                Some(|ds, _| {
                    let obj: CryptoSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x44565353756d6d61 => { // DVSSumma
            if type_name == "DVSSummary" {
                Some(|ds, _| {
                    let obj: DvsSummary = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x446174614f626a65 => { // DataObje
            if type_name == "DataObject" {
                Some(|ds, _| {
                    let obj: DataObject = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x44767350726f6669 => { // DvsProfi
            if type_name == "DvsProfile" {
                Some(|ds, _| {
                    let obj: DvsProfile = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4661756c74734279 => { // FaultsBy
            if type_name == "FaultsByVM" {
                Some(|ds, _| {
                    let obj: FaultsByVm = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x46636f65436f6e66 => { // FcoeConf
            if type_name == "FcoeConfig" {
                Some(|ds, _| {
                    let obj: FcoeConfig = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x46696c654c6f636b => { // FileLock
            if type_name == "FileLocked" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x486f737444657669 => { // HostDevi
            if type_name == "HostDevice" {
                Some(|ds, _| {
                    let obj: HostDevice = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x486f737454637048 => { // HostTcpH
            if type_name == "HostTcpHba" {
                Some(|ds, _| {
                    let obj: HostTcpHba = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x496d706f72745370 => { // ImportSp
            if type_name == "ImportSpec" {
                Some(|ds, _| {
                    let obj: ImportSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4973637369466175 => { // IscsiFau
            if type_name == "IscsiFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4c6f6e674f707469 => { // LongOpti
            if type_name == "LongOption" {
                Some(|ds, _| {
                    let obj: LongOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4c6f6e67506f6c69 => { // LongPoli
            if type_name == "LongPolicy" {
                Some(|ds, _| {
                    let obj: LongPolicy = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4d61634164647265 => { // MacAddre
            if type_name == "MacAddress" {
                Some(|ds, _| {
                    let obj: MacAddress = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4d6f756e74457272 => { // MountErr
            if type_name == "MountError" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4e6f566d496e5641 => { // NoVmInVA
            if type_name == "NoVmInVApp" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4e7664696d6d4775 => { // NvdimmGu
            if type_name == "NvdimmGuid" {
                Some(|ds, _| {
                    let obj: NvdimmGuid = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4f626a6563745370 => { // ObjectSp
            if type_name == "ObjectSpec" {
                Some(|ds, _| {
                    let obj: ObjectSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4f7074696f6e5479 => { // OptionTy
            if type_name == "OptionType" {
                Some(|ds, _| {
                    let obj: OptionType = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4f7666456c656d65 => { // OvfEleme
            if type_name == "OvfElement" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x5065726d69737369 => { // Permissi
            if type_name == "Permission" {
                Some(|ds, _| {
                    let obj: Permission = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x536861726573496e => { // SharesIn
            if type_name == "SharesInfo" {
                Some(|ds, _| {
                    let obj: SharesInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x5461736b52656173 => { // TaskReas
            if type_name == "TaskReason" {
                Some(|ds, _| {
                    let obj: TaskReason = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x56566f6c486f7374 => { // VVolHost
            if type_name == "VVolHostPE" {
                Some(|ds, _| {
                    let obj: VVolHostPe = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x5669727475616c54 => { // VirtualT
            if type_name == "VirtualTPM" {
                Some(|ds, _| {
                    let obj: VirtualTpm = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x5669727475616c55 => { // VirtualU
            if type_name == "VirtualUSB" {
                Some(|ds, _| {
                    let obj: VirtualUsb = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x5669727475616c57 => { // VirtualW
            if type_name == "VirtualWDT" {
                Some(|ds, _| {
                    let obj: VirtualWdt = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_object_deserializer_11<'de, A: de::MapAccess<'de>>(type_name: &str) -> Option<fn(de::value::MapAccessDeserializer<A>, &str) -> Result<VimAny, A::Error>> {
    let s = &type_name[0..8];
    let Some(type_ord) = to_u64(s) else {
        return None;
    };
    match type_ord {
        0x416c61726d416374 => { // AlarmAct
            if type_name == "AlarmAction" {
                Some(|ds, _| {
                    let obj: AlarmAction = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4261746368526573 => { // BatchRes
            if type_name == "BatchResult" {
                Some(|ds, _| {
                    let obj: BatchResult = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x436865636b526573 => { // CheckRes
            if type_name == "CheckResult" {
                Some(|ds, _| {
                    let obj: CheckResult = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x43727970746f4b65 => { // CryptoKe
            if type_name == "CryptoKeyId" {
                Some(|ds, _| {
                    let obj: CryptoKeyId = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4456506f72745374 => { // DVPortSt
            if type_name == "DVPortState" {
                Some(|ds, _| {
                    let obj: DvPortState = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4465736372697074 => { // Descript
            if type_name == "Description" {
                Some(|ds, _| {
                    let obj: Description = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x46696c746572496e => { // FilterIn
            if type_name == "FilterInUse" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x466c6f61744f7074 => { // FloatOpt
            if type_name == "FloatOption" {
                Some(|ds, _| {
                    let obj: FloatOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x486f737443707549 => { // HostCpuI
            if type_name == "HostCpuInfo" {
                Some(|ds, _| {
                    let obj: HostCpuInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x486f737450636965 => { // HostPcie
            if type_name == "HostPcieHba" {
                Some(|ds, _| {
                    let obj: HostPcieHba = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x486f737452646d61 => { // HostRdma
            if type_name == "HostRdmaHba" {
                Some(|ds, _| {
                    let obj: HostRdmaHba = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x486f737453657276 => { // HostServ
            if type_name == "HostService" {
                Some(|ds, _| {
                    let obj: HostService = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x486f737453657649 => { // HostSevI
            if type_name == "HostSevInfo" {
                Some(|ds, _| {
                    let obj: HostSevInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x486f737453677849 => { // HostSgxI
            if type_name == "HostSgxInfo" {
                Some(|ds, _| {
                    let obj: HostSgxInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x486f737456766f6c => { // HostVvol
            if type_name == "HostVvolNQN" {
                Some(|ds, _| {
                    let obj: HostVvolNqn = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x496e76616c69644e => { // InvalidN
            if type_name == "InvalidName" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x496e76616c696454 => { // InvalidT
            if type_name == "InvalidType" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4973637369537461 => { // IscsiSta
            if type_name == "IscsiStatus" {
                Some(|ds, _| {
                    let obj: IscsiStatus = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4b6579416e795661 => { // KeyAnyVa
            if type_name == "KeyAnyValue" {
                Some(|ds, _| {
                    let obj: KeyAnyValue = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4b65794e6f74466f => { // KeyNotFo
            if type_name == "KeyNotFound" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4c696e6b50726f66 => { // LinkProf
            if type_name == "LinkProfile" {
                Some(|ds, _| {
                    let obj: LinkProfile = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4d6574686f644661 => { // MethodFa
            if type_name == "MethodFault" {
                Some(|ds, _| {
                    let obj: MethodFault = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4e6f4469736b466f => { // NoDiskFo
            if type_name == "NoDiskFound" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4e6f4469736b5370 => { // NoDiskSp
            if type_name == "NoDiskSpace" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4f7074696f6e5661 => { // OptionVa
            if type_name == "OptionValue" {
                Some(|ds, _| {
                    let obj: OptionValue = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4f75744f66426f75 => { // OutOfBou
            if type_name == "OutOfBounds" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4f766646696c6549 => { // OvfFileI
            if type_name == "OvfFileItem" {
                Some(|ds, _| {
                    let obj: OvfFileItem = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4f766650726f7065 => { // OvfPrope
            if type_name == "OvfProperty" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x506879736963616c => { // Physical
            if type_name == "PhysicalNic" {
                Some(|ds, _| {
                    let obj: PhysicalNic = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x53797374656d4572 => { // SystemEr
            if type_name == "SystemError" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x5573657250726f66 => { // UserProf
            if type_name == "UserProfile" {
                Some(|ds, _| {
                    let obj: UserProfile = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x5573657253657373 => { // UserSess
            if type_name == "UserSession" {
                Some(|ds, _| {
                    let obj: UserSession = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x5669727475616c44 => { // VirtualD
            if type_name == "VirtualDisk" {
                Some(|ds, _| {
                    let obj: VirtualDisk = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x566c616e50726f66 => { // VlanProf
            if type_name == "VlanProfile" {
                Some(|ds, _| {
                    let obj: VlanProfile = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x576169744f707469 => { // WaitOpti
            if type_name == "WaitOptions" {
                Some(|ds, _| {
                    let obj: WaitOptions = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_object_deserializer_12<'de, A: de::MapAccess<'de>>(type_name: &str) -> Option<fn(de::value::MapAccessDeserializer<A>, &str) -> Result<VimAny, A::Error>> {
    let s = &type_name[1..9];
    let Some(type_ord) = to_u64(s) else {
        return None;
    };
    match type_ord {
        0x56506f7274537461 => { // VPortSta
            if type_name == "DVPortStatus" {
                Some(|ds, _| {
                    let obj: DvPortStatus = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x565353656c656374 => { // VSSelect
            if type_name == "DVSSelection" {
                Some(|ds, _| {
                    let obj: DvsSelection = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x61756c7473427948 => { // aultsByH
            if type_name == "FaultsByHost" {
                Some(|ds, _| {
                    let obj: FaultsByHost = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x626a656374557064 => { // bjectUpd
            if type_name == "ObjectUpdate" {
                Some(|ds, _| {
                    let obj: ObjectUpdate = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x65616c7468557064 => { // ealthUpd
            if type_name == "HealthUpdate" {
                Some(|ds, _| {
                    let obj: HealthUpdate = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x656c656374696f6e => { // election
            if type_name == "SelectionSet" {
                Some(|ds, _| {
                    let obj: SelectionSet = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x656d6f7665466169 => { // emoveFai
            if type_name == "RemoveFailed" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x656e6572616c4576 => { // eneralEv
            if type_name == "GeneralEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x657266496e746572 => { // erfInter
            if type_name == "PerfInterval" {
                Some(|ds, _| {
                    let obj: PerfInterval = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6572664d65747269 => { // erfMetri
            if type_name == "PerfMetricId" {
                Some(|ds, _| {
                    let obj: PerfMetricId = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x657373696f6e4576 => { // essionEv
            if type_name == "SessionEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6574686f64416374 => { // ethodAct
            if type_name == "MethodAction" {
                Some(|ds, _| {
                    let obj: MethodAction = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x68617265734f7074 => { // haresOpt
            if type_name == "SharesOption" {
                Some(|ds, _| {
                    let obj: SharesOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x686f6963654f7074 => { // hoiceOpt
            if type_name == "ChoiceOption" {
                Some(|ds, _| {
                    let obj: ChoiceOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6963656e73654576 => { // icenseEv
            if type_name == "LicenseEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x696c654c6f636b49 => { // ileLockI
            if type_name == "FileLockInfo" {
                Some(|ds, _| {
                    let obj: FileLockInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x696c654e6f74466f => { // ileNotFo
            if type_name == "FileNotFound" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x696c65546f6f4c61 => { // ileTooLa
            if type_name == "FileTooLarge" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x69727475616c4364 => { // irtualCd
            if type_name == "VirtualCdrom" {
                Some(|ds, _| {
                    let obj: VirtualCdrom = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x69727475616c4531 => { // irtualE1
            if type_name == "VirtualE1000" {
                Some(|ds, _| {
                    let obj: VirtualE1000 = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x69736b546f6f536d => { // iskTooSm
            if type_name == "DiskTooSmall" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6c61726d53657474 => { // larmSett
            if type_name == "AlarmSetting" {
                Some(|ds, _| {
                    let obj: AlarmSetting = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6c75737465724576 => { // lusterEv
            if type_name == "ClusterEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6d436c6f6e654576 => { // mCloneEv
            if type_name == "VmCloneEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6d436f6e66696749 => { // mConfigI
            if type_name == "VmConfigInfo" {
                Some(|ds, _| {
                    let obj: VmConfigInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6d436f6e66696753 => { // mConfigS
            if type_name == "VmConfigSpec" {
                Some(|ds, _| {
                    let obj: VmConfigSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6e74697479426163 => { // ntityBac
            if type_name == "EntityBackup" {
                Some(|ds, _| {
                    let obj: EntityBackup = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6e76616c69644576 => { // nvalidEv
            if type_name == "InvalidEvent" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6e76616c69644c6f => { // nvalidLo
            if type_name == "InvalidLogin" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6e76616c69645374 => { // nvalidSt
            if type_name == "InvalidState" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f46696c74657249 => { // oFilterI
            if type_name == "IoFilterInfo" {
                Some(|ds, _| {
                    let obj: IoFilterInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f5065726d697373 => { // oPermiss
            if type_name == "NoPermission" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f5669727475616c => { // oVirtual
            if type_name == "NoVirtualNic" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f6c6963794f7074 => { // olicyOpt
            if type_name == "PolicyOption" {
                Some(|ds, _| {
                    let obj: PolicyOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f6e666967546172 => { // onfigTar
            if type_name == "ConfigTarget" {
                Some(|ds, _| {
                    let obj: ConfigTarget = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f6e6e6563746564 => { // onnected
            if type_name == "ConnectedIso" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f6f4d616e79486f => { // ooManyHo
            if type_name == "TooManyHosts" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f737442494f5349 => { // ostBIOSI
            if type_name == "HostBIOSInfo" {
                Some(|ds, _| {
                    let obj: HostBiosInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f7374426c6f636b => { // ostBlock
            if type_name == "HostBlockHba" {
                Some(|ds, _| {
                    let obj: HostBlockHba = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f73744461734576 => { // ostDasEv
            if type_name == "HostDasEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f7374447678436c => { // ostDvxCl
            if type_name == "HostDvxClass" {
                Some(|ds, _| {
                    let obj: HostDvxClass = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f7374466c616749 => { // ostFlagI
            if type_name == "HostFlagInfo" {
                Some(|ds, _| {
                    let obj: HostFlagInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f7374496e446f6d => { // ostInDom
            if type_name == "HostInDomain" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f73744970436f6e => { // ostIpCon
            if type_name == "HostIpConfig" {
                Some(|ds, _| {
                    let obj: HostIpConfig = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f737449706d6949 => { // ostIpmiI
            if type_name == "HostIpmiInfo" {
                Some(|ds, _| {
                    let obj: HostIpmiInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f73744e756d6149 => { // ostNumaI
            if type_name == "HostNumaInfo" {
                Some(|ds, _| {
                    let obj: HostNumaInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f73744e756d614e => { // ostNumaN
            if type_name == "HostNumaNode" {
                Some(|ds, _| {
                    let obj: HostNumaNode = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f73744e766d6553 => { // ostNvmeS
            if type_name == "HostNvmeSpec" {
                Some(|ds, _| {
                    let obj: HostNvmeSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f73745363736944 => { // ostScsiD
            if type_name == "HostScsiDisk" {
                Some(|ds, _| {
                    let obj: HostScsiDisk = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f73745666667353 => { // ostVffsS
            if type_name == "HostVffsSpec" {
                Some(|ds, _| {
                    let obj: HostVffsSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f7374566d667353 => { // ostVmfsS
            if type_name == "HostVmfsSpec" {
                Some(|ds, _| {
                    let obj: HostVmfsSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f74537570706f72 => { // otSuppor
            if type_name == "NotSupported" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7067726164654576 => { // pgradeEv
            if type_name == "UpgradeEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x70706c7950726f66 => { // pplyProf
            if type_name == "ApplyProfile" {
                Some(|ds, _| {
                    let obj: ApplyProfile = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x726f66696c654576 => { // rofileEv
            if type_name == "ProfileEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x726f706572747953 => { // ropertyS
            if type_name == "PropertySpec" {
                Some(|ds, _| {
                    let obj: PropertySpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7365724e6f74466f => { // serNotFo
            if type_name == "UserNotFound" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x736c6d546167456e => { // slmTagEn
            if type_name == "VslmTagEntry" {
                Some(|ds, _| {
                    let obj: VslmTagEntry = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7472696e674f7074 => { // tringOpt
            if type_name == "StringOption" {
                Some(|ds, _| {
                    let obj: StringOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7472696e67506f6c => { // tringPol
            if type_name == "StringPolicy" {
                Some(|ds, _| {
                    let obj: StringPolicy = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x75657374416c6961 => { // uestAlia
            if type_name == "GuestAliases" {
                Some(|ds, _| {
                    let obj: GuestAliases = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x756573744e696349 => { // uestNicI
            if type_name == "GuestNicInfo" {
                Some(|ds, _| {
                    let obj: GuestNicInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x756d657269635261 => { // umericRa
            if type_name == "NumericRange" {
                Some(|ds, _| {
                    let obj: NumericRange = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x756e74696d654661 => { // untimeFa
            if type_name == "RuntimeFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x76656e7441726744 => { // ventArgD
            if type_name == "EventArgDesc" {
                Some(|ds, _| {
                    let obj: EventArgDesc = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7666417474726962 => { // vfAttrib
            if type_name == "OvfAttribute" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x76664e6f486f7374 => { // vfNoHost
            if type_name == "OvfNoHostNic" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7666586d6c466f72 => { // vfXmlFor
            if type_name == "OvfXmlFormat" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x796e616d69634172 => { // ynamicAr
            if type_name == "DynamicArray" {
                Some(|ds, _| {
                    let obj: DynamicArray = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_object_deserializer_13<'de, A: de::MapAccess<'de>>(type_name: &str) -> Option<fn(de::value::MapAccessDeserializer<A>, &str) -> Result<VimAny, A::Error>> {
    let s = &type_name[2..10];
    let Some(type_ord) = to_u64(s) else {
        return None;
    };
    match type_ord {
        0x417661696c61626c => { // Availabl
            if type_name == "NoAvailableIp" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x436c6f6e65644576 => { // ClonedEv
            if type_name == "VmClonedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x436f6e6669674661 => { // ConfigFa
            if type_name == "VmConfigFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4c6f6746696c6549 => { // LogFileI
            if type_name == "VmLogFileInfo" {
                Some(|ds, _| {
                    let obj: VmLogFileInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x50494368616c6c65 => { // PIChalle
            if type_name == "SSPIChallenge" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x506f727453657474 => { // PortSett
            if type_name == "DVPortSetting" {
                Some(|ds, _| {
                    let obj: DvPortSetting = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x534361706162696c => { // SCapabil
            if type_name == "DVSCapability" {
                Some(|ds, _| {
                    let obj: DvsCapability = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x53436f6e66696749 => { // SConfigI
            if type_name == "DVSConfigInfo" {
                Some(|ds, _| {
                    let obj: DvsConfigInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x53436f6e66696753 => { // SConfigS
            if type_name == "DVSConfigSpec" {
                Some(|ds, _| {
                    let obj: DvsConfigSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x5343726561746553 => { // SCreateS
            if type_name == "DVSCreateSpec" {
                Some(|ds, _| {
                    let obj: DvsCreateSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x5375626a6563744e => { // SubjectN
            if type_name == "NoSubjectName" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x57776e436f6e666c => { // WwnConfl
            if type_name == "VmWwnConflict" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6163656d656e7453 => { // acementS
            if type_name == "PlacementSpec" {
                Some(|ds, _| {
                    let obj: PlacementSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x616e4469736b4661 => { // anDiskFa
            if type_name == "VsanDiskFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x617073686f744661 => { // apshotFa
            if type_name == "SnapshotFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6176657273616c53 => { // aversalS
            if type_name == "TraversalSpec" {
                Some(|ds, _| {
                    let obj: TraversalSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x63656e7365536f75 => { // censeSou
            if type_name == "LicenseSource" {
                Some(|ds, _| {
                    let obj: LicenseSource = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x636f766572794576 => { // coveryEv
            if type_name == "RecoveryEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x637369506f727449 => { // csiPortI
            if type_name == "IscsiPortInfo" {
                Some(|ds, _| {
                    let obj: IscsiPortInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6375726974794572 => { // curityEr
            if type_name == "SecurityError" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x64696d6d53756d6d => { // dimmSumm
            if type_name == "NvdimmSummary" {
                Some(|ds, _| {
                    let obj: NvdimmSummary = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x656e74417267756d => { // entArgum
            if type_name == "EventArgument" {
                Some(|ds, _| {
                    let obj: EventArgument = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6573744469736b49 => { // estDiskI
            if type_name == "GuestDiskInfo" {
                Some(|ds, _| {
                    let obj: GuestDiskInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x65737446696c6549 => { // estFileI
            if type_name == "GuestFileInfo" {
                Some(|ds, _| {
                    let obj: GuestFileInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x66436f6e73747261 => { // fConstra
            if type_name == "OvfConstraint" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x664d61707065644f => { // fMappedO
            if type_name == "OvfMappedOsId" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x664f7074696f6e49 => { // fOptionI
            if type_name == "OvfOptionInfo" {
                Some(|ds, _| {
                    let obj: OvfOptionInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x697463684970556e => { // itchIpUn
            if type_name == "SwitchIpUnset" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6a656374436f6e74 => { // jectCont
            if type_name == "ObjectContent" {
                Some(|ds, _| {
                    let obj: ObjectContent = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6c6556696f6c6174 => { // leViolat
            if type_name == "RuleViolation" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6c656374696f6e53 => { // lectionS
            if type_name == "SelectionSpec" {
                Some(|ds, _| {
                    let obj: SelectionSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6c6c6261636b4576 => { // llbackEv
            if type_name == "RollbackEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6c6d436c6f6e6553 => { // lmCloneS
            if type_name == "VslmCloneSpec" {
                Some(|ds, _| {
                    let obj: VslmCloneSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6d65737061636546 => { // mespaceF
            if type_name == "NamespaceFull" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6d696e4469736162 => { // minDisab
            if type_name == "AdminDisabled" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6d69744578636565 => { // mitExcee
            if type_name == "LimitExceeded" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6e61676564427949 => { // nagedByI
            if type_name == "ManagedByInfo" {
                Some(|ds, _| {
                    let obj: ManagedByInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f66696c65506f6c => { // ofilePol
            if type_name == "ProfilePolicy" {
                Some(|ds, _| {
                    let obj: ProfilePolicy = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x70654469736b4661 => { // peDiskFa
            if type_name == "WipeDiskFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x706c69636174654e => { // plicateN
            if type_name == "DuplicateName" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7070436c6f6e6553 => { // ppCloneS
            if type_name == "VAppCloneSpec" {
                Some(|ds, _| {
                    let obj: VAppCloneSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7265616479457869 => { // readyExi
            if type_name == "AlreadyExists" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7266517565727953 => { // rfQueryS
            if type_name == "PerfQuerySpec" {
                Some(|ds, _| {
                    let obj: PerfQuerySpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x727475616c446576 => { // rtualDev
            if type_name == "VirtualDevice" {
                Some(|ds, _| {
                    let obj: VirtualDevice = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x727475616c446973 => { // rtualDis
            if type_name == "VirtualDiskId" {
                Some(|ds, _| {
                    let obj: VirtualDiskId = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x727475616c453130 => { // rtualE10
            if type_name == "VirtualE1000e" {
                Some(|ds, _| {
                    let obj: VirtualE1000E = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x727475616c466c6f => { // rtualFlo
            if type_name == "VirtualFloppy" {
                Some(|ds, _| {
                    let obj: VirtualFloppy = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x727475616c4e5644 => { // rtualNVD
            if type_name == "VirtualNVDIMM" {
                Some(|ds, _| {
                    let obj: VirtualNvdimm = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x727475616c566d78 => { // rtualVmx
            if type_name == "VirtualVmxnet" {
                Some(|ds, _| {
                    let obj: VirtualVmxnet = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x736b536368656475 => { // skSchedu
            if type_name == "TaskScheduler" {
                Some(|ds, _| {
                    let obj: TaskScheduler = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x736f75726365496e => { // sourceIn
            if type_name == "ResourceInUse" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7373696e67497050 => { // ssingIpP
            if type_name == "MissingIpPool" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7373696e674f626a => { // ssingObj
            if type_name == "MissingObject" {
                Some(|ds, _| {
                    let obj: MissingObject = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7373776f72644669 => { // sswordFi
            if type_name == "PasswordField" {
                Some(|ds, _| {
                    let obj: PasswordField = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7374437075496449 => { // stCpuIdI
            if type_name == "HostCpuIdInfo" {
                Some(|ds, _| {
                    let obj: HostCpuIdInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7374446e73436f6e => { // stDnsCon
            if type_name == "HostDnsConfig" {
                Some(|ds, _| {
                    let obj: HostDnsConfig = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x73744970526f7574 => { // stIpRout
            if type_name == "HostIpRouteOp" {
                Some(|ds, _| {
                    let obj: HostIpRouteOp = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x73744d6f756e7449 => { // stMountI
            if type_name == "HostMountInfo" {
                Some(|ds, _| {
                    let obj: HostMountInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x73744e6173566f6c => { // stNasVol
            if type_name == "HostNasVolume" {
                Some(|ds, _| {
                    let obj: HostNasVolume = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x73744e7470436f6e => { // stNtpCon
            if type_name == "HostNtpConfig" {
                Some(|ds, _| {
                    let obj: HostNtpConfig = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7374506369446576 => { // stPciDev
            if type_name == "HostPciDevice" {
                Some(|ds, _| {
                    let obj: HostPciDevice = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7374506f72744772 => { // stPortGr
            if type_name == "HostPortGroup" {
                Some(|ds, _| {
                    let obj: HostPortGroup = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7374507470436f6e => { // stPtpCon
            if type_name == "HostPtpConfig" {
                Some(|ds, _| {
                    let obj: HostPtpConfig = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x73745372696f7649 => { // stSriovI
            if type_name == "HostSriovInfo" {
                Some(|ds, _| {
                    let obj: HostSriovInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7441446972656374 => { // tADirect
            if type_name == "NotADirectory" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x74456e6f75676843 => { // tEnoughC
            if type_name == "NotEnoughCpus" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7445787072657373 => { // tExpress
            if type_name == "IntExpression" {
                Some(|ds, _| {
                    let obj: IntExpression = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7461626173654572 => { // tabaseEr
            if type_name == "DatabaseError" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x746173746f726549 => { // tastoreI
            if type_name == "DatastoreInfo" {
                Some(|ds, _| {
                    let obj: DatastoreInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x74656e6465644576 => { // tendedEv
            if type_name == "ExtendedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x74656e6465644661 => { // tendedFa
            if type_name == "ExtendedFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x74696f6e50726f66 => { // tionProf
            if type_name == "OptionProfile" {
                Some(|ds, _| {
                    let obj: OptionProfile = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x754d617463684576 => { // uMatchEv
            if type_name == "MtuMatchEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7553746174757349 => { // uStatusI
            if type_name == "DpuStatusInfo" {
                Some(|ds, _| {
                    let obj: DpuStatusInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x756c74446f6d6169 => { // ultDomai
            if type_name == "FaultDomainId" {
                Some(|ds, _| {
                    let obj: FaultDomainId = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7573746572416374 => { // usterAct
            if type_name == "ClusterAction" {
                Some(|ds, _| {
                    let obj: ClusterAction = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x76616c696442756e => { // validBun
            if type_name == "InvalidBundle" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x76616c6964466f6c => { // validFol
            if type_name == "InvalidFolder" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x76616c6964466f72 => { // validFor
            if type_name == "InvalidFormat" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x76616c69644c6f63 => { // validLoc
            if type_name == "InvalidLocale" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7669636547726f75 => { // viceGrou
            if type_name == "DeviceGroupId" {
                Some(|ds, _| {
                    let obj: DeviceGroupId = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7950726f76696465 => { // yProvide
            if type_name == "KeyProviderId" {
                Some(|ds, _| {
                    let obj: KeyProviderId = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_object_deserializer_14<'de, A: de::MapAccess<'de>>(type_name: &str) -> Option<fn(de::value::MapAccessDeserializer<A>, &str) -> Result<VimAny, A::Error>> {
    let s = &type_name[0..8];
    let Some(type_ord) = to_u64(s) else {
        return None;
    };
    match type_ord {
        0x42617365436f6e66 => { // BaseConf
            if type_name == "BaseConfigInfo" {
                Some(|ds, _| {
                    let obj: BaseConfigInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x436c757374657244 => { // ClusterD
            if type_name == "ClusterDasData" {
                Some(|ds, _| {
                    let obj: ClusterDasData = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x436c757374657256 => { // ClusterV
            if type_name == "ClusterVmGroup" {
                Some(|ds, _| {
                    let obj: ClusterVmGroup = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x43727970746f4b65 => { // CryptoKe
            if type_name == "CryptoKeyPlain" {
                Some(|ds, _| {
                    let obj: CryptoKeyPlain = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x43727970746f5370 => { // CryptoSp
            if type_name == "CryptoSpecNoOp" {
                Some(|ds, _| {
                    let obj: CryptoSpecNoOp = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x437573746f6d4669 => { // CustomFi
            if type_name == "CustomFieldDef" {
                Some(|ds, _| {
                    let obj: CustomFieldDef = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x445653436f6e7461 => { // DVSConta
            if type_name == "DVSContactInfo" {
                Some(|ds, _| {
                    let obj: DvsContactInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x44565352756e7469 => { // DVSRunti
            if type_name == "DVSRuntimeInfo" {
                Some(|ds, _| {
                    let obj: DvsRuntimeInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x446173436f6e6669 => { // DasConfi
            if type_name == "DasConfigFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4461746173746f72 => { // Datastor
            if type_name == "DatastoreEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4465766963654e6f => { // DeviceNo
            if type_name == "DeviceNotFound" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4469736b4368616e => { // DiskChan
            if type_name == "DiskChangeInfo" {
                Some(|ds, _| {
                    let obj: DiskChangeInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4469736b43727970 => { // DiskCryp
            if type_name == "DiskCryptoSpec" {
                Some(|ds, _| {
                    let obj: DiskCryptoSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4469736b49734e6f => { // DiskIsNo
            if type_name == "DiskIsNonLocal" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x446f6d61696e4e6f => { // DomainNo
            if type_name == "DomainNotFound" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4475706c69636174 => { // Duplicat
            if type_name == "DuplicateDisks" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x447673496d706f72 => { // DvsImpor
            if type_name == "DvsImportEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4476734970506f72 => { // DvsIpPor
            if type_name == "DvsIpPortRange" {
                Some(|ds, _| {
                    let obj: DvsIpPortRange = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4476734d65726765 => { // DvsMerge
            if type_name == "DvsMergedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4476735472616666 => { // DvsTraff
            if type_name == "DvsTrafficRule" {
                Some(|ds, _| {
                    let obj: DvsTrafficRule = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x447673564e696350 => { // DvsVNicP
            if type_name == "DvsVNicProfile" {
                Some(|ds, _| {
                    let obj: DvsVNicProfile = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x455643436f6e6669 => { // EVCConfi
            if type_name == "EVCConfigFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4665617475726545 => { // FeatureE
            if type_name == "FeatureEVCMode" {
                Some(|ds, _| {
                    let obj: FeatureEvcMode = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x46696c6551756572 => { // FileQuer
            if type_name == "FileQueryFlags" {
                Some(|ds, _| {
                    let obj: FileQueryFlags = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x466f6c6465724669 => { // FolderFi
            if type_name == "FolderFileInfo" {
                Some(|ds, _| {
                    let obj: FolderFileInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4674497373756573 => { // FtIssues
            if type_name == "FtIssuesOnHost" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4775657374537461 => { // GuestSta
            if type_name == "GuestStackInfo" {
                Some(|ds, _| {
                    let obj: GuestStackInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x48414572726f7273 => { // HAErrors
            if type_name == "HAErrorsAtDest" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x486f737441646465 => { // HostAdde
            if type_name == "HostAddedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x486f7374426f6f74 => { // HostBoot
            if type_name == "HostBootDevice" {
                Some(|ds, _| {
                    let obj: HostBootDevice = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x486f737443617061 => { // HostCapa
            if type_name == "HostCapability" {
                Some(|ds, _| {
                    let obj: HostCapability = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x486f7374436f6e66 => { // HostConf
            match type_name {
                "HostConfigInfo" => {
                    Some(|ds, _| {
                        let obj: HostConfigInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "HostConfigSpec" => {
                    Some(|ds, _| {
                        let obj: HostConfigSpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x486f737443707550 => { // HostCpuP
            if type_name == "HostCpuPackage" {
                Some(|ds, _| {
                    let obj: HostCpuPackage = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x486f73744461734f => { // HostDasO
            if type_name == "HostDasOkEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x486f737444696765 => { // HostDige
            if type_name == "HostDigestInfo" {
                Some(|ds, _| {
                    let obj: HostDigestInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x486f737446696c65 => { // HostFile
            if type_name == "HostFileAccess" {
                Some(|ds, _| {
                    let obj: HostFileAccess = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x486f73744d656d6f => { // HostMemo
            if type_name == "HostMemorySpec" {
                Some(|ds, _| {
                    let obj: HostMemorySpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x486f73744e617453 => { // HostNatS
            if type_name == "HostNatService" {
                Some(|ds, _| {
                    let obj: HostNatService = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x486f7374504d656d => { // HostPMem
            if type_name == "HostPMemVolume" {
                Some(|ds, _| {
                    let obj: HostPMemVolume = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x486f737452646d61 => { // HostRdma
            if type_name == "HostRdmaDevice" {
                Some(|ds, _| {
                    let obj: HostRdmaDevice = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x486f737453797374 => { // HostSyst
            if type_name == "HostSystemInfo" {
                Some(|ds, _| {
                    let obj: HostSystemInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x486f737456666174 => { // HostVfat
            if type_name == "HostVfatVolume" {
                Some(|ds, _| {
                    let obj: HostVfatVolume = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x486f737456666673 => { // HostVffs
            if type_name == "HostVffsVolume" {
                Some(|ds, _| {
                    let obj: HostVffsVolume = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x486f737456697274 => { // HostVirt
            if type_name == "HostVirtualNic" {
                Some(|ds, _| {
                    let obj: HostVirtualNic = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x486f7374566d6673 => { // HostVmfs
            if type_name == "HostVmfsVolume" {
                Some(|ds, _| {
                    let obj: HostVmfsVolume = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x486f737456766f6c => { // HostVvol
            if type_name == "HostVvolVolume" {
                Some(|ds, _| {
                    let obj: HostVvolVolume = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x496e76616c696442 => { // InvalidB
            if type_name == "InvalidBmcRole" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x496e76616c69644c => { // InvalidL
            if type_name == "InvalidLicense" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x496e76616c696452 => { // InvalidR
            if type_name == "InvalidRequest" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x496e76616c696456 => { // InvalidV
            if type_name == "InvalidVmState" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4970526f75746550 => { // IpRouteP
            if type_name == "IpRouteProfile" {
                Some(|ds, _| {
                    let obj: IpRouteProfile = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4b6d697053657276 => { // KmipServ
            match type_name {
                "KmipServerInfo" => {
                    Some(|ds, _| {
                        let obj: KmipServerInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "KmipServerSpec" => {
                    Some(|ds, _| {
                        let obj: KmipServerSpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x4c6963656e736545 => { // LicenseE
            if type_name == "LicenseExpired" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4d6574686f644469 => { // MethodDi
            if type_name == "MethodDisabled" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4d6574686f644e6f => { // MethodNo
            if type_name == "MethodNotFound" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4d6967726174696f => { // Migratio
            match type_name {
                "MigrationEvent" => {
                    Some(|ds, type_name| {
                        let v = __EventVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                "MigrationFault" => {
                    Some(|ds, type_name| {
                        let v = __MethodFaultVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                _ => None
            }
        },
        0x4e6173436f6e6669 => { // NasConfi
            if type_name == "NasConfigFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4e65744970537461 => { // NetIpSta
            if type_name == "NetIpStackInfo" {
                Some(|ds, _| {
                    let obj: NetIpStackInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4e6574776f726b50 => { // NetworkP
            if type_name == "NetworkProfile" {
                Some(|ds, _| {
                    let obj: NetworkProfile = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4e6574776f726b53 => { // NetworkS
            if type_name == "NetworkSummary" {
                Some(|ds, _| {
                    let obj: NetworkSummary = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4e6f4c6963656e73 => { // NoLicens
            if type_name == "NoLicenseEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4e6f74496d706c65 => { // NotImple
            if type_name == "NotImplemented" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4e7664696d6d4469 => { // NvdimmDi
            if type_name == "NvdimmDimmInfo" {
                Some(|ds, _| {
                    let obj: NvdimmDimmInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4f76664e6574776f => { // OvfNetwo
            if type_name == "OvfNetworkInfo" {
                Some(|ds, _| {
                    let obj: OvfNetworkInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4f76665265736f75 => { // OvfResou
            if type_name == "OvfResourceMap" {
                Some(|ds, _| {
                    let obj: OvfResourceMap = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4f76665379737465 => { // OvfSyste
            if type_name == "OvfSystemFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x5065726653616d70 => { // PerfSamp
            if type_name == "PerfSampleInfo" {
                Some(|ds, _| {
                    let obj: PerfSampleInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x506f644469736b4c => { // PodDiskL
            if type_name == "PodDiskLocator" {
                Some(|ds, _| {
                    let obj: PodDiskLocator = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x50726f7065727479 => { // Property
            if type_name == "PropertyChange" {
                Some(|ds, _| {
                    let obj: PropertyChange = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x5265626f6f745265 => { // RebootRe
            if type_name == "RebootRequired" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x5265747269657665 => { // Retrieve
            if type_name == "RetrieveResult" {
                Some(|ds, _| {
                    let obj: RetrieveResult = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x526f6c6541646465 => { // RoleAdde
            if type_name == "RoleAddedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x53534c5665726966 => { // SSLVerif
            if type_name == "SSLVerifyFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x53656e64534e4d50 => { // SendSNMP
            if type_name == "SendSNMPAction" {
                Some(|ds, _| {
                    let obj: SendSnmpAction = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x5365727669636543 => { // ServiceC
            if type_name == "ServiceContent" {
                Some(|ds, _| {
                    let obj: ServiceContent = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x536572766963654c => { // ServiceL
            if type_name == "ServiceLocator" {
                Some(|ds, _| {
                    let obj: ServiceLocator = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x5365727669636550 => { // ServiceP
            if type_name == "ServiceProfile" {
                Some(|ds, _| {
                    let obj: ServiceProfile = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x536e617073686f74 => { // Snapshot
            if type_name == "SnapshotLocked" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x536f757263654e6f => { // SourceNo
            if type_name == "SourceNodeSpec" {
                Some(|ds, _| {
                    let obj: SourceNodeSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x53746f7261676550 => { // StorageP
            if type_name == "StorageProfile" {
                Some(|ds, _| {
                    let obj: StorageProfile = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x5461736b46696c74 => { // TaskFilt
            if type_name == "TaskFilterSpec" {
                Some(|ds, _| {
                    let obj: TaskFilterSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x5461736b496e5072 => { // TaskInPr
            if type_name == "TaskInProgress" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x5461736b52656173 => { // TaskReas
            if type_name == "TaskReasonUser" {
                Some(|ds, _| {
                    let obj: TaskReasonUser = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x546f6f4d616e7944 => { // TooManyD
            if type_name == "TooManyDevices" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x56417070436f6e66 => { // VAppConf
            match type_name {
                "VAppConfigInfo" => {
                    Some(|ds, _| {
                        let obj: VAppConfigInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "VAppConfigSpec" => {
                    Some(|ds, _| {
                        let obj: VAppConfigSpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x564170704e6f7452 => { // VAppNotR
            if type_name == "VAppNotRunning" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x5653746f72616765 => { // VStorage
            if type_name == "VStorageObject" {
                Some(|ds, _| {
                    let obj: VStorageObject = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x5669727475616c50 => { // VirtualP
            if type_name == "VirtualPCNet32" {
                Some(|ds, _| {
                    let obj: VirtualPcNet32 = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x5669727475616c56 => { // VirtualV
            match type_name {
                "VirtualVmxnet2" => {
                    Some(|ds, _| {
                        let obj: VirtualVmxnet2 = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "VirtualVmxnet3" => {
                    Some(|ds, _| {
                        let obj: VirtualVmxnet3 = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x566d437265617465 => { // VmCreate
            if type_name == "VmCreatedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x566d4469736b4669 => { // VmDiskFi
            if type_name == "VmDiskFileInfo" {
                Some(|ds, _| {
                    let obj: VmDiskFileInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x566d4c696d69744c => { // VmLimitL
            if type_name == "VmLimitLicense" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x566d4c6f6746696c => { // VmLogFil
            if type_name == "VmLogFileQuery" {
                Some(|ds, _| {
                    let obj: VmLogFileQuery = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x566d4d6573736167 => { // VmMessag
            if type_name == "VmMessageEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x566d52656d6f7665 => { // VmRemove
            if type_name == "VmRemovedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x566d52656e616d65 => { // VmRename
            if type_name == "VmRenamedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x566d66734d6f756e => { // VmfsMoun
            if type_name == "VmfsMountFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x5673616e506f6c69 => { // VsanPoli
            if type_name == "VsanPolicyCost" {
                Some(|ds, _| {
                    let obj: VsanPolicyCost = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x56736c6d43726561 => { // VslmCrea
            if type_name == "VslmCreateSpec" {
                Some(|ds, _| {
                    let obj: VslmCreateSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x76736c6d56436c6f => { // vslmVClo
            if type_name == "vslmVClockInfo" {
                Some(|ds, _| {
                    let obj: VslmVClockInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_object_deserializer_15<'de, A: de::MapAccess<'de>>(type_name: &str) -> Option<fn(de::value::MapAccessDeserializer<A>, &str) -> Result<VimAny, A::Error>> {
    let s = &type_name[0..8];
    let Some(type_ord) = to_u64(s) else {
        return None;
    };
    match type_ord {
        0x416c61726d457870 => { // AlarmExp
            if type_name == "AlarmExpression" {
                Some(|ds, _| {
                    let obj: AlarmExpression = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x416c61726d46696c => { // AlarmFil
            if type_name == "AlarmFilterSpec" {
                Some(|ds, _| {
                    let obj: AlarmFilterSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x416c726561647955 => { // AlreadyU
            if type_name == "AlreadyUpgraded" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4172726179557064 => { // ArrayUpd
            if type_name == "ArrayUpdateSpec" {
                Some(|ds, _| {
                    let obj: ArrayUpdateSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x436c757374657252 => { // ClusterR
            match type_name {
                "ClusterRuleInfo" => {
                    Some(|ds, _| {
                        let obj: ClusterRuleInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "ClusterRuleSpec" => {
                    Some(|ds, _| {
                        let obj: ClusterRuleSpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x437075496e636f6d => { // CpuIncom
            if type_name == "CpuIncompatible" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x43727970746f4b65 => { // CryptoKe
            if type_name == "CryptoKeyResult" {
                Some(|ds, _| {
                    let obj: CryptoKeyResult = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x446173456e61626c => { // DasEnabl
            if type_name == "DasEnabledEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4461746163656e74 => { // Datacent
            if type_name == "DatacenterEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4461746173746f72 => { // Datastor
            if type_name == "DatastoreOption" {
                Some(|ds, _| {
                    let obj: DatastoreOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4461746554696d65 => { // DateTime
            if type_name == "DateTimeProfile" {
                Some(|ds, _| {
                    let obj: DateTimeProfile = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4472734469736162 => { // DrsDisab
            if type_name == "DrsDisabledOnVm" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x447273456e61626c => { // DrsEnabl
            if type_name == "DrsEnabledEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x44767067496d706f => { // DvpgImpo
            if type_name == "DvpgImportEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4476734372656174 => { // DvsCreat
            if type_name == "DvsCreatedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x44767346696c7465 => { // DvsFilte
            match type_name {
                "DvsFilterConfig" => {
                    Some(|ds, _| {
                        let obj: DvsFilterConfig = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "DvsFilterPolicy" => {
                    Some(|ds, _| {
                        let obj: DvsFilterPolicy = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x44767352656e616d => { // DvsRenam
            if type_name == "DvsRenamedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x447673526573746f => { // DvsResto
            if type_name == "DvsRestoreEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x44767353696e676c => { // DvsSingl
            if type_name == "DvsSingleIpPort" {
                Some(|ds, _| {
                    let obj: DvsSingleIpPort = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x44796e616d696350 => { // DynamicP
            if type_name == "DynamicProperty" {
                Some(|ds, _| {
                    let obj: DynamicProperty = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x456e746974795072 => { // EntityPr
            if type_name == "EntityPrivilege" {
                Some(|ds, _| {
                    let obj: EntityPrivilege = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x456e756d44657363 => { // EnumDesc
            if type_name == "EnumDescription" {
                Some(|ds, _| {
                    let obj: EnumDescription = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4576656e7446696c => { // EventFil
            if type_name == "EventFilterSpec" {
                Some(|ds, _| {
                    let obj: EventFilterSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x46696c654e616d65 => { // FileName
            if type_name == "FileNameTooLong" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x46696c654e6f7457 => { // FileNotW
            if type_name == "FileNotWritable" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4669726577616c6c => { // Firewall
            if type_name == "FirewallProfile" {
                Some(|ds, _| {
                    let obj: FirewallProfile = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x466f6c6465724669 => { // FolderFi
            if type_name == "FolderFileQuery" {
                Some(|ds, _| {
                    let obj: FolderFileQuery = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x476174657761794e => { // GatewayN
            if type_name == "GatewayNotFound" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x47656e6572696344 => { // GenericD
            if type_name == "GenericDrsFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4775657374526567 => { // GuestReg
            if type_name == "GuestRegKeySpec" {
                Some(|ds, _| {
                    let obj: GuestRegKeySpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4775657374536372 => { // GuestScr
            if type_name == "GuestScreenInfo" {
                Some(|ds, _| {
                    let obj: GuestScreenInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x486f73744163636f => { // HostAcco
            if type_name == "HostAccountSpec" {
                Some(|ds, _| {
                    let obj: HostAccountSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x486f7374436f6e66 => { // HostConf
            if type_name == "HostConfigFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x486f7374436f6e6e => { // HostConn
            match type_name {
                "HostConnectInfo" => {
                    Some(|ds, _| {
                        let obj: HostConnectInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "HostConnectSpec" => {
                    Some(|ds, _| {
                        let obj: HostConnectSpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x486f737444686370 => { // HostDhcp
            if type_name == "HostDhcpService" {
                Some(|ds, _| {
                    let obj: HostDhcpService = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x486f737446656174 => { // HostFeat
            if type_name == "HostFeatureMask" {
                Some(|ds, _| {
                    let obj: HostFeatureMask = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x486f737447617465 => { // HostGate
            if type_name == "HostGatewaySpec" {
                Some(|ds, _| {
                    let obj: HostGatewaySpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x486f73744c696365 => { // HostLice
            if type_name == "HostLicenseSpec" {
                Some(|ds, _| {
                    let obj: HostLicenseSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x486f73744c697374 => { // HostList
            if type_name == "HostListSummary" {
                Some(|ds, _| {
                    let obj: HostListSummary = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x486f73744e657477 => { // HostNetw
            if type_name == "HostNetworkInfo" {
                Some(|ds, _| {
                    let obj: HostNetworkInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x486f7374506f7765 => { // HostPowe
            if type_name == "HostPowerPolicy" {
                Some(|ds, _| {
                    let obj: HostPowerPolicy = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x486f737450726f78 => { // HostProx
            if type_name == "HostProxySwitch" {
                Some(|ds, _| {
                    let obj: HostProxySwitch = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x486f737452756e74 => { // HostRunt
            if type_name == "HostRuntimeInfo" {
                Some(|ds, _| {
                    let obj: HostRuntimeInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x486f737453657276 => { // HostServ
            if type_name == "HostServiceInfo" {
                Some(|ds, _| {
                    let obj: HostServiceInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x486f73745372696f => { // HostSrio
            if type_name == "HostSriovConfig" {
                Some(|ds, _| {
                    let obj: HostSriovConfig = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x486f7374564d6f74 => { // HostVMot
            if type_name == "HostVMotionInfo" {
                Some(|ds, _| {
                    let obj: HostVMotionInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x496e76616c696441 => { // InvalidA
            if type_name == "InvalidArgument" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x496e76616c696448 => { // InvalidH
            if type_name == "InvalidHostName" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x496e76616c696450 => { // InvalidP
            if type_name == "InvalidProperty" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x496e76616c696456 => { // InvalidV
            if type_name == "InvalidVmConfig" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4b6d6970436c7573 => { // KmipClus
            if type_name == "KmipClusterInfo" {
                Some(|ds, _| {
                    let obj: KmipClusterInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4d697373696e6750 => { // MissingP
            if type_name == "MissingProperty" {
                Some(|ds, _| {
                    let obj: MissingProperty = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4e65744970436f6e => { // NetIpCon
            match type_name {
                "NetIpConfigInfo" => {
                    Some(|ds, _| {
                        let obj: NetIpConfigInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "NetIpConfigSpec" => {
                    Some(|ds, _| {
                        let obj: NetIpConfigSpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x4e6f50656572486f => { // NoPeerHo
            if type_name == "NoPeerHostFound" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4e6f64654e657477 => { // NodeNetw
            if type_name == "NodeNetworkSpec" {
                Some(|ds, _| {
                    let obj: NodeNetworkSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4e756d506f727473 => { // NumPorts
            if type_name == "NumPortsProfile" {
                Some(|ds, _| {
                    let obj: NumPortsProfile = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4f76664578706f72 => { // OvfExpor
            if type_name == "OvfExportFailed" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4f7666496d706f72 => { // OvfImpor
            if type_name == "OvfImportFailed" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4f7666496e76616c => { // OvfInval
            if type_name == "OvfInvalidValue" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4f766650726f7065 => { // OvfPrope
            if type_name == "OvfPropertyType" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4f766657726f6e67 => { // OvfWrong
            if type_name == "OvfWrongElement" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x50617373776f7264 => { // Password
            if type_name == "PasswordExpired" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x5061746368537570 => { // PatchSup
            if type_name == "PatchSuperseded" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x50657266436f756e => { // PerfCoun
            if type_name == "PerfCounterInfo" {
                Some(|ds, _| {
                    let obj: PerfCounterInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x5065726d69737369 => { // Permissi
            if type_name == "PermissionEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x506879736963616c => { // Physical
            match type_name {
                "PhysicalNicHint" => {
                    Some(|ds, _| {
                        let obj: PhysicalNicHint = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "PhysicalNicSpec" => {
                    Some(|ds, _| {
                        let obj: PhysicalNicSpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x506c6163656d656e => { // Placemen
            match type_name {
                "PlacementAction" => {
                    Some(|ds, _| {
                        let obj: PlacementAction = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "PlacementResult" => {
                    Some(|ds, _| {
                        let obj: PlacementResult = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x506f776572537973 => { // PowerSys
            if type_name == "PowerSystemInfo" {
                Some(|ds, _| {
                    let obj: PowerSystemInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x50726f66696c654d => { // ProfileM
            if type_name == "ProfileMetadata" {
                Some(|ds, _| {
                    let obj: ProfileMetadata = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x5175657374696f6e => { // Question
            if type_name == "QuestionPending" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x52444d4e6f745072 => { // RDMNotPr
            if type_name == "RDMNotPreserved" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x52444d4e6f745375 => { // RDMNotSu
            if type_name == "RDMNotSupported" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x5265706c69636174 => { // Replicat
            if type_name == "ReplicationSpec" {
                Some(|ds, _| {
                    let obj: ReplicationSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x5265717565737443 => { // RequestC
            if type_name == "RequestCanceled" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x5265747269657665 => { // Retrieve
            if type_name == "RetrieveOptions" {
                Some(|ds, _| {
                    let obj: RetrieveOptions = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x526f6c6c6261636b => { // Rollback
            if type_name == "RollbackFailure" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x52756e5363726970 => { // RunScrip
            if type_name == "RunScriptAction" {
                Some(|ds, _| {
                    let obj: RunScriptAction = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x5365637572697479 => { // Security
            if type_name == "SecurityProfile" {
                Some(|ds, _| {
                    let obj: SecurityProfile = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x53656e64456d6169 => { // SendEmai
            if type_name == "SendEmailAction" {
                Some(|ds, _| {
                    let obj: SendEmailAction = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x536872696e6b4469 => { // ShrinkDi
            if type_name == "ShrinkDiskFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x536f667477617265 => { // Software
            if type_name == "SoftwarePackage" {
                Some(|ds, _| {
                    let obj: SoftwarePackage = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x53746f7261676549 => { // StorageI
            if type_name == "StorageIORMInfo" {
                Some(|ds, _| {
                    let obj: StorageIormInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x53797374656d4576 => { // SystemEv
            if type_name == "SystemEventInfo" {
                Some(|ds, _| {
                    let obj: SystemEventInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x5461736b44657363 => { // TaskDesc
            if type_name == "TaskDescription" {
                Some(|ds, _| {
                    let obj: TaskDescription = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x5461736b52656173 => { // TaskReas
            if type_name == "TaskReasonAlarm" {
                Some(|ds, _| {
                    let obj: TaskReasonAlarm = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x546f6f6c73436f6e => { // ToolsCon
            if type_name == "ToolsConfigInfo" {
                Some(|ds, _| {
                    let obj: ToolsConfigInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x5479706544657363 => { // TypeDesc
            if type_name == "TypeDescription" {
                Some(|ds, _| {
                    let obj: TypeDescription = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x556e657870656374 => { // Unexpect
            if type_name == "UnexpectedFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x5573625363616e43 => { // UsbScanC
            if type_name == "UsbScanCodeSpec" {
                Some(|ds, _| {
                    let obj: UsbScanCodeSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x56417070436f6e66 => { // VAppConf
            if type_name == "VAppConfigFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x5641707050726f64 => { // VAppProd
            match type_name {
                "VAppProductInfo" => {
                    Some(|ds, _| {
                        let obj: VAppProductInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "VAppProductSpec" => {
                    Some(|ds, _| {
                        let obj: VAppProductSpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x564d494e6f745375 => { // VMINotSu
            if type_name == "VMINotSupported" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x564d6f74696f6e4c => { // VMotionL
            if type_name == "VMotionLinkDown" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x564d776172655673 => { // VMwareVs
            if type_name == "VMwareVspanPort" {
                Some(|ds, _| {
                    let obj: VMwareVspanPort = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x56696d5661736150 => { // VimVasaP
            if type_name == "VimVasaProvider" {
                Some(|ds, _| {
                    let obj: VimVasaProvider = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x5669727475616c44 => { // VirtualD
            if type_name == "VirtualDiskSpec" {
                Some(|ds, _| {
                    let obj: VirtualDiskSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x5669727475616c48 => { // VirtualH
            if type_name == "VirtualHardware" {
                Some(|ds, _| {
                    let obj: VirtualHardware = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x5669727475616c4b => { // VirtualK
            if type_name == "VirtualKeyboard" {
                Some(|ds, _| {
                    let obj: VirtualKeyboard = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x566d4465706c6f79 => { // VmDeploy
            if type_name == "VmDeployedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x566d4469736b4669 => { // VmDiskFi
            if type_name == "VmDiskFileQuery" {
                Some(|ds, _| {
                    let obj: VmDiskFileQuery = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x566d4576656e7441 => { // VmEventA
            if type_name == "VmEventArgument" {
                Some(|ds, _| {
                    let obj: VmEventArgument = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x566d4d6967726174 => { // VmMigrat
            if type_name == "VmMigratedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x566d4e7672616d46 => { // VmNvramF
            if type_name == "VmNvramFileInfo" {
                Some(|ds, _| {
                    let obj: VmNvramFileInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x566d4f727068616e => { // VmOrphan
            if type_name == "VmOrphanedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x566d526573756d69 => { // VmResumi
            if type_name == "VmResumingEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x566d537461727469 => { // VmStarti
            if type_name == "VmStartingEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x566d53746f707069 => { // VmStoppi
            if type_name == "VmStoppingEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x56736c6d4d696772 => { // VslmMigr
            if type_name == "VslmMigrateSpec" {
                Some(|ds, _| {
                    let obj: VslmMigrateSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x5769746e6573734e => { // WitnessN
            if type_name == "WitnessNodeInfo" {
                Some(|ds, _| {
                    let obj: WitnessNodeInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_object_deserializer_16<'de, A: de::MapAccess<'de>>(type_name: &str) -> Option<fn(de::value::MapAccessDeserializer<A>, &str) -> Result<VimAny, A::Error>> {
    let s = &type_name[0..8];
    let Some(type_ord) = to_u64(s) else {
        return None;
    };
    match type_ord {
        0x41646d696e4e6f74 => { // AdminNot
            if type_name == "AdminNotDisabled" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x416c61726d446573 => { // AlarmDes
            if type_name == "AlarmDescription" {
                Some(|ds, _| {
                    let obj: AlarmDescription = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x416c726561647943 => { // AlreadyC
            if type_name == "AlreadyConnected" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x43616e6e6f744163 => { // CannotAc
            if type_name == "CannotAccessFile" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x43616e6e6f744372 => { // CannotCr
            if type_name == "CannotCreateFile" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x43616e6e6f744465 => { // CannotDe
            if type_name == "CannotDeleteFile" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x43616e6e6f745573 => { // CannotUs
            if type_name == "CannotUseNetwork" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x436c757374657244 => { // ClusterD
            if type_name == "ClusterDrsFaults" {
                Some(|ds, _| {
                    let obj: ClusterDrsFaults = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x436c757374657247 => { // ClusterG
            match type_name {
                "ClusterGroupInfo" => {
                    Some(|ds, _| {
                        let obj: ClusterGroupInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "ClusterGroupSpec" => {
                    Some(|ds, _| {
                        let obj: ClusterGroupSpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x436c757374657248 => { // ClusterH
            if type_name == "ClusterHostGroup" {
                Some(|ds, _| {
                    let obj: ClusterHostGroup = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x436f6d706c69616e => { // Complian
            if type_name == "ComplianceResult" {
                Some(|ds, _| {
                    let obj: ComplianceResult = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x436f6e6375727265 => { // Concurre
            if type_name == "ConcurrentAccess" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4372656174655461 => { // CreateTa
            if type_name == "CreateTaskAction" {
                Some(|ds, _| {
                    let obj: CreateTaskAction = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x437573746f6d4669 => { // CustomFi
            match type_name {
                "CustomFieldEvent" => {
                    Some(|ds, type_name| {
                        let v = __EventVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                "CustomFieldValue" => {
                    Some(|ds, _| {
                        let obj: CustomFieldValue = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x4456506f7274436f => { // DVPortCo
            match type_name {
                "DVPortConfigInfo" => {
                    Some(|ds, _| {
                        let obj: DvPortConfigInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "DVPortConfigSpec" => {
                    Some(|ds, _| {
                        let obj: DvPortConfigSpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x4456506f72746772 => { // DVPortgr
            if type_name == "DVPortgroupEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4461734469736162 => { // DasDisab
            if type_name == "DasDisabledEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4461746173746f72 => { // Datastor
            if type_name == "DatastoreSummary" {
                Some(|ds, _| {
                    let obj: DatastoreSummary = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4469736b4368616e => { // DiskChan
            if type_name == "DiskChangeExtent" {
                Some(|ds, _| {
                    let obj: DiskChangeExtent = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4469736b4e6f7453 => { // DiskNotS
            if type_name == "DiskNotSupported" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4472734469736162 => { // DrsDisab
            if type_name == "DrsDisabledEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4476706752657374 => { // DvpgRest
            if type_name == "DvpgRestoreEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4476734576656e74 => { // DvsEvent
            if type_name == "DvsEventArgument" {
                Some(|ds, _| {
                    let obj: DvsEventArgument = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x447673486f73744c => { // DvsHostL
            if type_name == "DvsHostLeftEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4476734e6f744175 => { // DvsNotAu
            if type_name == "DvsNotAuthorized" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x44767353636f7065 => { // DvsScope
            if type_name == "DvsScopeViolated" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4476735570677261 => { // DvsUpgra
            if type_name == "DvsUpgradedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4576656e74446573 => { // EventDes
            if type_name == "EventDescription" {
                Some(|ds, _| {
                    let obj: EventDescription = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4661696c546f456e => { // FailToEn
            if type_name == "FailToEnableSPBM" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4661696c6f766572 => { // Failover
            if type_name == "FailoverNodeInfo" {
                Some(|ds, _| {
                    let obj: FailoverNodeInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x47656e6572616c55 => { // GeneralU
            if type_name == "GeneralUserEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x47726f7570416c61 => { // GroupAla
            if type_name == "GroupAlarmAction" {
                Some(|ds, _| {
                    let obj: GroupAlarmAction = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4775657374417574 => { // GuestAut
            if type_name == "GuestAuthSubject" {
                Some(|ds, _| {
                    let obj: GuestAuthSubject = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x477565737450726f => { // GuestPro
            match type_name {
                "GuestProcessInfo" => {
                    Some(|ds, _| {
                        let obj: GuestProcessInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "GuestProgramSpec" => {
                    Some(|ds, _| {
                        let obj: GuestProgramSpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x4865616c74685570 => { // HealthUp
            if type_name == "HealthUpdateInfo" {
                Some(|ds, _| {
                    let obj: HealthUpdateInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x486f73744170706c => { // HostAppl
            if type_name == "HostApplyProfile" {
                Some(|ds, _| {
                    let obj: HostApplyProfile = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x486f7374436f6e66 => { // HostConf
            match type_name {
                "HostConfigChange" => {
                    Some(|ds, _| {
                        let obj: HostConfigChange = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "HostConfigFailed" => {
                    Some(|ds, type_name| {
                        let v = __MethodFaultVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                _ => None
            }
        },
        0x486f7374436f6e6e => { // HostConn
            if type_name == "HostConnectFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x486f737444617465 => { // HostDate
            if type_name == "HostDateTimeInfo" {
                Some(|ds, _| {
                    let obj: HostDateTimeInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x486f737446697265 => { // HostFire
            match type_name {
                "HostFirewallInfo" => {
                    Some(|ds, _| {
                        let obj: HostFirewallInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "HostFirewallRule" => {
                    Some(|ds, _| {
                        let obj: HostFirewallRule = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x486f737447726170 => { // HostGrap
            if type_name == "HostGraphicsInfo" {
                Some(|ds, _| {
                    let obj: HostGraphicsInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x486f737448617264 => { // HostHard
            if type_name == "HostHardwareInfo" {
                Some(|ds, _| {
                    let obj: HostHardwareInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x486f7374496f4669 => { // HostIoFi
            if type_name == "HostIoFilterInfo" {
                Some(|ds, _| {
                    let obj: HostIoFilterInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x486f73744970526f => { // HostIpRo
            if type_name == "HostIpRouteEntry" {
                Some(|ds, _| {
                    let obj: HostIpRouteEntry = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x486f73744e6f7443 => { // HostNotC
            if type_name == "HostNotConnected" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x486f73744e6f7452 => { // HostNotR
            if type_name == "HostNotReachable" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x486f73744e766d65 => { // HostNvme
            if type_name == "HostNvmeTopology" {
                Some(|ds, _| {
                    let obj: HostNvmeTopology = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x486f73744f706171 => { // HostOpaq
            if type_name == "HostOpaqueSwitch" {
                Some(|ds, _| {
                    let obj: HostOpaqueSwitch = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x486f737452656d6f => { // HostRemo
            if type_name == "HostRemovedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x486f737453637369 => { // HostScsi
            if type_name == "HostScsiTopology" {
                Some(|ds, _| {
                    let obj: HostScsiTopology = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x486f737453656375 => { // HostSecu
            if type_name == "HostSecuritySpec" {
                Some(|ds, _| {
                    let obj: HostSecuritySpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x487474704e66634c => { // HttpNfcL
            if type_name == "HttpNfcLeaseInfo" {
                Some(|ds, _| {
                    let obj: HttpNfcLeaseInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x496e666f55706772 => { // InfoUpgr
            if type_name == "InfoUpgradeEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x496e76616c696443 => { // InvalidC
            if type_name == "InvalidCAMServer" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x496e76616c696444 => { // InvalidD
            if type_name == "InvalidDatastore" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x496e76616c696448 => { // InvalidH
            if type_name == "InvalidHostState" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x496e76616c696450 => { // InvalidP
            if type_name == "InvalidPrivilege" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4970416464726573 => { // IpAddres
            if type_name == "IpAddressProfile" {
                Some(|ds, _| {
                    let obj: IpAddressProfile = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x49736f496d616765 => { // IsoImage
            if type_name == "IsoImageFileInfo" {
                Some(|ds, _| {
                    let obj: IsoImageFileInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4b65726e656c4d6f => { // KernelMo
            if type_name == "KernelModuleInfo" {
                Some(|ds, _| {
                    let obj: KernelModuleInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4b6d697053657276 => { // KmipServ
            if type_name == "KmipServerStatus" {
                Some(|ds, _| {
                    let obj: KmipServerStatus = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4c6963656e736555 => { // LicenseU
            if type_name == "LicenseUsageInfo" {
                Some(|ds, _| {
                    let obj: LicenseUsageInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4d69736d61746368 => { // Mismatch
            if type_name == "MismatchedBundle" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4d74754d69736d61 => { // MtuMisma
            if type_name == "MtuMismatchEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4e61734461746173 => { // NasDatas
            if type_name == "NasDatastoreInfo" {
                Some(|ds, _| {
                    let obj: NasDatastoreInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4e6574446e73436f => { // NetDnsCo
            match type_name {
                "NetDnsConfigInfo" => {
                    Some(|ds, _| {
                        let obj: NetDnsConfigInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "NetDnsConfigSpec" => {
                    Some(|ds, _| {
                        let obj: NetDnsConfigSpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x4e6574776f726b43 => { // NetworkC
            if type_name == "NetworkCopyFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4e6f436f6d706174 => { // NoCompat
            if type_name == "NoCompatibleHost" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4e6f477565737448 => { // NoGuestH
            if type_name == "NoGuestHeartbeat" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4e6f5065726d6973 => { // NoPermis
            if type_name == "NoPermissionOnAD" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4e6f744175746865 => { // NotAuthe
            if type_name == "NotAuthenticated" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4e6f74537570706f => { // NotSuppo
            if type_name == "NotSupportedHost" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4e7664696d6d4865 => { // NvdimmHe
            if type_name == "NvdimmHealthInfo" {
                Some(|ds, _| {
                    let obj: NvdimmHealthInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4e7664696d6d5265 => { // NvdimmRe
            if type_name == "NvdimmRegionInfo" {
                Some(|ds, _| {
                    let obj: NvdimmRegionInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4e7664696d6d5379 => { // NvdimmSy
            if type_name == "NvdimmSystemInfo" {
                Some(|ds, _| {
                    let obj: NvdimmSystemInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4f75744f6653796e => { // OutOfSyn
            if type_name == "OutOfSyncDvsHost" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4f7666436f6e7375 => { // OvfConsu
            if type_name == "OvfConsumerFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4f76664861726477 => { // OvfHardw
            if type_name == "OvfHardwareCheck" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4f7666496e746572 => { // OvfInter
            if type_name == "OvfInternalError" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4f7666496e76616c => { // OvfInval
            if type_name == "OvfInvalidVmName" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4f766650726f7065 => { // OvfPrope
            if type_name == "OvfPropertyValue" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4f7666556e6b6e6f => { // OvfUnkno
            match type_name {
                "OvfUnknownDevice" => {
                    Some(|ds, type_name| {
                        let v = __MethodFaultVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                "OvfUnknownEntity" => {
                    Some(|ds, type_name| {
                        let v = __MethodFaultVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                _ => None
            }
        },
        0x50657266456e7469 => { // PerfEnti
            if type_name == "PerfEntityMetric" {
                Some(|ds, _| {
                    let obj: PerfEntityMetric = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x506572664d657472 => { // PerfMetr
            if type_name == "PerfMetricSeries" {
                Some(|ds, _| {
                    let obj: PerfMetricSeries = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x506f727447726f75 => { // PortGrou
            if type_name == "PortGroupProfile" {
                Some(|ds, _| {
                    let obj: PortGroupProfile = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x5265706c69636174 => { // Replicat
            if type_name == "ReplicationFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x526f6c6552656d6f => { // RoleRemo
            if type_name == "RoleRemovedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x526f6c6555706461 => { // RoleUpda
            if type_name == "RoleUpdatedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x53534c4469736162 => { // SSLDisab
            if type_name == "SSLDisabledFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x536e617073686f74 => { // Snapshot
            match type_name {
                "SnapshotDisabled" => {
                    Some(|ds, type_name| {
                        let v = __MethodFaultVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                "SnapshotNoChange" => {
                    Some(|ds, type_name| {
                        let v = __MethodFaultVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                _ => None
            }
        },
        0x537472696e674578 => { // StringEx
            if type_name == "StringExpression" {
                Some(|ds, _| {
                    let obj: StringExpression = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x5461736b52656173 => { // TaskReas
            if type_name == "TaskReasonSystem" {
                Some(|ds, _| {
                    let obj: TaskReasonSystem = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x5461736b54696d65 => { // TaskTime
            if type_name == "TaskTimeoutEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x546f6f6c73556e61 => { // ToolsUna
            if type_name == "ToolsUnavailable" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x556e7265636f676e => { // Unrecogn
            if type_name == "UnrecognizedHost" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x556e737570706f72 => { // Unsuppor
            if type_name == "UnsupportedGuest" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x5573657247726f75 => { // UserGrou
            if type_name == "UserGroupProfile" {
                Some(|ds, _| {
                    let obj: UserGroupProfile = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x5573657253656172 => { // UserSear
            if type_name == "UserSearchResult" {
                Some(|ds, _| {
                    let obj: UserSearchResult = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x5573657255706772 => { // UserUpgr
            if type_name == "UserUpgradeEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x5641534153746f72 => { // VASAStor
            if type_name == "VASAStorageArray" {
                Some(|ds, _| {
                    let obj: VasaStorageArray = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x5641707050726f70 => { // VAppProp
            match type_name {
                "VAppPropertyInfo" => {
                    Some(|ds, _| {
                        let obj: VAppPropertyInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "VAppPropertySpec" => {
                    Some(|ds, _| {
                        let obj: VAppPropertySpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x5669727475616c53 => { // VirtualS
            if type_name == "VirtualSoundCard" {
                Some(|ds, _| {
                    let obj: VirtualSoundCard = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x5669727475616c54 => { // VirtualT
            if type_name == "VirtualTPMOption" {
                Some(|ds, _| {
                    let obj: VirtualTpmOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x5669727475616c55 => { // VirtualU
            if type_name == "VirtualUSBOption" {
                Some(|ds, _| {
                    let obj: VirtualUsbOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x5669727475616c57 => { // VirtualW
            if type_name == "VirtualWDTOption" {
                Some(|ds, _| {
                    let obj: VirtualWdtOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x566d436f6e666967 => { // VmConfig
            if type_name == "VmConfigFileInfo" {
                Some(|ds, _| {
                    let obj: VmConfigFileInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x566d436f6e6e6563 => { // VmConnec
            if type_name == "VmConnectedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x566d4661696c6f76 => { // VmFailov
            if type_name == "VmFailoverFailed" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x566d4e7672616d46 => { // VmNvramF
            if type_name == "VmNvramFileQuery" {
                Some(|ds, _| {
                    let obj: VmNvramFileQuery = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x566d506f77657265 => { // VmPowere
            if type_name == "VmPoweredOnEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x566d52656c6f6361 => { // VmReloca
            if type_name == "VmRelocatedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x566d526573657474 => { // VmResett
            if type_name == "VmResettingEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x566d53757370656e => { // VmSuspen
            if type_name == "VmSuspendedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x566d557067726164 => { // VmUpgrad
            if type_name == "VmUpgradingEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x566d6673436f6e66 => { // VmfsConf
            if type_name == "VmfsConfigOption" {
                Some(|ds, _| {
                    let obj: VmfsConfigOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x566e6963506f7274 => { // VnicPort
            if type_name == "VnicPortArgument" {
                Some(|ds, _| {
                    let obj: VnicPortArgument = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x5672616d4c696d69 => { // VramLimi
            if type_name == "VramLimitLicense" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x5673616e486f7374 => { // VsanHost
            if type_name == "VsanHostIpConfig" {
                Some(|ds, _| {
                    let obj: VsanHostIpConfig = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x56736c6d52656c6f => { // VslmRelo
            if type_name == "VslmRelocateSpec" {
                Some(|ds, _| {
                    let obj: VslmRelocateSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_object_deserializer_17<'de, A: de::MapAccess<'de>>(type_name: &str) -> Option<fn(de::value::MapAccessDeserializer<A>, &str) -> Result<VimAny, A::Error>> {
    let s = &type_name[3..11];
    let Some(type_ord) = to_u64(s) else {
        return None;
    };
    match type_ord {
        0x4144557365725265 => { // ADUserRe
            if type_name == "NonADUserRequired" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x42494f53436f6e66 => { // BIOSConf
            if type_name == "NetBIOSConfigInfo" {
                Some(|ds, _| {
                    let obj: NetBiosConfigInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x42756e646c696e67 => { // Bundling
            if type_name == "LogBundlingFailed" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x44657374726f7965 => { // Destroye
            if type_name == "DvsDestroyedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x44686370436f6e66 => { // DhcpConf
            match type_name {
                "NetDhcpConfigInfo" => {
                    Some(|ds, _| {
                        let obj: NetDhcpConfigInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "NetDhcpConfigSpec" => {
                    Some(|ds, _| {
                        let obj: NetDhcpConfigSpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x456e6f7567684c69 => { // EnoughLi
            if type_name == "NotEnoughLicenses" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4861726477617265 => { // Hardware
            if type_name == "OvfHardwareExport" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x496d61676546696c => { // ImageFil
            if type_name == "IsoImageFileQuery" {
                Some(|ds, _| {
                    let obj: IsoImageFileQuery = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x496e76616c696450 => { // InvalidP
            if type_name == "OvfInvalidPackage" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4d697373696e6745 => { // MissingE
            if type_name == "OvfMissingElement" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4e6574776f726b4d => { // NetworkM
            if type_name == "OvfNetworkMapping" {
                Some(|ds, _| {
                    let obj: OvfNetworkMapping = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x50726f7065727479 => { // Property
            if type_name == "OvfPropertyExport" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x5365637572697479 => { // Security
            if type_name == "DVSSecurityPolicy" {
                Some(|ds, _| {
                    let obj: DvsSecurityPolicy = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x53746f7261676550 => { // StorageP
            if type_name == "NasStorageProfile" {
                Some(|ds, _| {
                    let obj: NasStorageProfile = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x5472616666696352 => { // TrafficR
            if type_name == "DvsTrafficRuleset" {
                Some(|ds, _| {
                    let obj: DvsTrafficRuleset = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x57726f6e674e616d => { // WrongNam
            if type_name == "OvfWrongNamespace" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x61436c7573746572 => { // aCluster
            if type_name == "VchaClusterHealth" {
                Some(|ds, _| {
                    let obj: VchaClusterHealth = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x616261736553697a => { // abaseSiz
            if type_name == "DatabaseSizeParam" {
                Some(|ds, _| {
                    let obj: DatabaseSizeParam = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x61634368616e6765 => { // acChange
            if type_name == "VmMacChangedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x616c6964436f6e74 => { // alidCont
            if type_name == "InvalidController" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x616c696444657669 => { // alidDevi
            if type_name == "InvalidDeviceSpec" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x616c69644469736b => { // alidDisk
            if type_name == "InvalidDiskFormat" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x616c696447756573 => { // alidGues
            if type_name == "InvalidGuestLogin" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x616c6964506f7765 => { // alidPowe
            if type_name == "InvalidPowerState" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x616e506f7274436f => { // anPortCo
            if type_name == "VspanPortConflict" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6172654970666978 => { // areIpfix
            if type_name == "VMwareIpfixConfig" {
                Some(|ds, _| {
                    let obj: VMwareIpfixConfig = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6355706c696e6b50 => { // cUplinkP
            if type_name == "PnicUplinkProfile" {
                Some(|ds, _| {
                    let obj: PnicUplinkProfile = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6363657373557365 => { // ccessUse
            if type_name == "NoAccessUserEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x63656d656e745261 => { // cementRa
            if type_name == "PlacementRankSpec" {
                Some(|ds, _| {
                    let obj: PlacementRankSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x636b656442794669 => { // ckedByFi
            if type_name == "BlockedByFirewall" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6465724e6577486f => { // derNewHo
            if type_name == "FolderNewHostSpec" {
                Some(|ds, _| {
                    let obj: FolderNewHostSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x65416c7265616479 => { // eAlready
            if type_name == "FileAlreadyExists" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x654576656e744172 => { // eEventAr
            if type_name == "RoleEventArgument" {
                Some(|ds, _| {
                    let obj: RoleEventArgument = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x655461736b536368 => { // eTaskSch
            if type_name == "OnceTaskScheduler" {
                Some(|ds, _| {
                    let obj: OnceTaskScheduler = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6563746f72794e6f => { // ectoryNo
            if type_name == "DirectoryNotEmpty" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6564756c65645461 => { // eduledTa
            match type_name {
                "ScheduledTaskInfo" => {
                    Some(|ds, _| {
                        let obj: ScheduledTaskInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "ScheduledTaskSpec" => {
                    Some(|ds, _| {
                        let obj: ScheduledTaskSpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x6567697374657265 => { // egistere
            if type_name == "VmRegisteredEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x656e646564457665 => { // endedEve
            if type_name == "ExtendedEventPair" {
                Some(|ds, _| {
                    let obj: ExtendedEventPair = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x656e736552657374 => { // enseRest
            if type_name == "LicenseRestricted" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6572697461626c65 => { // eritable
            if type_name == "InheritablePolicy" {
                Some(|ds, _| {
                    let obj: InheritablePolicy = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x66696c65436f6e66 => { // fileConf
            if type_name == "ProfileConfigInfo" {
                Some(|ds, _| {
                    let obj: ProfileConfigInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x66696c6543726561 => { // fileCrea
            if type_name == "ProfileCreateSpec" {
                Some(|ds, _| {
                    let obj: ProfileCreateSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x66696c6545787072 => { // fileExpr
            if type_name == "ProfileExpression" {
                Some(|ds, _| {
                    let obj: ProfileExpression = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x686f644465736372 => { // hodDescr
            if type_name == "MethodDescription" {
                Some(|ds, _| {
                    let obj: MethodDescription = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x686f72697a617469 => { // horizati
            if type_name == "AuthorizationRole" {
                Some(|ds, _| {
                    let obj: AuthorizationRole = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x694c756e44657363 => { // iLunDesc
            if type_name == "ScsiLunDescriptor" {
                Some(|ds, _| {
                    let obj: ScsiLunDescriptor = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x696c746572486f73 => { // ilterHos
            if type_name == "IoFilterHostIssue" {
                Some(|ds, _| {
                    let obj: IoFilterHostIssue = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6973636f76657265 => { // iscovere
            if type_name == "VmDiscoveredEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x69736b4661696c65 => { // iskFaile
            if type_name == "VmDiskFailedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6b48617350617274 => { // kHasPart
            if type_name == "DiskHasPartitions" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6c4461746173746f => { // lDatasto
            if type_name == "VvolDatastoreInfo" {
                Some(|ds, _| {
                    let obj: VvolDatastoreInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6c61726d45787072 => { // larmExpr
            if type_name == "OrAlarmExpression" {
                Some(|ds, _| {
                    let obj: OrAlarmExpression = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6d4461746173746f => { // mDatasto
            if type_name == "PMemDatastoreInfo" {
                Some(|ds, _| {
                    let obj: PMemDatastoreInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6d6967726174696e => { // migratin
            if type_name == "VmEmigratingEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6d696e674d617463 => { // mingMatc
            if type_name == "TeamingMatchEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6d697373696f6e50 => { // missionP
            if type_name == "PermissionProfile" {
                Some(|ds, _| {
                    let obj: PermissionProfile = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6e4461746173746f => { // nDatasto
            if type_name == "VsanDatastoreInfo" {
                Some(|ds, _| {
                    let obj: VsanDatastoreInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f53746172744465 => { // oStartDe
            if type_name == "AutoStartDefaults" {
                Some(|ds, _| {
                    let obj: AutoStartDefaults = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f6e66696746696c => { // onfigFil
            if type_name == "VmConfigFileQuery" {
                Some(|ds, _| {
                    let obj: VmConfigFileQuery = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f6f6c4173736f63 => { // oolAssoc
            if type_name == "IpPoolAssociation" {
                Some(|ds, _| {
                    let obj: IpPoolAssociation = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f72557067726164 => { // orUpgrad
            if type_name == "ErrorUpgradeEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f72726563744669 => { // orrectFi
            if type_name == "IncorrectFileType" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f727467726f7570 => { // ortgroup
            if type_name == "DVPortgroupPolicy" {
                Some(|ds, _| {
                    let obj: DvPortgroupPolicy = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f75726365506f6f => { // ourcePoo
            if type_name == "ResourcePoolEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f7765724f6e4469 => { // owerOnDi
            if type_name == "VmPowerOnDisabled" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f77657265644f66 => { // oweredOf
            if type_name == "VmPoweredOffEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7050726f70657274 => { // pPropert
            if type_name == "VAppPropertyFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x706c69616e636546 => { // plianceF
            if type_name == "ComplianceFailure" {
                Some(|ds, _| {
                    let obj: ComplianceFailure = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x706c69616e63654c => { // plianceL
            if type_name == "ComplianceLocator" {
                Some(|ds, _| {
                    let obj: ComplianceLocator = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x706c69616e636550 => { // plianceP
            if type_name == "ComplianceProfile" {
                Some(|ds, _| {
                    let obj: ComplianceProfile = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x70746f5370656344 => { // ptoSpecD
            if type_name == "CryptoSpecDecrypt" {
                Some(|ds, _| {
                    let obj: CryptoSpecDecrypt = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x70746f5370656345 => { // ptoSpecE
            if type_name == "CryptoSpecEncrypt" {
                Some(|ds, _| {
                    let obj: CryptoSpecEncrypt = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x72616765506f6453 => { // ragePodS
            if type_name == "StoragePodSummary" {
                Some(|ds, _| {
                    let obj: StoragePodSummary = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x726174696f6e4469 => { // rationDi
            if type_name == "MigrationDisabled" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x726174696f6e4e6f => { // rationNo
            if type_name == "MigrationNotReady" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x726d436c65617265 => { // rmCleare
            if type_name == "AlarmClearedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x726d437265617465 => { // rmCreate
            if type_name == "AlarmCreatedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x726d52656d6f7665 => { // rmRemove
            if type_name == "AlarmRemovedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x734461746173746f => { // sDatasto
            match type_name {
                "VmfsDatastoreInfo" => {
                    Some(|ds, _| {
                        let obj: VmfsDatastoreInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "VmfsDatastoreSpec" => {
                    Some(|ds, _| {
                        let obj: VmfsDatastoreSpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x736963616c4e6963 => { // sicalNic
            match type_name {
                "PhysicalNicConfig" => {
                    Some(|ds, _| {
                        let obj: PhysicalNicConfig = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "PhysicalNicIpHint" => {
                    Some(|ds, _| {
                        let obj: PhysicalNicIpHint = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x73696e67426d6353 => { // singBmcS
            if type_name == "MissingBmcSupport" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x73696e67436f6e74 => { // singCont
            if type_name == "MissingController" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x73744c6973744669 => { // stListFi
            if type_name == "GuestListFileInfo" {
                Some(|ds, _| {
                    let obj: GuestListFileInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x73744f7344657363 => { // stOsDesc
            if type_name == "GuestOsDescriptor" {
                Some(|ds, _| {
                    let obj: GuestOsDescriptor = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x737452656756616c => { // stRegVal
            if type_name == "GuestRegValueSpec" {
                Some(|ds, _| {
                    let obj: GuestRegValueSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x73746572436f6e66 => { // sterConf
            match type_name {
                "ClusterConfigInfo" => {
                    Some(|ds, _| {
                        let obj: ClusterConfigInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "ClusterConfigSpec" => {
                    Some(|ds, _| {
                        let obj: ClusterConfigSpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x73746572536c6f74 => { // sterSlot
            if type_name == "ClusterSlotPolicy" {
                Some(|ds, _| {
                    let obj: ClusterSlotPolicy = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x74436f6d6d756e69 => { // tCommuni
            if type_name == "HostCommunication" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x74436f6e6669674d => { // tConfigM
            if type_name == "HostConfigManager" {
                Some(|ds, _| {
                    let obj: HostConfigManager = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x74436f6e66696753 => { // tConfigS
            if type_name == "HostConfigSummary" {
                Some(|ds, _| {
                    let obj: HostConfigSummary = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x744461734572726f => { // tDasErro
            if type_name == "HostDasErrorEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x74446e73436f6e66 => { // tDnsConf
            if type_name == "HostDnsConfigSpec" {
                Some(|ds, _| {
                    let obj: HostDnsConfigSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x744576656e744172 => { // tEventAr
            if type_name == "HostEventArgument" {
                Some(|ds, _| {
                    let obj: HostEventArgument = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7448626143726561 => { // tHbaCrea
            if type_name == "HostHbaCreateSpec" {
                Some(|ds, _| {
                    let obj: HostHbaCreateSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x74496e76656e746f => { // tInvento
            if type_name == "HostInventoryFull" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x744970526f757465 => { // tIpRoute
            if type_name == "HostIpRouteConfig" {
                Some(|ds, _| {
                    let obj: HostIpRouteConfig = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x744d656d6f727950 => { // tMemoryP
            if type_name == "HostMemoryProfile" {
                Some(|ds, _| {
                    let obj: HostMemoryProfile = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x744d756c74697061 => { // tMultipa
            if type_name == "HostMultipathInfo" {
                Some(|ds, _| {
                    let obj: HostMultipathInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x744e6173566f6c75 => { // tNasVolu
            if type_name == "HostNasVolumeSpec" {
                Some(|ds, _| {
                    let obj: HostNasVolumeSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x744e6574776f726b => { // tNetwork
            match type_name {
                "HostNetworkConfig" => {
                    Some(|ds, _| {
                        let obj: HostNetworkConfig = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "HostNetworkPolicy" => {
                    Some(|ds, _| {
                        let obj: HostNetworkPolicy = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x744e766d654e616d => { // tNvmeNam
            if type_name == "HostNvmeNamespace" {
                Some(|ds, _| {
                    let obj: HostNvmeNamespace = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x74506f727447726f => { // tPortGro
            match type_name {
                "HostPortGroupPort" => {
                    Some(|ds, _| {
                        let obj: HostPortGroupPort = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "HostPortGroupSpec" => {
                    Some(|ds, _| {
                        let obj: HostPortGroupSpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x74506f7765724f70 => { // tPowerOp
            if type_name == "HostPowerOpFailed" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x745175616c696669 => { // tQualifi
            if type_name == "HostQualifiedName" {
                Some(|ds, _| {
                    let obj: HostQualifiedName = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7453657276696365 => { // tService
            match type_name {
                "HostServiceConfig" => {
                    Some(|ds, _| {
                        let obj: HostServiceConfig = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "HostServiceTicket" => {
                    Some(|ds, _| {
                        let obj: HostServiceTicket = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x7453687574646f77 => { // tShutdow
            if type_name == "HostShutdownEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7453706563696669 => { // tSpecifi
            if type_name == "HostSpecification" {
                Some(|ds, _| {
                    let obj: HostSpecification = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7454706d44696765 => { // tTpmDige
            if type_name == "HostTpmDigestInfo" {
                Some(|ds, _| {
                    let obj: HostTpmDigestInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x74564d6f74696f6e => { // tVMotion
            if type_name == "HostVMotionConfig" {
                Some(|ds, _| {
                    let obj: HostVMotionConfig = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x745669727475616c => { // tVirtual
            if type_name == "HostVirtualSwitch" {
                Some(|ds, _| {
                    let obj: HostVirtualSwitch = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x746f6d697a617469 => { // tomizati
            match type_name {
                "CustomizationName" => {
                    Some(|ds, _| {
                        let obj: CustomizationName = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "CustomizationSpec" => {
                    Some(|ds, _| {
                        let obj: CustomizationSpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x7472696374656456 => { // trictedV
            if type_name == "RestrictedVersion" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7475616c41707053 => { // tualAppS
            if type_name == "VirtualAppSummary" {
                Some(|ds, _| {
                    let obj: VirtualAppSummary = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7475616c436f6e74 => { // tualCont
            if type_name == "VirtualController" {
                Some(|ds, _| {
                    let obj: VirtualController = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7475616c4469736b => { // tualDisk
            if type_name == "VirtualDiskOption" {
                Some(|ds, _| {
                    let obj: VirtualDiskOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7475616c53657269 => { // tualSeri
            if type_name == "VirtualSerialPort" {
                Some(|ds, _| {
                    let obj: VirtualSerialPort = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x756666696369656e => { // ufficien
            if type_name == "InsufficientDisks" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x756d65456469746f => { // umeEdito
            if type_name == "VolumeEditorError" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x757370656e64696e => { // uspendin
            if type_name == "VmSuspendingEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x75746f52656e616d => { // utoRenam
            if type_name == "VmAutoRenameEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x776e4368616e6765 => { // wnChange
            if type_name == "VmWwnChangedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_object_deserializer_18<'de, A: de::MapAccess<'de>>(type_name: &str) -> Option<fn(de::value::MapAccessDeserializer<A>, &str) -> Result<VimAny, A::Error>> {
    let s = &type_name[5..9];
    let Some(type_ord) = to_u32(s) else {
        return None;
    };
    match type_ord {
        0x41737369 => { // Assi
            match type_name {
                "VmMacAssignedEvent" => {
                    Some(|ds, type_name| {
                        let v = __EventVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                "VmWwnAssignedEvent" => {
                    Some(|ds, type_name| {
                        let v = __EventVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                _ => None
            }
        },
        0x41757468 => { // Auth
            if type_name == "GuestAuthAliasInfo" {
                Some(|ds, _| {
                    let obj: GuestAuthAliasInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x436f6e66 => { // Conf
            match type_name {
                "VmMacConflictEvent" => {
                    Some(|ds, type_name| {
                        let v = __EventVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                "VmWwnConflictEvent" => {
                    Some(|ds, type_name| {
                        let v = __EventVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                _ => None
            }
        },
        0x44617461 => { // Data
            if type_name == "LocalDatastoreInfo" {
                Some(|ds, _| {
                    let obj: LocalDatastoreInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4576656e => { // Even
            if type_name == "AlarmEventArgument" {
                Some(|ds, _| {
                    let obj: AlarmEventArgument = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x496e7374 => { // Inst
            match type_name {
                "PatchInstallFailed" => {
                    Some(|ds, type_name| {
                        let v = __MethodFaultVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                "AgentInstallFailed" => {
                    Some(|ds, type_name| {
                        let v = __MethodFaultVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                _ => None
            }
        },
        0x4c696365 => { // Lice
            if type_name == "LocalLicenseSource" {
                Some(|ds, _| {
                    let obj: LocalLicenseSource = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4d617070 => { // Mapp
            if type_name == "GuestMappedAliases" {
                Some(|ds, _| {
                    let obj: GuestMappedAliases = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4d696772 => { // Migr
            if type_name == "DrsVmMigratedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4e6f7441 => { // NotA
            if type_name == "PatchNotApplicable" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x506f7274 => { // Port
            if type_name == "VspanPortMoveFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x52656769 => { // Regi
            if type_name == "GuestRegistryFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x5461736b => { // Task
            if type_name == "DailyTaskScheduler" {
                Some(|ds, _| {
                    let obj: DailyTaskScheduler = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x55706461 => { // Upda
            if type_name == "VmDasUpdateOkEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x616c4170 => { // alAp
            if type_name == "VirtualAppLinkInfo" {
                Some(|ds, _| {
                    let obj: VirtualAppLinkInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x616c4364 => { // alCd
            if type_name == "VirtualCdromOption" {
                Some(|ds, _| {
                    let obj: VirtualCdromOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x616c4531 => { // alE1
            if type_name == "VirtualE1000Option" {
                Some(|ds, _| {
                    let obj: VirtualE1000Option = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x616c456e => { // alEn
            if type_name == "VirtualEnsoniq1371" {
                Some(|ds, _| {
                    let obj: VirtualEnsoniq1371 = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x616c4864 => { // alHd
            if type_name == "VirtualHdAudioCard" {
                Some(|ds, _| {
                    let obj: VirtualHdAudioCard = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x616c566d => { // alVm
            if type_name == "GeneralVmInfoEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x61726d45 => { // armE
            if type_name == "AndAlarmExpression" {
                Some(|ds, _| {
                    let obj: AndAlarmExpression = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x61736b49 => { // askI
            if type_name == "VAppTaskInProgress" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x61745365 => { // atSe
            if type_name == "HostNatServiceSpec" {
                Some(|ds, _| {
                    let obj: HostNatServiceSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x61746173 => { // atas
            if type_name == "SwapDatastoreUnset" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x61746554 => { // ateT
            if type_name == "HostDateTimeConfig" {
                Some(|ds, _| {
                    let obj: HostDateTimeConfig = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x63526f75 => { // cRou
            if type_name == "StaticRouteProfile" {
                Some(|ds, _| {
                    let obj: StaticRouteProfile = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x63616c4e => { // calN
            match type_name {
                "PhysicalNicCdpInfo" => {
                    Some(|ds, _| {
                        let obj: PhysicalNicCdpInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "PhysicalNicProfile" => {
                    Some(|ds, _| {
                        let obj: PhysicalNicProfile = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x63617469 => { // cati
            match type_name {
                "ReplicationGroupId" => {
                    Some(|ds, _| {
                        let obj: ReplicationGroupId = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "ReplicationVmFault" => {
                    Some(|ds, type_name| {
                        let v = __MethodFaultVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                _ => None
            }
        },
        0x63795365 => { // cySe
            if type_name == "LatencySensitivity" {
                Some(|ds, _| {
                    let obj: LatencySensitivity = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x64436861 => { // dCha
            if type_name == "VmUuidChangedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x64644661 => { // ddFa
            if type_name == "HostAddFailedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x654e6f74 => { // eNot
            if type_name == "DeviceNotSupported" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x65567370 => { // eVsp
            if type_name == "VMwareVspanSession" {
                Some(|ds, _| {
                    let obj: VMwareVspanSession = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6561736f => { // easo
            if type_name == "TaskReasonSchedule" {
                Some(|ds, _| {
                    let obj: TaskReasonSchedule = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x656d6f72 => { // emor
            if type_name == "HostMemoryTierInfo" {
                Some(|ds, _| {
                    let obj: HostMemoryTierInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x656e7446 => { // entF
            if type_name == "DasAgentFoundEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x656e7465 => { // ente
            if type_name == "DatacenterMismatch" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x65706c6f => { // eplo
            match type_name {
                "HostDeploymentInfo" => {
                    Some(|ds, _| {
                        let obj: HostDeploymentInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "NodeDeploymentSpec" => {
                    Some(|ds, _| {
                        let obj: NodeDeploymentSpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x65724461 => { // erDa
            if type_name == "ClusterDasHostInfo" {
                Some(|ds, _| {
                    let obj: ClusterDasHostInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6572566d => { // erVm
            if type_name == "ClusterVmReadiness" {
                Some(|ds, _| {
                    let obj: ClusterVmReadiness = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6577506f => { // ewPo
            if type_name == "VsanNewPolicyBatch" {
                Some(|ds, _| {
                    let obj: VsanNewPolicyBatch = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x67655265 => { // geRe
            if type_name == "StorageRequirement" {
                Some(|ds, _| {
                    let obj: StorageRequirement = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x69634f72 => { // icOr
            if type_name == "HostNicOrderPolicy" {
                Some(|ds, _| {
                    let obj: HostNicOrderPolicy = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x69644970 => { // idIp
            if type_name == "InvalidIpfixConfig" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x696c7572 => { // ilur
            if type_name == "DVSFailureCriteria" {
                Some(|ds, _| {
                    let obj: DvsFailureCriteria = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x69726577 => { // irew
            if type_name == "HostFirewallConfig" {
                Some(|ds, _| {
                    let obj: HostFirewallConfig = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x69727475 => { // irtu
            if type_name == "HostVirtualNicSpec" {
                Some(|ds, _| {
                    let obj: HostVirtualNicSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x69736b44 => { // iskD
            if type_name == "HostDiskDimensions" {
                Some(|ds, _| {
                    let obj: HostDiskDimensions = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x69747943 => { // ityC
            if type_name == "AffinityConfigured" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x697a6162 => { // izab
            if type_name == "LocalizableMessage" {
                Some(|ds, _| {
                    let obj: LocalizableMessage = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6b73546f => { // ksTo
            if type_name == "NoDisksToCustomize" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6c654465 => { // leDe
            if type_name == "ProfileDescription" {
                Some(|ds, _| {
                    let obj: ProfileDescription = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6c656765 => { // lege
            if type_name == "PrivilegePolicyDef" {
                Some(|ds, _| {
                    let obj: PrivilegePolicyDef = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6c726561 => { // lrea
            if type_name == "VmfsAlreadyMounted" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6c746572 => { // lter
            if type_name == "DvsFilterParameter" {
                Some(|ds, _| {
                    let obj: DvsFilterParameter = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6d626967 => { // mbig
            if type_name == "VmfsAmbiguousMount" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6d697373 => { // miss
            match type_name {
                "EVCAdmissionFailed" => {
                    Some(|ds, type_name| {
                        let v = __MethodFaultVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                "NoPermissionOnHost" => {
                    Some(|ds, type_name| {
                        let v = __MethodFaultVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                _ => None
            }
        },
        0x6d697a61 => { // miza
            match type_name {
                "CustomizationEvent" => {
                    Some(|ds, type_name| {
                        let v = __EventVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                "CustomizationFault" => {
                    Some(|ds, type_name| {
                        let v = __MethodFaultVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                _ => None
            }
        },
        0x6e654661 => { // neFa
            if type_name == "VmCloneFailedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6e67436c => { // ngCl
            if type_name == "VmBeingClonedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6e6d7043 => { // nmpC
            if type_name == "HostSnmpConfigSpec" {
                Some(|ds, _| {
                    let obj: HostSnmpConfigSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6e6e6563 => { // nnec
            if type_name == "OvfConnectedDevice" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6e73756d => { // nsum
            if type_name == "OvfConsumerOstNode" {
                Some(|ds, _| {
                    let obj: OvfConsumerOstNode = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6e744465 => { // ntDe
            if type_name == "ElementDescription" {
                Some(|ds, _| {
                    let obj: ElementDescription = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6e784661 => { // nxFa
            if type_name == "HostCnxFailedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6e794775 => { // nyGu
            if type_name == "TooManyGuestLogons" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f537065 => { // oSpe
            if type_name == "CryptoSpecRegister" {
                Some(|ds, _| {
                    let obj: CryptoSpecRegister = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f636b49 => { // ockI
            if type_name == "FileLockInfoResult" {
                Some(|ds, _| {
                    let obj: FileLockInfoResult = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f6d706c => { // ompl
            if type_name == "HostCompliantEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f6e4e6f => { // onNo
            if type_name == "VMotionNotLicensed" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f6e666c => { // onfl
            if type_name == "VMOnConflictDVPort" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f6e6e65 => { // onne
            if type_name == "HostConnectedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f6f7444 => { // ootD
            if type_name == "HostBootDeviceInfo" {
                Some(|ds, _| {
                    let obj: HostBootDeviceInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f706572 => { // oper
            if type_name == "OvfPropertyNetwork" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f726167 => { // orag
            if type_name == "PodStorageDrsEntry" {
                Some(|ds, _| {
                    let obj: PodStorageDrsEntry = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f737442 => { // ostB
            if type_name == "HostHostBusAdapter" {
                Some(|ds, _| {
                    let obj: HostHostBusAdapter = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f737443 => { // ostC
            if type_name == "VsanHostConfigInfo" {
                Some(|ds, _| {
                    let obj: VsanHostConfigInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f737444 => { // ostD
            if type_name == "VsanHostDiskResult" {
                Some(|ds, _| {
                    let obj: VsanHostDiskResult = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x70436861 => { // pCha
            if type_name == "HostIpChangedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7073686f => { // psho
            if type_name == "VmSnapshotFileInfo" {
                Some(|ds, _| {
                    let obj: VmSnapshotFileInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x72617068 => { // raph
            if type_name == "HostGraphicsConfig" {
                Some(|ds, _| {
                    let obj: HostGraphicsConfig = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x72636543 => { // rceC
            if type_name == "ResourceConfigSpec" {
                Some(|ds, _| {
                    let obj: ResourceConfigSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x72697a61 => { // riza
            if type_name == "AuthorizationEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x72744c69 => { // rtLi
            if type_name == "DvsPortLinkUpEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x72747946 => { // rtyF
            if type_name == "PropertyFilterSpec" {
                Some(|ds, _| {
                    let obj: PropertyFilterSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x73654469 => { // seDi
            if type_name == "LicenseDiagnostics" {
                Some(|ds, _| {
                    let obj: LicenseDiagnostics = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x73654665 => { // seFe
            if type_name == "LicenseFeatureInfo" {
                Some(|ds, _| {
                    let obj: LicenseFeatureInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7373696e => { // ssin
            if type_name == "OvfMissingHardware" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x73744661 => { // stFa
            if type_name == "DasHostFailedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x73744a6f => { // stJo
            if type_name == "DvsHostJoinedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x73745265 => { // stRe
            if type_name == "VmGuestRebootEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7374564e => { // stVN
            match type_name {
                "DvsHostVNicProfile" => {
                    Some(|ds, _| {
                        let obj: DvsHostVNicProfile = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "NsxHostVNicProfile" => {
                    Some(|ds, _| {
                        let obj: NsxHostVNicProfile = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x73757070 => { // supp
            if type_name == "OvfUnsupportedType" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x74416363 => { // tAcc
            if type_name == "CannotAccessVmDisk" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7447726f => { // tGro
            if type_name == "VmPortGroupProfile" {
                Some(|ds, _| {
                    let obj: VmPortGroupProfile = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x744e6f74 => { // tNot
            match type_name {
                "DVPortNotSupported" => {
                    Some(|ds, type_name| {
                        let v = __MethodFaultVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                "DigestNotSupported" => {
                    Some(|ds, type_name| {
                        let v = __MethodFaultVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                _ => None
            }
        },
        0x74617274 => { // tart
            if type_name == "AutoStartPowerInfo" {
                Some(|ds, _| {
                    let obj: AutoStartPowerInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x746f7265 => { // tore
            match type_name {
                "DatastoreFileEvent" => {
                    Some(|ds, type_name| {
                        let v = __EventVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                "DatastoreHostMount" => {
                    Some(|ds, _| {
                        let obj: DatastoreHostMount = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x7474696e => { // ttin
            if type_name == "NicSettingMismatch" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x756c6564 => { // uled
            if type_name == "ScheduledTaskEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x756e4475 => { // unDu
            if type_name == "ScsiLunDurableName" {
                Some(|ds, _| {
                    let obj: ScsiLunDurableName = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x75746865 => { // uthe
            if type_name == "SSPIAuthentication" {
                Some(|ds, _| {
                    let obj: SspiAuthentication = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x76665365 => { // vfSe
            match type_name {
                "VAppOvfSectionInfo" => {
                    Some(|ds, _| {
                        let obj: VAppOvfSectionInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "VAppOvfSectionSpec" => {
                    Some(|ds, _| {
                        let obj: VAppOvfSectionSpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x766d6543 => { // vmeC
            if type_name == "HostNvmeController" {
                Some(|ds, _| {
                    let obj: HostNvmeController = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x79426163 => { // yBac
            if type_name == "EntityBackupConfig" {
                Some(|ds, _| {
                    let obj: EntityBackupConfig = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_object_deserializer_19<'de, A: de::MapAccess<'de>>(type_name: &str) -> Option<fn(de::value::MapAccessDeserializer<A>, &str) -> Result<VimAny, A::Error>> {
    let s = &type_name[4..12];
    let Some(type_ord) = to_u64(s) else {
        return None;
    };
    match type_ord {
        0x4163746976654469 => { // ActiveDi
            if type_name == "HostActiveDirectory" {
                Some(|ds, _| {
                    let obj: HostActiveDirectory = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x41737369676e6564 => { // Assigned
            if type_name == "UserAssignedToGroup" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x436f6d706f736974 => { // Composit
            if type_name == "PerfCompositeMetric" {
                Some(|ds, _| {
                    let obj: PerfCompositeMetric = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x436f6e666967566c => { // ConfigVl
            if type_name == "FcoeConfigVlanRange" {
                Some(|ds, _| {
                    let obj: FcoeConfigVlanRange = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x446173456e61626c => { // DasEnabl
            if type_name == "HostDasEnabledEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4461746173746f72 => { // Datastor
            if type_name == "VmfsDatastoreOption" {
                Some(|ds, _| {
                    let obj: VmfsDatastoreOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4468637053657276 => { // DhcpServ
            if type_name == "HostDhcpServiceSpec" {
                Some(|ds, _| {
                    let obj: HostDhcpServiceSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4469736b4d617070 => { // DiskMapp
            if type_name == "HostDiskMappingInfo" {
                Some(|ds, _| {
                    let obj: HostDiskMappingInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x456e746974794d65 => { // EntityMe
            if type_name == "PerfEntityMetricCSV" {
                Some(|ds, _| {
                    let obj: PerfEntityMetricCsv = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4669627265436861 => { // FibreCha
            if type_name == "HostFibreChannelHba" {
                Some(|ds, _| {
                    let obj: HostFibreChannelHba = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4669726577616c6c => { // Firewall
            if type_name == "HostFirewallRuleset" {
                Some(|ds, _| {
                    let obj: HostFirewallRuleset = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4861726477617265 => { // Hardware
            if type_name == "HostHardwareSummary" {
                Some(|ds, _| {
                    let obj: HostHardwareSummary = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x486f73744469736b => { // HostDisk
            match type_name {
                "VsanHostDiskMapInfo" => {
                    Some(|ds, _| {
                        let obj: VsanHostDiskMapInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "VsanHostDiskMapping" => {
                    Some(|ds, _| {
                        let obj: VsanHostDiskMapping = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x486f737452756e74 => { // HostRunt
            if type_name == "VsanHostRuntimeInfo" {
                Some(|ds, _| {
                    let obj: VsanHostRuntimeInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x496e7465726e6574 => { // Internet
            if type_name == "HostInternetScsiHba" {
                Some(|ds, _| {
                    let obj: HostInternetScsiHba = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4c756e4361706162 => { // LunCapab
            if type_name == "ScsiLunCapabilities" {
                Some(|ds, _| {
                    let obj: ScsiLunCapabilities = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4d61696e74656e61 => { // Maintena
            if type_name == "HostMaintenanceSpec" {
                Some(|ds, _| {
                    let obj: HostMaintenanceSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4d6574726963496e => { // MetricIn
            if type_name == "PerfMetricIntSeries" {
                Some(|ds, _| {
                    let obj: PerfMetricIntSeries = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4d65747269635365 => { // MetricSe
            if type_name == "PerfMetricSeriesCSV" {
                Some(|ds, _| {
                    let obj: PerfMetricSeriesCsv = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4e6173566f6c756d => { // NasVolum
            if type_name == "HostNasVolumeConfig" {
                Some(|ds, _| {
                    let obj: HostNasVolumeConfig = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4e65744361706162 => { // NetCapab
            if type_name == "HostNetCapabilities" {
                Some(|ds, _| {
                    let obj: HostNetCapabilities = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4e6f646552756e74 => { // NodeRunt
            if type_name == "VchaNodeRuntimeInfo" {
                Some(|ds, _| {
                    let obj: VchaNodeRuntimeInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4e766d65436f6e6e => { // NvmeConn
            if type_name == "HostNvmeConnectSpec" {
                Some(|ds, _| {
                    let obj: HostNvmeConnectSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x506172616c6c656c => { // Parallel
            if type_name == "HostParallelScsiHba" {
                Some(|ds, _| {
                    let obj: HostParallelScsiHba = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x50617373776f7264 => { // Password
            if type_name == "UserPasswordChanged" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x5063695061737374 => { // PciPasst
            if type_name == "HostPciPassthruInfo" {
                Some(|ds, _| {
                    let obj: HostPciPassthruInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x506f727447726f75 => { // PortGrou
            if type_name == "HostPortGroupConfig" {
                Some(|ds, _| {
                    let obj: HostPortGroupConfig = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x50726976696c6567 => { // Privileg
            if type_name == "UserPrivilegeResult" {
                Some(|ds, _| {
                    let obj: UserPrivilegeResult = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x50726f7669646572 => { // Provider
            if type_name == "PerfProviderSummary" {
                Some(|ds, _| {
                    let obj: PerfProviderSummary = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x50726f7879537769 => { // ProxySwi
            if type_name == "HostProxySwitchSpec" {
                Some(|ds, _| {
                    let obj: HostProxySwitchSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x53637369546f706f => { // ScsiTopo
            if type_name == "HostScsiTopologyLun" {
                Some(|ds, _| {
                    let obj: HostScsiTopologyLun = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x536e6d7044657374 => { // SnmpDest
            if type_name == "HostSnmpDestination" {
                Some(|ds, _| {
                    let obj: HostSnmpDestination = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x53796e634661696c => { // SyncFail
            if type_name == "HostSyncFailedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x5461726765745472 => { // TargetTr
            if type_name == "HostTargetTransport" {
                Some(|ds, _| {
                    let obj: HostTargetTransport = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x54706d4576656e74 => { // TpmEvent
            if type_name == "HostTpmEventDetails" {
                Some(|ds, _| {
                    let obj: HostTpmEventDetails = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x5669727475616c49 => { // VirtualI
            if type_name == "VMOnVirtualIntranet" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x57776e4368616e67 => { // WwnChang
            if type_name == "HostWwnChangedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6164794265696e67 => { // adyBeing
            if type_name == "AlreadyBeingManaged" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x616e74696e654d6f => { // antineMo
            if type_name == "QuarantineModeFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x617073686f744669 => { // apshotFi
            if type_name == "VmSnapshotFileQuery" {
                Some(|ds, _| {
                    let obj: VmSnapshotFileQuery = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x61736150726f7669 => { // asaProvi
            if type_name == "VimVasaProviderInfo" {
                Some(|ds, _| {
                    let obj: VimVasaProviderInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6174696f6e457272 => { // ationErr
            if type_name == "MigrationErrorEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x636f6e6669677572 => { // configur
            if type_name == "VmReconfiguredEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x645265636f726469 => { // dRecordi
            if type_name == "VmEndRecordingEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x645265706c617969 => { // dReplayi
            if type_name == "VmEndReplayingEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x64756c6564546173 => { // duledTas
            if type_name == "ScheduledTaskDetail" {
                Some(|ds, _| {
                    let obj: ScheduledTaskDetail = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x656d656e7452616e => { // ementRan
            if type_name == "PlacementRankResult" {
                Some(|ds, _| {
                    let obj: PlacementRankResult = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x65706c6f796d656e => { // eploymen
            if type_name == "OvfDeploymentOption" {
                Some(|ds, _| {
                    let obj: OvfDeploymentOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x65724576656e7441 => { // erEventA
            if type_name == "FolderEventArgument" {
                Some(|ds, _| {
                    let obj: FolderEventArgument = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6573745374616e64 => { // estStand
            if type_name == "VmGuestStandbyEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x666f726d436f6e66 => { // formConf
            if type_name == "PlatformConfigFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x68496e7465677269 => { // hIntegri
            if type_name == "PatchIntegrityError" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x694661756c74506e => { // iFaultPn
            if type_name == "IscsiFaultPnicInUse" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x694661756c74566e => { // iFaultVn
            if type_name == "IscsiFaultVnicInUse" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6963616c4e696348 => { // icalNicH
            if type_name == "PhysicalNicHintInfo" {
                Some(|ds, _| {
                    let obj: PhysicalNicHintInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6963616c4e69634c => { // icalNicL
            if type_name == "PhysicalNicLinkInfo" {
                Some(|ds, _| {
                    let obj: PhysicalNicLinkInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6963616c4e69634e => { // icalNicN
            if type_name == "PhysicalNicNameHint" {
                Some(|ds, _| {
                    let obj: PhysicalNicNameHint = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x696441737369676e => { // idAssign
            if type_name == "VmUuidAssignedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6964436f6e666c69 => { // idConfli
            if type_name == "VmUuidConflictEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x69656e7443657274 => { // ientCert
            if type_name == "NoClientCertificate" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x696c654368616e67 => { // ileChang
            if type_name == "ProfileChangedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x696c654372656174 => { // ileCreat
            if type_name == "ProfileCreatedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x696c654578656375 => { // ileExecu
            if type_name == "ProfileExecuteError" {
                Some(|ds, _| {
                    let obj: ProfileExecuteError = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x696c6550726f7065 => { // ilePrope
            if type_name == "ProfilePropertyPath" {
                Some(|ds, _| {
                    let obj: ProfilePropertyPath = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x696c6552656d6f76 => { // ileRemov
            if type_name == "ProfileRemovedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x696c655570646174 => { // ileUpdat
            if type_name == "ProfileUpdateFailed" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x696c746572436f6e => { // ilterCon
            if type_name == "DvsFilterConfigSpec" {
                Some(|ds, _| {
                    let obj: DvsFilterConfigSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x696e674372656174 => { // ingCreat
            if type_name == "VmBeingCreatedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x696e675570677261 => { // ingUpgra
            if type_name == "WarningUpgradeEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x696f6e4e6f745375 => { // ionNotSu
            if type_name == "VMotionNotSupported" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x69736b4e6f744176 => { // iskNotAv
            if type_name == "SsdDiskNotAvailable" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x69736b4e6f745375 => { // iskNotSu
            match type_name {
                "RawDiskNotSupported" => {
                    Some(|ds, type_name| {
                        let v = __MethodFaultVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                "IDEDiskNotSupported" => {
                    Some(|ds, type_name| {
                        let v = __MethodFaultVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                _ => None
            }
        },
        0x697373696e674174 => { // issingAt
            if type_name == "OvfMissingAttribute" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6c69644564697469 => { // lidEditi
            if type_name == "InvalidEditionEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6c696450726f7065 => { // lidPrope
            if type_name == "InvalidPropertyType" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6c69646174654d61 => { // lidateMa
            if type_name == "VmValidateMaxDevice" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6c6f636174655370 => { // locateSp
            if type_name == "VmRelocateSpecEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6c795461736b5363 => { // lyTaskSc
            match type_name {
                "HourlyTaskScheduler" => {
                    Some(|ds, _| {
                        let obj: HourlyTaskScheduler = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "WeeklyTaskScheduler" => {
                    Some(|ds, _| {
                        let obj: WeeklyTaskScheduler = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x6d506f7765726564 => { // mPowered
            if type_name == "DrsVmPoweredOnEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6d6d4e616d657370 => { // mmNamesp
            if type_name == "NvdimmNamespaceInfo" {
                Some(|ds, _| {
                    let obj: NvdimmNamespaceInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6d70617469626c65 => { // mpatible
            if type_name == "IncompatibleSetting" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6e636f6d70617469 => { // ncompati
            if type_name == "CpuIncompatible1ECX" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6e64656444657363 => { // ndedDesc
            if type_name == "ExtendedDescription" {
                Some(|ds, _| {
                    let obj: ExtendedDescription = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6e73654578706972 => { // nseExpir
            if type_name == "LicenseExpiredEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6e73655365727665 => { // nseServe
            if type_name == "LicenseServerSource" {
                Some(|ds, _| {
                    let obj: LicenseServerSource = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6e73696f6e436c69 => { // nsionCli
            if type_name == "ExtensionClientInfo" {
                Some(|ds, _| {
                    let obj: ExtensionClientInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6e73696f6e486561 => { // nsionHea
            if type_name == "ExtensionHealthInfo" {
                Some(|ds, _| {
                    let obj: ExtensionHealthInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6e73696f6e536572 => { // nsionSer
            if type_name == "ExtensionServerInfo" {
                Some(|ds, _| {
                    let obj: ExtensionServerInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f6c735570677261 => { // olsUpgra
            if type_name == "VmToolsUpgradeFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f6c756d654e6f74 => { // olumeNot
            if type_name == "NasVolumeNotMounted" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f6d4669656c6444 => { // omFieldD
            if type_name == "CustomFieldDefEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f6d697a6174696f => { // omizatio
            if type_name == "CustomizationFailed" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f726b496e616363 => { // orkInacc
            if type_name == "NetworkInaccessible" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f7274426c6f636b => { // ortBlock
            if type_name == "DvsPortBlockedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f72744372656174 => { // ortCreat
            if type_name == "DvsPortCreatedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f727444656c6574 => { // ortDelet
            if type_name == "DvsPortDeletedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f74416363657373 => { // otAccess
            if type_name == "CannotAccessNetwork" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x706c696e6b506f72 => { // plinkPor
            if type_name == "DVSUplinkPortPolicy" {
                Some(|ds, _| {
                    let obj: DvsUplinkPortPolicy = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x706c6f794661696c => { // ployFail
            if type_name == "VmDeployFailedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7075436f6d706174 => { // puCompat
            if type_name == "OvfCpuCompatibility" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7079496d61676546 => { // pyImageF
            if type_name == "FloppyImageFileInfo" {
                Some(|ds, _| {
                    let obj: FloppyImageFileInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x72616c566d457272 => { // ralVmErr
            if type_name == "GeneralVmErrorEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7265445653436f6e => { // reDVSCon
            match type_name {
                "VMwareDVSConfigInfo" => {
                    Some(|ds, _| {
                        let obj: VMwareDvsConfigInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "VMwareDVSConfigSpec" => {
                    Some(|ds, _| {
                        let obj: VMwareDvsConfigSpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x7265644164646f6e => { // redAddon
            if type_name == "ExpiredAddonLicense" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x726564536f667477 => { // redSoftw
            if type_name == "DesiredSoftwareSpec" {
                Some(|ds, _| {
                    let obj: DesiredSoftwareSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x73636f6e6e656374 => { // sconnect
            if type_name == "VmDisconnectedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x73686f7452657665 => { // shotReve
            if type_name == "SnapshotRevertIssue" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7373616765457272 => { // ssageErr
            if type_name == "VmMessageErrorEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x73746f6d697a6162 => { // stomizab
            if type_name == "UncustomizableGuest" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x73746f7265436170 => { // storeCap
            if type_name == "DatastoreCapability" {
                Some(|ds, _| {
                    let obj: DatastoreCapability = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7441757468416e79 => { // tAuthAny
            if type_name == "GuestAuthAnySubject" {
                Some(|ds, _| {
                    let obj: GuestAuthAnySubject = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7441757468656e74 => { // tAuthent
            if type_name == "GuestAuthentication" {
                Some(|ds, _| {
                    let obj: GuestAuthentication = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7446696c65417474 => { // tFileAtt
            if type_name == "GuestFileAttributes" {
                Some(|ds, _| {
                    let obj: GuestFileAttributes = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x745265674b65794e => { // tRegKeyN
            if type_name == "GuestRegKeyNameSpec" {
                Some(|ds, _| {
                    let obj: GuestRegKeyNameSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7461626c65457870 => { // tableExp
            if type_name == "NegatableExpression" {
                Some(|ds, _| {
                    let obj: NegatableExpression = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x746572436f6e6669 => { // terConfi
            match type_name {
                "ClusterConfigInfoEx" => {
                    Some(|ds, _| {
                        let obj: ClusterConfigInfoEx = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "ClusterConfigSpecEx" => {
                    Some(|ds, _| {
                        let obj: ClusterConfigSpecEx = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x7465724372656174 => { // terCreat
            if type_name == "ClusterCreatedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7465724472734d69 => { // terDrsMi
            if type_name == "ClusterDrsMigration" {
                Some(|ds, _| {
                    let obj: ClusterDrsMigration = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x746572496f46696c => { // terIoFil
            if type_name == "ClusterIoFilterInfo" {
                Some(|ds, _| {
                    let obj: ClusterIoFilterInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7465725573616765 => { // terUsage
            if type_name == "ClusterUsageSummary" {
                Some(|ds, _| {
                    let obj: ClusterUsageSummary = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x746853797374656d => { // thSystem
            if type_name == "HealthSystemRuntime" {
                Some(|ds, _| {
                    let obj: HealthSystemRuntime = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x74794576656e7441 => { // tyEventA
            if type_name == "EntityEventArgument" {
                Some(|ds, _| {
                    let obj: EntityEventArgument = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x75616c4465766963 => { // ualDevic
            if type_name == "VirtualDeviceOption" {
                Some(|ds, _| {
                    let obj: VirtualDeviceOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x75616c4469736b52 => { // ualDiskR
            if type_name == "VirtualDiskRuleSpec" {
                Some(|ds, _| {
                    let obj: VirtualDiskRuleSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x75616c4531303030 => { // ualE1000
            if type_name == "VirtualE1000eOption" {
                Some(|ds, _| {
                    let obj: VirtualE1000EOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x75616c4574686572 => { // ualEther
            if type_name == "VirtualEthernetCard" {
                Some(|ds, _| {
                    let obj: VirtualEthernetCard = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x75616c466c6f7070 => { // ualFlopp
            if type_name == "VirtualFloppyOption" {
                Some(|ds, _| {
                    let obj: VirtualFloppyOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x75616c4e5644494d => { // ualNVDIM
            if type_name == "VirtualNVDIMMOption" {
                Some(|ds, _| {
                    let obj: VirtualNvdimmOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x75616c506172616c => { // ualParal
            if type_name == "VirtualParallelPort" {
                Some(|ds, _| {
                    let obj: VirtualParallelPort = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x75616c564d49524f => { // ualVMIRO
            if type_name == "VirtualVMIROMOption" {
                Some(|ds, _| {
                    let obj: VirtualVmiromOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x75616c566d786e65 => { // ualVmxne
            match type_name {
                "VirtualVmxnet3Vrdma" => {
                    Some(|ds, _| {
                        let obj: VirtualVmxnet3Vrdma = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "VirtualVmxnetOption" => {
                    Some(|ds, _| {
                        let obj: VirtualVmxnetOption = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x7565537769746368 => { // ueSwitch
            if type_name == "OpaqueSwitchProfile" {
                Some(|ds, _| {
                    let obj: OpaqueSwitchProfile = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x756e744372656174 => { // untCreat
            if type_name == "AccountCreatedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x756e7452656d6f76 => { // untRemov
            if type_name == "AccountRemovedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x756e745570646174 => { // untUpdat
            if type_name == "AccountUpdatedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x75706c6963617465 => { // uplicate
            if type_name == "OvfDuplicateElement" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x75726365506f6f6c => { // urcePool
            if type_name == "ResourcePoolSummary" {
                Some(|ds, _| {
                    let obj: ResourcePoolSummary = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x776179436f6e6e65 => { // wayConne
            if type_name == "GatewayConnectFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7761794e6f745265 => { // wayNotRe
            if type_name == "GatewayNotReachable" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x78566f6c756d654e => { // xVolumeN
            if type_name == "LinuxVolumeNotClean" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_object_deserializer_20<'de, A: de::MapAccess<'de>>(type_name: &str) -> Option<fn(de::value::MapAccessDeserializer<A>, &str) -> Result<VimAny, A::Error>> {
    let s = &type_name[6..14];
    let Some(type_ord) = to_u64(s) else {
        return None;
    };
    match type_ord {
        0x416363657373566d => { // AccessVm
            match type_name {
                "CannotAccessVmConfig" => {
                    Some(|ds, type_name| {
                        let v = __MethodFaultVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                "CannotAccessVmDevice" => {
                    Some(|ds, type_name| {
                        let v = __MethodFaultVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                _ => None
            }
        },
        0x416374696f6e4172 => { // ActionAr
            if type_name == "MethodActionArgument" {
                Some(|ds, _| {
                    let obj: MethodActionArgument = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x41737369676e6d65 => { // Assignme
            if type_name == "VAppIPAssignmentInfo" {
                Some(|ds, _| {
                    let obj: VAppIpAssignmentInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x41756469744d6f64 => { // AuditMod
            if type_name == "HostInAuditModeEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x42494f53436f6e66 => { // BIOSConf
            if type_name == "WinNetBIOSConfigInfo" {
                Some(|ds, _| {
                    let obj: WinNetBiosConfigInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x445653506f727453 => { // DVSPortS
            if type_name == "VMwareDVSPortSetting" {
                Some(|ds, _| {
                    let obj: VMwareDvsPortSetting = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4469726563746f72 => { // Director
            if type_name == "ActiveDirectoryFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x46696c6543726561 => { // FileCrea
            if type_name == "AnswerFileCreateSpec" {
                Some(|ds, _| {
                    let obj: AnswerFileCreateSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x46696c6551756572 => { // FileQuer
            if type_name == "VmDiskFileQueryFlags" {
                Some(|ds, _| {
                    let obj: VmDiskFileQueryFlags = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x486f737441646446 => { // HostAddF
            if type_name == "ImportHostAddFailure" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x496d61676546696c => { // ImageFil
            if type_name == "FloppyImageFileQuery" {
                Some(|ds, _| {
                    let obj: FloppyImageFileQuery = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4c6561726e696e67 => { // Learning
            if type_name == "DVSMacLearningPolicy" {
                Some(|ds, _| {
                    let obj: DvsMacLearningPolicy = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4e6574776f726b53 => { // NetworkS
            if type_name == "OpaqueNetworkSummary" {
                Some(|ds, _| {
                    let obj: OpaqueNetworkSummary = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x5265706c61794469 => { // ReplayDi
            if type_name == "RecordReplayDisabled" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x526f757465546162 => { // RouteTab
            if type_name == "HostIpRouteTableInfo" {
                Some(|ds, _| {
                    let obj: HostIpRouteTableInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x534d456e61626c65 => { // SMEnable
            if type_name == "LocalTSMEnabledEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x564d73426c6f636b => { // VMsBlock
            if type_name == "ActiveVMsBlockingEVC" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6164654661696c65 => { // adeFaile
            if type_name == "VmUpgradeFailedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x61676564456e7469 => { // agedEnti
            if type_name == "ExtManagedEntityInfo" {
                Some(|ds, _| {
                    let obj: ExtManagedEntityInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x616c696456616c75 => { // alidValu
            if type_name == "OvfInvalidValueEmpty" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6253706563696669 => { // bSpecifi
            if type_name == "HostSubSpecification" {
                Some(|ds, _| {
                    let obj: HostSubSpecification = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x634c65617365486f => { // cLeaseHo
            if type_name == "HttpNfcLeaseHostInfo" {
                Some(|ds, _| {
                    let obj: HttpNfcLeaseHostInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x635465616d696e67 => { // cTeaming
            if type_name == "HostNicTeamingPolicy" {
                Some(|ds, _| {
                    let obj: HostNicTeamingPolicy = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x63566d436f6e6669 => { // cVmConfi
            if type_name == "GenericVmConfigFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6365436f6e666967 => { // ceConfig
            if type_name == "ResourceConfigOption" {
                Some(|ds, _| {
                    let obj: ResourceConfigOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x63654e6f74417661 => { // ceNotAva
            if type_name == "ResourceNotAvailable" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x644461746173746f => { // dDatasto
            if type_name == "InvalidDatastorePath" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6444657669636542 => { // dDeviceB
            if type_name == "InvalidDeviceBacking" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x64496e6465784172 => { // dIndexAr
            if type_name == "InvalidIndexArgument" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6449706d694c6f67 => { // dIpmiLog
            if type_name == "InvalidIpmiLoginInfo" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x644e6574776f726b => { // dNetwork
            if type_name == "InvalidNetworkInType" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6450726f70657274 => { // dPropert
            if type_name == "InvalidPropertyValue" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x645363686564756c => { // dSchedul
            if type_name == "InvalidScheduledTask" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x65447273436f6e66 => { // eDrsConf
            match type_name {
                "StorageDrsConfigInfo" => {
                    Some(|ds, _| {
                        let obj: StorageDrsConfigInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "StorageDrsConfigSpec" => {
                    Some(|ds, _| {
                        let obj: StorageDrsConfigSpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x654472734f707469 => { // eDrsOpti
            if type_name == "StorageDrsOptionSpec" {
                Some(|ds, _| {
                    let obj: StorageDrsOptionSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x654576656e744172 => { // eEventAr
            if type_name == "ProfileEventArgument" {
                Some(|ds, _| {
                    let obj: ProfileEventArgument = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6545786563757465 => { // eExecute
            if type_name == "ProfileExecuteResult" {
                Some(|ds, _| {
                    let obj: ProfileExecuteResult = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x65506c6163656d65 => { // ePlaceme
            if type_name == "StoragePlacementSpec" {
                Some(|ds, _| {
                    let obj: StoragePlacementSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6563746564446174 => { // ectedDat
            if type_name == "NoConnectedDatastore" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x65644d6967726174 => { // edMigrat
            if type_name == "VmFailedMigrateEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6564546f52657365 => { // edToRese
            if type_name == "VmFailedToResetEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x65696e6752657365 => { // eingRese
            if type_name == "VmDasBeingResetEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6574616461746149 => { // etadataI
            if type_name == "PatchMetadataInvalid" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x667352657363616e => { // fsRescan
            if type_name == "HostVmfsRescanResult" {
                Some(|ds, _| {
                    let obj: HostVmfsRescanResult = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x674465706c6f7965 => { // gDeploye
            if type_name == "VmBeingDeployedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x674d696772617465 => { // gMigrate
            if type_name == "VmBeingMigratedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x674d69734d617463 => { // gMisMatc
            if type_name == "TeamingMisMatchEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x67726f757053656c => { // groupSel
            if type_name == "DVPortgroupSelection" {
                Some(|ds, _| {
                    let obj: DvPortgroupSelection = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x69674d697373696e => { // igMissin
            if type_name == "VmConfigMissingEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x697a6174696f6e46 => { // izationF
            if type_name == "CustomizationFixedIp" {
                Some(|ds, _| {
                    let obj: CustomizationFixedIp = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x697a6174696f6e4f => { // izationO
            if type_name == "CustomizationOptions" {
                Some(|ds, _| {
                    let obj: CustomizationOptions = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x697a6174696f6e50 => { // izationP
            if type_name == "CustomizationPending" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x697a6174696f6e53 => { // izationS
            if type_name == "CustomizationSysprep" {
                Some(|ds, _| {
                    let obj: CustomizationSysprep = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6b4576656e744172 => { // kEventAr
            if type_name == "NetworkEventArgument" {
                Some(|ds, _| {
                    let obj: NetworkEventArgument = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6b506f6c69637950 => { // kPolicyP
            if type_name == "NetworkPolicyProfile" {
                Some(|ds, _| {
                    let obj: NetworkPolicyProfile = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6b526f6c6c626163 => { // kRollbac
            if type_name == "NetworkRollbackEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6c417070496d706f => { // lAppImpo
            if type_name == "VirtualAppImportSpec" {
                Some(|ds, _| {
                    let obj: VirtualAppImportSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6c486f7374496e66 => { // lHostInf
            if type_name == "GeneralHostInfoEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6c494445436f6e74 => { // lIDECont
            if type_name == "VirtualIDEController" {
                Some(|ds, _| {
                    let obj: VirtualIdeController = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6c4d616368696e65 => { // lMachine
            match type_name {
                "VirtualMachineTicket" => {
                    Some(|ds, _| {
                        let obj: VirtualMachineTicket = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "VirtualMachineVMIROM" => {
                    Some(|ds, _| {
                        let obj: VirtualMachineVmirom = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x6c504349436f6e74 => { // lPCICont
            if type_name == "VirtualPCIController" {
                Some(|ds, _| {
                    let obj: VirtualPciController = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6c50434e65743332 => { // lPCNet32
            if type_name == "VirtualPCNet32Option" {
                Some(|ds, _| {
                    let obj: VirtualPcNet32Option = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6c505332436f6e74 => { // lPS2Cont
            if type_name == "VirtualPS2Controller" {
                Some(|ds, _| {
                    let obj: VirtualPs2Controller = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6c53494f436f6e74 => { // lSIOCont
            if type_name == "VirtualSIOController" {
                Some(|ds, _| {
                    let obj: VirtualSioController = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6c53776974636850 => { // lSwitchP
            if type_name == "VirtualSwitchProfile" {
                Some(|ds, _| {
                    let obj: VirtualSwitchProfile = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6c555342436f6e74 => { // lUSBCont
            if type_name == "VirtualUSBController" {
                Some(|ds, _| {
                    let obj: VirtualUsbController = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6c566d786e657432 => { // lVmxnet2
            if type_name == "VirtualVmxnet2Option" {
                Some(|ds, _| {
                    let obj: VirtualVmxnet2Option = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6c566d786e657433 => { // lVmxnet3
            if type_name == "VirtualVmxnet3Option" {
                Some(|ds, _| {
                    let obj: VirtualVmxnet3Option = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6c61726d45787072 => { // larmExpr
            match type_name {
                "EventAlarmExpression" => {
                    Some(|ds, _| {
                        let obj: EventAlarmExpression = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "StateAlarmExpression" => {
                    Some(|ds, _| {
                        let obj: StateAlarmExpression = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x6c6553797374656d => { // leSystem
            if type_name == "HostFileSystemVolume" {
                Some(|ds, _| {
                    let obj: HostFileSystemVolume = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6c72656164795570 => { // lreadyUp
            if type_name == "ToolsAlreadyUpgraded" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6c74657253706563 => { // lterSpec
            if type_name == "TaskFilterSpecByTime" {
                Some(|ds, _| {
                    let obj: TaskFilterSpecByTime = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6c7468436865636b => { // lthCheck
            if type_name == "DVSHealthCheckConfig" {
                Some(|ds, _| {
                    let obj: DvsHealthCheckConfig = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6d4576656e744c6f => { // mEventLo
            if type_name == "HostTpmEventLogEntry" {
                Some(|ds, _| {
                    let obj: HostTpmEventLogEntry = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6d616765436f7079 => { // mageCopy
            if type_name == "ToolsImageCopyFailed" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6d65446973636f76 => { // meDiscov
            match type_name {
                "HostNvmeDiscoverSpec" => {
                    Some(|ds, _| {
                        let obj: HostNvmeDiscoverSpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "HostNvmeDiscoveryLog" => {
                    Some(|ds, _| {
                        let obj: HostNvmeDiscoveryLog = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x6d696e456e61626c => { // minEnabl
            if type_name == "HostAdminEnableEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6e436f6e666c6963 => { // nConflic
            if type_name == "HostWwnConflictEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6e4e6f74436f6e66 => { // nNotConf
            if type_name == "VMotionNotConfigured" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6e6d704661696c65 => { // nmpFaile
            if type_name == "AlarmSnmpFailedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6e746572436f6e66 => { // nterConf
            match type_name {
                "DatacenterConfigInfo" => {
                    Some(|ds, _| {
                        let obj: DatacenterConfigInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "DatacenterConfigSpec" => {
                    Some(|ds, _| {
                        let obj: DatacenterConfigSpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x6f6d70617469626c => { // ompatibl
            if type_name == "CpuIncompatible81EDX" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f6e557365725265 => { // onUserRe
            if type_name == "SolutionUserRequired" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f6e666967757265 => { // onfigure
            if type_name == "DvsReconfiguredEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f72746564446174 => { // ortedDat
            if type_name == "UnsupportedDatastore" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f72794465736372 => { // oryDescr
            if type_name == "InventoryDescription" {
                Some(|ds, _| {
                    let obj: InventoryDescription = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f74696f6e4e6574 => { // otionNet
            if type_name == "HostVMotionNetConfig" {
                Some(|ds, _| {
                    let obj: HostVMotionNetConfig = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f746f636f6c456e => { // otocolEn
            if type_name == "HostProtocolEndpoint" {
                Some(|ds, _| {
                    let obj: HostProtocolEndpoint = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f757465436f6e66 => { // outeConf
            match type_name {
                "NetIpRouteConfigInfo" => {
                    Some(|ds, _| {
                        let obj: NetIpRouteConfigInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "NetIpRouteConfigSpec" => {
                    Some(|ds, _| {
                        let obj: NetIpRouteConfigSpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x70436f6e66696750 => { // pConfigP
            if type_name == "HostPtpConfigPtpPort" {
                Some(|ds, _| {
                    let obj: HostPtpConfigPtpPort = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7048626143726561 => { // pHbaCrea
            if type_name == "HostTcpHbaCreateSpec" {
                Some(|ds, _| {
                    let obj: HostTcpHbaCreateSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7065726174696f6e => { // peration
            if type_name == "GuestOperationsFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7065727479517561 => { // pertyQua
            if type_name == "OvfPropertyQualifier" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x72416374696f6e48 => { // rActionH
            if type_name == "ClusterActionHistory" {
                Some(|ds, _| {
                    let obj: ClusterActionHistory = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x72446173436f6e66 => { // rDasConf
            if type_name == "ClusterDasConfigInfo" {
                Some(|ds, _| {
                    let obj: ClusterDasConfigInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x72446173566d5365 => { // rDasVmSe
            if type_name == "ClusterDasVmSettings" {
                Some(|ds, _| {
                    let obj: ClusterDasVmSettings = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7244706d436f6e66 => { // rDpmConf
            if type_name == "ClusterDpmConfigInfo" {
                Some(|ds, _| {
                    let obj: ClusterDpmConfigInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x72447273436f6e66 => { // rDrsConf
            if type_name == "ClusterDrsConfigInfo" {
                Some(|ds, _| {
                    let obj: ClusterDrsConfigInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7263654d6f756e74 => { // rceMount
            if type_name == "HostForceMountedInfo" {
                Some(|ds, _| {
                    let obj: HostForceMountedInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x726f636573734e6f => { // rocessNo
            if type_name == "GuestProcessNotFound" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x727447726f757050 => { // rtGroupP
            if type_name == "HostPortGroupProfile" {
                Some(|ds, _| {
                    let obj: HostPortGroupProfile = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x727475616c4e6963 => { // rtualNic
            if type_name == "HostVirtualNicConfig" {
                Some(|ds, _| {
                    let obj: HostVirtualNicConfig = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7344697361626c65 => { // sDisable
            if type_name == "HostDasDisabledEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x73456e61626c696e => { // sEnablin
            if type_name == "HostDasEnablingEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7365484150726f74 => { // seHAProt
            if type_name == "WillLoseHAProtection" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x736553697a654573 => { // seSizeEs
            if type_name == "DatabaseSizeEstimate" {
                Some(|ds, _| {
                    let obj: DatabaseSizeEstimate = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x73696f6e41646465 => { // sionAdde
            if type_name == "PermissionAddedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7369784163636f75 => { // sixAccou
            if type_name == "HostPosixAccountSpec" {
                Some(|ds, _| {
                    let obj: HostPosixAccountSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x73745673616e4469 => { // stVsanDi
            if type_name == "VsanHostVsanDiskInfo" {
                Some(|ds, _| {
                    let obj: VsanHostVsanDiskInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7374656d4865616c => { // stemHeal
            if type_name == "HostSystemHealthInfo" {
                Some(|ds, _| {
                    let obj: HostSystemHealthInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x74436f6d706f6e65 => { // tCompone
            if type_name == "ProductComponentInfo" {
                Some(|ds, _| {
                    let obj: ProductComponentInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7449736f6c617465 => { // tIsolate
            if type_name == "DasHostIsolatedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x744c696e6b446f77 => { // tLinkDow
            if type_name == "DvsPortLinkDownEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x744c6f63616c506f => { // tLocalPo
            if type_name == "DVSHostLocalPortInfo" {
                Some(|ds, _| {
                    let obj: DvsHostLocalPortInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7453657276696365 => { // tService
            if type_name == "HostNatServiceConfig" {
                Some(|ds, _| {
                    let obj: HostNatServiceConfig = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7453687574646f77 => { // tShutdow
            if type_name == "VmGuestShutdownEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x74537461636b496e => { // tStackIn
            if type_name == "HostNetStackInstance" {
                Some(|ds, _| {
                    let obj: HostNetStackInstance = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7453746174757355 => { // tStatusU
            if type_name == "DvsHostStatusUpdated" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7455706772616465 => { // tUpgrade
            if type_name == "VcAgentUpgradedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7465557067726164 => { // teUpgrad
            if type_name == "TemplateUpgradeEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x74697479436f6e66 => { // tityConf
            if type_name == "VAppEntityConfigInfo" {
                Some(|ds, _| {
                    let obj: VAppEntityConfigInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x746974794d657472 => { // tityMetr
            if type_name == "PerfEntityMetricBase" {
                Some(|ds, _| {
                    let obj: PerfEntityMetricBase = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7475726543617061 => { // tureCapa
            if type_name == "DVSFeatureCapability" {
                Some(|ds, _| {
                    let obj: DvsFeatureCapability = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x747946696c746572 => { // tyFilter
            if type_name == "PropertyFilterUpdate" {
                Some(|ds, _| {
                    let obj: PropertyFilterUpdate = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7567684c6f676963 => { // ughLogic
            if type_name == "NotEnoughLogicalCpus" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x776f726b52756c65 => { // workRule
            if type_name == "DvsNetworkRuleAction" {
                Some(|ds, _| {
                    let obj: DvsNetworkRuleAction = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7870656374656445 => { // xpectedE
            if type_name == "OvfUnexpectedElement" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x795461736b536368 => { // yTaskSch
            if type_name == "MonthlyTaskScheduler" {
                Some(|ds, _| {
                    let obj: MonthlyTaskScheduler = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7a65644d6574686f => { // zedMetho
            if type_name == "LocalizedMethodFault" {
                Some(|ds, _| {
                    let obj: LocalizedMethodFault = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_object_deserializer_21<'de, A: de::MapAccess<'de>>(type_name: &str) -> Option<fn(de::value::MapAccessDeserializer<A>, &str) -> Result<VimAny, A::Error>> {
    let s = &type_name[7..15];
    let Some(type_ord) = to_u64(s) else {
        return None;
    };
    match type_ord {
        0x41484349436f6e74 => { // AHCICont
            if type_name == "VirtualAHCIController" {
                Some(|ds, _| {
                    let obj: VirtualAhciController = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x43414d4365727469 => { // CAMCerti
            if type_name == "InvalidCAMCertificate" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x436f6d706c69616e => { // Complian
            if type_name == "HostNonCompliantEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x436f6e6e65637465 => { // Connecte
            if type_name == "DvsPortConnectedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x436f6e6e65637469 => { // Connecti
            if type_name == "HostNfcConnectionInfo" {
                Some(|ds, _| {
                    let obj: HostNfcConnectionInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x44617341616d486f => { // DasAamHo
            if type_name == "ClusterDasAamHostInfo" {
                Some(|ds, _| {
                    let obj: ClusterDasAamHostInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4461734461746153 => { // DasDataS
            if type_name == "ClusterDasDataSummary" {
                Some(|ds, _| {
                    let obj: ClusterDasDataSummary = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4461746173746f72 => { // Datastor
            if type_name == "InvalidDatastoreState" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x44657374726f7965 => { // Destroye
            if type_name == "ClusterDestroyedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x44697361626c696e => { // Disablin
            if type_name == "HostDasDisablingEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4469736b436f6e66 => { // DiskConf
            if type_name == "VirtualDiskConfigSpec" {
                Some(|ds, _| {
                    let obj: VirtualDiskConfigSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x45646974696f6e4c => { // EditionL
            match type_name {
                "ExpiredEditionLicense" => {
                    Some(|ds, type_name| {
                        let v = __MethodFaultVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                "InvalidEditionLicense" => {
                    Some(|ds, type_name| {
                        let v = __MethodFaultVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                _ => None
            }
        },
        0x456e746974794e6f => { // EntityNo
            if type_name == "LicenseEntityNotFound" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x466561747572654c => { // FeatureL
            if type_name == "ExpiredFeatureLicense" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4861726477617265 => { // Hardware
            if type_name == "VirtualHardwareOption" {
                Some(|ds, _| {
                    let obj: VirtualHardwareOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x486f73744572726f => { // HostErro
            if type_name == "GeneralHostErrorEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x494f524d436f6e66 => { // IORMConf
            if type_name == "StorageIORMConfigSpec" {
                Some(|ds, _| {
                    let obj: StorageIormConfigSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x496e436c75737465 => { // InCluste
            if type_name == "HostNotInClusterEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x496e746572666163 => { // Interfac
            if type_name == "VMotionInterfaceIssue" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x49706d694d616341 => { // IpmiMacA
            if type_name == "InvalidIpmiMacAddress" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4b6579626f617264 => { // Keyboard
            if type_name == "VirtualKeyboardOption" {
                Some(|ds, _| {
                    let obj: VirtualKeyboardOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4c65617365446576 => { // LeaseDev
            if type_name == "HttpNfcLeaseDeviceUrl" {
                Some(|ds, _| {
                    let obj: HttpNfcLeaseDeviceUrl = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4d616368696e654d => { // MachineM
            if type_name == "VirtualMachineMessage" {
                Some(|ds, _| {
                    let obj: VirtualMachineMessage = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4d616368696e6553 => { // MachineS
            match type_name {
                "VirtualMachineSgxInfo" => {
                    Some(|ds, _| {
                        let obj: VirtualMachineSgxInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "VirtualMachineSummary" => {
                    Some(|ds, _| {
                        let obj: VirtualMachineSummary = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x4d616368696e6555 => { // MachineU
            if type_name == "VirtualMachineUsbInfo" {
                Some(|ds, _| {
                    let obj: VirtualMachineUsbInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4e564d45436f6e74 => { // NVMECont
            if type_name == "VirtualNVMEController" {
                Some(|ds, _| {
                    let obj: VirtualNvmeController = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4e61734372656465 => { // NasCrede
            if type_name == "InvalidNasCredentials" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4f53437261736865 => { // OSCrashe
            if type_name == "VmGuestOSCrashedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4f626a6563744e6f => { // ObjectNo
            if type_name == "ManagedObjectNotFound" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x5043495061737374 => { // PCIPasst
            if type_name == "VirtualPCIPassthrough" {
                Some(|ds, _| {
                    let obj: VirtualPciPassthrough = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x5061737374687275 => { // Passthru
            if type_name == "HostPciPassthruConfig" {
                Some(|ds, _| {
                    let obj: HostPciPassthruConfig = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x506f696e74696e67 => { // Pointing
            if type_name == "VirtualPointingDevice" {
                Some(|ds, _| {
                    let obj: VirtualPointingDevice = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x506f6c6963794d65 => { // PolicyMe
            if type_name == "ProfilePolicyMetadata" {
                Some(|ds, _| {
                    let obj: ProfilePolicyMetadata = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x507265636973696f => { // Precisio
            if type_name == "VirtualPrecisionClock" {
                Some(|ds, _| {
                    let obj: VirtualPrecisionClock = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x5265636f6d6d656e => { // Recommen
            if type_name == "ClusterRecommendation" {
                Some(|ds, _| {
                    let obj: ClusterRecommendation = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x5265636f7264696e => { // Recordin
            if type_name == "VmStartRecordingEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x52656c6f63617465 => { // Relocate
            if type_name == "VmBeingRelocatedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x5265706c6179696e => { // Replayin
            if type_name == "VmStartReplayingEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x53415441436f6e74 => { // SATACont
            if type_name == "VirtualSATAController" {
                Some(|ds, _| {
                    let obj: VirtualSataController = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x53435349436f6e74 => { // SCSICont
            if type_name == "VirtualSCSIController" {
                Some(|ds, _| {
                    let obj: VirtualScsiController = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x534d456e61626c65 => { // SMEnable
            if type_name == "RemoteTSMEnabledEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x536e617073686f74 => { // Snapshot
            match type_name {
                "InvalidSnapshotFormat" => {
                    Some(|ds, type_name| {
                        let v = __MethodFaultVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                "TooManySnapshotLevels" => {
                    Some(|ds, type_name| {
                        let v = __MethodFaultVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                _ => None
            }
        },
        0x536f756e64426c61 => { // SoundBla
            if type_name == "VirtualSoundBlaster16" {
                Some(|ds, _| {
                    let obj: VirtualSoundBlaster16 = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x5468756d62707269 => { // Thumbpri
            if type_name == "HostSslThumbprintInfo" {
                Some(|ds, _| {
                    let obj: HostSslThumbprintInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x546f6c6572616e63 => { // Toleranc
            if type_name == "VmFaultToleranceIssue" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x556e626c6f636b65 => { // Unblocke
            if type_name == "DvsPortUnblockedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x56616c75654e6f74 => { // ValueNot
            if type_name == "OvfHostValueNotParsed" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x56696f6c6174696f => { // Violatio
            if type_name == "DrsRuleViolationEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x566d486f73745275 => { // VmHostRu
            if type_name == "ClusterVmHostRuleInfo" {
                Some(|ds, _| {
                    let obj: ClusterVmHostRuleInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x566d5761726e696e => { // VmWarnin
            if type_name == "GeneralVmWarningEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x566f6c756d655573 => { // VolumeUs
            if type_name == "HostNasVolumeUserInfo" {
                Some(|ds, _| {
                    let obj: HostNasVolumeUserInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6144657669636542 => { // aDeviceB
            if type_name == "HostRdmaDeviceBacking" {
                Some(|ds, _| {
                    let obj: HostRdmaDeviceBacking = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x61696c4661696c65 => { // ailFaile
            if type_name == "AlarmEmailFailedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x616e4e6f74537570 => { // anNotSup
            if type_name == "WakeOnLanNotSupported" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6174654661696c65 => { // ateFaile
            if type_name == "VmRelocateFailedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6174696f6e42756c => { // ationBul
            if type_name == "DvsOperationBulkFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6261636b43617061 => { // backCapa
            if type_name == "DVSRollbackCapability" {
                Some(|ds, _| {
                    let obj: DvsRollbackCapability = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x62657252756e7469 => { // berRunti
            if type_name == "HostMemberRuntimeInfo" {
                Some(|ds, _| {
                    let obj: HostMemberRuntimeInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x63654c696d697452 => { // ceLimitR
            if type_name == "NamespaceLimitReached" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x636f6e6e65637465 => { // connecte
            if type_name == "HostDisconnectedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6446726f6d506174 => { // dFromPat
            if type_name == "VmReloadFromPathEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6452656c61796f75 => { // dRelayou
            if type_name == "VmFailedRelayoutEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6461727941646465 => { // daryAdde
            if type_name == "VmSecondaryAddedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x646174654572726f => { // dateErro
            if type_name == "VmDasUpdateErrorEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x64617465486f7374 => { // dateHost
            match type_name {
                "OvfValidateHostParams" => {
                    Some(|ds, _| {
                        let obj: OvfValidateHostParams = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "OvfValidateHostResult" => {
                    Some(|ds, _| {
                        let obj: OvfValidateHostResult = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x65486f7374496e43 => { // eHostInC
            if type_name == "NoActiveHostInCluster" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6555706772616465 => { // eUpgrade
            if type_name == "TemplateUpgradedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6556696f6c617465 => { // eViolate
            if type_name == "ResourceViolatedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6563746564446576 => { // ectedDev
            if type_name == "OvfConnectedDeviceIso" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6572536561726368 => { // erSearch
            if type_name == "PosixUserSearchResult" {
                Some(|ds, _| {
                    let obj: PosixUserSearchResult = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6572696353656e73 => { // ericSens
            if type_name == "HostNumericSensorInfo" {
                Some(|ds, _| {
                    let obj: HostNumericSensorInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x66696c65436f6e66 => { // fileConf
            match type_name {
                "HostProfileConfigInfo" => {
                    Some(|ds, _| {
                        let obj: HostProfileConfigInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "HostProfileConfigSpec" => {
                    Some(|ds, _| {
                        let obj: HostProfileConfigSpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x674b65795265636f => { // gKeyReco
            if type_name == "GuestRegKeyRecordSpec" {
                Some(|ds, _| {
                    let obj: GuestRegKeyRecordSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6753746f7265546f => { // gStoreTo
            if type_name == "HostPlugStoreTopology" {
                Some(|ds, _| {
                    let obj: HostPlugStoreTopology = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6756616c75654461 => { // gValueDa
            if type_name == "GuestRegValueDataSpec" {
                Some(|ds, _| {
                    let obj: GuestRegValueDataSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6756616c75654e61 => { // gValueNa
            if type_name == "GuestRegValueNameSpec" {
                Some(|ds, _| {
                    let obj: GuestRegValueNameSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6765417661696c61 => { // geAvaila
            if type_name == "PrivilegeAvailability" {
                Some(|ds, _| {
                    let obj: PrivilegeAvailability = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x67655761726e696e => { // geWarnin
            if type_name == "VmMessageWarningEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6769737472794b65 => { // gistryKe
            if type_name == "GuestRegistryKeyFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x677261646543616e => { // gradeCan
            if type_name == "ToolsUpgradeCancelled" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x694469736b506172 => { // iDiskPar
            if type_name == "HostScsiDiskPartition" {
                Some(|ds, _| {
                    let obj: HostScsiDiskPartition = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x69616c4174746163 => { // ialAttac
            if type_name == "HostSerialAttachedHba" {
                Some(|ds, _| {
                    let obj: HostSerialAttachedHba = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x69636174696f6e50 => { // icationP
            if type_name == "AuthenticationProfile" {
                Some(|ds, _| {
                    let obj: AuthenticationProfile = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6963794368616e67 => { // icyChang
            if type_name == "VsanPolicyChangeBatch" {
                Some(|ds, _| {
                    let obj: VsanPolicyChangeBatch = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6967676572696e67 => { // iggering
            if type_name == "AlarmTriggeringAction" {
                Some(|ds, _| {
                    let obj: AlarmTriggeringAction = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x696c655175657279 => { // ileQuery
            if type_name == "VmDiskFileQueryFilter" {
                Some(|ds, _| {
                    let obj: VmDiskFileQueryFilter = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x696c655374617475 => { // ileStatu
            if type_name == "AnswerFileStatusError" {
                Some(|ds, _| {
                    let obj: AnswerFileStatusError = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x696e44697361626c => { // inDisabl
            if type_name == "HostAdminDisableEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x696e53657373696f => { // inSessio
            if type_name == "UserLoginSessionEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x696f6e4b65795265 => { // ionKeyRe
            if type_name == "EncryptionKeyRequired" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x697361626c65536e => { // isableSn
            if type_name == "CannotDisableSnapshot" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6b44696d656e7369 => { // kDimensi
            match type_name {
                "HostDiskDimensionsChs" => {
                    Some(|ds, _| {
                        let obj: HostDiskDimensionsChs = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "HostDiskDimensionsLba" => {
                    Some(|ds, _| {
                        let obj: HostDiskDimensionsLba = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x6b4d617070696e67 => { // kMapping
            if type_name == "HostDiskMappingOption" {
                Some(|ds, _| {
                    let obj: HostDiskMappingOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6b50617274697469 => { // kPartiti
            match type_name {
                "HostDiskPartitionInfo" => {
                    Some(|ds, _| {
                        let obj: HostDiskPartitionInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "HostDiskPartitionSpec" => {
                    Some(|ds, _| {
                        let obj: HostDiskPartitionSpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x6c61726d45787072 => { // larmExpr
            if type_name == "MetricAlarmExpression" {
                Some(|ds, _| {
                    let obj: MetricAlarmExpression = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6c65546f4578706f => { // leToExpo
            if type_name == "OvfUnableToExportDisk" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6c6f625265616446 => { // lobReadF
            if type_name == "BackupBlobReadFailure" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6c74657253706563 => { // lterSpec
            if type_name == "EventFilterSpecByTime" {
                Some(|ds, _| {
                    let obj: EventFilterSpecByTime = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6c7469706c654d61 => { // ltipleMa
            if type_name == "GuestMultipleMappings" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6e61726965734e6f => { // nariesNo
            if type_name == "PatchBinariesNotFound" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6e74416666696e69 => { // ntAffini
            if type_name == "PlacementAffinityRule" {
                Some(|ds, _| {
                    let obj: PlacementAffinityRule = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f6c6c6564426163 => { // olledBac
            if type_name == "VmDateRolledBackEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f6e5265736f7572 => { // onResour
            if type_name == "ExtensionResourceInfo" {
                Some(|ds, _| {
                    let obj: ExtensionResourceInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f6e5461736b5479 => { // onTaskTy
            if type_name == "ExtensionTaskTypeInfo" {
                Some(|ds, _| {
                    let obj: ExtensionTaskTypeInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f6e5761726e696e => { // onWarnin
            if type_name == "MigrationWarningEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f72416464726573 => { // orAddres
            if type_name == "CollectorAddressUnset" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f72746564486f73 => { // ortedHos
            if type_name == "NotSupportedHostInDvs" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f744661696c7572 => { // otFailur
            if type_name == "IScsiBootFailureEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f757465436f6e66 => { // outeConf
            if type_name == "HostIpRouteConfigSpec" {
                Some(|ds, _| {
                    let obj: HostIpRouteConfigSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7053657276696365 => { // pService
            if type_name == "HostDhcpServiceConfig" {
                Some(|ds, _| {
                    let obj: HostDhcpServiceConfig = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7065634465657052 => { // pecDeepR
            if type_name == "CryptoSpecDeepRecrypt" {
                Some(|ds, _| {
                    let obj: CryptoSpecDeepRecrypt = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x70656e64656e6379 => { // pendency
            if type_name == "IscsiDependencyEntity" {
                Some(|ds, _| {
                    let obj: IscsiDependencyEntity = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x70706f7274656445 => { // pportedE
            if type_name == "OvfUnsupportedElement" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x70706f7274656450 => { // pportedP
            if type_name == "OvfUnsupportedPackage" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x70706f7274656453 => { // pportedS
            match type_name {
                "OvfUnsupportedSection" => {
                    Some(|ds, type_name| {
                        let v = __MethodFaultVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                "OvfUnsupportedSubType" => {
                    Some(|ds, type_name| {
                        let v = __MethodFaultVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                _ => None
            }
        },
        0x7175654e6574776f => { // queNetwo
            if type_name == "HostOpaqueNetworkInfo" {
                Some(|ds, _| {
                    let obj: HostOpaqueNetworkInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x724c6576656c5265 => { // rLevelRe
            if type_name == "FailoverLevelRestored" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7261676544657669 => { // rageDevi
            if type_name == "HostStorageDeviceInfo" {
                Some(|ds, _| {
                    let obj: HostStorageDeviceInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x726552656e616d65 => { // reRename
            if type_name == "DatastoreRenamedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7265616479496e73 => { // readyIns
            if type_name == "PatchAlreadyInstalled" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7265645469636b65 => { // redTicke
            if type_name == "VmAcquiredTicketEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x726d697373696f6e => { // rmission
            if type_name == "GuestPermissionDenied" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x726f7570436f6e66 => { // roupConf
            match type_name {
                "DVPortgroupConfigInfo" => {
                    Some(|ds, _| {
                        let obj: DvPortgroupConfigInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "DVPortgroupConfigSpec" => {
                    Some(|ds, _| {
                        let obj: DvPortgroupConfigSpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x7365744661696c65 => { // setFaile
            if type_name == "VmDasResetFailedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7369626c65446174 => { // sibleDat
            if type_name == "InaccessibleDatastore" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7374506f7274436f => { // stPortCo
            if type_name == "VspanDestPortConflict" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7374656d43617061 => { // stemCapa
            if type_name == "PowerSystemCapability" {
                Some(|ds, _| {
                    let obj: PowerSystemCapability = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x73746572436f6e66 => { // sterConf
            match type_name {
                "VchaClusterConfigInfo" => {
                    Some(|ds, _| {
                        let obj: VchaClusterConfigInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "VsanClusterConfigInfo" => {
                    Some(|ds, _| {
                        let obj: VsanClusterConfigInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "VchaClusterConfigSpec" => {
                    Some(|ds, _| {
                        let obj: VchaClusterConfigSpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x74436c7573746572 => { // tCluster
            if type_name == "VsanHostClusterStatus" {
                Some(|ds, _| {
                    let obj: VsanHostClusterStatus = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x744469736b4d6170 => { // tDiskMap
            if type_name == "VsanHostDiskMapResult" {
                Some(|ds, _| {
                    let obj: VsanHostDiskMapResult = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7461646174614e6f => { // tadataNo
            if type_name == "PatchMetadataNotFound" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7465506f6c696379 => { // tePolicy
            if type_name == "CompositePolicyOption" {
                Some(|ds, _| {
                    let obj: CompositePolicyOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x74684e616d656453 => { // thNamedS
            if type_name == "GuestAuthNamedSubject" {
                Some(|ds, _| {
                    let obj: GuestAuthNamedSubject = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7469626c65446174 => { // tibleDat
            if type_name == "NoCompatibleDatastore" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x74696f6e436f6e66 => { // tionConf
            if type_name == "ReplicationConfigSpec" {
                Some(|ds, _| {
                    let obj: ReplicationConfigSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x74696f6e53776974 => { // tionSwit
            if type_name == "DestinationSwitchFull" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x746970617468496e => { // tipathIn
            if type_name == "HostMultipathInfoPath" {
                Some(|ds, _| {
                    let obj: HostMultipathInfoPath = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7475616c53776974 => { // tualSwit
            if type_name == "HostVirtualSwitchSpec" {
                Some(|ds, _| {
                    let obj: HostVirtualSwitchSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7475726543617061 => { // tureCapa
            if type_name == "HostFeatureCapability" {
                Some(|ds, _| {
                    let obj: HostFeatureCapability = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x756c74496e76616c => { // ultInval
            if type_name == "IscsiFaultInvalidVnic" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x756d65724f766653 => { // umerOvfS
            if type_name == "OvfConsumerOvfSection" {
                Some(|ds, _| {
                    let obj: OvfConsumerOvfSection = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7879537769746368 => { // xySwitch
            if type_name == "HostProxySwitchConfig" {
                Some(|ds, _| {
                    let obj: HostProxySwitchConfig = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7a6174696f6e5061 => { // zationPa
            if type_name == "CustomizationPassword" {
                Some(|ds, _| {
                    let obj: CustomizationPassword = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7a6174696f6e5370 => { // zationSp
            match type_name {
                "CustomizationSpecInfo" => {
                    Some(|ds, _| {
                        let obj: CustomizationSpecInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "CustomizationSpecItem" => {
                    Some(|ds, _| {
                        let obj: CustomizationSpecItem = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x7a6174696f6e5573 => { // zationUs
            if type_name == "CustomizationUserData" {
                Some(|ds, _| {
                    let obj: CustomizationUserData = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_object_deserializer_22<'de, A: de::MapAccess<'de>>(type_name: &str) -> Option<fn(de::value::MapAccessDeserializer<A>, &str) -> Result<VimAny, A::Error>> {
    let s = &type_name[6..14];
    let Some(type_ord) = to_u64(s) else {
        return None;
    };
    match type_ord {
        0x426c6f6257726974 => { // BlobWrit
            if type_name == "BackupBlobWriteFailure" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x44565350766c616e => { // DVSPvlan
            if type_name == "VMwareDVSPvlanMapEntry" {
                Some(|ds, _| {
                    let obj: VMwareDvsPvlanMapEntry = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4465637279707450 => { // DecryptP
            if type_name == "CannotDecryptPasswords" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4469726563746f72 => { // Director
            if type_name == "ActiveDirectoryProfile" {
                Some(|ds, _| {
                    let obj: ActiveDirectoryProfile = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4476734470754361 => { // DvsDpuCa
            if type_name == "VMwareDvsDpuCapability" {
                Some(|ds, _| {
                    let obj: VMwareDvsDpuCapability = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4476734c61637047 => { // DvsLacpG
            if type_name == "VMwareDvsLacpGroupSpec" {
                Some(|ds, _| {
                    let obj: VMwareDvsLacpGroupSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4476734c6167566c => { // DvsLagVl
            if type_name == "VMwareDvsLagVlanConfig" {
                Some(|ds, _| {
                    let obj: VMwareDvsLagVlanConfig = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4476734d74754361 => { // DvsMtuCa
            if type_name == "VMwareDvsMtuCapability" {
                Some(|ds, _| {
                    let obj: VMwareDvsMtuCapability = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4661696c6564486f => { // FailedHo
            if type_name == "FolderFailedHostResult" {
                Some(|ds, _| {
                    let obj: FolderFailedHostResult = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4669656c64537472 => { // FieldStr
            if type_name == "CustomFieldStringValue" {
                Some(|ds, _| {
                    let obj: CustomFieldStringValue = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x46696c6553746174 => { // FileStat
            if type_name == "AnswerFileStatusResult" {
                Some(|ds, _| {
                    let obj: AnswerFileStatusResult = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x46696c6555706461 => { // FileUpda
            if type_name == "AnswerFileUpdateFailed" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4970506f6f6c436f => { // IpPoolCo
            if type_name == "IpPoolIpPoolConfigInfo" {
                Some(|ds, _| {
                    let obj: IpPoolIpPoolConfigInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4d616e6167656d65 => { // Manageme
            if type_name == "DVSMacManagementPolicy" {
                Some(|ds, _| {
                    let obj: DvsMacManagementPolicy = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4e616d6573706163 => { // Namespac
            if type_name == "NvdimmNamespaceDetails" {
                Some(|ds, _| {
                    let obj: NvdimmNamespaceDetails = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4e6f74496e557067 => { // NotInUpg
            if type_name == "SwitchNotInUpgradeMode" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x506c75674e6f7453 => { // PlugNotS
            if type_name == "CpuHotPlugNotSupported" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x526f757465546162 => { // RouteTab
            if type_name == "HostIpRouteTableConfig" {
                Some(|ds, _| {
                    let obj: HostIpRouteTableConfig = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x53697a654e6f7453 => { // SizeNotS
            if type_name == "MemorySizeNotSupported" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x5374616e6462794d => { // StandbyM
            if type_name == "ExitedStandbyModeEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x55706c696e6b4c61 => { // UplinkLa
            if type_name == "VMwareUplinkLacpPolicy" {
                Some(|ds, _| {
                    let obj: VMwareUplinkLacpPolicy = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x616465436f6d706c => { // adeCompl
            if type_name == "VmUpgradeCompleteEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x61676572436f6d6d => { // agerComm
            if type_name == "OvfManagerCommonParams" {
                Some(|ds, _| {
                    let obj: OvfManagerCommonParams = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6172794661696c6f => { // aryFailo
            if type_name == "VmPrimaryFailoverEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6174696f6e436f6e => { // ationCon
            if type_name == "ReplicationConfigFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6174757265566572 => { // atureVer
            if type_name == "HostFeatureVersionInfo" {
                Some(|ds, _| {
                    let obj: HostFeatureVersionInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x617475734368616e => { // atusChan
            if type_name == "HostStatusChangedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x61756c74566e6963 => { // aultVnic
            match type_name {
                "IscsiFaultVnicNotBound" => {
                    Some(|ds, type_name| {
                        let v = __MethodFaultVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                "IscsiFaultVnicNotFound" => {
                    Some(|ds, type_name| {
                        let v = __MethodFaultVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                _ => None
            }
        },
        0x6275746564566972 => { // butedVir
            if type_name == "DistributedVirtualPort" {
                Some(|ds, _| {
                    let obj: DistributedVirtualPort = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x634661696c757265 => { // cFailure
            if type_name == "HostNicFailureCriteria" {
                Some(|ds, _| {
                    let obj: HostNicFailureCriteria = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x634c65617365536f => { // cLeaseSo
            if type_name == "HttpNfcLeaseSourceFile" {
                Some(|ds, _| {
                    let obj: HttpNfcLeaseSourceFile = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6365416c6c6f6361 => { // ceAlloca
            if type_name == "ResourceAllocationInfo" {
                Some(|ds, _| {
                    let obj: ResourceAllocationInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6365506f6f6c4d6f => { // cePoolMo
            if type_name == "ResourcePoolMovedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6365506f6f6c5175 => { // cePoolQu
            if type_name == "ResourcePoolQuickStats" {
                Some(|ds, _| {
                    let obj: ResourcePoolQuickStats = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x63656e7365436f6e => { // censeCon
            if type_name == "HostLicenseConnectInfo" {
                Some(|ds, _| {
                    let obj: HostLicenseConnectInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x63657373436f6e74 => { // cessCont
            if type_name == "HostAccessControlEntry" {
                Some(|ds, _| {
                    let obj: HostAccessControlEntry = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x636b6e6f776c6564 => { // cknowled
            if type_name == "AlarmAcknowledgedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6372697074466169 => { // criptFai
            if type_name == "AlarmScriptFailedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x644465766963654f => { // dDeviceO
            if type_name == "InvalidDeviceOperation" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x644e6574776f726b => { // dNetwork
            if type_name == "InvalidNetworkResource" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x644f626a65637452 => { // dObjectR
            if type_name == "ManagedObjectReference" {
                Some(|ds, _| {
                    let obj: ManagedObjectReference = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x646174614d616e61 => { // dataMana
            if type_name == "VmMetadataManagerFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x654173736f636961 => { // eAssocia
            if type_name == "ProfileAssociatedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x65436f6d706c6961 => { // eComplia
            if type_name == "DrsRuleComplianceEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6544727344697361 => { // eDrsDisa
            if type_name == "StorageDrsDisabledOnVm" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x65447273566d436f => { // eDrsVmCo
            match type_name {
                "StorageDrsVmConfigInfo" => {
                    Some(|ds, _| {
                        let obj: StorageDrsVmConfigInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "StorageDrsVmConfigSpec" => {
                    Some(|ds, _| {
                        let obj: StorageDrsVmConfigSpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x65496c6c6567616c => { // eIllegal
            if type_name == "EVCModeIllegalByVendor" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x654d696772617469 => { // eMigrati
            if type_name == "StorageMigrationAction" {
                Some(|ds, _| {
                    let obj: StorageMigrationAction = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x654e6f64654e6574 => { // eNodeNet
            if type_name == "PassiveNodeNetworkSpec" {
                Some(|ds, _| {
                    let obj: PassiveNodeNetworkSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x65506c6163656d65 => { // ePlaceme
            match type_name {
                "StoragePlacementAction" => {
                    Some(|ds, _| {
                        let obj: StoragePlacementAction = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "StoragePlacementResult" => {
                    Some(|ds, _| {
                        let obj: StoragePlacementResult = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x6552657365727661 => { // eReserva
            if type_name == "LicenseReservationInfo" {
                Some(|ds, _| {
                    let obj: LicenseReservationInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x655265736f757263 => { // eResourc
            if type_name == "ComputeResourceSummary" {
                Some(|ds, _| {
                    let obj: ComputeResourceSummary = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6552657374726963 => { // eRestric
            if type_name == "LicenseRestrictedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x65636f6e66696775 => { // econfigu
            if type_name == "AlarmReconfiguredEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6564546f506f7765 => { // edToPowe
            if type_name == "VmFailedToPowerOnEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6564546f53757370 => { // edToSusp
            if type_name == "VmFailedToSuspendEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x656756616c756544 => { // egValueD
            if type_name == "GuestRegValueDwordSpec" {
                Some(|ds, _| {
                    let obj: GuestRegValueDwordSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x656756616c756551 => { // egValueQ
            if type_name == "GuestRegValueQwordSpec" {
                Some(|ds, _| {
                    let obj: GuestRegValueQwordSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x656e64656450726f => { // endedPro
            if type_name == "ExtExtendedProductInfo" {
                Some(|ds, _| {
                    let obj: ExtExtendedProductInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x656e745461736b53 => { // entTaskS
            if type_name == "RecurrentTaskScheduler" {
                Some(|ds, _| {
                    let obj: RecurrentTaskScheduler = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6572636f6d6d6974 => { // ercommit
            if type_name == "HostOvercommittedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6574616461746143 => { // etadataC
            if type_name == "PatchMetadataCorrupted" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6666696346696c74 => { // fficFilt
            if type_name == "DvsTrafficFilterConfig" {
                Some(|ds, _| {
                    let obj: DvsTrafficFilterConfig = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x674e6574776f726b => { // gNetwork
            if type_name == "MissingNetworkIpConfig" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x67654f626a656374 => { // geObject
            if type_name == "VStorageObjectSnapshot" {
                Some(|ds, _| {
                    let obj: VStorageObjectSnapshot = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x676f757453657373 => { // goutSess
            if type_name == "UserLogoutSessionEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6772616465466169 => { // gradeFai
            if type_name == "HostUpgradeFailedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x696746696c655175 => { // igFileQu
            if type_name == "VmConfigFileQueryFlags" {
                Some(|ds, _| {
                    let obj: VmConfigFileQueryFlags = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x696f6e4576656e74 => { // ionEvent
            if type_name == "ExtensionEventTypeInfo" {
                Some(|ds, _| {
                    let obj: ExtensionEventTypeInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x696f6e4661756c74 => { // ionFault
            if type_name == "ExtensionFaultTypeInfo" {
                Some(|ds, _| {
                    let obj: ExtensionFaultTypeInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x696f6e5072697669 => { // ionPrivi
            if type_name == "ExtensionPrivilegeInfo" {
                Some(|ds, _| {
                    let obj: ExtensionPrivilegeInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x697a6174696f6e46 => { // izationF
            match type_name {
                "CustomizationFixedIpV6" => {
                    Some(|ds, _| {
                        let obj: CustomizationFixedIpV6 = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "CustomizationFixedName" => {
                    Some(|ds, _| {
                        let obj: CustomizationFixedName = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x697a6174696f6e4c => { // izationL
            if type_name == "CustomizationLinuxPrep" {
                Some(|ds, _| {
                    let obj: CustomizationLinuxPrep = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x697a6174696f6e50 => { // izationP
            if type_name == "AuthorizationPrivilege" {
                Some(|ds, _| {
                    let obj: AuthorizationPrivilege = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x697a6174696f6e53 => { // izationS
            if type_name == "CustomizationSucceeded" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6b4d617070696e67 => { // kMapping
            if type_name == "OvfDiskMappingNotFound" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6b4d696772617469 => { // kMigrati
            if type_name == "HbrDiskMigrationAction" {
                Some(|ds, _| {
                    let obj: HbrDiskMigrationAction = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6b4f72646572436f => { // kOrderCo
            if type_name == "OvfDiskOrderConstraint" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6c4d616368696e65 => { // lMachine
            match type_name {
                "VirtualMachineFileInfo" => {
                    Some(|ds, _| {
                        let obj: VirtualMachineFileInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "VirtualMachineFlagInfo" => {
                    Some(|ds, _| {
                        let obj: VirtualMachineFlagInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x6c53435349506173 => { // lSCSIPas
            if type_name == "VirtualSCSIPassthrough" {
                Some(|ds, _| {
                    let obj: VirtualScsiPassthrough = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6c536f756e644361 => { // lSoundCa
            if type_name == "VirtualSoundCardOption" {
                Some(|ds, _| {
                    let obj: VirtualSoundCardOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6c566964656f4361 => { // lVideoCa
            if type_name == "VirtualVideoCardOption" {
                Some(|ds, _| {
                    let obj: VirtualVideoCardOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6c6961626c654d65 => { // liableMe
            if type_name == "HostReliableMemoryInfo" {
                Some(|ds, _| {
                    let obj: HostReliableMemoryInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6c74657253706563 => { // lterSpec
            if type_name == "TaskFilterSpecByEntity" {
                Some(|ds, _| {
                    let obj: TaskFilterSpecByEntity = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6c74697061746853 => { // ltipathS
            if type_name == "HostMultipathStateInfo" {
                Some(|ds, _| {
                    let obj: HostMultipathStateInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6c794f7065726174 => { // lyOperat
            if type_name == "DvsApplyOperationFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6d41747465737461 => { // mAttesta
            if type_name == "HostTpmAttestationInfo" {
                Some(|ds, _| {
                    let obj: HostTpmAttestationInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6d6167654e6f7441 => { // mageNotA
            if type_name == "ToolsImageNotAvailable" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6d616e6365446573 => { // manceDes
            if type_name == "PerformanceDescription" {
                Some(|ds, _| {
                    let obj: PerformanceDescription = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6d617042616e6477 => { // mapBandw
            if type_name == "VmfsUnmapBandwidthSpec" {
                Some(|ds, _| {
                    let obj: VmfsUnmapBandwidthSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6d65446973636f6e => { // meDiscon
            if type_name == "HostNvmeDisconnectSpec" {
                Some(|ds, _| {
                    let obj: HostNvmeDisconnectSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6d656e74496e7661 => { // mentInva
            if type_name == "OvfElementInvalidValue" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6e4c696e6b436170 => { // nLinkCap
            if type_name == "VMotionLinkCapacityLow" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6e5465726d696e61 => { // nTermina
            if type_name == "SessionTerminatedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6e6669674170706c => { // nfigAppl
            if type_name == "HostConfigAppliedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6e74657243726561 => { // nterCrea
            if type_name == "DatacenterCreatedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6e74657252656e61 => { // nterRena
            if type_name == "DatacenterRenamedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f6c6572616e6365 => { // olerance
            match type_name {
                "FaultToleranceDiskSpec" => {
                    Some(|ds, _| {
                        let obj: FaultToleranceDiskSpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "FaultToleranceMetaSpec" => {
                    Some(|ds, _| {
                        let obj: FaultToleranceMetaSpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x6f72616765456c65 => { // orageEle
            if type_name == "HostStorageElementInfo" {
                Some(|ds, _| {
                    let obj: HostStorageElementInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f72654576656e74 => { // oreEvent
            if type_name == "DatastoreEventArgument" {
                Some(|ds, _| {
                    let obj: DatastoreEventArgument = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f72746564566d78 => { // ortedVmx
            if type_name == "UnsupportedVmxLocation" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f73744c696d6974 => { // ostLimit
            if type_name == "EightHostLimitViolated" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f7572636552756e => { // ourceRun
            if type_name == "DvsResourceRuntimeInfo" {
                Some(|ds, _| {
                    let obj: DvsResourceRuntimeInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f78795377697463 => { // oxySwitc
            if type_name == "HostProxySwitchEnsInfo" {
                Some(|ds, _| {
                    let obj: HostProxySwitchEnsInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7054617267657454 => { // pTargetT
            if type_name == "HostTcpTargetTransport" {
                Some(|ds, _| {
                    let obj: HostTcpTargetTransport = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x706163654f6e436f => { // paceOnCo
            if type_name == "OvfNoSpaceOnController" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x72417474656d7074 => { // rAttempt
            if type_name == "ClusterAttemptedVmInfo" {
                Some(|ds, _| {
                    let obj: ClusterAttemptedVmInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7244617341616d4e => { // rDasAamN
            if type_name == "ClusterDasAamNodeState" {
                Some(|ds, _| {
                    let obj: ClusterDasAamNodeState = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7244617346646d48 => { // rDasFdmH
            if type_name == "ClusterDasFdmHostState" {
                Some(|ds, _| {
                    let obj: ClusterDasFdmHostState = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x72446173566d436f => { // rDasVmCo
            match type_name {
                "ClusterDasVmConfigInfo" => {
                    Some(|ds, _| {
                        let obj: ClusterDasVmConfigInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "ClusterDasVmConfigSpec" => {
                    Some(|ds, _| {
                        let obj: ClusterDasVmConfigSpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x72447273566d436f => { // rDrsVmCo
            match type_name {
                "ClusterDrsVmConfigInfo" => {
                    Some(|ds, _| {
                        let obj: ClusterDrsVmConfigInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "ClusterDrsVmConfigSpec" => {
                    Some(|ds, _| {
                        let obj: ClusterDrsVmConfigSpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x72486f7374506f77 => { // rHostPow
            if type_name == "ClusterHostPowerAction" {
                Some(|ds, _| {
                    let obj: ClusterHostPowerAction = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x724d696772617469 => { // rMigrati
            if type_name == "ClusterMigrationAction" {
                Some(|ds, _| {
                    let obj: ClusterMigrationAction = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x72506f7765724f6e => { // rPowerOn
            if type_name == "ClusterPowerOnVmResult" {
                Some(|ds, _| {
                    let obj: ClusterPowerOnVmResult = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7264776172655374 => { // rdwareSt
            if type_name == "HostHardwareStatusInfo" {
                Some(|ds, _| {
                    let obj: HostHardwareStatusInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x726563746f727953 => { // rectoryS
            if type_name == "HostDirectoryStoreInfo" {
                Some(|ds, _| {
                    let obj: HostDirectoryStoreInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7369546f706f6c6f => { // siTopolo
            if type_name == "HostScsiTopologyTarget" {
                Some(|ds, _| {
                    let obj: HostScsiTopologyTarget = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x73696f6e52656d6f => { // sionRemo
            if type_name == "PermissionRemovedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x73696f6e55706461 => { // sionUpda
            if type_name == "PermissionUpdatedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x73744d656d626572 => { // stMember
            if type_name == "VsanHostMembershipInfo" {
                Some(|ds, _| {
                    let obj: VsanHostMembershipInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7374656d51756965 => { // stemQuie
            if type_name == "FilesystemQuiesceFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7374656d5265736f => { // stemReso
            if type_name == "HostSystemResourceInfo" {
                Some(|ds, _| {
                    let obj: HostSystemResourceInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x744261636b496e53 => { // tBackInS
            if type_name == "DvsHostBackInSyncEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7463684d616e6167 => { // tchManag
            match type_name {
                "HostPatchManagerResult" => {
                    Some(|ds, _| {
                        let obj: HostPatchManagerResult = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "HostPatchManagerStatus" => {
                    Some(|ds, _| {
                        let obj: HostPatchManagerStatus = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x7465436f6e666967 => { // teConfig
            if type_name == "TemplateConfigFileInfo" {
                Some(|ds, _| {
                    let obj: TemplateConfigFileInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7472614e6574776f => { // traNetwo
            if type_name == "HostExtraNetworksEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x74776f726b416363 => { // tworkAcc
            if type_name == "VmNoNetworkAccessEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x75737465724e6574 => { // usterNet
            if type_name == "VchaClusterNetworkSpec" {
                Some(|ds, _| {
                    let obj: VchaClusterNetworkSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x757374657252756e => { // usterRun
            if type_name == "VchaClusterRuntimeInfo" {
                Some(|ds, _| {
                    let obj: VchaClusterRuntimeInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7574696f6e4d616e => { // utionMan
            if type_name == "ExtSolutionManagerInfo" {
                Some(|ds, _| {
                    let obj: ExtSolutionManagerInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x76656e746f727946 => { // ventoryF
            if type_name == "HostInventoryFullEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x776f726b5265736f => { // workReso
            if type_name == "DVSNetworkResourcePool" {
                Some(|ds, _| {
                    let obj: DvsNetworkResourcePool = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x79546f486f737441 => { // yToHostA
            if type_name == "GatewayToHostAuthFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_object_deserializer_23<'de, A: de::MapAccess<'de>>(type_name: &str) -> Option<fn(de::value::MapAccessDeserializer<A>, &str) -> Result<VimAny, A::Error>> {
    let s = &type_name[11..15];
    let Some(type_ord) = to_u32(s) else {
        return None;
    };
    match type_ord {
        0x4170706c => { // Appl
            if type_name == "HostProfileAppliedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4368616e => { // Chan
            if type_name == "AlarmStatusChangedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x436f6e66 => { // Conf
            match type_name {
                "StorageIORMConfigOption" => {
                    Some(|ds, _| {
                        let obj: StorageIormConfigOption = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "HostNetworkConfigResult" => {
                    Some(|ds, _| {
                        let obj: HostNetworkConfigResult = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x43726561 => { // Crea
            if type_name == "DVPortgroupCreatedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x456e6162 => { // Enab
            if type_name == "VmSecondaryEnabledEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x45787069 => { // Expi
            if type_name == "HostLicenseExpiredEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x466f7250 => { // ForP
            if type_name == "VmPodConfigForPlacement" {
                Some(|ds, _| {
                    let obj: VmPodConfigForPlacement = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4970436f => { // IpCo
            if type_name == "NoVcManagedIpConfigured" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4d4d436f => { // MMCo
            if type_name == "VirtualNVDIMMController" {
                Some(|ds, _| {
                    let obj: VirtualNvdimmController = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4d6f6465 => { // Mode
            if type_name == "MaintenanceModeFileMove" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4e6f7442 => { // NotB
            if type_name == "NetworksMayNotBeTheSame" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4e6f7452 => { // NotR
            if type_name == "GatewayHostNotReachable" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4e6f7453 => { // NotS
            if type_name == "MultiWriterNotSupported" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x506f7765 => { // Powe
            if type_name == "OvfConsumerPowerOnFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x51756965 => { // Quie
            if type_name == "ApplicationQuiesceFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x52656e61 => { // Rena
            if type_name == "DVPortgroupRenamedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x53657373 => { // Sess
            if type_name == "BadUsernameSessionEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x53706563 => { // Spec
            match type_name {
                "EventFilterSpecByEntity" => {
                    Some(|ds, _| {
                        let obj: EventFilterSpecByEntity = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "UsbScanCodeSpecKeyEvent" => {
                    Some(|ds, _| {
                        let obj: UsbScanCodeSpecKeyEvent = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x53746172 => { // Star
            if type_name == "VmSecondaryStartedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x53776974 => { // Swit
            match type_name {
                "HostVirtualSwitchBridge" => {
                    Some(|ds, _| {
                        let obj: HostVirtualSwitchBridge = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "HostVirtualSwitchConfig" => {
                    Some(|ds, _| {
                        let obj: HostVirtualSwitchConfig = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x556e646f => { // Undo
            if type_name == "UncommittedUndoableDisk" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x55756964 => { // Uuid
            if type_name == "VsanClusterUuidMismatch" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x5673616e => { // Vsan
            if type_name == "DestinationVsanDisabled" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x5761726e => { // Warn
            if type_name == "GeneralHostWarningEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x616c506f => { // alPo
            if type_name == "VirtualSerialPortOption" {
                Some(|ds, _| {
                    let obj: VirtualSerialPortOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6174696f => { // atio
            if type_name == "GatewayOperationRefused" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6365436f => { // ceCo
            if type_name == "VirtualDeviceConfigSpec" {
                Some(|ds, _| {
                    let obj: VirtualDeviceConfigSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x63704361 => { // cpCa
            if type_name == "VMwareDvsLacpCapability" {
                Some(|ds, _| {
                    let obj: VMwareDvsLacpCapability = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x64446576 => { // dDev
            if type_name == "NotSupportedDeviceForFT" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x64486f73 => { // dHos
            match type_name {
                "NotSupportedHostForVmcp" => {
                    Some(|ds, type_name| {
                        let v = __MethodFaultVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                "NotSupportedHostForVsan" => {
                    Some(|ds, type_name| {
                        let v = __MethodFaultVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                _ => None
            }
        },
        0x6462794d => { // dbyM
            match type_name {
                "EnteredStandbyModeEvent" => {
                    Some(|ds, type_name| {
                        let v = __EventVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                "ExitingStandbyModeEvent" => {
                    Some(|ds, type_name| {
                        let v = __EventVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                _ => None
            }
        },
        0x65456c65 => { // eEle
            if type_name == "HostHardwareElementInfo" {
                Some(|ds, _| {
                    let obj: HostHardwareElementInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6550726f => { // ePro
            if type_name == "HttpNfcLeaseProbeResult" {
                Some(|ds, _| {
                    let obj: HttpNfcLeaseProbeResult = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x65517565 => { // eQue
            if type_name == "VmConfigFileQueryFilter" {
                Some(|ds, _| {
                    let obj: VmConfigFileQueryFilter = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x65536563 => { // eSec
            if type_name == "KernelModuleSectionInfo" {
                Some(|ds, _| {
                    let obj: KernelModuleSectionInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x65636966 => { // ecif
            if type_name == "DVSVendorSpecificConfig" {
                Some(|ds, _| {
                    let obj: DvsVendorSpecificConfig = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x65636f6e => { // econ
            if type_name == "HostSystemReconnectSpec" {
                Some(|ds, _| {
                    let obj: HostSystemReconnectSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x65637453 => { // ectS
            if type_name == "VStorageObjectStateInfo" {
                Some(|ds, _| {
                    let obj: VStorageObjectStateInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6563746f => { // ecto
            if type_name == "InvalidCollectorVersion" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x656a6563 => { // ejec
            if type_name == "DvsUpgradeRejectedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x65766963 => { // evic
            if type_name == "OvfUnknownDeviceBacking" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x66696746 => { // figF
            if type_name == "TemplateConfigFileQuery" {
                Some(|ds, _| {
                    let obj: TemplateConfigFileQuery = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x66696775 => { // figu
            if type_name == "LockerReconfiguredEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x67497056 => { // gIpV
            if type_name == "HostIpConfigIpV6Address" {
                Some(|ds, _| {
                    let obj: HostIpConfigIpV6Address = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x67497066 => { // gIpf
            if type_name == "VMwareDvsLagIpfixConfig" {
                Some(|ds, _| {
                    let obj: VMwareDvsLagIpfixConfig = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x67657454 => { // getT
            match type_name {
                "HostPcieTargetTransport" => {
                    Some(|ds, _| {
                        let obj: HostPcieTargetTransport = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "HostRdmaTargetTransport" => {
                    Some(|ds, _| {
                        let obj: HostRdmaTargetTransport = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x676e6d65 => { // gnme
            if type_name == "LicenseAssignmentFailed" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x68617069 => { // hapi
            if type_name == "DVSTrafficShapingPolicy" {
                Some(|ds, _| {
                    let obj: DvsTrafficShapingPolicy = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6963656e => { // icen
            if type_name == "EvaluationLicenseSource" {
                Some(|ds, _| {
                    let obj: EvaluationLicenseSource = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x69677261 => { // igra
            if type_name == "VmBeingHotMigratedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x696c6553 => { // ileS
            if type_name == "ProfileProfileStructure" {
                Some(|ds, _| {
                    let obj: ProfileProfileStructure = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x696c6974 => { // ilit
            if type_name == "CpuCompatibilityUnknown" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x696e6543 => { // ineC
            match type_name {
                "VirtualMachineCdromInfo" => {
                    Some(|ds, _| {
                        let obj: VirtualMachineCdromInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "VirtualMachineCloneSpec" => {
                    Some(|ds, _| {
                        let obj: VirtualMachineCloneSpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x696e654d => { // ineM
            if type_name == "VirtualMachineMksTicket" {
                Some(|ds, _| {
                    let obj: VirtualMachineMksTicket = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x696e6553 => { // ineS
            match type_name {
                "VirtualMachineSoundInfo" => {
                    Some(|ds, _| {
                        let obj: VirtualMachineSoundInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "VirtualMachineSriovInfo" => {
                    Some(|ds, _| {
                        let obj: VirtualMachineSriovInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x696e6556 => { // ineV
            if type_name == "VirtualMachineVideoCard" {
                Some(|ds, _| {
                    let obj: VirtualMachineVideoCard = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x696f6e4c => { // ionL
            if type_name == "HostConnectionLostEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x69726563 => { // irec
            match type_name {
                "HostActiveDirectoryInfo" => {
                    Some(|ds, _| {
                        let obj: HostActiveDirectoryInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "HostActiveDirectorySpec" => {
                    Some(|ds, _| {
                        let obj: HostActiveDirectorySpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x69746550 => { // iteP
            if type_name == "NamespaceWriteProtected" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6c52756e => { // lRun
            if type_name == "ResourcePoolRuntimeInfo" {
                Some(|ds, _| {
                    let obj: ResourcePoolRuntimeInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6c616269 => { // labi
            if type_name == "LicenseAvailabilityInfo" {
                Some(|ds, _| {
                    let obj: LicenseAvailabilityInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6c654578 => { // leEx
            if type_name == "ProfileSimpleExpression" {
                Some(|ds, _| {
                    let obj: ProfileSimpleExpression = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6c654d6f => { // leMo
            if type_name == "DatastoreFileMovedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6c656176 => { // leav
            if type_name == "NvdimmInterleaveSetInfo" {
                Some(|ds, _| {
                    let obj: NvdimmInterleaveSetInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6c6f6361 => { // loca
            if type_name == "StorageIOAllocationInfo" {
                Some(|ds, _| {
                    let obj: StorageIoAllocationInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6c74446f => { // ltDo
            if type_name == "VsanHostFaultDomainInfo" {
                Some(|ds, _| {
                    let obj: VsanHostFaultDomainInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6d706c65 => { // mple
            if type_name == "AlarmSnmpCompletedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6e4f6e4e => { // nOnN
            if type_name == "NoPermissionOnNasVolume" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6e616765 => { // nage
            if type_name == "HostPatchManagerLocator" {
                Some(|ds, _| {
                    let obj: HostPatchManagerLocator = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6e656446 => { // nedF
            if type_name == "UserUnassignedFromGroup" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6e697479 => { // nity
            if type_name == "ClusterAffinityRuleSpec" {
                Some(|ds, _| {
                    let obj: ClusterAffinityRuleSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f636961 => { // ocia
            if type_name == "ProfileDissociatedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f64436f => { // odCo
            match type_name {
                "StorageDrsPodConfigInfo" => {
                    Some(|ds, _| {
                        let obj: StorageDrsPodConfigInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "StorageDrsPodConfigSpec" => {
                    Some(|ds, _| {
                        let obj: StorageDrsPodConfigSpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x6f66696c => { // ofil
            if type_name == "HostImageProfileSummary" {
                Some(|ds, _| {
                    let obj: HostImageProfileSummary = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f6e4375 => { // onCu
            if type_name == "CustomizationCustomName" {
                Some(|ds, _| {
                    let obj: CustomizationCustomName = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f6e4775 => { // onGu
            if type_name == "CustomizationGuiRunOnce" {
                Some(|ds, _| {
                    let obj: CustomizationGuiRunOnce = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f6e4950 => { // onIP
            if type_name == "CustomizationIPSettings" {
                Some(|ds, _| {
                    let obj: CustomizationIpSettings = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f6e496e => { // onIn
            if type_name == "VAppOperationInProgress" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f6e5072 => { // onPr
            if type_name == "CustomizationPrefixName" {
                Some(|ds, _| {
                    let obj: CustomizationPrefixName = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f6e5769 => { // onWi
            if type_name == "CustomizationWinOptions" {
                Some(|ds, _| {
                    let obj: CustomizationWinOptions = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f6e656e => { // onen
            if type_name == "HostHasComponentFailure" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f726167 => { // orag
            if type_name == "RetrieveVStorageObjSpec" {
                Some(|ds, _| {
                    let obj: RetrieveVStorageObjSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f776572 => { // ower
            if type_name == "VmFailedToPowerOffEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x70546f44 => { // pToD
            if type_name == "VmRelayoutUpToDateEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x70646174 => { // pdat
            if type_name == "AnswerFileUpdateFailure" {
                Some(|ds, _| {
                    let obj: AnswerFileUpdateFailure = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x72496e66 => { // rInf
            if type_name == "FileTransferInformation" {
                Some(|ds, _| {
                    let obj: FileTransferInformation = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x72654261 => { // reBa
            if type_name == "VmfsDatastoreBaseOption" {
                Some(|ds, _| {
                    let obj: VmfsDatastoreBaseOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x72654372 => { // reCr
            if type_name == "VmfsDatastoreCreateSpec" {
                Some(|ds, _| {
                    let obj: VmfsDatastoreCreateSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x72654578 => { // reEx
            match type_name {
                "VmfsDatastoreExpandSpec" => {
                    Some(|ds, _| {
                        let obj: VmfsDatastoreExpandSpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "VmfsDatastoreExtendSpec" => {
                    Some(|ds, _| {
                        let obj: VmfsDatastoreExtendSpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x726b4361 => { // rkCa
            if type_name == "OpaqueNetworkCapability" {
                Some(|ds, _| {
                    let obj: OpaqueNetworkCapability = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x726b5275 => { // rkRu
            if type_name == "DvsLogNetworkRuleAction" {
                Some(|ds, _| {
                    let obj: DvsLogNetworkRuleAction = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x726b5461 => { // rkTa
            if type_name == "OpaqueNetworkTargetInfo" {
                Some(|ds, _| {
                    let obj: OpaqueNetworkTargetInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x726f6c6c => { // roll
            if type_name == "VirtualControllerOption" {
                Some(|ds, _| {
                    let obj: VirtualControllerOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x72794b65 => { // ryKe
            if type_name == "GuestRegistryKeyInvalid" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x72795661 => { // ryVa
            if type_name == "GuestRegistryValueFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x734c6f63 => { // sLoc
            if type_name == "CannotAccessLocalSource" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7350726f => { // sPro
            if type_name == "GuestWindowsProgramSpec" {
                Some(|ds, _| {
                    let obj: GuestWindowsProgramSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x73566d43 => { // sVmC
            if type_name == "CannotAccessVmComponent" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x73697374 => { // sist
            if type_name == "HostIpInconsistentEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x736f6c61 => { // sola
            if type_name == "DasClusterIsolatedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x73744572 => { // stEr
            if type_name == "MigrationHostErrorEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7374616c => { // stal
            if type_name == "VcAgentUninstalledEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x73747261 => { // stra
            if type_name == "HostSgxRegistrationInfo" {
                Some(|ds, _| {
                    let obj: HostSgxRegistrationInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7374726f => { // stro
            if type_name == "DatastoreDestroyedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7453746f => { // tSto
            if type_name == "InsufficientStorageIops" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x74616e63 => { // tanc
            if type_name == "NetStackInstanceProfile" {
                Some(|ds, _| {
                    let obj: NetStackInstanceProfile = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x74656441 => { // tedA
            if type_name == "OvfUnsupportedAttribute" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x74656d4d => { // temM
            if type_name == "HostFileSystemMountInfo" {
                Some(|ds, _| {
                    let obj: HostFileSystemMountInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7468656e => { // then
            if type_name == "SAMLTokenAuthentication" {
                Some(|ds, _| {
                    let obj: SamlTokenAuthentication = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x74696350 => { // ticP
            if type_name == "HostDiagnosticPartition" {
                Some(|ds, _| {
                    let obj: HostDiagnosticPartition = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x74697469 => { // titi
            if type_name == "HostDiskPartitionLayout" {
                Some(|ds, _| {
                    let obj: HostDiskPartitionLayout = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x746f436f => { // toCo
            if type_name == "ClusterCryptoConfigInfo" {
                Some(|ds, _| {
                    let obj: ClusterCryptoConfigInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7475616c => { // tual
            if type_name == "SeSparseVirtualDiskSpec" {
                Some(|ds, _| {
                    let obj: SeSparseVirtualDiskSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x75654269 => { // ueBi
            if type_name == "GuestRegValueBinarySpec" {
                Some(|ds, _| {
                    let obj: GuestRegValueBinarySpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x75655374 => { // ueSt
            if type_name == "GuestRegValueStringSpec" {
                Some(|ds, _| {
                    let obj: GuestRegValueStringSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x756c6551 => { // uleQ
            if type_name == "DvsNetworkRuleQualifier" {
                Some(|ds, _| {
                    let obj: DvsNetworkRuleQualifier = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x76656e74 => { // vent
            if type_name == "DatacenterEventArgument" {
                Some(|ds, _| {
                    let obj: DatacenterEventArgument = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x76696365 => { // vice
            if type_name == "HostSriovDevicePoolInfo" {
                Some(|ds, _| {
                    let obj: HostSriovDevicePoolInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_object_deserializer_24<'de, A: de::MapAccess<'de>>(type_name: &str) -> Option<fn(de::value::MapAccessDeserializer<A>, &str) -> Result<VimAny, A::Error>> {
    let s = &type_name[8..16];
    let Some(type_ord) = to_u64(s) else {
        return None;
    };
    match type_ord {
        0x416c6c6f63617469 => { // Allocati
            if type_name == "ResourceAllocationOption" {
                Some(|ds, _| {
                    let obj: ResourceAllocationOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x436f70794e6f7453 => { // CopyNotS
            if type_name == "SnapshotCopyNotSupported" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4465636f6d6d6973 => { // Decommis
            if type_name == "VsanHostDecommissionMode" {
                Some(|ds, _| {
                    let obj: VsanHostDecommissionMode = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4465736372697074 => { // Descript
            match type_name {
                "OvfParseDescriptorParams" => {
                    Some(|ds, _| {
                        let obj: OvfParseDescriptorParams = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "OvfParseDescriptorResult" => {
                    Some(|ds, _| {
                        let obj: OvfParseDescriptorResult = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x4465766963654361 => { // DeviceCa
            if type_name == "HostRdmaDeviceCapability" {
                Some(|ds, _| {
                    let obj: HostRdmaDeviceCapability = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4d6163436f6e666c => { // MacConfl
            if type_name == "VmStaticMacConflictEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4d6f76654e6f7453 => { // MoveNotS
            if type_name == "SnapshotMoveNotSupported" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4f626a656374436f => { // ObjectCo
            if type_name == "VStorageObjectConfigInfo" {
                Some(|ds, _| {
                    let obj: VStorageObjectConfigInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x506f6f6c43726561 => { // PoolCrea
            if type_name == "ResourcePoolCreatedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x5175657279497373 => { // QueryIss
            if type_name == "IoFilterQueryIssueResult" {
                Some(|ds, _| {
                    let obj: IoFilterQueryIssueResult = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x5342555342426163 => { // SBUSBBac
            if type_name == "VirtualUSBUSBBackingInfo" {
                Some(|ds, _| {
                    let obj: VirtualUsbusbBackingInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x534258484349436f => { // SBXHCICo
            if type_name == "VirtualUSBXHCIController" {
                Some(|ds, _| {
                    let obj: VirtualUsbxhciController = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x53506f727467726f => { // SPortgro
            if type_name == "VMwareDVSPortgroupPolicy" {
                Some(|ds, _| {
                    let obj: VMwareDvsPortgroupPolicy = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x5350766c616e436f => { // SPvlanCo
            if type_name == "VMwareDVSPvlanConfigSpec" {
                Some(|ds, _| {
                    let obj: VMwareDvsPvlanConfigSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x53567370616e4361 => { // SVspanCa
            if type_name == "VMwareDVSVspanCapability" {
                Some(|ds, _| {
                    let obj: VMwareDvsVspanCapability = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x53567370616e436f => { // SVspanCo
            if type_name == "VMwareDVSVspanConfigSpec" {
                Some(|ds, _| {
                    let obj: VMwareDvsVspanConfigSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x5374616e6462794d => { // StandbyM
            if type_name == "EnteringStandbyModeEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x53796e63486f7374 => { // SyncHost
            if type_name == "DvsOutOfSyncHostArgument" {
                Some(|ds, _| {
                    let obj: DvsOutOfSyncHostArgument = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x53797374656d566f => { // SystemVo
            if type_name == "HostFileSystemVolumeInfo" {
                Some(|ds, _| {
                    let obj: HostFileSystemVolumeInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x547970654e6f7453 => { // TypeNotS
            if type_name == "DiskMoveTypeNotSupported" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x556e617661696c61 => { // Unavaila
            if type_name == "DasAgentUnavailableEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x5644494d4d426163 => { // VDIMMBac
            if type_name == "VirtualNVDIMMBackingInfo" {
                Some(|ds, _| {
                    let obj: VirtualNvdimmBackingInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x616368696e654361 => { // achineCa
            if type_name == "VirtualMachineCapability" {
                Some(|ds, _| {
                    let obj: VirtualMachineCapability = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x616368696e65436f => { // achineCo
            match type_name {
                "VirtualMachineConfigInfo" => {
                    Some(|ds, _| {
                        let obj: VirtualMachineConfigInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "VirtualMachineConfigSpec" => {
                    Some(|ds, _| {
                        let obj: VirtualMachineConfigSpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "VirtualMachineConnection" => {
                    Some(|ds, _| {
                        let obj: VirtualMachineConnection = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x616368696e654669 => { // achineFi
            if type_name == "VirtualMachineFileLayout" {
                Some(|ds, _| {
                    let obj: VirtualMachineFileLayout = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x616368696e65466c => { // achineFl
            if type_name == "VirtualMachineFloppyInfo" {
                Some(|ds, _| {
                    let obj: VirtualMachineFloppyInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x616368696e65496d => { // achineIm
            if type_name == "VirtualMachineImportSpec" {
                Some(|ds, _| {
                    let obj: VirtualMachineImportSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x616368696e655175 => { // achineQu
            if type_name == "VirtualMachineQuickStats" {
                Some(|ds, _| {
                    let obj: VirtualMachineQuickStats = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x616368696e655365 => { // achineSe
            if type_name == "VirtualMachineSerialInfo" {
                Some(|ds, _| {
                    let obj: VirtualMachineSerialInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x616368696e655461 => { // achineTa
            if type_name == "VirtualMachineTargetInfo" {
                Some(|ds, _| {
                    let obj: VirtualMachineTargetInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x616368696e65564d => { // achineVM
            if type_name == "VirtualMachineVMCIDevice" {
                Some(|ds, _| {
                    let obj: VirtualMachineVmciDevice = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x616368696e655663 => { // achineVc
            if type_name == "VirtualMachineVcpuConfig" {
                Some(|ds, _| {
                    let obj: VirtualMachineVcpuConfig = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x616368696e655769 => { // achineWi
            if type_name == "VirtualMachineWipeResult" {
                Some(|ds, _| {
                    let obj: VirtualMachineWipeResult = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x616e67655673616e => { // angeVsan
            if type_name == "CannotChangeVsanNodeUuid" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6172616d65746572 => { // arameter
            if type_name == "ProfileParameterMetadata" {
                Some(|ds, _| {
                    let obj: ProfileParameterMetadata = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6172794469736162 => { // aryDisab
            if type_name == "VmSecondaryDisabledEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6173436f6e666967 => { // asConfig
            if type_name == "InvalidDasConfigArgument" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6174696f6e446573 => { // ationDes
            if type_name == "AuthorizationDescription" {
                Some(|ds, _| {
                    let obj: AuthorizationDescription = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6174696f6e466169 => { // ationFai
            if type_name == "DrsInvocationFailedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6174696f6e497047 => { // ationIpG
            if type_name == "CustomizationIpGenerator" {
                Some(|ds, _| {
                    let obj: CustomizationIpGenerator = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6174696f6e537973 => { // ationSys
            if type_name == "CustomizationSysprepText" {
                Some(|ds, _| {
                    let obj: CustomizationSysprepText = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6174696f6e556e6b => { // ationUnk
            if type_name == "CustomizationUnknownName" {
                Some(|ds, _| {
                    let obj: CustomizationUnknownName = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6174697665436c6f => { // ativeClo
            if type_name == "TooManyNativeCloneLevels" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x617475734368616e => { // atusChan
            if type_name == "HealthStatusChangedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6365506f6f6c4d6f => { // cePoolMo
            if type_name == "VmResourcePoolMovedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x636b496e666f4e65 => { // ckInfoNe
            if type_name == "NetIpStackInfoNetToMedia" {
                Some(|ds, _| {
                    let obj: NetIpStackInfoNetToMedia = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6374656444657669 => { // ctedDevi
            if type_name == "OvfConnectedDeviceFloppy" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6379536174697366 => { // cySatisf
            if type_name == "VsanPolicySatisfiability" {
                Some(|ds, _| {
                    let obj: VsanPolicySatisfiability = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x64417564696f4361 => { // dAudioCa
            if type_name == "VirtualHdAudioCardOption" {
                Some(|ds, _| {
                    let obj: VirtualHdAudioCardOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x645461736b446573 => { // dTaskDes
            if type_name == "ScheduledTaskDescription" {
                Some(|ds, _| {
                    let obj: ScheduledTaskDescription = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x645461736b466169 => { // dTaskFai
            if type_name == "ScheduledTaskFailedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6465417661696c61 => { // deAvaila
            if type_name == "DvsUpgradeAvailableEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x646d696e4e6f7453 => { // dminNotS
            if type_name == "DisableAdminNotSupported" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x64756c654e6f7453 => { // duleNotS
            if type_name == "VFlashModuleNotSupported" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x65446973636f7665 => { // eDiscove
            if type_name == "DatastoreDiscoveredEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x654475706c696361 => { // eDuplica
            if type_name == "DatastoreDuplicatedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6546696c65436f70 => { // eFileCop
            if type_name == "DatastoreFileCopiedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6549704465746563 => { // eIpDetec
            if type_name == "DuplicateIpDetectedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6553706563526573 => { // eSpecRes
            if type_name == "VAppCloneSpecResourceMap" {
                Some(|ds, _| {
                    let obj: VAppCloneSpecResourceMap = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6561736543617061 => { // easeCapa
            if type_name == "HttpNfcLeaseCapabilities" {
                Some(|ds, _| {
                    let obj: HttpNfcLeaseCapabilities = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x65635368616c6c6f => { // ecShallo
            if type_name == "CryptoSpecShallowRecrypt" {
                Some(|ds, _| {
                    let obj: CryptoSpecShallowRecrypt = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x65636f6e66696775 => { // econfigu
            match type_name {
                "ClusterReconfiguredEvent" => {
                    Some(|ds, type_name| {
                        let v = __EventVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                "DvsPortReconfiguredEvent" => {
                    Some(|ds, type_name| {
                        let v = __EventVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                _ => None
            }
        },
        0x6564437573746f6d => { // edCustom
            if type_name == "StructuredCustomizations" {
                Some(|ds, _| {
                    let obj: StructuredCustomizations = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x65644469736b4d6f => { // edDiskMo
            if type_name == "DisallowedDiskModeChange" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x65644d6b73546963 => { // edMksTic
            if type_name == "VmAcquiredMksTicketEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x656c644465664164 => { // eldDefAd
            if type_name == "CustomFieldDefAddedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6572537065634279 => { // erSpecBy
            if type_name == "TaskFilterSpecByUsername" {
                Some(|ds, _| {
                    let obj: TaskFilterSpecByUsername = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6572616e6365436f => { // eranceCo
            match type_name {
                "FaultToleranceConfigInfo" => {
                    Some(|ds, _| {
                        let obj: FaultToleranceConfigInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "FaultToleranceConfigSpec" => {
                    Some(|ds, _| {
                        let obj: FaultToleranceConfigSpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x65726174696f6e42 => { // erationB
            if type_name == "ImportOperationBulkFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6572766572556e61 => { // erverUna
            if type_name == "LicenseServerUnavailable" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6574776f726b436f => { // etworkCo
            if type_name == "ClusterNetworkConfigSpec" {
                Some(|ds, _| {
                    let obj: ClusterNetworkConfigSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6574776f726b5275 => { // etworkRu
            match type_name {
                "DvsCopyNetworkRuleAction" => {
                    Some(|ds, _| {
                        let obj: DvsCopyNetworkRuleAction = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "DvsDropNetworkRuleAction" => {
                    Some(|ds, _| {
                        let obj: DvsDropNetworkRuleAction = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "DvsPuntNetworkRuleAction" => {
                    Some(|ds, _| {
                        let obj: DvsPuntNetworkRuleAction = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x6576696365426163 => { // eviceBac
            if type_name == "VirtualDeviceBackingInfo" {
                Some(|ds, _| {
                    let obj: VirtualDeviceBackingInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6576696365427573 => { // eviceBus
            if type_name == "VirtualDeviceBusSlotInfo" {
                Some(|ds, _| {
                    let obj: VirtualDeviceBusSlotInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6576696365436f6e => { // eviceCon
            if type_name == "VirtualDeviceConnectInfo" {
                Some(|ds, _| {
                    let obj: VirtualDeviceConnectInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6579456e74697479 => { // eyEntity
            if type_name == "LicenseKeyEntityMismatch" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x666967496e666f49 => { // figInfoI
            if type_name == "NetIpConfigInfoIpAddress" {
                Some(|ds, _| {
                    let obj: NetIpConfigInfoIpAddress = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x68436865636b4361 => { // hCheckCa
            if type_name == "DVSHealthCheckCapability" {
                Some(|ds, _| {
                    let obj: DvsHealthCheckCapability = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x69626c6556466c61 => { // ibleVFla
            if type_name == "InaccessibleVFlashSource" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x696365536f757263 => { // iceSourc
            if type_name == "HostServiceSourcePackage" {
                Some(|ds, _| {
                    let obj: HostServiceSourcePackage = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x696456616c756552 => { // idValueR
            if type_name == "OvfInvalidValueReference" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x69656e7453746f72 => { // ientStor
            if type_name == "InsufficientStorageSpace" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x696c436f6d706c65 => { // ilComple
            if type_name == "AlarmEmailCompletedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x696e67436f6e6669 => { // ingConfi
            if type_name == "ConflictingConfiguration" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x696e674e6574776f => { // ingNetwo
            if type_name == "HostMissingNetworksEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x696f6e436f6d7061 => { // ionCompa
            if type_name == "HostVMotionCompatibility" {
                Some(|ds, _| {
                    let obj: HostVMotionCompatibility = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x696f6e566d436f6e => { // ionVmCon
            if type_name == "ReplicationVmConfigFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x697074436f6d706c => { // iptCompl
            if type_name == "AlarmScriptCompleteEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6973636f6e6e6563 => { // isconnec
            if type_name == "DvsPortDisconnectedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x69736b734f6e4c65 => { // isksOnLe
            if type_name == "TooManyDisksOnLegacyHost" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x697374656e744d65 => { // istentMe
            if type_name == "HostPersistentMemoryInfo" {
                Some(|ds, _| {
                    let obj: HostPersistentMemoryInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x697846696c654174 => { // ixFileAt
            if type_name == "GuestPosixFileAttributes" {
                Some(|ds, _| {
                    let obj: GuestPosixFileAttributes = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6c65456e63727970 => { // leEncryp
            if type_name == "VmDiskFileEncryptionInfo" {
                Some(|ds, _| {
                    let obj: VmDiskFileEncryptionInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6c69656e74436572 => { // lientCer
            if type_name == "InvalidClientCertificate" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6c6c6f6361746564 => { // llocated
            if type_name == "DvsVnicAllocatedResource" {
                Some(|ds, _| {
                    let obj: DvsVnicAllocatedResource = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6c74566e69634973 => { // ltVnicIs
            if type_name == "IscsiFaultVnicIsLastPath" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6d6547656e657261 => { // meGenera
            if type_name == "IpHostnameGeneratorError" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6d657243616c6c62 => { // merCallb
            if type_name == "OvfConsumerCallbackFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6e44697361626c65 => { // nDisable
            if type_name == "OperationDisabledByGuest" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6e4f7666436f6e73 => { // nOvfCons
            if type_name == "ExtensionOvfConsumerInfo" {
                Some(|ds, _| {
                    let obj: ExtensionOvfConsumerInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6e666f4576656e74 => { // nfoEvent
            if type_name == "ChangesInfoEventArgument" {
                Some(|ds, _| {
                    let obj: ChangesInfoEventArgument = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6e675365636f6e64 => { // ngSecond
            if type_name == "VmStartingSecondaryEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6e736f6e69713133 => { // nsoniq13
            if type_name == "VirtualEnsoniq1371Option" {
                Some(|ds, _| {
                    let obj: VirtualEnsoniq1371Option = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f6361746f724372 => { // ocatorCr
            if type_name == "ServiceLocatorCredential" {
                Some(|ds, _| {
                    let obj: ServiceLocatorCredential = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f75726365556e61 => { // ourceUna
            if type_name == "LicenseSourceUnavailable" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x706d486f7374436f => { // pmHostCo
            match type_name {
                "ClusterDpmHostConfigInfo" => {
                    Some(|ds, _| {
                        let obj: ClusterDpmHostConfigInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "ClusterDpmHostConfigSpec" => {
                    Some(|ds, _| {
                        let obj: ClusterDpmHostConfigSpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x706f6e656e74734f => { // ponentsO
            if type_name == "GuestComponentsOutOfDate" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x726174696f6e4465 => { // rationDe
            if type_name == "IscsiMigrationDependency" {
                Some(|ds, _| {
                    let obj: IscsiMigrationDependency = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7263686573747261 => { // rchestra
            if type_name == "ClusterOrchestrationInfo" {
                Some(|ds, _| {
                    let obj: ClusterOrchestrationInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x72696f7645746865 => { // riovEthe
            if type_name == "VirtualSriovEthernetCard" {
                Some(|ds, _| {
                    let obj: VirtualSriovEthernetCard = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x726f66696c65436f => { // rofileCo
            match type_name {
                "ClusterProfileConfigInfo" => {
                    Some(|ds, _| {
                        let obj: ClusterProfileConfigInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "ClusterProfileConfigSpec" => {
                    Some(|ds, _| {
                        let obj: ClusterProfileConfigSpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x726f66696c654372 => { // rofileCr
            if type_name == "ClusterProfileCreateSpec" {
                Some(|ds, _| {
                    let obj: ClusterProfileCreateSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x727343616e6e6f74 => { // rsCannot
            if type_name == "StorageDrsCannotMoveFTVm" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7273486d73556e72 => { // rsHmsUnr
            if type_name == "StorageDrsHmsUnreachable" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x72735265636f6d6d => { // rsRecomm
            if type_name == "ClusterDrsRecommendation" {
                Some(|ds, _| {
                    let obj: ClusterDrsRecommendation = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7274794e6574776f => { // rtyNetwo
            if type_name == "OvfPropertyNetworkExport" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7349706669784361 => { // sIpfixCa
            if type_name == "VMwareDvsIpfixCapability" {
                Some(|ds, _| {
                    let obj: VMwareDvsIpfixCapability = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x734c61637047726f => { // sLacpGro
            if type_name == "VMwareDvsLacpGroupConfig" {
                Some(|ds, _| {
                    let obj: VMwareDvsLacpGroupConfig = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x73636f6e66696775 => { // sconfigu
            if type_name == "LockerMisconfiguredEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x73696e6744657065 => { // singDepe
            if type_name == "PatchMissingDependencies" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x736f6c766564566d => { // solvedVm
            match type_name {
                "HostUnresolvedVmfsExtent" => {
                    Some(|ds, _| {
                        let obj: HostUnresolvedVmfsExtent = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "HostUnresolvedVmfsVolume" => {
                    Some(|ds, _| {
                        let obj: HostUnresolvedVmfsVolume = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x73746f7265436f6e => { // storeCon
            if type_name == "HostDatastoreConnectInfo" {
                Some(|ds, _| {
                    let obj: HostDatastoreConnectInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x74486f7374496e66 => { // tHostInf
            if type_name == "IncorrectHostInformation" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x745365636f6e6461 => { // tSeconda
            if type_name == "PowerOnFtSecondaryFailed" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x74617274436f756e => { // tartCoun
            if type_name == "VmMaxRestartCountReached" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x74656456696d4170 => { // tedVimAp
            if type_name == "UnsupportedVimApiVersion" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x74656e616e63654d => { // tenanceM
            if type_name == "ExitMaintenanceModeEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x746f726543726561 => { // toreCrea
            if type_name == "NASDatastoreCreatedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7474657374617469 => { // ttestati
            if type_name == "HostTpmAttestationReport" {
                Some(|ds, _| {
                    let obj: HostTpmAttestationReport = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x75616c4e6963436f => { // ualNicCo
            if type_name == "HostVirtualNicConnection" {
                Some(|ds, _| {
                    let obj: HostVirtualNicConnection = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x765461674576656e => { // vTagEven
            if type_name == "HostTpmNvTagEventDetails" {
                Some(|ds, _| {
                    let obj: HostTpmNvTagEventDetails = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x766963654e6f7453 => { // viceNotS
            if type_name == "RemoteDeviceNotSupported" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x79566d4e6f745265 => { // yVmNotRe
            if type_name == "SecondaryVmNotRegistered" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7a654e6f74526563 => { // zeNotRec
            if type_name == "MemorySizeNotRecommended" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_object_deserializer_25<'de, A: de::MapAccess<'de>>(type_name: &str) -> Option<fn(de::value::MapAccessDeserializer<A>, &str) -> Result<VimAny, A::Error>> {
    let s = &type_name[11..19];
    let Some(type_ord) = to_u64(s) else {
        return None;
    };
    match type_ord {
        0x416c726561647945 => { // AlreadyE
            if type_name == "SecondaryVmAlreadyEnabled" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x444d4e6f74537570 => { // DMNotSup
            if type_name == "PhysCompatRDMNotSupported" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4461746173746f72 => { // Datastor
            if type_name == "ConflictingDatastoreFound" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4465706c6f796d65 => { // Deployme
            match type_name {
                "PassiveNodeDeploymentSpec" => {
                    Some(|ds, _| {
                        let obj: PassiveNodeDeploymentSpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "VchaClusterDeploymentSpec" => {
                    Some(|ds, _| {
                        let obj: VchaClusterDeploymentSpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x44657374726f7965 => { // Destroye
            if type_name == "DVPortgroupDestroyedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x496e76616c69644f => { // InvalidO
            if type_name == "ReplicationInvalidOptions" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x496e76616c696453 => { // InvalidS
            if type_name == "OvfConsumerInvalidSection" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4e69634970526f75 => { // NicIpRou
            if type_name == "HostVirtualNicIpRouteSpec" {
                Some(|ds, _| {
                    let obj: HostVirtualNicIpRouteSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4e69634d616e6167 => { // NicManag
            if type_name == "HostVirtualNicManagerInfo" {
                Some(|ds, _| {
                    let obj: HostVirtualNicManagerInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4f6666566d496e43 => { // OffVmInC
            if type_name == "CannotPowerOffVmInCluster" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4f75744f6653796e => { // OutOfSyn
            if type_name == "DvsHostWentOutOfSyncEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x506f727467726f75 => { // Portgrou
            if type_name == "DvsPortJoinPortgroupEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x5265636f6d6d656e => { // Recommen
            if type_name == "ClusterHostRecommendation" {
                Some(|ds, _| {
                    let obj: ClusterHostRecommendation = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x53435349436f6e74 => { // SCSICont
            if type_name == "ParaVirtualSCSIController" {
                Some(|ds, _| {
                    let obj: ParaVirtualScsiController = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x5365637572697479 => { // Security
            if type_name == "HostNetworkSecurityPolicy" {
                Some(|ds, _| {
                    let obj: HostNetworkSecurityPolicy = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x5370656342795573 => { // SpecByUs
            if type_name == "EventFilterSpecByUsername" {
                Some(|ds, _| {
                    let obj: EventFilterSpecByUsername = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x5472696767657265 => { // Triggere
            if type_name == "AlarmActionTriggeredEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x56696f6c6174696f => { // Violatio
            if type_name == "DrsSoftRuleViolationEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x566d50726f677265 => { // VmProgre
            if type_name == "ReplicationVmProgressInfo" {
                Some(|ds, _| {
                    let obj: ReplicationVmProgressInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6164654661696c65 => { // adeFaile
            if type_name == "VcAgentUpgradeFailedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x616e616765724556 => { // anagerEV
            if type_name == "ClusterEVCManagerEVCState" {
                Some(|ds, _| {
                    let obj: ClusterEvcManagerEvcState = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x616e6462794d6f64 => { // andbyMod
            if type_name == "DrsExitedStandbyModeEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x636f6d6d69747465 => { // committe
            if type_name == "ClusterOvercommittedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x636f766572794c6f => { // coveryLo
            if type_name == "HostNvmeDiscoveryLogEntry" {
                Some(|ds, _| {
                    let obj: HostNvmeDiscoveryLogEntry = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x64486f7374466f72 => { // dHostFor
            if type_name == "NotSupportedHostForVFlash" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x64486f7374496e43 => { // dHostInC
            if type_name == "NotSupportedHostInCluster" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6450726f70657274 => { // dPropert
            if type_name == "UnconfiguredPropertyValue" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6544656661756c74 => { // eDefault
            if type_name == "IncompatibleDefaultDevice" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x654d616e69666573 => { // eManifes
            if type_name == "HttpNfcLeaseManifestEntry" {
                Some(|ds, _| {
                    let obj: HttpNfcLeaseManifestEntry = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x656453657373696f => { // edSessio
            if type_name == "ServerStartedSessionEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x656454696d656f75 => { // edTimeou
            if type_name == "HostCnxFailedTimeoutEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x65686176696f7246 => { // ehaviorF
            if type_name == "InvalidDrsBehaviorForFtVm" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x656d61696e696e67 => { // emaining
            if type_name == "DiskIsLastRemainingNonSSD" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x65724576656e7444 => { // erEventD
            if type_name == "HostTpmSignerEventDetails" {
                Some(|ds, _| {
                    let obj: HostTpmSignerEventDetails = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x65724970416c6c6f => { // erIpAllo
            if type_name == "IpPoolManagerIpAllocation" {
                Some(|ds, _| {
                    let obj: IpPoolManagerIpAllocation = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x657373696f6e4d65 => { // essionMe
            if type_name == "ProfileExpressionMetadata" {
                Some(|ds, _| {
                    let obj: ProfileExpressionMetadata = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6574335672646d61 => { // et3Vrdma
            if type_name == "VirtualVmxnet3VrdmaOption" {
                Some(|ds, _| {
                    let obj: VirtualVmxnet3VrdmaOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6574776f726b506f => { // etworkPo
            if type_name == "MismatchedNetworkPolicies" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x67654368616e6765 => { // geChange
            if type_name == "GlobalMessageChangedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6765724c6963656e => { // gerLicen
            if type_name == "LicenseManagerLicenseInfo" {
                Some(|ds, _| {
                    let obj: LicenseManagerLicenseInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6765724c6f63616c => { // gerLocal
            if type_name == "SessionManagerLocalTicket" {
                Some(|ds, _| {
                    let obj: SessionManagerLocalTicket = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6765725365727669 => { // gerServi
            if type_name == "ServiceManagerServiceInfo" {
                Some(|ds, _| {
                    let obj: ServiceManagerServiceInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x68616e6765427953 => { // hangeByS
            if type_name == "DisallowedChangeByService" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x69634861734e6f50 => { // icHasNoP
            if type_name == "FcoeFaultPnicHasNoPortSet" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x696365506e696342 => { // icePnicB
            if type_name == "HostRdmaDevicePnicBacking" {
                Some(|ds, _| {
                    let obj: HostRdmaDevicePnicBacking = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x696d654368616e67 => { // imeChang
            if type_name == "DvsPortRuntimeChangeEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x696e65426f6f744f => { // ineBootO
            if type_name == "VirtualMachineBootOptions" {
                Some(|ds, _| {
                    let obj: VirtualMachineBootOptions = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x696e654e6574776f => { // ineNetwo
            if type_name == "VirtualMachineNetworkInfo" {
                Some(|ds, _| {
                    let obj: VirtualMachineNetworkInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x696e6550726f6669 => { // ineProfi
            if type_name == "VirtualMachineProfileSpec" {
                Some(|ds, _| {
                    let obj: VirtualMachineProfileSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x696e6552756e7469 => { // ineRunti
            if type_name == "VirtualMachineRuntimeInfo" {
                Some(|ds, _| {
                    let obj: VirtualMachineRuntimeInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x696e6553746f7261 => { // ineStora
            if type_name == "VirtualMachineStorageInfo" {
                Some(|ds, _| {
                    let obj: VirtualMachineStorageInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x696e655669727475 => { // ineVirtu
            match type_name {
                "VirtualMachineVirtualNuma" => {
                    Some(|ds, _| {
                        let obj: VirtualMachineVirtualNuma = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "VirtualMachineVirtualPMem" => {
                    Some(|ds, _| {
                        let obj: VirtualMachineVirtualPMem = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x6972656d656e7473 => { // irements
            if type_name == "FeatureRequirementsNotMet" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x69727475616c4469 => { // irtualDi
            if type_name == "FileBackedVirtualDiskSpec" {
                Some(|ds, _| {
                    let obj: FileBackedVirtualDiskSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6b52756c65517561 => { // kRuleQua
            if type_name == "DvsIpNetworkRuleQualifier" {
                Some(|ds, _| {
                    let obj: DvsIpNetworkRuleQualifier = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6b61676543617061 => { // kageCapa
            if type_name == "SoftwarePackageCapability" {
                Some(|ds, _| {
                    let obj: SoftwarePackageCapability = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6c44656661756c74 => { // lDefault
            if type_name == "HostFirewallDefaultPolicy" {
                Some(|ds, _| {
                    let obj: HostFirewallDefaultPolicy = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6c4576656e744172 => { // lEventAr
            if type_name == "ResourcePoolEventArgument" {
                Some(|ds, _| {
                    let obj: ResourcePoolEventArgument = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6c5265736f757263 => { // lResourc
            if type_name == "ResourcePoolResourceUsage" {
                Some(|ds, _| {
                    let obj: ResourcePoolResourceUsage = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6c52756c65736574 => { // lRuleset
            if type_name == "HostFirewallRulesetIpList" {
                Some(|ds, _| {
                    let obj: HostFirewallRulesetIpList = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6c6544656c657465 => { // leDelete
            if type_name == "DatastoreFileDeletedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6c6553797374656d => { // leSystem
            if type_name == "HostLocalFileSystemVolume" {
                Some(|ds, _| {
                    let obj: HostLocalFileSystemVolume = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6c6c656c506f7274 => { // llelPort
            if type_name == "VirtualParallelPortOption" {
                Some(|ds, _| {
                    let obj: VirtualParallelPortOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6c6f636174696f6e => { // location
            if type_name == "StorageIOAllocationOption" {
                Some(|ds, _| {
                    let obj: StorageIoAllocationOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6d5769746844656c => { // mWithDel
            if type_name == "CannotMoveVmWithDeltaDisk" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6d61727951756963 => { // maryQuic
            if type_name == "HostListSummaryQuickStats" {
                Some(|ds, _| {
                    let obj: HostListSummaryQuickStats = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6e50726f67726573 => { // nProgres
            if type_name == "DvsUpgradeInProgressEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6e63654e6f744c69 => { // nceNotLi
            if type_name == "FaultToleranceNotLicensed" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6e64656e63795275 => { // ndencyRu
            if type_name == "ClusterDependencyRuleInfo" {
                Some(|ds, _| {
                    let obj: ClusterDependencyRuleInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6e654e6f74537570 => { // neNotSup
            if type_name == "SnapshotCloneNotSupported" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6e666f4261636b69 => { // nfoBacki
            if type_name == "BaseConfigInfoBackingInfo" {
                Some(|ds, _| {
                    let obj: BaseConfigInfoBackingInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6e674e6f74537570 => { // ngNotSup
            if type_name == "DeviceBackingNotSupported" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f676963436f6e74 => { // ogicCont
            match type_name {
                "VirtualBusLogicController" => {
                    Some(|ds, _| {
                        let obj: VirtualBusLogicController = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "VirtualLsiLogicController" => {
                    Some(|ds, _| {
                        let obj: VirtualLsiLogicController = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x6f6c6f6779496e74 => { // ologyInt
            match type_name {
                "HostNvmeTopologyInterface" => {
                    Some(|ds, _| {
                        let obj: HostNvmeTopologyInterface = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "HostScsiTopologyInterface" => {
                    Some(|ds, _| {
                        let obj: HostScsiTopologyInterface = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x6f6d706c69616e63 => { // omplianc
            if type_name == "LicenseNonComplianceEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f6e4576656e7444 => { // onEventD
            if type_name == "HostTpmOptionEventDetails" {
                Some(|ds, _| {
                    let obj: HostTpmOptionEventDetails = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f6e4c696d697452 => { // onLimitR
            match type_name {
                "NasConnectionLimitReached" => {
                    Some(|ds, type_name| {
                        let v = __MethodFaultVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                "MksConnectionLimitReached" => {
                    Some(|ds, type_name| {
                        let v = __MethodFaultVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                _ => None
            }
        },
        0x6f6e4c696e75784f => { // onLinuxO
            if type_name == "CustomizationLinuxOptions" {
                Some(|ds, _| {
                    let obj: CustomizationLinuxOptions = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f6e4e6f74537570 => { // onNotSup
            if type_name == "RDMConversionNotSupported" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f6e537461727465 => { // onStarte
            if type_name == "CustomizationStartedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f726b436f6e6e65 => { // orkConne
            if type_name == "HostNewNetworkConnectInfo" {
                Some(|ds, _| {
                    let obj: HostNewNetworkConnectInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f726d616e636553 => { // ormanceS
            if type_name == "StoragePerformanceSummary" {
                Some(|ds, _| {
                    let obj: StoragePerformanceSummary = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x705461736b536368 => { // pTaskSch
            if type_name == "AfterStartupTaskScheduler" {
                Some(|ds, _| {
                    let obj: AfterStartupTaskScheduler = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7061636543726561 => { // paceCrea
            if type_name == "NvdimmNamespaceCreateSpec" {
                Some(|ds, _| {
                    let obj: NvdimmNamespaceCreateSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7061636544656c65 => { // paceDele
            if type_name == "NvdimmNamespaceDeleteSpec" {
                Some(|ds, _| {
                    let obj: NvdimmNamespaceDeleteSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7065634261636b69 => { // pecBacki
            if type_name == "VslmCreateSpecBackingSpec" {
                Some(|ds, _| {
                    let obj: VslmCreateSpecBackingSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x706f727453706563 => { // portSpec
            match type_name {
                "OvfCreateImportSpecParams" => {
                    Some(|ds, _| {
                        let obj: OvfCreateImportSpecParams = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "OvfCreateImportSpecResult" => {
                    Some(|ds, _| {
                        let obj: OvfCreateImportSpecResult = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x70706f7274656442 => { // pportedB
            if type_name == "EVCModeUnsupportedByHosts" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7075436170616269 => { // puCapabi
            if type_name == "HostSharedGpuCapabilities" {
                Some(|ds, _| {
                    let obj: HostSharedGpuCapabilities = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x72436f6e7461696e => { // rContain
            if type_name == "VasaProviderContainerSpec" {
                Some(|ds, _| {
                    let obj: VasaProviderContainerSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7254637050617261 => { // rTcpPara
            if type_name == "HostNvmeOverTcpParameters" {
                Some(|ds, _| {
                    let obj: HostNvmeOverTcpParameters = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7265437265617465 => { // reCreate
            if type_name == "VMFSDatastoreCreatedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7265546f706f6c6f => { // reTopolo
            if type_name == "HostPlugStoreTopologyPath" {
                Some(|ds, _| {
                    let obj: HostPlugStoreTopologyPath = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x72697074696f6e53 => { // riptionS
            if type_name == "ProfileDescriptionSection" {
                Some(|ds, _| {
                    let obj: ProfileDescriptionSection = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x726e657443617264 => { // rnetCard
            if type_name == "VirtualEthernetCardOption" {
                Some(|ds, _| {
                    let obj: VirtualEthernetCardOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7274437265617465 => { // rtCreate
            if type_name == "HostLocalPortCreatedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x72766572436f6e66 => { // rverConf
            if type_name == "NoLicenseServerConfigured" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x73616c6c6f776564 => { // sallowed
            if type_name == "OperationDisallowedOnHost" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x73616e456e61626c => { // sanEnabl
            if type_name == "CannotMoveVsanEnabledHost" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7363726970746f72 => { // scriptor
            match type_name {
                "OvfCreateDescriptorParams" => {
                    Some(|ds, _| {
                        let obj: OvfCreateDescriptorParams = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "OvfCreateDescriptorResult" => {
                    Some(|ds, _| {
                        let obj: OvfCreateDescriptorResult = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x7365457870697265 => { // seExpire
            if type_name == "ServerLicenseExpiredEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x736b437265617465 => { // skCreate
            if type_name == "ScheduledTaskCreatedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x736b52656d6f7665 => { // skRemove
            if type_name == "ScheduledTaskRemovedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x736b537461727465 => { // skStarte
            if type_name == "ScheduledTaskStartedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7374436f6e6e6563 => { // stConnec
            if type_name == "GatewayToHostConnectFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x73745761726e696e => { // stWarnin
            if type_name == "MigrationHostWarningEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x744461746173746f => { // tDatasto
            if type_name == "DasHeartbeatDatastoreInfo" {
                Some(|ds, _| {
                    let obj: DasHeartbeatDatastoreInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x74656d4167656e74 => { // temAgent
            if type_name == "HostSnmpSystemAgentLimits" {
                Some(|ds, _| {
                    let obj: HostSnmpSystemAgentLimits = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7474656d70746564 => { // ttempted
            if type_name == "ClusterNotAttemptedVmInfo" {
                Some(|ds, _| {
                    let obj: ClusterNotAttemptedVmInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7475537570706f72 => { // tuSuppor
            if type_name == "UplinkPortMtuSupportEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7563636573736675 => { // uccessfu
            if type_name == "VmRelayoutSuccessfulEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x75674e6f74537570 => { // ugNotSup
            match type_name {
                "DeviceHotPlugNotSupported" => {
                    Some(|ds, type_name| {
                        let v = __MethodFaultVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                "MemoryHotPlugNotSupported" => {
                    Some(|ds, type_name| {
                        let v = __MethodFaultVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                _ => None
            }
        },
        0x756d65486f737456 => { // umeHostV
            if type_name == "HostVvolVolumeHostVvolNQN" {
                Some(|ds, _| {
                    let obj: HostVvolVolumeHostVvolNqn = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x75726365436f6e66 => { // urceConf
            match type_name {
                "ComputeResourceConfigInfo" => {
                    Some(|ds, _| {
                        let obj: ComputeResourceConfigInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "ComputeResourceConfigSpec" => {
                    Some(|ds, _| {
                        let obj: ComputeResourceConfigSpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x75726365436f6e73 => { // urceCons
            if type_name == "OvfHostResourceConstraint" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x75734368616e6765 => { // usChange
            if type_name == "ClusterStatusChangedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7665436c6f6e6573 => { // veClones
            if type_name == "TooManyNativeClonesOnFile" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7673436f6e666967 => { // vsConfig
            if type_name == "DVSManagerDvsConfigTarget" {
                Some(|ds, _| {
                    let obj: DvsManagerDvsConfigTarget = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7843757374526573 => { // xCustRes
            if type_name == "MissingLinuxCustResources" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7941646d696e6973 => { // yAdminis
            if type_name == "RestrictedByAdministrator" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x795461736b536368 => { // yTaskSch
            if type_name == "MonthlyByDayTaskScheduler" {
                Some(|ds, _| {
                    let obj: MonthlyByDayTaskScheduler = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_object_deserializer_26<'de, A: de::MapAccess<'de>>(type_name: &str) -> Option<fn(de::value::MapAccessDeserializer<A>, &str) -> Result<VimAny, A::Error>> {
    let s = &type_name[7..15];
    let Some(type_ord) = to_u64(s) else {
        return None;
    };
    match type_ord {
        0x4170706c7950726f => { // ApplyPro
            if type_name == "ProfileApplyProfileElement" {
                Some(|ds, _| {
                    let obj: ProfileApplyProfileElement = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4364726f6d49736f => { // CdromIso
            if type_name == "VirtualCdromIsoBackingInfo" {
                Some(|ds, _| {
                    let obj: VirtualCdromIsoBackingInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x436c6f6e65644e6f => { // ClonedNo
            if type_name == "VmBeingClonedNoFolderEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x436f6d6d616e6445 => { // CommandE
            if type_name == "HostTpmCommandEventDetails" {
                Some(|ds, _| {
                    let obj: HostTpmCommandEventDetails = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x436f6d706f736974 => { // Composit
            if type_name == "ProfileCompositeExpression" {
                Some(|ds, _| {
                    let obj: ProfileCompositeExpression = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4461746173746f72 => { // Datastor
            if type_name == "ClusterDatastoreUpdateSpec" {
                Some(|ds, _| {
                    let obj: ClusterDatastoreUpdateSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4465766963654261 => { // DeviceBa
            if type_name == "VirtualDeviceBackingOption" {
                Some(|ds, _| {
                    let obj: VirtualDeviceBackingOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4465766963654275 => { // DeviceBu
            if type_name == "VirtualDeviceBusSlotOption" {
                Some(|ds, _| {
                    let obj: VirtualDeviceBusSlotOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x446576696365436f => { // DeviceCo
            if type_name == "VirtualDeviceConnectOption" {
                Some(|ds, _| {
                    let obj: VirtualDeviceConnectOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x446f776e67726164 => { // Downgrad
            if type_name == "LicenseDowngradeDisallowed" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4472734175746f6d => { // DrsAutom
            if type_name == "StorageDrsAutomationConfig" {
                Some(|ds, _| {
                    let obj: StorageDrsAutomationConfig = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4472734661756c74 => { // DrsFault
            if type_name == "ClusterDrsFaultsFaultsByVm" {
                Some(|ds, _| {
                    let obj: ClusterDrsFaultsFaultsByVm = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x447273506f645365 => { // DrsPodSe
            if type_name == "StorageDrsPodSelectionSpec" {
                Some(|ds, _| {
                    let obj: StorageDrsPodSelectionSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x44727352656c6f63 => { // DrsReloc
            if type_name == "StorageDrsRelocateDisabled" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x456e746974794576 => { // EntityEv
            if type_name == "ManagedEntityEventArgument" {
                Some(|ds, _| {
                    let obj: ManagedEntityEventArgument = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4578697465645061 => { // ExitedPa
            if type_name == "DvsPortExitedPassthruEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4661696c65644e6f => { // FailedNo
            match type_name {
                "HostCnxFailedNoAccessEvent" => {
                    Some(|ds, type_name| {
                        let v = __EventVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                "HostCnxFailedNotFoundEvent" => {
                    Some(|ds, type_name| {
                        let v = __EventVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                _ => None
            }
        },
        0x466978656453697a => { // FixedSiz
            if type_name == "ClusterFixedSizeSlotPolicy" {
                Some(|ds, _| {
                    let obj: ClusterFixedSizeSlotPolicy = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x46745365636f6e64 => { // FtSecond
            if type_name == "PowerOnFtSecondaryTimedout" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x486f7374436f6e6e => { // HostConn
            if type_name == "InvalidHostConnectionState" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x494445436f6e7472 => { // IDEContr
            if type_name == "VirtualIDEControllerOption" {
                Some(|ds, _| {
                    let obj: VirtualIdeControllerOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x496e746572666163 => { // Interfac
            if type_name == "VmotionInterfaceNotEnabled" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4c65617665506f72 => { // LeavePor
            if type_name == "DvsPortLeavePortgroupEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4c6963656e736545 => { // LicenseE
            if type_name == "VMotionLicenseExpiredEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4c6f6361746f724e => { // LocatorN
            if type_name == "ServiceLocatorNamePassword" {
                Some(|ds, _| {
                    let obj: ServiceLocatorNamePassword = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4d616368696e6541 => { // MachineA
            if type_name == "VirtualMachineAffinityInfo" {
                Some(|ds, _| {
                    let obj: VirtualMachineAffinityInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4d616368696e6543 => { // MachineC
            if type_name == "VirtualMachineConfigOption" {
                Some(|ds, _| {
                    let obj: VirtualMachineConfigOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4d616368696e6544 => { // MachineD
            if type_name == "VirtualMachineDvxClassInfo" {
                Some(|ds, _| {
                    let obj: VirtualMachineDvxClassInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4d616368696e6546 => { // MachineF
            if type_name == "VirtualMachineFileLayoutEx" {
                Some(|ds, _| {
                    let obj: VirtualMachineFileLayoutEx = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4d616368696e6547 => { // MachineG
            if type_name == "VirtualMachineGuestSummary" {
                Some(|ds, _| {
                    let obj: VirtualMachineGuestSummary = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4d616368696e6550 => { // MachineP
            if type_name == "VirtualMachineParallelInfo" {
                Some(|ds, _| {
                    let obj: VirtualMachineParallelInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4d616368696e6551 => { // MachineQ
            if type_name == "VirtualMachineQuestionInfo" {
                Some(|ds, _| {
                    let obj: VirtualMachineQuestionInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4d616368696e6552 => { // MachineR
            if type_name == "VirtualMachineRelocateSpec" {
                Some(|ds, _| {
                    let obj: VirtualMachineRelocateSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4d616368696e6553 => { // MachineS
            match type_name {
                "VirtualMachineSnapshotInfo" => {
                    Some(|ds, _| {
                        let obj: VirtualMachineSnapshotInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "VirtualMachineSnapshotTree" => {
                    Some(|ds, _| {
                        let obj: VirtualMachineSnapshotTree = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x4e69634d616e6167 => { // NicManag
            if type_name == "VirtualNicManagerNetConfig" {
                Some(|ds, _| {
                    let obj: VirtualNicManagerNetConfig = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4f66664f6e49736f => { // OffOnIso
            if type_name == "VmPowerOffOnIsolationEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4f66666c6f616443 => { // OffloadC
            if type_name == "HostNetOffloadCapabilities" {
                Some(|ds, _| {
                    let obj: HostNetOffloadCapabilities = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x504349436f6e7472 => { // PCIContr
            if type_name == "VirtualPCIControllerOption" {
                Some(|ds, _| {
                    let obj: VirtualPciControllerOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x505332436f6e7472 => { // PS2Contr
            if type_name == "VirtualPS2ControllerOption" {
                Some(|ds, _| {
                    let obj: VirtualPs2ControllerOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x506f7765724d616e => { // PowerMan
            if type_name == "HostCpuPowerManagementInfo" {
                Some(|ds, _| {
                    let obj: HostCpuPowerManagementInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x5265737461727443 => { // RestartC
            if type_name == "VmMaxFTRestartCountReached" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x53494f436f6e7472 => { // SIOContr
            if type_name == "VirtualSIOControllerOption" {
                Some(|ds, _| {
                    let obj: VirtualSioControllerOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x53797374656d564d => { // SystemVM
            match type_name {
                "ClusterSystemVMsConfigInfo" => {
                    Some(|ds, _| {
                        let obj: ClusterSystemVMsConfigInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "ClusterSystemVMsConfigSpec" => {
                    Some(|ds, _| {
                        let obj: ClusterSystemVMsConfigSpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x555342436f6e7472 => { // USBContr
            if type_name == "VirtualUSBControllerOption" {
                Some(|ds, _| {
                    let obj: VirtualUsbControllerOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x5553425553424261 => { // USBUSBBa
            if type_name == "VirtualUSBUSBBackingOption" {
                Some(|ds, _| {
                    let obj: VirtualUsbusbBackingOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x564d6f74696f6e4e => { // VMotionN
            if type_name == "StorageVMotionNotSupported" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x5653466561747572 => { // VSFeatur
            if type_name == "VMwareDVSFeatureCapability" {
                Some(|ds, _| {
                    let obj: VMwareDvsFeatureCapability = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x56534865616c7468 => { // VSHealth
            if type_name == "VMwareDVSHealthCheckConfig" {
                Some(|ds, _| {
                    let obj: VMwareDvsHealthCheckConfig = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x56657273696f6e45 => { // VersionE
            if type_name == "HostTpmVersionEventDetails" {
                Some(|ds, _| {
                    let obj: HostTpmVersionEventDetails = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x566d4f7263686573 => { // VmOrches
            match type_name {
                "ClusterVmOrchestrationInfo" => {
                    Some(|ds, _| {
                        let obj: ClusterVmOrchestrationInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "ClusterVmOrchestrationSpec" => {
                    Some(|ds, _| {
                        let obj: ClusterVmOrchestrationSpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x566d6f74696f6e49 => { // VmotionI
            if type_name == "StorageVmotionIncompatible" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x616e61676572486f => { // anagerHo
            if type_name == "CryptoManagerHostKeyStatus" {
                Some(|ds, _| {
                    let obj: CryptoManagerHostKeyStatus = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6173746f72654578 => { // astoreEx
            match type_name {
                "VMFSDatastoreExpandedEvent" => {
                    Some(|ds, type_name| {
                        let v = __EventVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                "VMFSDatastoreExtendedEvent" => {
                    Some(|ds, type_name| {
                        let v = __EventVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                _ => None
            }
        },
        0x626c6541646d696e => { // bleAdmin
            if type_name == "HostEnableAdminFailedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6369656e74506572 => { // cientPer
            if type_name == "InsufficientPerCpuCapacity" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6369656e74526573 => { // cientRes
            if type_name == "InsufficientResourcesFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x64456c656d656e74 => { // dElement
            if type_name == "ExtendedElementDescription" {
                Some(|ds, _| {
                    let obj: ExtendedElementDescription = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x64486f73744f7065 => { // dHostOpe
            if type_name == "CanceledHostOperationEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x64546f5265626f6f => { // dToReboo
            if type_name == "VmFailedToRebootGuestEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x654265696e675570 => { // eBeingUp
            if type_name == "TemplateBeingUpgradedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x654f626a65637441 => { // eObjectA
            if type_name == "VStorageObjectAssociations" {
                Some(|ds, _| {
                    let obj: VStorageObjectAssociations = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x654f626a65637453 => { // eObjectS
            if type_name == "VStorageObjectSnapshotInfo" {
                Some(|ds, _| {
                    let obj: VStorageObjectSnapshotInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x654f76657252646d => { // eOverRdm
            if type_name == "HostNvmeOverRdmaParameters" {
                Some(|ds, _| {
                    let obj: HostNvmeOverRdmaParameters = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x65506f6f6c446573 => { // ePoolDes
            if type_name == "ResourcePoolDestroyedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6554696d65537973 => { // eTimeSys
            if type_name == "HostDateTimeSystemTimeZone" {
                Some(|ds, _| {
                    let obj: HostDateTimeSystemTimeZone = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6555706772616465 => { // eUpgrade
            if type_name == "TemplateUpgradeFailedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x65645461736b4576 => { // edTaskEv
            if type_name == "ScheduledTaskEventArgument" {
                Some(|ds, _| {
                    let obj: ScheduledTaskEventArgument = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x656e7361626c6552 => { // ensableR
            if type_name == "HostLicensableResourceInfo" {
                Some(|ds, _| {
                    let obj: HostLicensableResourceInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x65724d61696e7465 => { // erMainte
            if type_name == "HostEnterMaintenanceResult" {
                Some(|ds, _| {
                    let obj: HostEnterMaintenanceResult = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6572526566757365 => { // erRefuse
            if type_name == "CAMServerRefusedConnection" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x65726174696f6e73 => { // erations
            if type_name == "GuestOperationsUnavailable" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6574536e61707368 => { // etSnapsh
            if type_name == "WillResetSnapshotDirectory" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6574776f726b5275 => { // etworkRu
            if type_name == "DvsMacNetworkRuleQualifier" {
                Some(|ds, _| {
                    let obj: DvsMacNetworkRuleQualifier = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x66696346696c7465 => { // ficFilte
            if type_name == "DvsTrafficFilterConfigSpec" {
                Some(|ds, _| {
                    let obj: DvsTrafficFilterConfigSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x66696746636f6543 => { // figFcoeC
            if type_name == "FcoeConfigFcoeCapabilities" {
                Some(|ds, _| {
                    let obj: FcoeConfigFcoeCapabilities = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x666f437573746f6d => { // foCustom
            if type_name == "GuestInfoCustomizationInfo" {
                Some(|ds, _| {
                    let obj: GuestInfoCustomizationInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6746696c65456e63 => { // gFileEnc
            if type_name == "VmConfigFileEncryptionInfo" {
                Some(|ds, _| {
                    let obj: VmConfigFileEncryptionInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6765725068797369 => { // gerPhysi
            if type_name == "DVSManagerPhysicalNicsList" {
                Some(|ds, _| {
                    let obj: DvsManagerPhysicalNicsList = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6769737472794b65 => { // gistryKe
            if type_name == "GuestRegistryKeyHasSubkeys" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6769737472795661 => { // gistryVa
            if type_name == "GuestRegistryValueNotFound" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6865436f6e666967 => { // heConfig
            match type_name {
                "HostCacheConfigurationInfo" => {
                    Some(|ds, _| {
                        let obj: HostCacheConfigurationInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "HostCacheConfigurationSpec" => {
                    Some(|ds, _| {
                        let obj: HostCacheConfigurationSpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x69656c6444656652 => { // ieldDefR
            match type_name {
                "CustomFieldDefRemovedEvent" => {
                    Some(|ds, type_name| {
                        let v = __EventVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                "CustomFieldDefRenamedEvent" => {
                    Some(|ds, type_name| {
                        let v = __EventVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                _ => None
            }
        },
        0x696d756d41646d69 => { // imumAdmi
            if type_name == "AuthMinimumAdminPermission" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x696e675374616e64 => { // ingStand
            if type_name == "DrsExitingStandbyModeEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6b6564506f72744e => { // kedPortN
            if type_name == "FileBackedPortNotSupported" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6c556e737570706f => { // lUnsuppo
            if type_name == "OvfToXmlUnsupportedElement" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6c6572616e63654e => { // leranceN
            if type_name == "FaultToleranceNotSameBuild" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6c6572616e636556 => { // leranceV
            if type_name == "FaultToleranceVMConfigSpec" {
                Some(|ds, _| {
                    let obj: FaultToleranceVmConfigSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6c72656164794469 => { // lreadyDi
            if type_name == "MethodAlreadyDisabledFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6e61626c65566d63 => { // nableVmc
            if type_name == "CannotEnableVmcpForCluster" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6e63655575696443 => { // nceUuidC
            if type_name == "VmInstanceUuidChangedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6e6462794d6f6465 => { // ndbyMode
            if type_name == "ExitStandbyModeFailedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6e646f777346696c => { // ndowsFil
            if type_name == "GuestWindowsFileAttributes" {
                Some(|ds, _| {
                    let obj: GuestWindowsFileAttributes = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6e656374496e666f => { // nectInfo
            if type_name == "HostConnectInfoNetworkInfo" {
                Some(|ds, _| {
                    let obj: HostConnectInfoNetworkInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f53746172744d61 => { // oStartMa
            if type_name == "HostAutoStartManagerConfig" {
                Some(|ds, _| {
                    let obj: HostAutoStartManagerConfig = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f7274566c616e54 => { // ortVlanT
            if type_name == "UplinkPortVlanTrunkedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f76654661756c74 => { // oveFault
            if type_name == "CannotMoveFaultToleranceVm" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f776e4f6e49736f => { // ownOnIso
            if type_name == "VmShutdownOnIsolationEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x706c69616e636543 => { // plianceC
            if type_name == "HostComplianceCheckedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x706f727465645374 => { // portedSt
            if type_name == "VmUnsupportedStartingEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x70706f7274656444 => { // pportedD
            if type_name == "OvfUnsupportedDeviceExport" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x70706f7274656445 => { // pportedE
            if type_name == "OvfUnsupportedElementValue" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x70744e6574776f72 => { // ptNetwor
            if type_name == "DvsAcceptNetworkRuleAction" {
                Some(|ds, _| {
                    let obj: DvsAcceptNetworkRuleAction = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x726167654f706572 => { // rageOper
            if type_name == "HostStorageOperationalInfo" {
                Some(|ds, _| {
                    let obj: HostStorageOperationalInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7263655265616c6c => { // rceReall
            if type_name == "VmResourceReallocatedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x72654e6f74577269 => { // reNotWri
            if type_name == "DatastoreNotWritableOnHost" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7265645374616e64 => { // redStand
            if type_name == "DrsEnteredStandbyModeEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7279566d416c7265 => { // ryVmAlre
            if type_name == "SecondaryVmAlreadyDisabled" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7373696f6e466169 => { // ssionFai
            match type_name {
                "EVCAdmissionFailedCPUModel" => {
                    Some(|ds, type_name| {
                        let v = __MethodFaultVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                "EVCAdmissionFailedVmActive" => {
                    Some(|ds, type_name| {
                        let v = __MethodFaultVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                _ => None
            }
        },
        0x73776f7264417574 => { // swordAut
            if type_name == "NamePasswordAuthentication" {
                Some(|ds, _| {
                    let obj: NamePasswordAuthentication = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x74436c7573746572 => { // tCluster
            if type_name == "VsanHostClusterStatusState" {
                Some(|ds, _| {
                    let obj: VsanHostClusterStatusState = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x74486f73744f7065 => { // tHostOpe
            if type_name == "TimedOutHostOperationEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x746173746f726543 => { // tastoreC
            if type_name == "LocalDatastoreCreatedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x74656d52656d6564 => { // temRemed
            if type_name == "HostSystemRemediationState" {
                Some(|ds, _| {
                    let obj: HostSystemRemediationState = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7465724261736963 => { // terBasic
            if type_name == "DatacenterBasicConnectInfo" {
                Some(|ds, _| {
                    let obj: DatacenterBasicConnectInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7465724d69736d61 => { // terMisma
            if type_name == "DatacenterMismatchArgument" {
                Some(|ds, _| {
                    let obj: DatacenterMismatchArgument = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7468537461747573 => { // thStatus
            if type_name == "DvsHealthStatusChangeEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7469634d616e6167 => { // ticManag
            if type_name == "DiagnosticManagerLogHeader" {
                Some(|ds, _| {
                    let obj: DiagnosticManagerLogHeader = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x74696f6e4469736b => { // tionDisk
            if type_name == "ReplicationDiskConfigFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7469706174685374 => { // tipathSt
            if type_name == "HostMultipathStateInfoPath" {
                Some(|ds, _| {
                    let obj: HostMultipathStateInfoPath = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x75616c4370757345 => { // ualCpusE
            if type_name == "NumVirtualCpusExceedsLimit" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x75616c4370757349 => { // ualCpusI
            if type_name == "NumVirtualCpusIncompatible" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x75616c437075734e => { // ualCpusN
            if type_name == "NumVirtualCpusNotSupported" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x756c74566e696341 => { // ultVnicA
            if type_name == "IscsiFaultVnicAlreadyBound" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x756c74566e696348 => { // ultVnicH
            if type_name == "IscsiFaultVnicHasNoUplinks" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x756d6572556e6465 => { // umerUnde
            if type_name == "OvfConsumerUndefinedPrefix" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x756d657256616c69 => { // umerVali
            if type_name == "OvfConsumerValidationFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7570526573746f72 => { // upRestor
            if type_name == "DVSBackupRestoreCapability" {
                Some(|ds, _| {
                    let obj: DvsBackupRestoreCapability = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7570706f72746564 => { // upported
            if type_name == "RDMNotSupportedOnDatastore" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x776f726b5265736f => { // workReso
            if type_name == "HostNetworkResourceRuntime" {
                Some(|ds, _| {
                    let obj: HostNetworkResourceRuntime = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7a6174696f6e436c => { // zationCl
            if type_name == "CustomizationCloudinitPrep" {
                Some(|ds, _| {
                    let obj: CustomizationCloudinitPrep = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7a6174696f6e4775 => { // zationGu
            if type_name == "CustomizationGuiUnattended" {
                Some(|ds, _| {
                    let obj: CustomizationGuiUnattended = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7a6174696f6e4970 => { // zationIp
            if type_name == "CustomizationIpV6Generator" {
                Some(|ds, _| {
                    let obj: CustomizationIpV6Generator = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7a6174696f6e5379 => { // zationSy
            if type_name == "CustomizationSysprepFailed" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_object_deserializer_27<'de, A: de::MapAccess<'de>>(type_name: &str) -> Option<fn(de::value::MapAccessDeserializer<A>, &str) -> Result<VimAny, A::Error>> {
    let s = &type_name[7..15];
    let Some(type_ord) = to_u64(s) else {
        return None;
    };
    match type_ord {
        0x41484349436f6e74 => { // AHCICont
            if type_name == "VirtualAHCIControllerOption" {
                Some(|ds, _| {
                    let obj: VirtualAhciControllerOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x416666696e697479 => { // Affinity
            if type_name == "InvalidAffinitySettingFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x416e746941666669 => { // AntiAffi
            if type_name == "ClusterAntiAffinityRuleSpec" {
                Some(|ds, _| {
                    let obj: ClusterAntiAffinityRuleSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4170706c7950726f => { // ApplyPro
            if type_name == "ProfileApplyProfileProperty" {
                Some(|ds, _| {
                    let obj: ProfileApplyProfileProperty = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x436f646553706563 => { // CodeSpec
            if type_name == "UsbScanCodeSpecModifierType" {
                Some(|ds, _| {
                    let obj: UsbScanCodeSpecModifierType = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x436f6e6669677572 => { // Configur
            if type_name == "NotUserConfigurableProperty" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x436f6e7365637574 => { // Consecut
            if type_name == "TooManyConsecutiveOverrides" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4465766963655063 => { // DevicePc
            if type_name == "VirtualDevicePciBusSlotInfo" {
                Some(|ds, _| {
                    let obj: VirtualDevicePciBusSlotInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4465766963655552 => { // DeviceUR
            if type_name == "VirtualDeviceURIBackingInfo" {
                Some(|ds, _| {
                    let obj: VirtualDeviceUriBackingInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4469736b4d6f6465 => { // DiskMode
            if type_name == "VirtualDiskModeNotSupported" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4472734862724469 => { // DrsHbrDi
            if type_name == "StorageDrsHbrDiskNotMovable" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x447273486d734d6f => { // DrsHmsMo
            if type_name == "StorageDrsHmsMoveInProgress" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x447273556e61626c => { // DrsUnabl
            if type_name == "StorageDrsUnableToMoveFiles" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x456e746572656450 => { // EnteredP
            if type_name == "DvsPortEnteredPassthruEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4661696c65644e6f => { // FailedNo
            if type_name == "HostCnxFailedNoLicenseEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4d616368696e6543 => { // MachineC
            match type_name {
                "VirtualMachineConfigSummary" => {
                    Some(|ds, _| {
                        let obj: VirtualMachineConfigSummary = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "VirtualMachineCpuIdInfoSpec" => {
                    Some(|ds, _| {
                        let obj: VirtualMachineCpuIdInfoSpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x4d616368696e6544 => { // MachineD
            if type_name == "VirtualMachineDatastoreInfo" {
                Some(|ds, _| {
                    let obj: VirtualMachineDatastoreInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4d616368696e654d => { // MachineM
            if type_name == "VirtualMachineMksConnection" {
                Some(|ds, _| {
                    let obj: VirtualMachineMksConnection = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4d616368696e6553 => { // MachineS
            if type_name == "VirtualMachineSgxTargetInfo" {
                Some(|ds, _| {
                    let obj: VirtualMachineSgxTargetInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4d61696e74656e61 => { // Maintena
            if type_name == "EnteredMaintenanceModeEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4e564d45436f6e74 => { // NVMECont
            if type_name == "VirtualNVMEControllerOption" {
                Some(|ds, _| {
                    let obj: VirtualNvmeControllerOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x5043495061737374 => { // PCIPasst
            if type_name == "VirtualPCIPassthroughOption" {
                Some(|ds, _| {
                    let obj: VirtualPciPassthroughOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x506f696e74696e67 => { // Pointing
            if type_name == "VirtualPointingDeviceOption" {
                Some(|ds, _| {
                    let obj: VirtualPointingDeviceOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x506f6c6963794f70 => { // PolicyOp
            if type_name == "ProfilePolicyOptionMetadata" {
                Some(|ds, _| {
                    let obj: ProfilePolicyOptionMetadata = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x506f7765724f6e43 => { // PowerOnC
            if type_name == "MissingPowerOnConfiguration" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x507265636973696f => { // Precisio
            if type_name == "VirtualPrecisionClockOption" {
                Some(|ds, _| {
                    let obj: VirtualPrecisionClockOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x50726f66696c6552 => { // ProfileR
            if type_name == "InvalidProfileReferenceHost" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x50726f746f636f6c => { // Protocol
            if type_name == "VMotionProtocolIncompatible" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x5265736f75726365 => { // Resource
            if type_name == "ClusterResourceUsageSummary" {
                Some(|ds, _| {
                    let obj: ClusterResourceUsageSummary = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x53415441436f6e74 => { // SATACont
            if type_name == "VirtualSATAControllerOption" {
                Some(|ds, _| {
                    let obj: VirtualSataControllerOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x53435349436f6e74 => { // SCSICont
            if type_name == "VirtualSCSIControllerOption" {
                Some(|ds, _| {
                    let obj: VirtualScsiControllerOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x53657269616c697a => { // Serializ
            if type_name == "ProfileSerializedCreateSpec" {
                Some(|ds, _| {
                    let obj: ProfileSerializedCreateSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x5365727665724176 => { // ServerAv
            if type_name == "LicenseServerAvailableEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x53686f72744e616d => { // ShortNam
            if type_name == "HostGetShortNameFailedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x536f756e64426c61 => { // SoundBla
            if type_name == "VirtualSoundBlaster16Option" {
                Some(|ds, _| {
                    let obj: VirtualSoundBlaster16Option = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x546f6c6572616e63 => { // Toleranc
            if type_name == "VmFaultToleranceConfigIssue" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x556e696e7374616c => { // Uninstal
            if type_name == "VcAgentUninstallFailedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x57696e646f777343 => { // WindowsC
            if type_name == "MissingWindowsCustResources" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x61636b496e666f44 => { // ackInfoD
            if type_name == "NetIpStackInfoDefaultRouter" {
                Some(|ds, _| {
                    let obj: NetIpStackInfoDefaultRouter = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x61636b6564566972 => { // ackedVir
            if type_name == "DeviceBackedVirtualDiskSpec" {
                Some(|ds, _| {
                    let obj: DeviceBackedVirtualDiskSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x616c41757468656e => { // alAuthen
            if type_name == "HostLocalAuthenticationInfo" {
                Some(|ds, _| {
                    let obj: HostLocalAuthenticationInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6265724865616c74 => { // berHealt
            if type_name == "HostMemberHealthCheckResult" {
                Some(|ds, _| {
                    let obj: HostMemberHealthCheckResult = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x634e6574776f726b => { // cNetwork
            if type_name == "HostPnicNetworkResourceInfo" {
                Some(|ds, _| {
                    let obj: HostPnicNetworkResourceInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6369656e744e6574 => { // cientNet
            if type_name == "InsufficientNetworkCapacity" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6369656e74537461 => { // cientSta
            if type_name == "InsufficientStandbyResource" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x636f766572795072 => { // coveryPr
            if type_name == "LinkDiscoveryProtocolConfig" {
                Some(|ds, _| {
                    let obj: LinkDiscoveryProtocolConfig = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6446726f6d506174 => { // dFromPat
            if type_name == "VmReloadFromPathFailedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x64546f5374616e64 => { // dToStand
            if type_name == "VmFailedToStandbyGuestEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6479457869737473 => { // dyExists
            if type_name == "VmAlreadyExistsInDatacenter" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x655472616e73706f => { // eTranspo
            if type_name == "HostNvmeTransportParameters" {
                Some(|ds, _| {
                    let obj: HostNvmeTransportParameters = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6556696f436f7272 => { // eVioCorr
            if type_name == "SoftRuleVioCorrectionImpact" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x65645461736b436f => { // edTaskCo
            if type_name == "ScheduledTaskCompletedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6572546872656164 => { // erThread
            if type_name == "HostHyperThreadScheduleInfo" {
                Some(|ds, _| {
                    let obj: HostHyperThreadScheduleInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x657274795175616c => { // ertyQual
            if type_name == "OvfPropertyQualifierIgnored" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6574776f726b496e => { // etworkIn
            if type_name == "LegacyNetworkInterfaceInUse" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6666696e69747952 => { // ffinityR
            if type_name == "VmHostAffinityRuleViolation" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x66696746636f6553 => { // figFcoeS
            if type_name == "FcoeConfigFcoeSpecification" {
                Some(|ds, _| {
                    let obj: FcoeConfigFcoeSpecification = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x666f566972747561 => { // foVirtua
            if type_name == "GuestInfoVirtualDiskMapping" {
                Some(|ds, _| {
                    let obj: GuestInfoVirtualDiskMapping = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6753746f7265546f => { // gStoreTo
            match type_name {
                "HostPlugStoreTopologyDevice" => {
                    Some(|ds, _| {
                        let obj: HostPlugStoreTopologyDevice = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "HostPlugStoreTopologyPlugin" => {
                    Some(|ds, _| {
                        let obj: HostPlugStoreTopologyPlugin = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "HostPlugStoreTopologyTarget" => {
                    Some(|ds, _| {
                        let obj: HostPlugStoreTopologyTarget = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x6765725265706c69 => { // gerRepli
            if type_name == "HbrManagerReplicationVmInfo" {
                Some(|ds, _| {
                    let obj: HbrManagerReplicationVmInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x68616e6765567361 => { // hangeVsa
            if type_name == "CannotChangeVsanClusterUuid" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x68656e7469636174 => { // henticat
            if type_name == "HostAuthenticationStoreInfo" {
                Some(|ds, _| {
                    let obj: HostAuthenticationStoreInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x69635265736f7572 => { // icResour
            if type_name == "DvsVmVnicResourceAllocation" {
                Some(|ds, _| {
                    let obj: DvsVmVnicResourceAllocation = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x69676e6174757265 => { // ignature
            if type_name == "HostResignatureRescanResult" {
                Some(|ds, _| {
                    let obj: HostResignatureRescanResult = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x696c654f7074696f => { // ileOptio
            if type_name == "AnswerFileOptionsCreateSpec" {
                Some(|ds, _| {
                    let obj: AnswerFileOptionsCreateSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x696f6e496e636f6d => { // ionIncom
            if type_name == "DrsVmotionIncompatibleFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6b436f6e66696775 => { // kConfigu
            if type_name == "HostDiskConfigurationResult" {
                Some(|ds, _| {
                    let obj: HostDiskConfigurationResult = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6b50617274697469 => { // kPartiti
            match type_name {
                "HostDiskPartitionAttributes" => {
                    Some(|ds, _| {
                        let obj: HostDiskPartitionAttributes = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "HostDiskPartitionBlockRange" => {
                    Some(|ds, _| {
                        let obj: HostDiskPartitionBlockRange = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x6c566f6c756d6553 => { // lVolumeS
            if type_name == "HostVvolVolumeSpecification" {
                Some(|ds, _| {
                    let obj: HostVvolVolumeSpecification = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6c6572616e636543 => { // leranceC
            if type_name == "FaultToleranceCannotEditMem" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6e63655575696441 => { // nceUuidA
            if type_name == "VmInstanceUuidAssignedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6e63655575696443 => { // nceUuidC
            if type_name == "VmInstanceUuidConflictEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f636b4661756c74 => { // ockFault
            if type_name == "FailToLockFaultToleranceVMs" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f6d70617469626c => { // ompatibl
            if type_name == "VsanIncompatibleDiskMapping" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f6e5265736f7572 => { // onResour
            if type_name == "MigrationResourceErrorEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f6e6e656374696f => { // onnectio
            if type_name == "HostReconnectionFailedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f72746564486f73 => { // ortedHos
            match type_name {
                "NotSupportedHostForChecksum" => {
                    Some(|ds, type_name| {
                        let v = __MethodFaultVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                "NotSupportedHostForVmemFile" => {
                    Some(|ds, type_name| {
                        let v = __MethodFaultVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                "NotSupportedHostInHACluster" => {
                    Some(|ds, type_name| {
                        let v = __MethodFaultVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                _ => None
            }
        },
        0x706c696e6b506f72 => { // plinkPor
            if type_name == "VMwareUplinkPortOrderPolicy" {
                Some(|ds, _| {
                    let obj: VMwareUplinkPortOrderPolicy = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x726552656d6f7665 => { // reRemove
            if type_name == "DatastoreRemovedOnHostEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x726552656e616d65 => { // reRename
            if type_name == "DatastoreRenamedOnHostEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x72696e675374616e => { // ringStan
            if type_name == "DrsEnteringStandbyModeEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x727450726f6d6973 => { // rtPromis
            if type_name == "VspanPortPromiscChangeFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x736372697074696f => { // scriptio
            if type_name == "EventDescriptionEventDetail" {
                Some(|ds, _| {
                    let obj: EventDescriptionEventDetail = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x73686f744d6f7665 => { // shotMove
            if type_name == "HotSnapshotMoveNotSupported" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x736b466f726d6174 => { // skFormat
            if type_name == "DeltaDiskFormatNotSupported" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7373696f6e466169 => { // ssionFai
            if type_name == "EVCAdmissionFailedCPUVendor" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7374616c6c617469 => { // stallati
            if type_name == "ToolsInstallationInProgress" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x74656d5377617043 => { // temSwapC
            if type_name == "HostSystemSwapConfiguration" {
                Some(|ds, _| {
                    let obj: HostSystemSwapConfiguration = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7469634d616e6167 => { // ticManag
            if type_name == "DiagnosticManagerBundleInfo" {
                Some(|ds, _| {
                    let obj: DiagnosticManagerBundleInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x74696f6e496e666f => { // tionInfo
            if type_name == "ReplicationInfoDiskSettings" {
                Some(|ds, _| {
                    let obj: ReplicationInfoDiskSettings = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x746f726573436f6e => { // toresCon
            if type_name == "NoDatastoresConfiguredEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7473546f496e6163 => { // tsToInac
            if type_name == "RDMPointsToInaccessibleDisk" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7475616c53776974 => { // tualSwit
            match type_name {
                "HostVirtualSwitchAutoBridge" => {
                    Some(|ds, _| {
                        let obj: HostVirtualSwitchAutoBridge = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "HostVirtualSwitchBondBridge" => {
                    Some(|ds, _| {
                        let obj: HostVirtualSwitchBondBridge = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x757465436f6e6669 => { // uteConfi
            match type_name {
                "NetIpRouteConfigInfoGateway" => {
                    Some(|ds, _| {
                        let obj: NetIpRouteConfigInfoGateway = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "NetIpRouteConfigInfoIpRoute" => {
                    Some(|ds, _| {
                        let obj: NetIpRouteConfigInfoIpRoute = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x7a6174696f6e4164 => { // zationAd
            if type_name == "CustomizationAdapterMapping" {
                Some(|ds, _| {
                    let obj: CustomizationAdapterMapping = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7a6174696f6e4964 => { // zationId
            if type_name == "CustomizationIdentification" {
                Some(|ds, _| {
                    let obj: CustomizationIdentification = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7a6174696f6e556e => { // zationUn
            if type_name == "CustomizationUnknownFailure" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_object_deserializer_28<'de, A: de::MapAccess<'de>>(type_name: &str) -> Option<fn(de::value::MapAccessDeserializer<A>, &str) -> Result<VimAny, A::Error>> {
    let s = &type_name[11..15];
    let Some(type_ord) = to_u32(s) else {
        return None;
    };
    match type_ord {
        0x416c7265 => { // Alre
            if type_name == "SecondaryVmAlreadyRegistered" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4e657477 => { // Netw
            if type_name == "DvsGreEncapNetworkRuleAction" {
                Some(|ds, _| {
                    let obj: DvsGreEncapNetworkRuleAction = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x50617373 => { // Pass
            if type_name == "VirtualSCSIPassthroughOption" {
                Some(|ds, _| {
                    let obj: VirtualScsiPassthroughOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x5265636f => { // Reco
            if type_name == "DVPortgroupReconfiguredEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x53706563 => { // Spec
            if type_name == "NetIpConfigSpecIpAddressSpec" {
                Some(|ds, _| {
                    let obj: NetIpConfigSpecIpAddressSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x556e6465 => { // Unde
            if type_name == "OvfConsumerUndeclaredSection" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x56616c75 => { // Valu
            if type_name == "CustomFieldValueChangedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x56697274 => { // Virt
            if type_name == "DistributedVirtualSwitchInfo" {
                Some(|ds, _| {
                    let obj: DistributedVirtualSwitchInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x566d496e => { // VmIn
            if type_name == "ReplicationVmInProgressFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x61626c65 => { // able
            if type_name == "HostNoAvailableNetworksEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x616c7565 => { // alue
            if type_name == "OvfInvalidValueConfiguration" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x616e6167 => { // anag
            if type_name == "ClusterEVCManagerCheckResult" {
                Some(|ds, _| {
                    let obj: ClusterEvcManagerCheckResult = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x616e6e6f => { // anno
            if type_name == "StorageDrsCannotMoveTemplate" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x61746567 => { // ateg
            if type_name == "ClusterTagCategoryUpdateSpec" {
                Some(|ds, _| {
                    let obj: ClusterTagCategoryUpdateSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x61747572 => { // atur
            if type_name == "MigrationFeatureNotSupported" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x626c6546 => { // bleF
            if type_name == "NoHostSuitableForFtSecondary" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x626c6548 => { // bleH
            if type_name == "HostAssignableHardwareConfig" {
                Some(|ds, _| {
                    let obj: HostAssignableHardwareConfig = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x63617469 => { // cati
            if type_name == "HostSpecificationUpdateEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x63654465 => { // ceDe
            if type_name == "VirtualDeviceDeviceGroupInfo" {
                Some(|ds, _| {
                    let obj: VirtualDeviceDeviceGroupInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x63654669 => { // ceFi
            if type_name == "VirtualDeviceFileBackingInfo" {
                Some(|ds, _| {
                    let obj: VirtualDeviceFileBackingInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x63655069 => { // cePi
            if type_name == "VirtualDevicePipeBackingInfo" {
                Some(|ds, _| {
                    let obj: VirtualDevicePipeBackingInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6446726f => { // dFro
            if type_name == "DrsRecoveredFromFailureEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x64486f73 => { // dHos
            if type_name == "DisconnectedHostsBlockingEVC" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x64656e74 => { // dent
            if type_name == "HostSystemIdentificationInfo" {
                Some(|ds, _| {
                    let obj: HostSystemIdentificationInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x65486172 => { // eHar
            if type_name == "NoCompatibleHardAffinityHost" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x65536f66 => { // eSof
            if type_name == "NoCompatibleSoftAffinityHost" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x65644261 => { // edBa
            match type_name {
                "HostCnxFailedBadCcagentEvent" => {
                    Some(|ds, type_name| {
                        let v = __EventVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                "HostCnxFailedBadVersionEvent" => {
                    Some(|ds, type_name| {
                        let v = __EventVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                _ => None
            }
        },
        0x6564456c => { // edEl
            if type_name == "OvfDuplicatedElementBoundary" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x666f4f70 => { // foOp
            if type_name == "DpuStatusInfoOperationalInfo" {
                Some(|ds, _| {
                    let obj: DpuStatusInfoOperationalInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6746696c => { // gFil
            if type_name == "VVolVmConfigFileUpdateResult" {
                Some(|ds, _| {
                    let obj: VVolVmConfigFileUpdateResult = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x67657245 => { // gerE
            if type_name == "LicenseManagerEvaluationInfo" {
                Some(|ds, _| {
                    let obj: LicenseManagerEvaluationInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x67726164 => { // grad
            if type_name == "ToolsAutoUpgradeNotSupported" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x68757464 => { // hutd
            if type_name == "VmFailedToShutdownGuestEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x69636543 => { // iceC
            if type_name == "HostRdmaDeviceConnectionInfo" {
                Some(|ds, _| {
                    let obj: HostRdmaDeviceConnectionInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x69646572 => { // ider
            if type_name == "VimVasaProviderStatePerArray" {
                Some(|ds, _| {
                    let obj: VimVasaProviderStatePerArray = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6967496e => { // igIn
            if type_name == "NetDhcpConfigInfoDhcpOptions" {
                Some(|ds, _| {
                    let obj: NetDhcpConfigInfoDhcpOptions = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x696e6369 => { // inci
            if type_name == "DatastorePrincipalConfigured" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x696e6543 => { // ineC
            if type_name == "VirtualMachineCertThumbprint" {
                Some(|ds, _| {
                    let obj: VirtualMachineCertThumbprint = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x696e6544 => { // ineD
            if type_name == "VirtualMachineDiskDeviceInfo" {
                Some(|ds, _| {
                    let obj: VirtualMachineDiskDeviceInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x696e6546 => { // ineF
            if type_name == "VirtualMachineForkConfigInfo" {
                Some(|ds, _| {
                    let obj: VirtualMachineForkConfigInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x696e6550 => { // ineP
            match type_name {
                "VirtualMachineProfileDetails" => {
                    Some(|ds, _| {
                        let obj: VirtualMachineProfileDetails = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "VirtualMachineProfileRawData" => {
                    Some(|ds, _| {
                        let obj: VirtualMachineProfileRawData = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x696e6553 => { // ineS
            if type_name == "VirtualMachineStorageSummary" {
                Some(|ds, _| {
                    let obj: VirtualMachineStorageSummary = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x696e6556 => { // ineV
            if type_name == "VirtualMachineVgpuDeviceInfo" {
                Some(|ds, _| {
                    let obj: VirtualMachineVgpuDeviceInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x69746368 => { // itch
            if type_name == "HostProxySwitchHostLagConfig" {
                Some(|ds, _| {
                    let obj: HostProxySwitchHostLagConfig = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6c52756c => { // lRul
            if type_name == "HostFirewallRulesetIpNetwork" {
                Some(|ds, _| {
                    let obj: HostFirewallRulesetIpNetwork = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6c616e55 => { // lanU
            if type_name == "UplinkPortVlanUntrunkedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6d417461 => { // mAta
            if type_name == "VirtualCdromAtapiBackingInfo" {
                Some(|ds, _| {
                    let obj: VirtualCdromAtapiBackingInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6d49736f => { // mIso
            if type_name == "VirtualCdromIsoBackingOption" {
                Some(|ds, _| {
                    let obj: VirtualCdromIsoBackingOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6d65546f => { // meTo
            if type_name == "HostShortNameToIpFailedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6d707469 => { // mpti
            match type_name {
                "ClusterPreemptibleVmPairInfo" => {
                    Some(|ds, _| {
                        let obj: ClusterPreemptibleVmPairInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "ClusterPreemptibleVmPairSpec" => {
                    Some(|ds, _| {
                        let obj: ClusterPreemptibleVmPairSpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x6e456e74 => { // nEnt
            if type_name == "NoPermissionEntityPrivileges" {
                Some(|ds, _| {
                    let obj: NoPermissionEntityPrivileges = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6e63654e => { // nceN
            if type_name == "FaultToleranceNeedsThickDisk" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6e696348 => { // nicH
            match type_name {
                "IscsiFaultVnicHasActivePaths" => {
                    Some(|ds, type_name| {
                        let v = __MethodFaultVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                "IscsiFaultVnicHasWrongUplink" => {
                    Some(|ds, type_name| {
                        let v = __MethodFaultVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                _ => None
            }
        },
        0x6e74656e => { // nten
            if type_name == "EnteringMaintenanceModeEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f676963 => { // ogic
            if type_name == "VirtualLsiLogicSASController" {
                Some(|ds, _| {
                    let obj: VirtualLsiLogicSasController = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f6c6c65 => { // olle
            if type_name == "DeviceControllerNotSupported" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f6e4468 => { // onDh
            if type_name == "CustomizationDhcpIpGenerator" {
                Some(|ds, _| {
                    let obj: CustomizationDhcpIpGenerator = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f6e736f => { // onso
            if type_name == "DvsServiceConsoleVNicProfile" {
                Some(|ds, _| {
                    let obj: DvsServiceConsoleVNicProfile = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f737452 => { // ostR
            if type_name == "ClusterDasHostRecommendation" {
                Some(|ds, _| {
                    let obj: ClusterDasHostRecommendation = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x70696e67 => { // ping
            if type_name == "HostDiskMappingPartitionInfo" {
                Some(|ds, _| {
                    let obj: HostDiskMappingPartitionInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x724f6666 => { // rOff
            if type_name == "MissingPowerOffConfiguration" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x72616e63 => { // ranc
            if type_name == "VmFaultToleranceOpIssuesList" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x72644e6f => { // rdNo
            if type_name == "AdminPasswordNotChangedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x72647761 => { // rdwa
            if type_name == "ScheduledHardwareUpgradeInfo" {
                Some(|ds, _| {
                    let obj: ScheduledHardwareUpgradeInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7265416c => { // reAl
            if type_name == "VmfsDatastoreAllExtentOption" {
                Some(|ds, _| {
                    let obj: VmfsDatastoreAllExtentOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7265546f => { // reTo
            if type_name == "HostPlugStoreTopologyAdapter" {
                Some(|ds, _| {
                    let obj: HostPlugStoreTopologyAdapter = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x72656465 => { // rede
            if type_name == "NasSessionCredentialConflict" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x72744e61 => { // rtNa
            if type_name == "HostIpToShortNameFailedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7279556e => { // ryUn
            if type_name == "HostInventoryUnreadableEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x73436f6e => { // sCon
            if type_name == "HostGraphicsConfigDeviceType" {
                Some(|ds, _| {
                    let obj: HostGraphicsConfigDeviceType = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x73486f73 => { // sHos
            if type_name == "HeterogenousHostsBlockingEVC" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7373696f => { // ssio
            if type_name == "VspanSameSessionPortConflict" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x74416765 => { // tAge
            if type_name == "InsufficientAgentVmsDeployed" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x74536373 => { // tScs
            if type_name == "HostInternetScsiHbaTargetSet" {
                Some(|ds, _| {
                    let obj: HostInternetScsiHbaTargetSet = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x74537570 => { // tSup
            if type_name == "OperationNotSupportedByGuest" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x74616c65 => { // tale
            if type_name == "StorageDrsStaleHmsCollection" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x74656441 => { // tedA
            if type_name == "OvfUnsupportedAttributeValue" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x74656442 => { // tedB
            match type_name {
                "EVCUnsupportedByHostHardware" => {
                    Some(|ds, type_name| {
                        let v = __MethodFaultVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                "EVCUnsupportedByHostSoftware" => {
                    Some(|ds, type_name| {
                        let v = __MethodFaultVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                _ => None
            }
        },
        0x74656448 => { // tedH
            if type_name == "OvfNoSupportedHardwareFamily" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7468496e => { // thIn
            if type_name == "HostMultipathInfoLogicalUnit" {
                Some(|ds, _| {
                    let obj: HostMultipathInfoLogicalUnit = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x74696361 => { // tica
            if type_name == "GuestAuthenticationChallenge" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x74696d65 => { // time
            if type_name == "VsanHostRuntimeInfoDiskIssue" {
                Some(|ds, _| {
                    let obj: VsanHostRuntimeInfoDiskIssue = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x746f7253 => { // torS
            if type_name == "ServiceLocatorSAMLCredential" {
                Some(|ds, _| {
                    let obj: ServiceLocatorSamlCredential = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x74754e6f => { // tuNo
            if type_name == "UplinkPortMtuNotSupportEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x74776f72 => { // twor
            if type_name == "DVSVmVnicNetworkResourcePool" {
                Some(|ds, _| {
                    let obj: DvsVmVnicNetworkResourcePool = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x75654d75 => { // ueMu
            if type_name == "GuestRegValueMultiStringSpec" {
                Some(|ds, _| {
                    let obj: GuestRegValueMultiStringSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x75726365 => { // urce
            if type_name == "ComputeResourceEventArgument" {
                Some(|ds, _| {
                    let obj: ComputeResourceEventArgument = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7573746f => { // usto
            if type_name == "UnexpectedCustomizationFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7955706c => { // yUpl
            if type_name == "DVSNameArrayUplinkPortPolicy" {
                Some(|ds, _| {
                    let obj: DvsNameArrayUplinkPortPolicy = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_object_deserializer_29<'de, A: de::MapAccess<'de>>(type_name: &str) -> Option<fn(de::value::MapAccessDeserializer<A>, &str) -> Result<VimAny, A::Error>> {
    let s = &type_name[15..19];
    let Some(type_ord) = to_u32(s) else {
        return None;
    };
    match type_ord {
        0x41757468 => { // Auth
            if type_name == "TicketedSessionAuthentication" {
                Some(|ds, _| {
                    let obj: TicketedSessionAuthentication = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x436f6e6e => { // Conn
            if type_name == "VmRemoteConsoleConnectedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x47617465 => { // Gate
            if type_name == "HostListSummaryGatewaySummary" {
                Some(|ds, _| {
                    let obj: HostListSummaryGatewaySummary = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x49426163 => { // IBac
            if type_name == "VirtualDeviceURIBackingOption" {
                Some(|ds, _| {
                    let obj: VirtualDeviceUriBackingOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x5265736f => { // Reso
            if type_name == "InsufficientCpuResourcesFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x52756c65 => { // Rule
            if type_name == "FirewallProfileRulesetProfile" {
                Some(|ds, _| {
                    let obj: FirewallProfileRulesetProfile = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x61676542 => { // ageB
            if type_name == "VirtualFloppyImageBackingInfo" {
                Some(|ds, _| {
                    let obj: VirtualFloppyImageBackingInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x61696c46 => { // ailF
            if type_name == "ScheduledTaskEmailFailedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x616d6553 => { // ameS
            if type_name == "HostNatServiceNameServiceSpec" {
                Some(|ds, _| {
                    let obj: HostNatServiceNameServiceSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x61726477 => { // ardw
            if type_name == "HostAssignableHardwareBinding" {
                Some(|ds, _| {
                    let obj: HostAssignableHardwareBinding = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x61766169 => { // avai
            if type_name == "LicenseServerUnavailableEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x63654368 => { // ceCh
            if type_name == "ClusterComplianceCheckedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x63655761 => { // ceWa
            if type_name == "MigrationResourceWarningEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x63656452 => { // cedR
            if type_name == "ClusterDasAdvancedRuntimeInfo" {
                Some(|ds, _| {
                    let obj: ClusterDasAdvancedRuntimeInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x63684265 => { // chBe
            if type_name == "HostVirtualSwitchBeaconConfig" {
                Some(|ds, _| {
                    let obj: HostVirtualSwitchBeaconConfig = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x63685369 => { // chSi
            if type_name == "HostVirtualSwitchSimpleBridge" {
                Some(|ds, _| {
                    let obj: HostVirtualSwitchSimpleBridge = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6442616c => { // dBal
            if type_name == "StorageDrsIoLoadBalanceConfig" {
                Some(|ds, _| {
                    let obj: StorageDrsIoLoadBalanceConfig = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x64557365 => { // dUse
            if type_name == "HostCnxFailedBadUsernameEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x65447273 => { // eDrs
            if type_name == "ClusterProactiveDrsConfigInfo" {
                Some(|ds, _| {
                    let obj: ClusterProactiveDrsConfigInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x65494f46 => { // eIOF
            if type_name == "QuiesceDatastoreIOForHAFailed" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6564466f => { // edFo
            if type_name == "DeviceUnsupportedForVmVersion" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x656e7469 => { // enti
            if type_name == "CustomizationIdentitySettings" {
                Some(|ds, _| {
                    let obj: CustomizationIdentitySettings = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x65736572 => { // eser
            if type_name == "ServiceConsoleReservationInfo" {
                Some(|ds, _| {
                    let obj: ServiceConsoleReservationInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x65736f75 => { // esou
            if type_name == "ClusterComputeResourceSummary" {
                Some(|ds, _| {
                    let obj: ClusterComputeResourceSummary = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x666f726d => { // form
            if type_name == "IncorrectHostInformationEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x67657249 => { // gerI
            if type_name == "ExtSolutionManagerInfoTabInfo" {
                Some(|ds, _| {
                    let obj: ExtSolutionManagerInfoTabInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x67707550 => { // gpuP
            if type_name == "VirtualMachineVgpuProfileInfo" {
                Some(|ds, _| {
                    let obj: VirtualMachineVgpuProfileInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x69486261 => { // iHba
            match type_name {
                "HostInternetScsiHbaParamValue" => {
                    Some(|ds, _| {
                        let obj: HostInternetScsiHbaParamValue = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "HostInternetScsiHbaSendTarget" => {
                    Some(|ds, _| {
                        let obj: HostInternetScsiHbaSendTarget = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x69666965 => { // ifie
            if type_name == "OvfPropertyQualifierDuplicate" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x69674e65 => { // igNe
            if type_name == "HostNetworkConfigNetStackSpec" {
                Some(|ds, _| {
                    let obj: HostNetworkConfigNetStackSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x696c6542 => { // ileB
            if type_name == "BaseConfigInfoFileBackingInfo" {
                Some(|ds, _| {
                    let obj: BaseConfigInfoFileBackingInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x696f6e4d => { // ionM
            if type_name == "HostAuthenticationManagerInfo" {
                Some(|ds, _| {
                    let obj: HostAuthenticationManagerInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x69705365 => { // ipSe
            if type_name == "CryptoManagerKmipServerStatus" {
                Some(|ds, _| {
                    let obj: CryptoManagerKmipServerStatus = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x69727475 => { // irtu
            if type_name == "VirtualMachineVirtualNumaInfo" {
                Some(|ds, _| {
                    let obj: VirtualMachineVirtualNumaInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6973706c => { // ispl
            if type_name == "VirtualMachineDisplayTopology" {
                Some(|ds, _| {
                    let obj: VirtualMachineDisplayTopology = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6c616365 => { // lace
            if type_name == "ClusterInitialPlacementAction" {
                Some(|ds, _| {
                    let obj: ClusterInitialPlacementAction = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6c656374 => { // lect
            if type_name == "VirtualSwitchSelectionProfile" {
                Some(|ds, _| {
                    let obj: VirtualSwitchSelectionProfile = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6c657465 => { // lete
            if type_name == "HostProfileCompleteConfigSpec" {
                Some(|ds, _| {
                    let obj: HostProfileCompleteConfigSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6c746843 => { // lthC
            if type_name == "VMwareDVSMtuHealthCheckResult" {
                Some(|ds, _| {
                    let obj: VMwareDvsMtuHealthCheckResult = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6d656e74 => { // ment
            if type_name == "StorageDrsPlacementRankVmSpec" {
                Some(|ds, _| {
                    let obj: StorageDrsPlacementRankVmSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6d706174 => { // mpat
            if type_name == "ReplicationIncompatibleWithFT" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6e4f6e53 => { // nOnS
            if type_name == "InvalidOperationOnSecondaryVm" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6e617073 => { // naps
            if type_name == "VStorageObjectSnapshotDetails" {
                Some(|ds, _| {
                    let obj: VStorageObjectSnapshotDetails = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6e666f43 => { // nfoC
            if type_name == "VsanHostConfigInfoClusterInfo" {
                Some(|ds, _| {
                    let obj: VsanHostConfigInfoClusterInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6e666f4e => { // nfoN
            if type_name == "VsanHostConfigInfoNetworkInfo" {
                Some(|ds, _| {
                    let obj: VsanHostConfigInfoNetworkInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6e666f53 => { // nfoS
            if type_name == "VsanHostConfigInfoStorageInfo" {
                Some(|ds, _| {
                    let obj: VsanHostConfigInfoStorageInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6e674e6f => { // ngNo
            if type_name == "OvfNetworkMappingNotSupported" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6e744e61 => { // ntNa
            if type_name == "TooManyConcurrentNativeClones" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6e74656e => { // nten
            if type_name == "ClusterEnterMaintenanceResult" {
                Some(|ds, _| {
                    let obj: ClusterEnterMaintenanceResult = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6e74726f => { // ntro
            if type_name == "VirtualNVDIMMControllerOption" {
                Some(|ds, _| {
                    let obj: VirtualNvdimmControllerOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f62616c => { // obal
            if type_name == "CustomizationGlobalIPSettings" {
                Some(|ds, _| {
                    let obj: CustomizationGlobalIpSettings = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f646546 => { // odeF
            if type_name == "DrsExitStandbyModeFailedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f6e4368 => { // onCh
            if type_name == "HostSpecificationChangedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f6e4e65 => { // onNe
            if type_name == "MismatchedVMotionNetworkNames" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f6e4e6f => { // onNo
            if type_name == "NonHomeRDMVMotionNotSupported" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f6e506f => { // onPo
            if type_name == "HostPathSelectionPolicyOption" {
                Some(|ds, _| {
                    let obj: HostPathSelectionPolicyOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f6e5265 => { // onRe
            if type_name == "HostSpecificationRequireEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f6e6669 => { // onfi
            if type_name == "ResourcePoolReconfiguredEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f706572 => { // oper
            match type_name {
                "OvfDuplicatedPropertyIdExport" => {
                    Some(|ds, type_name| {
                        let v = __MethodFaultVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                "OvfDuplicatedPropertyIdImport" => {
                    Some(|ds, type_name| {
                        let v = __MethodFaultVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                _ => None
            }
        },
        0x6f727446 => { // ortF
            if type_name == "HostNatServicePortForwardSpec" {
                Some(|ds, _| {
                    let obj: HostNatServicePortForwardSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f744e6f => { // otNo
            if type_name == "CloneFromSnapshotNotSupported" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x70616365 => { // pace
            if type_name == "NvdimmPMemNamespaceCreateSpec" {
                Some(|ds, _| {
                    let obj: NvdimmPMemNamespaceCreateSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x70616e64 => { // pand
            if type_name == "GuestRegValueExpandStringSpec" {
                Some(|ds, _| {
                    let obj: GuestRegValueExpandStringSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7075496e => { // puIn
            if type_name == "FaultToleranceCpuIncompatible" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7374656d => { // stem
            if type_name == "HostLocalFileSystemVolumeSpec" {
                Some(|ds, _| {
                    let obj: HostLocalFileSystemVolumeSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x73746f72 => { // stor
            if type_name == "UnSupportedDatastoreForVFlash" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x74436170 => { // tCap
            if type_name == "InsufficientHostCapacityFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x74546561 => { // tTea
            if type_name == "VmwareUplinkPortTeamingPolicy" {
                Some(|ds, _| {
                    let obj: VmwareUplinkPortTeamingPolicy = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x74654e6f => { // teNo
            if type_name == "SuspendedRelocateNotSupported" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x74734e6f => { // tsNo
            if type_name == "MultipleSnapshotsNotSupported" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x74776f72 => { // twor
            if type_name == "DuplicateVsanNetworkInterface" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x756e6963 => { // unic
            if type_name == "OvfConsumerCommunicationError" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7570706f => { // uppo
            if type_name == "ReplicationNotSupportedOnHost" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x75737456 => { // ustV
            if type_name == "GatewayToHostTrustVerifyFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x776f726b => { // work
            match type_name {
                "DvsRateLimitNetworkRuleAction" => {
                    Some(|ds, _| {
                        let obj: DvsRateLimitNetworkRuleAction = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "DvsUpdateTagNetworkRuleAction" => {
                    Some(|ds, _| {
                        let obj: DvsUpdateTagNetworkRuleAction = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x79416c72 => { // yAlr
            if type_name == "GuestRegistryKeyAlreadyExists" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x79546173 => { // yTas
            if type_name == "MonthlyByWeekdayTaskScheduler" {
                Some(|ds, _| {
                    let obj: MonthlyByWeekdayTaskScheduler = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x79706543 => { // ypeC
            if type_name == "VspanPortgroupTypeChangeFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_object_deserializer_30<'de, A: de::MapAccess<'de>>(type_name: &str) -> Option<fn(de::value::MapAccessDeserializer<A>, &str) -> Result<VimAny, A::Error>> {
    let s = &type_name[11..19];
    let Some(type_ord) = to_u64(s) else {
        return None;
    };
    match type_ord {
        0x4364704465766963 => { // CdpDevic
            if type_name == "PhysicalNicCdpDeviceCapability" {
                Some(|ds, _| {
                    let obj: PhysicalNicCdpDeviceCapability = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x436f6e6669677572 => { // Configur
            if type_name == "ConflictingConfigurationConfig" {
                Some(|ds, _| {
                    let obj: ConflictingConfigurationConfig = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x466c617456657231 => { // FlatVer1
            if type_name == "VirtualDiskFlatVer1BackingInfo" {
                Some(|ds, _| {
                    let obj: VirtualDiskFlatVer1BackingInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x466c617456657232 => { // FlatVer2
            if type_name == "VirtualDiskFlatVer2BackingInfo" {
                Some(|ds, _| {
                    let obj: VirtualDiskFlatVer2BackingInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x484349436f6e7472 => { // HCIContr
            if type_name == "VirtualUSBXHCIControllerOption" {
                Some(|ds, _| {
                    let obj: VirtualUsbxhciControllerOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x486f737442617365 => { // HostBase
            if type_name == "HostProfileHostBasedConfigSpec" {
                Some(|ds, _| {
                    let obj: HostProfileHostBasedConfigSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x524d5265636f6e66 => { // RMReconf
            if type_name == "DatastoreIORMReconfiguredEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x5365537061727365 => { // SeSparse
            if type_name == "VirtualDiskSeSparseBackingInfo" {
                Some(|ds, _| {
                    let obj: VirtualDiskSeSparseBackingInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x53797374656d5363 => { // SystemSc
            if type_name == "HostStorageSystemScsiLunResult" {
                Some(|ds, _| {
                    let obj: HostStorageSystemScsiLunResult = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x53797374656d5570 => { // SystemUp
            if type_name == "VsanUpgradeSystemUpgradeStatus" {
                Some(|ds, _| {
                    let obj: VsanUpgradeSystemUpgradeStatus = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x564d6f74696f6e4e => { // VMotionN
            if type_name == "FullStorageVMotionNotSupported" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6155706461746548 => { // aUpdateH
            if type_name == "ClusterInfraUpdateHaConfigInfo" {
                Some(|ds, _| {
                    let obj: ClusterInfraUpdateHaConfigInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x616c746843686563 => { // althChec
            if type_name == "VMwareDVSHealthCheckCapability" {
                Some(|ds, _| {
                    let obj: VMwareDvsHealthCheckCapability = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x616c7565466f726d => { // alueForm
            if type_name == "OvfInvalidValueFormatMalformed" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x616e4865616c7468 => { // anHealth
            if type_name == "VMwareDVSVlanHealthCheckResult" {
                Some(|ds, _| {
                    let obj: VMwareDvsVlanHealthCheckResult = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x616e616765724c6f => { // anagerLo
            if type_name == "DiagnosticManagerLogDescriptor" {
                Some(|ds, _| {
                    let obj: DiagnosticManagerLogDescriptor = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x616e6e6f744d6f76 => { // annotMov
            if type_name == "StorageDrsCannotMoveSharedDisk" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x617373776f726443 => { // asswordC
            if type_name == "VimAccountPasswordChangedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x626c6564506f7274 => { // bledPort
            if type_name == "HostNoHAEnabledPortGroupsEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6365446576696365 => { // ceDevice
            if type_name == "VirtualDeviceDeviceBackingInfo" {
                Some(|ds, _| {
                    let obj: VirtualDeviceDeviceBackingInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x636546696c654261 => { // ceFileBa
            if type_name == "VirtualDeviceFileBackingOption" {
                Some(|ds, _| {
                    let obj: VirtualDeviceFileBackingOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6365506970654261 => { // cePipeBa
            if type_name == "VirtualDevicePipeBackingOption" {
                Some(|ds, _| {
                    let obj: VirtualDevicePipeBackingOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6461746150726f66 => { // dataProf
            if type_name == "ProfileMetadataProfileSortSpec" {
                Some(|ds, _| {
                    let obj: ProfileMetadataProfileSortSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x646d697373696f6e => { // dmission
            if type_name == "ClusterDasAdmissionControlInfo" {
                Some(|ds, _| {
                    let obj: ClusterDasAdmissionControlInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x654461746173746f => { // eDatasto
            if type_name == "HttpNfcLeaseDatastoreLeaseInfo" {
                Some(|ds, _| {
                    let obj: HttpNfcLeaseDatastoreLeaseInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x65486f7374466f72 => { // eHostFor
            if type_name == "IncompatibleHostForFtSecondary" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x65644e6574776f72 => { // edNetwor
            if type_name == "HostCnxFailedNetworkErrorEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x65644e6f436f6e6e => { // edNoConn
            if type_name == "HostCnxFailedNoConnectionEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x65724b6d6970436c => { // erKmipCl
            if type_name == "CryptoManagerKmipClusterStatus" {
                Some(|ds, _| {
                    let obj: CryptoManagerKmipClusterStatus = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x657269616c697a65 => { // erialize
            if type_name == "AnswerFileSerializedCreateSpec" {
                Some(|ds, _| {
                    let obj: AnswerFileSerializedCreateSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x69676e6174757265 => { // ignature
            if type_name == "ToolsImageSignatureCheckFailed" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x696c65446e73436f => { // ileDnsCo
            if type_name == "NetworkProfileDnsConfigProfile" {
                Some(|ds, _| {
                    let obj: NetworkProfileDnsConfigProfile = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x696e65456d707479 => { // ineEmpty
            if type_name == "VirtualMachineEmptyProfileSpec" {
                Some(|ds, _| {
                    let obj: VirtualMachineEmptyProfileSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x696e654775657374 => { // ineGuest
            if type_name == "VirtualMachineGuestQuiesceSpec" {
                Some(|ds, _| {
                    let obj: VirtualMachineGuestQuiesceSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x696e65496e737461 => { // ineInsta
            if type_name == "VirtualMachineInstantCloneSpec" {
                Some(|ds, _| {
                    let obj: VirtualMachineInstantCloneSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x696e6550726f7065 => { // inePrope
            if type_name == "VirtualMachinePropertyRelation" {
                Some(|ds, _| {
                    let obj: VirtualMachinePropertyRelation = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x696e655573616765 => { // ineUsage
            if type_name == "VirtualMachineUsageOnDatastore" {
                Some(|ds, _| {
                    let obj: VirtualMachineUsageOnDatastore = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x696e6556466c6173 => { // ineVFlas
            if type_name == "VirtualMachineVFlashModuleInfo" {
                Some(|ds, _| {
                    let obj: VirtualMachineVFlashModuleInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x696e65564d434944 => { // ineVMCID
            if type_name == "VirtualMachineVMCIDeviceOption" {
                Some(|ds, _| {
                    let obj: VirtualMachineVmciDeviceOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x69727475616c4d61 => { // irtualMa
            if type_name == "UnlicensedVirtualMachinesEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x69727475616c4e69 => { // irtualNi
            if type_name == "HostPlacedVirtualNicIdentifier" {
                Some(|ds, _| {
                    let obj: HostPlacedVirtualNicIdentifier = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6c52756c65736574 => { // lRuleset
            if type_name == "HostFirewallRulesetRulesetSpec" {
                Some(|ds, _| {
                    let obj: HostFirewallRulesetRulesetSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6d41746170694261 => { // mAtapiBa
            if type_name == "VirtualCdromAtapiBackingOption" {
                Some(|ds, _| {
                    let obj: VirtualCdromAtapiBackingOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6d65496e636f6e73 => { // meIncons
            if type_name == "HostShortNameInconsistentEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6e4661696c656448 => { // nFailedH
            if type_name == "EVCAdmissionFailedHostSoftware" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6e744469736b734e => { // ntDisksN
            if type_name == "NonPersistentDisksNotSupported" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f6c65506f727447 => { // olePortG
            if type_name == "ServiceConsolePortGroupProfile" {
                Some(|ds, _| {
                    let obj: ServiceConsolePortGroupProfile = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f6d70617469626c => { // ompatibl
            if type_name == "SnapshotIncompatibleDeviceInVm" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f6d706c69616e63 => { // omplianc
            if type_name == "HostSystemComplianceCheckState" {
                Some(|ds, _| {
                    let obj: HostSystemComplianceCheckState = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f6e4175746f4970 => { // onAutoIp
            if type_name == "CustomizationAutoIpV6Generator" {
                Some(|ds, _| {
                    let obj: CustomizationAutoIpV6Generator = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f6e437573746f6d => { // onCustom
            if type_name == "CustomizationCustomIpGenerator" {
                Some(|ds, _| {
                    let obj: CustomizationCustomIpGenerator = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f6e446863704970 => { // onDhcpIp
            if type_name == "CustomizationDhcpIpV6Generator" {
                Some(|ds, _| {
                    let obj: CustomizationDhcpIpV6Generator = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f6e497050696e67 => { // onIpPing
            if type_name == "HostIsolationIpPingFailedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f75726365506f6f => { // ourcePoo
            if type_name == "ReadHostResourcePoolTreeFailed" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x70696e6750617274 => { // pingPart
            if type_name == "HostDiskMappingPartitionOption" {
                Some(|ds, _| {
                    let obj: HostDiskMappingPartitionOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x706f72746564466f => { // portedFo
            if type_name == "DeviceUnsupportedForVmPlatform" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7079446576696365 => { // pyDevice
            if type_name == "VirtualFloppyDeviceBackingInfo" {
                Some(|ds, _| {
                    let obj: VirtualFloppyDeviceBackingInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x72616e6365547572 => { // ranceTur
            if type_name == "VmFaultToleranceTurnedOffEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x726542726f777365 => { // reBrowse
            if type_name == "HostDatastoreBrowserSearchSpec" {
                Some(|ds, _| {
                    let obj: HostDatastoreBrowserSearchSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7265457869737473 => { // reExists
            if type_name == "HostDatastoreExistsConnectInfo" {
                Some(|ds, _| {
                    let obj: HostDatastoreExistsConnectInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x72654e6f74577269 => { // reNotWri
            if type_name == "SwapDatastoreNotWritableOnHost" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7274696e67536563 => { // rtingSec
            if type_name == "VmFailedStartingSecondaryEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x727563747572654f => { // ructureO
            if type_name == "vslmInfrastructureObjectPolicy" {
                Some(|ds, _| {
                    let obj: VslmInfrastructureObjectPolicy = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x72794b6579506172 => { // ryKeyPar
            if type_name == "GuestRegistryKeyParentVolatile" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x735374616e646172 => { // sStandar
            if type_name == "InventoryHasStandardAloneHosts" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x73636f7665727950 => { // scoveryP
            if type_name == "LinkLayerDiscoveryProtocolInfo" {
                Some(|ds, _| {
                    let obj: LinkLayerDiscoveryProtocolInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x736b5265636f6e66 => { // skReconf
            if type_name == "ScheduledTaskReconfiguredEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x745374616e646279 => { // tStandby
            if type_name == "InsufficientStandbyCpuResource" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x74654654436f6d70 => { // teFTComp
            if type_name == "CannotComputeFTCompatibleHosts" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x74654e6574776f72 => { // teNetwor
            if type_name == "DvsMacRewriteNetworkRuleAction" {
                Some(|ds, _| {
                    let obj: DvsMacRewriteNetworkRuleAction = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7465644469736b50 => { // tedDiskP
            if type_name == "OvfUnsupportedDiskProvisioning" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x74776f726b446576 => { // tworkDev
            if type_name == "HostSriovNetworkDevicePoolInfo" {
                Some(|ds, _| {
                    let obj: HostSriovNetworkDevicePoolInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7574655265736f75 => { // uteResou
            if type_name == "ClusterComputeResourceVcsSlots" {
                Some(|ds, _| {
                    let obj: ClusterComputeResourceVcsSlots = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7645746865726e65 => { // vEtherne
            if type_name == "VirtualSriovEthernetCardOption" {
                Some(|ds, _| {
                    let obj: VirtualSriovEthernetCardOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x76657273696f6e4e => { // versionN
            if type_name == "LargeRDMConversionNotSupported" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x787072657373696f => { // xpressio
            if type_name == "EventAlarmExpressionComparison" {
                Some(|ds, _| {
                    let obj: EventAlarmExpressionComparison = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_object_deserializer_31<'de, A: de::MapAccess<'de>>(type_name: &str) -> Option<fn(de::value::MapAccessDeserializer<A>, &str) -> Result<VimAny, A::Error>> {
    let s = &type_name[13..17];
    let Some(type_ord) = to_u32(s) else {
        return None;
    };
    match type_ord {
        0x4163636f => { // Acco
            if type_name == "HostCnxFailedAccountFailedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x416c7465 => { // Alte
            if type_name == "VmRestartedOnAlternateHostEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x496d6167 => { // Imag
            if type_name == "VirtualFloppyImageBackingOption" {
                Some(|ds, _| {
                    let obj: VirtualFloppyImageBackingOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4b6d6970 => { // Kmip
            if type_name == "CryptoManagerKmipServerCertInfo" {
                Some(|ds, _| {
                    let obj: CryptoManagerKmipServerCertInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4d616368 => { // Mach
            if type_name == "UpdateVirtualMachineFilesResult" {
                Some(|ds, _| {
                    let obj: UpdateVirtualMachineFilesResult = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4d6f7469 => { // Moti
            if type_name == "UnsharedSwapVMotionNotSupported" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4e657477 => { // Netw
            match type_name {
                "VAppCloneSpecNetworkMappingPair" => {
                    Some(|ds, _| {
                        let obj: VAppCloneSpecNetworkMappingPair = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "CustomizationNetworkSetupFailed" => {
                    Some(|ds, type_name| {
                        let v = __EventVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                _ => None
            }
        },
        0x506f7274 => { // Port
            if type_name == "VirtualSerialPortURIBackingInfo" {
                Some(|ds, _| {
                    let obj: VirtualSerialPortUriBackingInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x5349436f => { // SICo
            if type_name == "ParaVirtualSCSIControllerOption" {
                Some(|ds, _| {
                    let obj: ParaVirtualScsiControllerOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x53696e67 => { // Sing
            if type_name == "VmfsDatastoreSingleExtentOption" {
                Some(|ds, _| {
                    let obj: VmfsDatastoreSingleExtentOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x53776974 => { // Swit
            if type_name == "GhostDvsProxySwitchRemovedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x53797374 => { // Syst
            if type_name == "HostDatastoreSystemCapabilities" {
                Some(|ds, _| {
                    let obj: HostDatastoreSystemCapabilities = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x544d6574 => { // TMet
            if type_name == "InaccessibleFTMetadataDatastore" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x556e6b6e => { // Unkn
            if type_name == "CustomizationUnknownIpGenerator" {
                Some(|ds, _| {
                    let obj: CustomizationUnknownIpGenerator = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x56697274 => { // Virt
            if type_name == "CustomizationVirtualMachineName" {
                Some(|ds, _| {
                    let obj: CustomizationVirtualMachineName = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x61634e6f => { // acNo
            if type_name == "NonVmwareOuiMacNotSupportedHost" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x61666669 => { // affi
            if type_name == "HostNetworkTrafficShapingPolicy" {
                Some(|ds, _| {
                    let obj: HostNetworkTrafficShapingPolicy = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x626c6546 => { // bleF
            if type_name == "HostIncompatibleForRecordReplay" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x634f7061 => { // cOpa
            if type_name == "HostVirtualNicOpaqueNetworkSpec" {
                Some(|ds, _| {
                    let obj: HostVirtualNicOpaqueNetworkSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x63616c50 => { // calP
            if type_name == "VirtualDiskLocalPMemBackingInfo" {
                Some(|ds, _| {
                    let obj: VirtualDiskLocalPMemBackingInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x63697479 => { // city
            if type_name == "DatastoreCapacityIncreasedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x63736948 => { // csiH
            match type_name {
                "HostInternetScsiHbaIPProperties" => {
                    Some(|ds, _| {
                        let obj: HostInternetScsiHbaIpProperties = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "HostInternetScsiHbaStaticTarget" => {
                    Some(|ds, _| {
                        let obj: HostInternetScsiHbaStaticTarget = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x63736954 => { // csiT
            match type_name {
                "HostInternetScsiTargetTransport" => {
                    Some(|ds, _| {
                        let obj: HostInternetScsiTargetTransport = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "HostParallelScsiTargetTransport" => {
                    Some(|ds, _| {
                        let obj: HostParallelScsiTargetTransport = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x64446576 => { // dDev
            if type_name == "OvfUnsupportedDeviceBackingInfo" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x65446576 => { // eDev
            if type_name == "VirtualMachineDeviceRuntimeInfo" {
                Some(|ds, _| {
                    let obj: VirtualMachineDeviceRuntimeInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x65496465 => { // eIde
            if type_name == "VirtualMachineIdeDiskDeviceInfo" {
                Some(|ds, _| {
                    let obj: VirtualMachineIdeDiskDeviceInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x654e6574 => { // eNet
            if type_name == "VirtualMachineNetworkShaperInfo" {
                Some(|ds, _| {
                    let obj: VirtualMachineNetworkShaperInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x65507269 => { // ePri
            if type_name == "FaultTolerancePrimaryConfigInfo" {
                Some(|ds, _| {
                    let obj: FaultTolerancePrimaryConfigInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x65526573 => { // eRes
            if type_name == "ClusterComputeResourceVCProfile" {
                Some(|ds, _| {
                    let obj: ClusterComputeResourceVcProfile = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x65536563 => { // eSec
            if type_name == "FaultToleranceSecondaryOpResult" {
                Some(|ds, _| {
                    let obj: FaultToleranceSecondaryOpResult = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x65537472 => { // eStr
            if type_name == "ProfileProfileStructureProperty" {
                Some(|ds, _| {
                    let obj: ProfileProfileStructureProperty = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x65566972 => { // eVir
            if type_name == "VirtualMachineVirtualDeviceSwap" {
                Some(|ds, _| {
                    let obj: VirtualMachineVirtualDeviceSwap = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x65566d4e => { // eVmN
            if type_name == "FaultToleranceVmNotDasProtected" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x65696e67 => { // eing
            if type_name == "UpdatedAgentBeingRestartedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x65727369 => { // ersi
            if type_name == "VFlashModuleVersionIncompatible" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x65744361 => { // etCa
            if type_name == "VirtualEthernetCardNotSupported" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x66696361 => { // fica
            if type_name == "MultipleCertificatesVerifyFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x66696743 => { // figC
            if type_name == "WillModifyConfigCpuRequirements" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x66696753 => { // figS
            match type_name {
                "NetIpRouteConfigSpecGatewaySpec" => {
                    Some(|ds, _| {
                        let obj: NetIpRouteConfigSpecGatewaySpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "NetIpRouteConfigSpecIpRouteSpec" => {
                    Some(|ds, _| {
                        let obj: NetIpRouteConfigSpecIpRouteSpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x67537461 => { // gSta
            if type_name == "HostMonitoringStateChangedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x68696e65 => { // hine
            if type_name == "AllVirtualMachinesLicensedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6963436f => { // icCo
            match type_name {
                "VirtualBusLogicControllerOption" => {
                    Some(|ds, _| {
                        let obj: VirtualBusLogicControllerOption = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "VirtualLsiLogicControllerOption" => {
                    Some(|ds, _| {
                        let obj: VirtualLsiLogicControllerOption = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x69636174 => { // icat
            match type_name {
                "HostSubSpecificationDeleteEvent" => {
                    Some(|ds, type_name| {
                        let v = __EventVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                "HostSubSpecificationUpdateEvent" => {
                    Some(|ds, type_name| {
                        let v = __EventVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                _ => None
            }
        },
        0x696e6753 => { // ingS
            if type_name == "VmFailedUpdatingSecondaryConfig" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6974684e => { // ithN
            if type_name == "CannotMoveVmWithNativeDeltaDisk" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6d656e74 => { // ment
            if type_name == "OvfMissingElementNormalBoundary" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6d706c65 => { // mple
            if type_name == "HostTpmBootCompleteEventDetails" {
                Some(|ds, _| {
                    let obj: HostTpmBootCompleteEventDetails = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6e656c4f => { // nelO
            if type_name == "HostFibreChannelOverEthernetHba" {
                Some(|ds, _| {
                    let obj: HostFibreChannelOverEthernetHba = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6e656c54 => { // nelT
            if type_name == "HostFibreChannelTargetTransport" {
                Some(|ds, _| {
                    let obj: HostFibreChannelTargetTransport = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6e666967 => { // nfig
            match type_name {
                "DrsResourceConfigureFailedEvent" => {
                    Some(|ds, type_name| {
                        let v = __EventVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                "DrsResourceConfigureSyncedEvent" => {
                    Some(|ds, type_name| {
                        let v = __EventVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                _ => None
            }
        },
        0x6f6e6669 => { // onfi
            if type_name == "HostFirewallConfigRuleSetConfig" {
                Some(|ds, _| {
                    let obj: HostFirewallConfigRuleSetConfig = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f6e7472 => { // ontr
            if type_name == "DasAdmissionControlEnabledEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f746548 => { // oteH
            if type_name == "VirtualUSBRemoteHostBackingInfo" {
                Some(|ds, _| {
                    let obj: VirtualUsbRemoteHostBackingInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x706f7274 => { // port
            if type_name == "HostDataTransportConnectionInfo" {
                Some(|ds, _| {
                    let obj: HostDataTransportConnectionInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x70706f72 => { // ppor
            if type_name == "LargeRDMNotSupportedOnDatastore" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x726f6c6c => { // roll
            if type_name == "SharedBusControllerNotSupported" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x72726563 => { // rrec
            if type_name == "SoftRuleVioCorrectionDisallowed" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x72747561 => { // rtua
            if type_name == "DistributedVirtualPortgroupInfo" {
                Some(|ds, _| {
                    let obj: DistributedVirtualPortgroupInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x734d616e => { // sMan
            if type_name == "HostVmciAccessManagerAccessSpec" {
                Some(|ds, _| {
                    let obj: HostVmciAccessManagerAccessSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7374656d => { // stem
            if type_name == "VsanUpgradeSystemAPIBrokenIssue" {
                Some(|ds, _| {
                    let obj: VsanUpgradeSystemApiBrokenIssue = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x744f6e49 => { // tOnI
            if type_name == "MemorySnapshotOnIndependentDisk" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x74506174 => { // tPat
            if type_name == "DatastoreMountPathDatastorePair" {
                Some(|ds, _| {
                    let obj: DatastoreMountPathDatastorePair = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x74636850 => { // tchP
            if type_name == "HostOpaqueSwitchPhysicalNicZone" {
                Some(|ds, _| {
                    let obj: HostOpaqueSwitchPhysicalNicZone = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x74656448 => { // tedH
            if type_name == "IORMNotSupportedHostOnDatastore" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x74657254 => { // terT
            if type_name == "HostBlockAdapterTargetTransport" {
                Some(|ds, _| {
                    let obj: HostBlockAdapterTargetTransport = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x74694166 => { // tiAf
            if type_name == "VirtualDiskAntiAffinityRuleSpec" {
                Some(|ds, _| {
                    let obj: VirtualDiskAntiAffinityRuleSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x75726365 => { // urce
            if type_name == "DvsVmVnicResourcePoolConfigSpec" {
                Some(|ds, _| {
                    let obj: DvsVmVnicResourcePoolConfigSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_object_deserializer_32<'de, A: de::MapAccess<'de>>(type_name: &str) -> Option<fn(de::value::MapAccessDeserializer<A>, &str) -> Result<VimAny, A::Error>> {
    let s = &type_name[15..19];
    let Some(type_ord) = to_u32(s) else {
        return None;
    };
    match type_ord {
        0x44697363 => { // Disc
            if type_name == "VmRemoteConsoleDisconnectedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4c6f6164 => { // Load
            if type_name == "StorageDrsSpaceLoadBalanceConfig" {
                Some(|ds, _| {
                    let obj: StorageDrsSpaceLoadBalanceConfig = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x53706563 => { // Spec
            match type_name {
                "DesiredSoftwareSpecBaseImageSpec" => {
                    Some(|ds, _| {
                        let obj: DesiredSoftwareSpecBaseImageSpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "DesiredSoftwareSpecComponentSpec" => {
                    Some(|ds, _| {
                        let obj: DesiredSoftwareSpecComponentSpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x56657231 => { // Ver1
            if type_name == "VirtualDiskFlatVer1BackingOption" {
                Some(|ds, _| {
                    let obj: VirtualDiskFlatVer1BackingOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x56657232 => { // Ver2
            if type_name == "VirtualDiskFlatVer2BackingOption" {
                Some(|ds, _| {
                    let obj: VirtualDiskFlatVer2BackingOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x56697274 => { // Virt
            if type_name == "VimVasaProviderVirtualHostConfig" {
                Some(|ds, _| {
                    let obj: VimVasaProviderVirtualHostConfig = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x61636547 => { // aceG
            if type_name == "GuestInfoNamespaceGenerationInfo" {
                Some(|ds, _| {
                    let obj: GuestInfoNamespaceGenerationInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6167656e => { // agen
            if type_name == "HostCnxFailedCcagentUpgradeEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x61696c43 => { // ailC
            if type_name == "ScheduledTaskEmailCompletedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x61704e6f => { // apNo
            if type_name == "HostUserWorldSwapNotEnabledEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x61727365 => { // arse
            if type_name == "VirtualDiskSeSparseBackingOption" {
                Some(|ds, _| {
                    let obj: VirtualDiskSeSparseBackingOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x61734d75 => { // asMu
            if type_name == "IscsiFaultVnicHasMultipleUplinks" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x61736852 => { // ashR
            if type_name == "InsufficientVFlashResourcesFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x626c6564 => { // bled
            if type_name == "VmSecondaryDisabledBySystemEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x63617465 => { // cate
            if type_name == "AlreadyAuthenticatedSessionEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x63657354 => { // cesT
            if type_name == "NotEnoughResourcesToStartVmEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x63695061 => { // ciPa
            if type_name == "VirtualMachinePciPassthroughInfo" {
                Some(|ds, _| {
                    let obj: VirtualMachinePciPassthroughInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x63736944 => { // csiD
            if type_name == "VirtualMachineScsiDiskDeviceInfo" {
                Some(|ds, _| {
                    let obj: VirtualMachineScsiDiskDeviceInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x64617469 => { // dati
            if type_name == "HostProfileValidationFailureInfo" {
                Some(|ds, _| {
                    let obj: HostProfileValidationFailureInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x65486f73 => { // eHos
            if type_name == "ProfileReferenceHostChangedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x65546f6f => { // eToo
            if type_name == "VmFaultToleranceTooManyVMsOnHost" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x65617475 => { // eatu
            if type_name == "VirtualMachineFeatureRequirement" {
                Some(|ds, _| {
                    let obj: VirtualMachineFeatureRequirement = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x65634468 => { // ecDh
            if type_name == "NetDhcpConfigSpecDhcpOptionsSpec" {
                Some(|ds, _| {
                    let obj: NetDhcpConfigSpecDhcpOptionsSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x65666175 => { // efau
            match type_name {
                "VirtualMachineDefaultPowerOpInfo" => {
                    Some(|ds, _| {
                        let obj: VirtualMachineDefaultPowerOpInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "VirtualMachineDefaultProfileSpec" => {
                    Some(|ds, _| {
                        let obj: VirtualMachineDefaultProfileSpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x6566696e => { // efin
            if type_name == "VirtualMachineDefinedProfileSpec" {
                Some(|ds, _| {
                    let obj: VirtualMachineDefinedProfileSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x65727669 => { // ervi
            if type_name == "SessionManagerServiceRequestSpec" {
                Some(|ds, _| {
                    let obj: SessionManagerServiceRequestSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x65736f75 => { // esou
            match type_name {
                "ClusterComputeResourceDVSSetting" => {
                    Some(|ds, _| {
                        let obj: ClusterComputeResourceDvsSetting = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "ClusterComputeResourceDvsProfile" => {
                    Some(|ds, _| {
                        let obj: ClusterComputeResourceDvsProfile = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x67657243 => { // gerC
            if type_name == "HostProfileManagerConfigTaskList" {
                Some(|ds, _| {
                    let obj: HostProfileManagerConfigTaskList = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x696c6564 => { // iled
            if type_name == "ProfileUpdateFailedUpdateFailure" {
                Some(|ds, _| {
                    let obj: ProfileUpdateFailedUpdateFailure = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x696e646f => { // indo
            if type_name == "VirtualMachineWindowsQuiesceSpec" {
                Some(|ds, _| {
                    let obj: VirtualMachineWindowsQuiesceSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x696e6753 => { // ingS
            if type_name == "VmTimedoutStartingSecondaryEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x69704365 => { // ipCe
            match type_name {
                "CryptoManagerKmipCertSignRequest" => {
                    Some(|ds, _| {
                        let obj: CryptoManagerKmipCertSignRequest = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "CryptoManagerKmipCertificateInfo" => {
                    Some(|ds, _| {
                        let obj: CryptoManagerKmipCertificateInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x69704372 => { // ipCr
            if type_name == "CryptoManagerKmipCryptoKeyStatus" {
                Some(|ds, _| {
                    let obj: CryptoManagerKmipCryptoKeyStatus = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x69736162 => { // isab
            if type_name == "StorageDrsIolbDisabledInternally" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x69737469 => { // isti
            if type_name == "PerformanceStatisticsDescription" {
                Some(|ds, _| {
                    let obj: PerformanceStatisticsDescription = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x69746368 => { // itch
            if type_name == "GhostDvsProxySwitchDetectedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x69747943 => { // ityC
            if type_name == "HostProfilesEntityCustomizations" {
                Some(|ds, _| {
                    let obj: HostProfilesEntityCustomizations = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6b466175 => { // kFau
            if type_name == "DvsOperationBulkFaultFaultOnHost" {
                Some(|ds, _| {
                    let obj: DvsOperationBulkFaultFaultOnHost = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6c537973 => { // lSys
            if type_name == "HostVsanInternalSystemCmmdsQuery" {
                Some(|ds, _| {
                    let obj: HostVsanInternalSystemCmmdsQuery = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6d667352 => { // mfsR
            if type_name == "HostUnresolvedVmfsResolutionSpec" {
                Some(|ds, _| {
                    let obj: HostUnresolvedVmfsResolutionSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6e757849 => { // nuxI
            if type_name == "CustomizationLinuxIdentityFailed" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f6d6d65 => { // omme
            if type_name == "ApplyStorageRecommendationResult" {
                Some(|ds, _| {
                    let obj: ApplyStorageRecommendationResult = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f6d706c => { // ompl
            if type_name == "ClusterProfileCompleteConfigSpec" {
                Some(|ds, _| {
                    let obj: ClusterProfileCompleteConfigSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f6e4f70 => { // onOp
            if type_name == "HostSpecificationOperationFailed" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f6e6669 => { // onfi
            if type_name == "VFlashCacheHotConfigNotSupported" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f6e6974 => { // onit
            if type_name == "ClusterVmToolsMonitoringSettings" {
                Some(|ds, _| {
                    let obj: ClusterVmToolsMonitoringSettings = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f6e736f => { // onso
            if type_name == "VirtualMachineConsolePreferences" {
                Some(|ds, _| {
                    let obj: VirtualMachineConsolePreferences = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f727952 => { // oryR
            if type_name == "InsufficientMemoryResourcesFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x72636550 => { // rceP
            if type_name == "DVSNetworkResourcePoolConfigSpec" {
                Some(|ds, _| {
                    let obj: DvsNetworkResourcePoolConfigSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x72656164 => { // read
            if type_name == "HostCnxFailedAlreadyManagedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x72656369 => { // reci
            if type_name == "VirtualMachinePrecisionClockInfo" {
                Some(|ds, _| {
                    let obj: VirtualMachinePrecisionClockInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x726f6d69 => { // romi
            if type_name == "VspanPortgroupPromiscChangeFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x72744669 => { // rtFi
            if type_name == "VirtualSerialPortFileBackingInfo" {
                Some(|ds, _| {
                    let obj: VirtualSerialPortFileBackingInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x72745069 => { // rtPi
            if type_name == "VirtualSerialPortPipeBackingInfo" {
                Some(|ds, _| {
                    let obj: VirtualSerialPortPipeBackingInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x72745072 => { // rtPr
            if type_name == "InvalidDasRestartPriorityForFtVm" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x73506f72 => { // sPor
            if type_name == "VspanPromiscuousPortNotSupported" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x73655665 => { // seVe
            match type_name {
                "VirtualDiskSparseVer1BackingInfo" => {
                    Some(|ds, _| {
                        let obj: VirtualDiskSparseVer1BackingInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "VirtualDiskSparseVer2BackingInfo" => {
                    Some(|ds, _| {
                        let obj: VirtualDiskSparseVer2BackingInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x73684361 => { // shCa
            if type_name == "VirtualDiskVFlashCacheConfigInfo" {
                Some(|ds, _| {
                    let obj: VirtualDiskVFlashCacheConfigInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x73696f6e => { // sion
            if type_name == "ClusterDasAdmissionControlPolicy" {
                Some(|ds, _| {
                    let obj: ClusterDasAdmissionControlPolicy = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x73746f6d => { // stom
            if type_name == "CustomizationCustomIpV6Generator" {
                Some(|ds, _| {
                    let obj: CustomizationCustomIpV6Generator = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x74437075 => { // tCpu
            if type_name == "InsufficientHostCpuCapacityFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x74466f72 => { // tFor
            if type_name == "IncompatibleHostForVmReplication" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x74726f6c => { // trol
            if type_name == "DasAdmissionControlDisabledEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x74776f72 => { // twor
            if type_name == "VMotionAcrossNetworkNotSupported" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x75657374 => { // uest
            if type_name == "VirtualMachineGuestIntegrityInfo" {
                Some(|ds, _| {
                    let obj: VirtualMachineGuestIntegrityInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x76696365 => { // vice
            match type_name {
                "VirtualDeviceDeviceBackingOption" => {
                    Some(|ds, _| {
                        let obj: VirtualDeviceDeviceBackingOption = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "VirtualFloppyDeviceBackingOption" => {
                    Some(|ds, _| {
                        let obj: VirtualFloppyDeviceBackingOption = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x79446973 => { // yDis
            if type_name == "VASAStorageArrayDiscoverySvcInfo" {
                Some(|ds, _| {
                    let obj: VasaStorageArrayDiscoverySvcInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x79547970 => { // yTyp
            if type_name == "HostStorageArrayTypePolicyOption" {
                Some(|ds, _| {
                    let obj: HostStorageArrayTypePolicyOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_object_deserializer_33<'de, A: de::MapAccess<'de>>(type_name: &str) -> Option<fn(de::value::MapAccessDeserializer<A>, &str) -> Result<VimAny, A::Error>> {
    let s = &type_name[11..15];
    let Some(type_ord) = to_u32(s) else {
        return None;
    };
    match type_ord {
        0x4167656e => { // Agen
            if type_name == "HostPrimaryAgentNotShortNameEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x496e666f => { // Info
            if type_name == "HostRuntimeInfoNetworkRuntimeInfo" {
                Some(|ds, _| {
                    let obj: HostRuntimeInfoNetworkRuntimeInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4c6f6361 => { // Loca
            if type_name == "VirtualDiskLocalPMemBackingOption" {
                Some(|ds, _| {
                    let obj: VirtualDiskLocalPMemBackingOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x52617744 => { // RawD
            if type_name == "VirtualDiskRawDiskVer2BackingInfo" {
                Some(|ds, _| {
                    let obj: VirtualDiskRawDiskVer2BackingInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x53797374 => { // Syst
            if type_name == "HostStorageSystemVmfsVolumeResult" {
                Some(|ds, _| {
                    let obj: HostStorageSystemVmfsVolumeResult = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x616c506f => { // alPo
            if type_name == "VirtualSerialPortURIBackingOption" {
                Some(|ds, _| {
                    let obj: VirtualSerialPortUriBackingOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x616d696e => { // amin
            match type_name {
                "VMwareDVSTeamingHealthCheckConfig" => {
                    Some(|ds, _| {
                        let obj: VMwareDvsTeamingHealthCheckConfig = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "VMwareDVSTeamingHealthCheckResult" => {
                    Some(|ds, _| {
                        let obj: VMwareDvsTeamingHealthCheckResult = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x616e4d74 => { // anMt
            if type_name == "VMwareDVSVlanMtuHealthCheckConfig" {
                Some(|ds, _| {
                    let obj: VMwareDvsVlanMtuHealthCheckConfig = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x616e6167 => { // anag
            if type_name == "HostVFlashManagerVFlashConfigInfo" {
                Some(|ds, _| {
                    let obj: HostVFlashManagerVFlashConfigInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x64436172 => { // dCar
            if type_name == "VirtualSoundCardDeviceBackingInfo" {
                Some(|ds, _| {
                    let obj: VirtualSoundCardDeviceBackingInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x65546f4e => { // eToN
            if type_name == "SnapshotMoveToNonHomeNotSupported" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x656d6f74 => { // emot
            match type_name {
                "VirtualUSBRemoteClientBackingInfo" => {
                    Some(|ds, _| {
                        let obj: VirtualUsbRemoteClientBackingInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "VirtualUSBRemoteHostBackingOption" => {
                    Some(|ds, _| {
                        let obj: VirtualUsbRemoteHostBackingOption = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x6963656e => { // icen
            if type_name == "ThirdPartyLicenseAssignmentFailed" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x69677261 => { // igra
            if type_name == "DisallowedMigrationDeviceAttached" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x696e6553 => { // ineS
            match type_name {
                "VirtualMachineScsiPassthroughInfo" => {
                    Some(|ds, _| {
                        let obj: VirtualMachineScsiPassthroughInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "VirtualMachineSriovDevicePoolInfo" => {
                    Some(|ds, _| {
                        let obj: VirtualMachineSriovDevicePoolInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x696e6556 => { // ineV
            match type_name {
                "VirtualMachineVMotionStunTimeInfo" => {
                    Some(|ds, _| {
                        let obj: VirtualMachineVMotionStunTimeInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "VirtualMachineVirtualDeviceGroups" => {
                    Some(|ds, _| {
                        let obj: VirtualMachineVirtualDeviceGroups = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x6d526570 => { // mRep
            if type_name == "HbrManagerVmReplicationCapability" {
                Some(|ds, _| {
                    let obj: HbrManagerVmReplicationCapability = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6e466169 => { // nFai
            if type_name == "EVCAdmissionFailedCPUModelForMode" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6e4d616e => { // nMan
            if type_name == "LocalizationManagerMessageCatalog" {
                Some(|ds, _| {
                    let obj: LocalizationManagerMessageCatalog = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6e616765 => { // nage
            if type_name == "ExtensionManagerIpAllocationUsage" {
                Some(|ds, _| {
                    let obj: ExtensionManagerIpAllocationUsage = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6e636553 => { // nceS
            if type_name == "FaultToleranceSecondaryConfigInfo" {
                Some(|ds, _| {
                    let obj: FaultToleranceSecondaryConfigInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6e666f44 => { // nfoD
            if type_name == "BaseConfigInfoDiskFileBackingInfo" {
                Some(|ds, _| {
                    let obj: BaseConfigInfoDiskFileBackingInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6e744f76 => { // ntOv
            if type_name == "SwapPlacementOverrideNotSupported" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f66696c => { // ofil
            if type_name == "ApplyHostProfileConfigurationSpec" {
                Some(|ds, _| {
                    let obj: ApplyHostProfileConfigurationSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f6e4c69 => { // onLi
            if type_name == "CustomizationLicenseFilePrintData" {
                Some(|ds, _| {
                    let obj: CustomizationLicenseFilePrintData = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f6e556e => { // onUn
            if type_name == "CustomizationUnknownIpV6Generator" {
                Some(|ds, _| {
                    let obj: CustomizationUnknownIpV6Generator = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f745375 => { // otSu
            if type_name == "MemorySizeNotSupportedByDatastore" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x70656344 => { // pecD
            if type_name == "VslmCreateSpecDiskFileBackingSpec" {
                Some(|ds, _| {
                    let obj: VslmCreateSpecDiskFileBackingSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x70657261 => { // pera
            if type_name == "DisallowedOperationOnFailoverHost" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x706c696e => { // plin
            if type_name == "HostMemberUplinkHealthCheckResult" {
                Some(|ds, _| {
                    let obj: HostMemberUplinkHealthCheckResult = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x71756554 => { // queT
            if type_name == "HostNvmeOpaqueTransportParameters" {
                Some(|ds, _| {
                    let obj: HostNvmeOpaqueTransportParameters = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x72616e63 => { // ranc
            match type_name {
                "VmFaultToleranceStateChangedEvent" => {
                    Some(|ds, type_name| {
                        let v = __EventVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                "VmFaultToleranceVmTerminatedEvent" => {
                    Some(|ds, type_name| {
                        let v = __EventVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                _ => None
            }
        },
        0x72654272 => { // reBr
            if type_name == "HostDatastoreBrowserSearchResults" {
                Some(|ds, _| {
                    let obj: HostDatastoreBrowserSearchResults = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x72654d75 => { // reMu
            if type_name == "VmfsDatastoreMultipleExtentOption" {
                Some(|ds, _| {
                    let obj: VmfsDatastoreMultipleExtentOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x73745769 => { // stWi
            if type_name == "CannotAddHostWithFTVmAsStandalone" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x74486f73 => { // tHos
            if type_name == "HostEsxAgentHostManagerConfigInfo" {
                Some(|ds, _| {
                    let obj: HostEsxAgentHostManagerConfigInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x74536373 => { // tScs
            match type_name {
                "HostInternetScsiHbaIPCapabilities" => {
                    Some(|ds, _| {
                        let obj: HostInternetScsiHbaIpCapabilities = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "HostInternetScsiHbaIPv6Properties" => {
                    Some(|ds, _| {
                        let obj: HostInternetScsiHbaIPv6Properties = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x74537461 => { // tSta
            if type_name == "InsufficientStandbyMemoryResource" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x74537570 => { // tSup
            if type_name == "WakeOnLanNotSupportedByVmotionNIC" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x74656444 => { // tedD
            if type_name == "OvfUnsupportedDeviceBackingOption" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x74686f72 => { // thor
            if type_name == "HostTrustAuthorityAttestationInfo" {
                Some(|ds, _| {
                    let obj: HostTrustAuthorityAttestationInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7469626c => { // tibl
            if type_name == "HostIncompatibleForFaultTolerance" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x74696350 => { // ticP
            if type_name == "HostDiagnosticPartitionCreateSpec" {
                Some(|ds, _| {
                    let obj: HostDiagnosticPartitionCreateSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x74746163 => { // ttac
            if type_name == "HostSerialAttachedTargetTransport" {
                Some(|ds, _| {
                    let obj: HostSerialAttachedTargetTransport = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x75726365 => { // urce
            if type_name == "InvalidResourcePoolStructureFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x76656456 => { // vedV
            if type_name == "HostUnresolvedVmfsResignatureSpec" {
                Some(|ds, _| {
                    let obj: HostUnresolvedVmfsResignatureSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x77617265 => { // ware
            if type_name == "VirtualHardwareCompatibilityIssue" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x79436f6e => { // yCon
            if type_name == "CannotModifyConfigCpuRequirements" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_object_deserializer_34<'de, A: de::MapAccess<'de>>(type_name: &str) -> Option<fn(de::value::MapAccessDeserializer<A>, &str) -> Result<VimAny, A::Error>> {
    let s = &type_name[17..25];
    let Some(type_ord) = to_u64(s) else {
        return None;
    };
    match type_ord {
        0x4175646974526563 => { // AuditRec
            if type_name == "DiagnosticManagerAuditRecordResult" {
                Some(|ds, _| {
                    let obj: DiagnosticManagerAuditRecordResult = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x426c6f636b734e6f => { // BlocksNo
            if type_name == "UnusedVirtualDiskBlocksNotScrubbed" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4368616e6e656c50 => { // ChannelP
            if type_name == "HostNvmeOverFibreChannelParameters" {
                Some(|ds, _| {
                    let obj: HostNvmeOverFibreChannelParameters = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4465766963654261 => { // DeviceBa
            if type_name == "VirtualSerialPortDeviceBackingInfo" {
                Some(|ds, _| {
                    let obj: VirtualSerialPortDeviceBackingInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x46696c654261636b => { // FileBack
            if type_name == "VirtualSerialPortFileBackingOption" {
                Some(|ds, _| {
                    let obj: VirtualSerialPortFileBackingOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4944657669636546 => { // IDeviceF
            match type_name {
                "VirtualMachineVMCIDeviceFilterInfo" => {
                    Some(|ds, _| {
                        let obj: VirtualMachineVmciDeviceFilterInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "VirtualMachineVMCIDeviceFilterSpec" => {
                    Some(|ds, _| {
                        let obj: VirtualMachineVmciDeviceFilterSpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x4c65676163794465 => { // LegacyDe
            if type_name == "ReadOnlyDisksWithLegacyDestination" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4c6f676963616c55 => { // LogicalU
            if type_name == "HostMultipathInfoLogicalUnitPolicy" {
                Some(|ds, _| {
                    let obj: HostMultipathInfoLogicalUnitPolicy = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x506172616d657465 => { // Paramete
            if type_name == "UserInputRequiredParameterMetadata" {
                Some(|ds, _| {
                    let obj: UserInputRequiredParameterMetadata = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x506970654261636b => { // PipeBack
            if type_name == "VirtualSerialPortPipeBackingOption" {
                Some(|ds, _| {
                    let obj: VirtualSerialPortPipeBackingOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x53436f6e74726f6c => { // SControl
            if type_name == "VirtualLsiLogicSASControllerOption" {
                Some(|ds, _| {
                    let obj: VirtualLsiLogicSasControllerOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x566572314261636b => { // Ver1Back
            if type_name == "VirtualDiskSparseVer1BackingOption" {
                Some(|ds, _| {
                    let obj: VirtualDiskSparseVer1BackingOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x566572324261636b => { // Ver2Back
            if type_name == "VirtualDiskSparseVer2BackingOption" {
                Some(|ds, _| {
                    let obj: VirtualDiskSparseVer2BackingOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x5673616e5768656e => { // VsanWhen
            if type_name == "CannotReconfigureVsanWhenHaEnabled" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x61696e6572466169 => { // ainerFai
            if type_name == "DatastoreVVolContainerFailoverPair" {
                Some(|ds, _| {
                    let obj: DatastoreVVolContainerFailoverPair = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x617465456e637279 => { // ateEncry
            if type_name == "HostRuntimeInfoStateEncryptionInfo" {
                Some(|ds, _| {
                    let obj: HostRuntimeInfoStateEncryptionInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6443505556656e64 => { // dCPUVend
            if type_name == "EVCAdmissionFailedCPUVendorUnknown" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x64486f7374446973 => { // dHostDis
            if type_name == "EVCAdmissionFailedHostDisconnected" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6541746170694261 => { // eAtapiBa
            if type_name == "VirtualCdromRemoteAtapiBackingInfo" {
                Some(|ds, _| {
                    let obj: VirtualCdromRemoteAtapiBackingInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x654c61796f757444 => { // eLayoutD
            if type_name == "VirtualMachineFileLayoutDiskLayout" {
                Some(|ds, _| {
                    let obj: VirtualMachineFileLayoutDiskLayout = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x654c61796f757445 => { // eLayoutE
            match type_name {
                "VirtualMachineFileLayoutExDiskUnit" => {
                    Some(|ds, _| {
                        let obj: VirtualMachineFileLayoutExDiskUnit = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "VirtualMachineFileLayoutExFileInfo" => {
                    Some(|ds, _| {
                        let obj: VirtualMachineFileLayoutExFileInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x654f626a65637450 => { // eObjectP
            if type_name == "vslmInfrastructureObjectPolicySpec" {
                Some(|ds, _| {
                    let obj: VslmInfrastructureObjectPolicySpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x656356656e646f72 => { // ecVendor
            if type_name == "DesiredSoftwareSpecVendorAddOnSpec" {
                Some(|ds, _| {
                    let obj: DesiredSoftwareSpecVendorAddOnSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x656d446174617374 => { // emDatast
            if type_name == "HostDatastoreSystemDatastoreResult" {
                Some(|ds, _| {
                    let obj: HostDatastoreSystemDatastoreResult = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6572696353657276 => { // ericServ
            if type_name == "SessionManagerGenericServiceTicket" {
                Some(|ds, _| {
                    let obj: SessionManagerGenericServiceTicket = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x684661756c74546f => { // hFaultTo
            if type_name == "CannotMoveHostWithFaultToleranceVm" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x68726f7567684261 => { // hroughBa
            if type_name == "VirtualCdromPassthroughBackingInfo" {
                Some(|ds, _| {
                    let obj: VirtualCdromPassthroughBackingInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x69416666696e6974 => { // iAffinit
            if type_name == "FaultToleranceAntiAffinityViolated" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6963735265736f75 => { // icsResou
            if type_name == "InsufficientGraphicsResourcesFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6967537065634261 => { // igSpecBa
            if type_name == "VirtualDeviceConfigSpecBackingSpec" {
                Some(|ds, _| {
                    let obj: VirtualDeviceConfigSpecBackingSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6974684163636573 => { // ithAcces
            if type_name == "NoCompatibleHostWithAccessToDevice" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6c506f727467726f => { // lPortgro
            if type_name == "DistributedVirtualPortgroupProblem" {
                Some(|ds, _| {
                    let obj: DistributedVirtualPortgroupProblem = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6c53776974636848 => { // lSwitchH
            if type_name == "DistributedVirtualSwitchHostMember" {
                Some(|ds, _| {
                    let obj: DistributedVirtualSwitchHostMember = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6c65725063694275 => { // lerPciBu
            if type_name == "VirtualUSBControllerPciBusSlotInfo" {
                Some(|ds, _| {
                    let obj: VirtualUsbControllerPciBusSlotInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6e76616c69644669 => { // nvalidFi
            if type_name == "VmFaultToleranceInvalidFileBacking" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f6e666967497373 => { // onfigIss
            if type_name == "VmFaultToleranceConfigIssueWrapper" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f74696f6e4e6f74 => { // otionNot
            if type_name == "IndependentDiskVMotionNotSupported" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f756768416c6c6f => { // oughAllo
            if type_name == "VirtualPCIPassthroughAllowedDevice" {
                Some(|ds, _| {
                    let obj: VirtualPciPassthroughAllowedDevice = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f7665566d496e55 => { // oveVmInU
            if type_name == "StorageDrsCannotMoveVmInUserFolder" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x706461746548614d => { // pdateHaM
            if type_name == "ClusterHostInfraUpdateHaModeAction" {
                Some(|ds, _| {
                    let obj: ClusterHostInfraUpdateHaModeAction = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7273696f6e4e6f74 => { // rsionNot
            if type_name == "VirtualHardwareVersionNotSupported" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x727446696c654261 => { // rtFileBa
            if type_name == "VirtualParallelPortFileBackingInfo" {
                Some(|ds, _| {
                    let obj: VirtualParallelPortFileBackingInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x735265736f6c7574 => { // sResolut
            if type_name == "HostUnresolvedVmfsResolutionResult" {
                Some(|ds, _| {
                    let obj: HostUnresolvedVmfsResolutionResult = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x73745350424d4c69 => { // stSPBMLi
            if type_name == "ComputeResourceHostSPBMLicenseInfo" {
                Some(|ds, _| {
                    let obj: ComputeResourceHostSpbmLicenseInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x746853637265656e => { // thScreen
            if type_name == "VmDasBeingResetWithScreenshotEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7473546f436c7573 => { // tsToClus
            if type_name == "FolderBatchAddHostsToClusterResult" {
                Some(|ds, _| {
                    let obj: FolderBatchAddHostsToClusterResult = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x756c6174696f6e44 => { // ulationD
            if type_name == "InUseFeatureManipulationDisallowed" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7665725265736f75 => { // verResou
            match type_name {
                "InsufficientFailoverResourcesEvent" => {
                    Some(|ds, type_name| {
                        let v = __EventVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                "InsufficientFailoverResourcesFault" => {
                    Some(|ds, type_name| {
                        let v = __MethodFaultVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                _ => None
            }
        },
        0x766963654261636b => { // viceBack
            if type_name == "VirtualPointingDeviceBackingOption" {
                Some(|ds, _| {
                    let obj: VirtualPointingDeviceBackingOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_object_deserializer_35<'de, A: de::MapAccess<'de>>(type_name: &str) -> Option<fn(de::value::MapAccessDeserializer<A>, &str) -> Result<VimAny, A::Error>> {
    let s = &type_name[11..15];
    let Some(type_ord) = to_u32(s) else {
        return None;
    };
    match type_ord {
        0x41646453 => { // AddS
            if type_name == "FolderBatchAddStandaloneHostsResult" {
                Some(|ds, _| {
                    let obj: FolderBatchAddStandaloneHostsResult = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x496e666f => { // Info
            if type_name == "ToolsConfigInfoToolsLastInstallInfo" {
                Some(|ds, _| {
                    let obj: ToolsConfigInfoToolsLastInstallInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4d616e61 => { // Mana
            if type_name == "HostProfileManagerCompositionResult" {
                Some(|ds, _| {
                    let obj: HostProfileManagerCompositionResult = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x52617744 => { // RawD
            if type_name == "VirtualDiskRawDiskVer2BackingOption" {
                Some(|ds, _| {
                    let obj: VirtualDiskRawDiskVer2BackingOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x53797374 => { // Syst
            if type_name == "VsanUpgradeSystemUpgradeHistoryItem" {
                Some(|ds, _| {
                    let obj: VsanUpgradeSystemUpgradeHistoryItem = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x56697274 => { // Virt
            if type_name == "DistributedVirtualSwitchProductSpec" {
                Some(|ds, _| {
                    let obj: DistributedVirtualSwitchProductSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x57697468 => { // With
            if type_name == "CannotPlaceWithoutPrerequisiteMoves" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x616e6e6f => { // anno
            if type_name == "StorageDrsCannotMoveIndependentDisk" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x61737374 => { // asst
            if type_name == "VirtualPCIPassthroughDvxBackingInfo" {
                Some(|ds, _| {
                    let obj: VirtualPciPassthroughDvxBackingInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x61756c74 => { // ault
            if type_name == "ClusterDrsFaultsFaultsByVirtualDisk" {
                Some(|ds, _| {
                    let obj: ClusterDrsFaultsFaultsByVirtualDisk = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x626c6548 => { // bleH
            if type_name == "VmNoCompatibleHostForSecondaryEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x64436172 => { // dCar
            if type_name == "VirtualSoundCardDeviceBackingOption" {
                Some(|ds, _| {
                    let obj: VirtualSoundCardDeviceBackingOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6546726f => { // eFro
            if type_name == "SnapshotMoveFromNonHomeNotSupported" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x65537973 => { // eSys
            if type_name == "HostDateTimeSystemServiceTestResult" {
                Some(|ds, _| {
                    let obj: HostDateTimeSystemServiceTestResult = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x656d6f74 => { // emot
            if type_name == "VirtualUSBRemoteClientBackingOption" {
                Some(|ds, _| {
                    let obj: VirtualUsbRemoteClientBackingOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x696e6544 => { // ineD
            if type_name == "VirtualMachineDatastoreVolumeOption" {
                Some(|ds, _| {
                    let obj: VirtualMachineDatastoreVolumeOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x696e6549 => { // ineI
            if type_name == "VirtualMachineIndependentFilterSpec" {
                Some(|ds, _| {
                    let obj: VirtualMachineIndependentFilterSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x696e654d => { // ineM
            match type_name {
                "VirtualMachineMemoryReservationInfo" => {
                    Some(|ds, _| {
                        let obj: VirtualMachineMemoryReservationInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "VirtualMachineMemoryReservationSpec" => {
                    Some(|ds, _| {
                        let obj: VirtualMachineMemoryReservationSpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x696e6556 => { // ineV
            if type_name == "VirtualMachineVendorDeviceGroupInfo" {
                Some(|ds, _| {
                    let obj: VirtualMachineVendorDeviceGroupInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x69727475 => { // irtu
            if type_name == "UnlicensedVirtualMachinesFoundEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x69746f72 => { // itor
            if type_name == "VmHealthMonitoringStateChangedEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6c654472 => { // leDr
            if type_name == "CannotDisableDrsOnClustersWithVApps" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f66696c => { // ofil
            if type_name == "ApplyHostProfileConfigurationResult" {
                Some(|ds, _| {
                    let obj: ApplyHostProfileConfigurationResult = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f6c6572 => { // oler
            if type_name == "VmSmpFaultToleranceTooManyVMsOnHost" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f6d7061 => { // ompa
            if type_name == "VmConfigIncompatibleForRecordReplay" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f6e5374 => { // onSt
            if type_name == "CustomizationStatelessIpV6Generator" {
                Some(|ds, _| {
                    let obj: CustomizationStatelessIpV6Generator = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x72617469 => { // rati
            if type_name == "DvsApplyOperationFaultFaultOnObject" {
                Some(|ds, _| {
                    let obj: DvsApplyOperationFaultFaultOnObject = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x72696e67 => { // ring
            if type_name == "AlarmTriggeringActionTransitionSpec" {
                Some(|ds, _| {
                    let obj: AlarmTriggeringActionTransitionSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x73745769 => { // stWi
            if type_name == "CannotAddHostWithFTVmToNonHACluster" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x74486f73 => { // tHos
            if type_name == "InsufficientHostMemoryCapacityFault" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x74536373 => { // tScs
            match type_name {
                "HostInternetScsiHbaDigestProperties" => {
                    Some(|ds, _| {
                        let obj: HostInternetScsiHbaDigestProperties = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "HostInternetScsiHbaIscsiIpv6Address" => {
                    Some(|ds, _| {
                        let obj: HostInternetScsiHbaIscsiIpv6Address = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x74696350 => { // ticP
            if type_name == "HostDiagnosticPartitionCreateOption" {
                Some(|ds, _| {
                    let obj: HostDiagnosticPartitionCreateOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x75707465 => { // upte
            if type_name == "NetworkDisruptedAndConfigRolledBack" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x75746552 => { // uteR
            match type_name {
                "ClusterComputeResourceHCIConfigInfo" => {
                    Some(|ds, _| {
                        let obj: ClusterComputeResourceHciConfigInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "ClusterComputeResourceHCIConfigSpec" => {
                    Some(|ds, _| {
                        let obj: ClusterComputeResourceHciConfigSpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        _ => None
    }
}
fn get_object_deserializer_36<'de, A: de::MapAccess<'de>>(type_name: &str) -> Option<fn(de::value::MapAccessDeserializer<A>, &str) -> Result<VimAny, A::Error>> {
    let s = &type_name[14..18];
    let Some(type_ord) = to_u32(s) else {
        return None;
    };
    match type_ord {
        0x436f6e66 => { // Conf
            match type_name {
                "VirtualMachineConfigInfoOverheadInfo" => {
                    Some(|ds, _| {
                        let obj: VirtualMachineConfigInfoOverheadInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "VirtualMachineConfigOptionDescriptor" => {
                    Some(|ds, _| {
                        let obj: VirtualMachineConfigOptionDescriptor = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x436f6e74 => { // Cont
            if type_name == "VirtualMachineContentLibraryItemInfo" {
                Some(|ds, _| {
                    let obj: VirtualMachineContentLibraryItemInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x44796e61 => { // Dyna
            if type_name == "VirtualMachineDynamicPassthroughInfo" {
                Some(|ds, _| {
                    let obj: VirtualMachineDynamicPassthroughInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x46696c65 => { // File
            if type_name == "VirtualMachineFileLayoutExDiskLayout" {
                Some(|ds, _| {
                    let obj: VirtualMachineFileLayoutExDiskLayout = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x48747470 => { // Http
            if type_name == "SessionManagerHttpServiceRequestSpec" {
                Some(|ds, _| {
                    let obj: SessionManagerHttpServiceRequestSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x496e6974 => { // Init
            if type_name == "ClusterClusterInitialPlacementAction" {
                Some(|ds, _| {
                    let obj: ClusterClusterInitialPlacementAction = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x5265736f => { // Reso
            if type_name == "ClusterComputeResourceHostVmkNicInfo" {
                Some(|ds, _| {
                    let obj: ClusterComputeResourceHostVmkNicInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x53657474 => { // Sett
            if type_name == "CannotChangeHaSettingsForFtSecondary" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x56364164 => { // V6Ad
            if type_name == "HostIpConfigIpV6AddressConfiguration" {
                Some(|ds, _| {
                    let obj: HostIpConfigIpV6AddressConfiguration = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x616d6543 => { // ameC
            if type_name == "HostDatastoreNameConflictConnectInfo" {
                Some(|ds, _| {
                    let obj: HostDatastoreNameConflictConnectInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x61794469 => { // ayDi
            match type_name {
                "VASAStorageArrayDiscoveryFcTransport" => {
                    Some(|ds, _| {
                        let obj: VasaStorageArrayDiscoveryFcTransport = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "VASAStorageArrayDiscoveryIpTransport" => {
                    Some(|ds, _| {
                        let obj: VasaStorageArrayDiscoveryIpTransport = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x6365546f => { // ceTo
            if type_name == "VmFaultToleranceTooManyFtVcpusOnHost" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x636b734e => { // cksN
            if type_name == "VirtualDiskBlocksNotFullyProvisioned" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x64506f6c => { // dPol
            if type_name == "ProfileDeferredPolicyOptionParameter" {
                Some(|ds, _| {
                    let obj: ProfileDeferredPolicyOptionParameter = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x65436f6d => { // eCom
            if type_name == "HostTpmSoftwareComponentEventDetails" {
                Some(|ds, _| {
                    let obj: HostTpmSoftwareComponentEventDetails = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x656d6f74 => { // emot
            match type_name {
                "VirtualDeviceRemoteDeviceBackingInfo" => {
                    Some(|ds, _| {
                        let obj: VirtualDeviceRemoteDeviceBackingInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "VirtualFloppyRemoteDeviceBackingInfo" => {
                    Some(|ds, _| {
                        let obj: VirtualFloppyRemoteDeviceBackingInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x66696749 => { // figI
            if type_name == "VsanClusterConfigInfoHostDefaultInfo" {
                Some(|ds, _| {
                    let obj: VsanClusterConfigInfoHostDefaultInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x69616c69 => { // iali
            if type_name == "HostProfileSerializedHostProfileSpec" {
                Some(|ds, _| {
                    let obj: HostProfileSerializedHostProfileSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x69634e65 => { // icNe
            if type_name == "DvsSystemTrafficNetworkRuleQualifier" {
                Some(|ds, _| {
                    let obj: DvsSystemTrafficNetworkRuleQualifier = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x696c6564 => { // iled
            if type_name == "EVCAdmissionFailedCPUFeaturesForMode" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x696c6974 => { // ilit
            if type_name == "OvfCpuCompatibilityCheckNotSupported" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6c506f72 => { // lPor
            match type_name {
                "VirtualParallelPortDeviceBackingInfo" => {
                    Some(|ds, _| {
                        let obj: VirtualParallelPortDeviceBackingInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "VirtualParallelPortFileBackingOption" => {
                    Some(|ds, _| {
                        let obj: VirtualParallelPortFileBackingOption = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x6d697043 => { // mipC
            if type_name == "CryptoManagerKmipCustomAttributeSpec" {
                Some(|ds, _| {
                    let obj: CryptoManagerKmipCustomAttributeSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6d6f7465 => { // mote
            if type_name == "VirtualCdromRemoteAtapiBackingOption" {
                Some(|ds, _| {
                    let obj: VirtualCdromRemoteAtapiBackingOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6e656e74 => { // nent
            if type_name == "ClusterVmComponentProtectionSettings" {
                Some(|ds, _| {
                    let obj: ClusterVmComponentProtectionSettings = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f727444 => { // ortD
            if type_name == "VirtualSerialPortDeviceBackingOption" {
                Some(|ds, _| {
                    let obj: VirtualSerialPortDeviceBackingOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f744d6f => { // otMo
            if type_name == "StorageDrsCannotMoveManuallyPlacedVm" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x72756374 => { // ruct
            if type_name == "DvsHostInfrastructureTrafficResource" {
                Some(|ds, _| {
                    let obj: DvsHostInfrastructureTrafficResource = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x73506572 => { // sPer
            if type_name == "NumVirtualCoresPerSocketNotSupported" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x73737468 => { // ssth
            if type_name == "VirtualCdromPassthroughBackingOption" {
                Some(|ds, _| {
                    let obj: VirtualCdromPassthroughBackingOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x74614469 => { // taDi
            if type_name == "VirtualDiskDeltaDiskFormatsSupported" {
                Some(|ds, _| {
                    let obj: VirtualDiskDeltaDiskFormatsSupported = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7465506f => { // tePo
            if type_name == "ProfileCompositePolicyOptionMetadata" {
                Some(|ds, _| {
                    let obj: ProfileCompositePolicyOptionMetadata = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x74656d50 => { // temP
            if type_name == "VsanUpgradeSystemPreflightCheckIssue" {
                Some(|ds, _| {
                    let obj: VsanUpgradeSystemPreflightCheckIssue = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7475616c => { // tual
            if type_name == "DistributedVirtualSwitchPortCriteria" {
                Some(|ds, _| {
                    let obj: DistributedVirtualSwitchPortCriteria = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x75726365 => { // urce
            if type_name == "DVSNetworkResourcePoolAllocationInfo" {
                Some(|ds, _| {
                    let obj: DvsNetworkResourcePoolAllocationInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x79737465 => { // yste
            if type_name == "HostDatastoreSystemVvolDatastoreSpec" {
                Some(|ds, _| {
                    let obj: HostDatastoreSystemVvolDatastoreSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_object_deserializer_37<'de, A: de::MapAccess<'de>>(type_name: &str) -> Option<fn(de::value::MapAccessDeserializer<A>, &str) -> Result<VimAny, A::Error>> {
    let s = &type_name[14..18];
    let Some(type_ord) = to_u32(s) else {
        return None;
    };
    match type_ord {
        0x436f6e66 => { // Conf
            if type_name == "ClusterProfileConfigServiceCreateSpec" {
                Some(|ds, _| {
                    let obj: ClusterProfileConfigServiceCreateSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x47756573 => { // Gues
            if type_name == "VirtualMachineGuestMonitoringModeInfo" {
                Some(|ds, _| {
                    let obj: VirtualMachineGuestMonitoringModeInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4c656761 => { // Lega
            if type_name == "VirtualMachineLegacyNetworkSwitchInfo" {
                Some(|ds, _| {
                    let obj: VirtualMachineLegacyNetworkSwitchInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4d616e61 => { // Mana
            if type_name == "HostVirtualNicManagerNicTypeSelection" {
                Some(|ds, _| {
                    let obj: HostVirtualNicManagerNicTypeSelection = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x52656c6f => { // Relo
            if type_name == "VirtualMachineRelocateSpecDiskLocator" {
                Some(|ds, _| {
                    let obj: VirtualMachineRelocateSpecDiskLocator = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x566d6673 => { // Vmfs
            if type_name == "HostUnresolvedVmfsVolumeResolveStatus" {
                Some(|ds, _| {
                    let obj: HostUnresolvedVmfsVolumeResolveStatus = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x566d6f6d => { // Vmom
            if type_name == "SessionManagerVmomiServiceRequestSpec" {
                Some(|ds, _| {
                    let obj: SessionManagerVmomiServiceRequestSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x61676572 => { // ager
            match type_name {
                "PerformanceManagerCounterLevelMapping" => {
                    Some(|ds, _| {
                        let obj: PerformanceManagerCounterLevelMapping = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "HostProfileManagerHostToConfigSpecMap" => {
                    Some(|ds, _| {
                        let obj: HostProfileManagerHostToConfigSpecMap = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x61746962 => { // atib
            if type_name == "VmConfigIncompatibleForFaultTolerance" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x654d616e => { // eMan
            match type_name {
                "HostCertificateManagerCertificateInfo" => {
                    Some(|ds, _| {
                        let obj: HostCertificateManagerCertificateInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "HostCertificateManagerCertificateSpec" => {
                    Some(|ds, _| {
                        let obj: HostCertificateManagerCertificateSpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x65746563 => { // etec
            if type_name == "NonVIWorkloadDetectedOnDatastoreEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x696c6564 => { // iled
            if type_name == "EVCAdmissionFailedHostSoftwareForMode" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6e42756c => { // nBul
            if type_name == "ImportOperationBulkFaultFaultOnImport" {
                Some(|ds, _| {
                    let obj: ImportOperationBulkFaultFaultOnImport = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6e666f48 => { // nfoH
            if type_name == "HostMultipathInfoHppLogicalUnitPolicy" {
                Some(|ds, _| {
                    let obj: HostMultipathInfoHppLogicalUnitPolicy = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f727454 => { // ortT
            if type_name == "VirtualSerialPortThinPrintBackingInfo" {
                Some(|ds, _| {
                    let obj: VirtualSerialPortThinPrintBackingInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x70656369 => { // peci
            if type_name == "DvsPortVendorSpecificStateChangeEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x73426568 => { // sBeh
            if type_name == "CannotChangeDrsBehaviorForFtSecondary" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x73694862 => { // siHb
            if type_name == "HostInternetScsiHbaDigestCapabilities" {
                Some(|ds, _| {
                    let obj: HostInternetScsiHbaDigestCapabilities = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x74436172 => { // tCar
            match type_name {
                "VirtualEthernetCardNetworkBackingInfo" => {
                    Some(|ds, _| {
                        let obj: VirtualEthernetCardNetworkBackingInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "VirtualEthernetCardResourceAllocation" => {
                    Some(|ds, _| {
                        let obj: VirtualEthernetCardResourceAllocation = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x744d616e => { // tMan
            if type_name == "HostNoRedundantManagementNetworkEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x74656d44 => { // temD
            if type_name == "HostStorageSystemDiskLocatorLedResult" {
                Some(|ds, _| {
                    let obj: HostStorageSystemDiskLocatorLedResult = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x74656d4e => { // temN
            if type_name == "VsanUpgradeSystemNetworkPartitionInfo" {
                Some(|ds, _| {
                    let obj: VsanUpgradeSystemNetworkPartitionInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x74656d50 => { // temP
            if type_name == "VsanUpgradeSystemPreflightCheckResult" {
                Some(|ds, _| {
                    let obj: VsanUpgradeSystemPreflightCheckResult = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x74656d57 => { // temW
            if type_name == "VsanUpgradeSystemWrongEsxVersionIssue" {
                Some(|ds, _| {
                    let obj: VsanUpgradeSystemWrongEsxVersionIssue = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x74684375 => { // thCu
            if type_name == "VmPoweringOnWithCustomizedDVPortEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7468726f => { // thro
            match type_name {
                "VirtualPCIPassthroughDvxBackingOption" => {
                    Some(|ds, _| {
                        let obj: VirtualPciPassthroughDvxBackingOption = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "VirtualPCIPassthroughVmiopBackingInfo" => {
                    Some(|ds, _| {
                        let obj: VirtualPciPassthroughVmiopBackingInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x7475616c => { // tual
            if type_name == "DistributedVirtualSwitchPortConnectee" {
                Some(|ds, _| {
                    let obj: DistributedVirtualSwitchPortConnectee = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x75726365 => { // urce
            if type_name == "HostVFlashResourceConfigurationResult" {
                Some(|ds, _| {
                    let obj: HostVFlashResourceConfigurationResult = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x75726974 => { // urit
            if type_name == "HostTpmBootSecurityOptionEventDetails" {
                Some(|ds, _| {
                    let obj: HostTpmBootSecurityOptionEventDetails = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x75744f6e => { // utOn
            if type_name == "VmFailedRelayoutOnVmfs2DatastoreEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_object_deserializer_38<'de, A: de::MapAccess<'de>>(type_name: &str) -> Option<fn(de::value::MapAccessDeserializer<A>, &str) -> Result<VimAny, A::Error>> {
    let s = &type_name[5..9];
    let Some(type_ord) = to_u32(s) else {
        return None;
    };
    match type_ord {
        0x466c6173 => { // Flas
            match type_name {
                "HostVFlashManagerVFlashCacheConfigInfo" => {
                    Some(|ds, _| {
                        let obj: HostVFlashManagerVFlashCacheConfigInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "HostVFlashManagerVFlashCacheConfigSpec" => {
                    Some(|ds, _| {
                        let obj: HostVFlashManagerVFlashCacheConfigSpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x616c4465 => { // alDe
            if type_name == "VirtualDeviceRemoteDeviceBackingOption" {
                Some(|ds, _| {
                    let obj: VirtualDeviceRemoteDeviceBackingOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x616c4574 => { // alEt
            if type_name == "VirtualEthernetCardDVPortBackingOption" {
                Some(|ds, _| {
                    let obj: VirtualEthernetCardDvPortBackingOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x616c466c => { // alFl
            if type_name == "VirtualFloppyRemoteDeviceBackingOption" {
                Some(|ds, _| {
                    let obj: VirtualFloppyRemoteDeviceBackingOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x616c4d61 => { // alMa
            if type_name == "VirtualMachineFileLayoutSnapshotLayout" {
                Some(|ds, _| {
                    let obj: VirtualMachineFileLayoutSnapshotLayout = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x616c5043 => { // alPC
            match type_name {
                "VirtualPCIPassthroughDeviceBackingInfo" => {
                    Some(|ds, _| {
                        let obj: VirtualPciPassthroughDeviceBackingInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "VirtualPCIPassthroughPluginBackingInfo" => {
                    Some(|ds, _| {
                        let obj: VirtualPciPassthroughPluginBackingInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x616c5061 => { // alPa
            if type_name == "VirtualParallelPortDeviceBackingOption" {
                Some(|ds, _| {
                    let obj: VirtualParallelPortDeviceBackingOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x616c506f => { // alPo
            if type_name == "VirtualPointingDeviceDeviceBackingInfo" {
                Some(|ds, _| {
                    let obj: VirtualPointingDeviceDeviceBackingInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x63636573 => { // cces
            if type_name == "HostAccessRestrictedToManagementServer" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x65446973 => { // eDis
            if type_name == "VmwareDistributedVirtualSwitchVlanSpec" {
                Some(|ds, _| {
                    let obj: VmwareDistributedVirtualSwitchVlanSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x67654472 => { // geDr
            if type_name == "StorageDrsCannotMoveVmWithMountedCDROM" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x69627574 => { // ibut
            match type_name {
                "DistributedVirtualSwitchPortConnection" => {
                    Some(|ds, _| {
                        let obj: DistributedVirtualSwitchPortConnection = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "DistributedVirtualSwitchPortStatistics" => {
                    Some(|ds, _| {
                        let obj: DistributedVirtualSwitchPortStatistics = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x69746f72 => { // itor
            if type_name == "VmMonitorIncompatibleForFaultTolerance" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6c654d65 => { // leMe
            if type_name == "ProfileMetadataProfileOperationMessage" {
                Some(|ds, _| {
                    let obj: ProfileMetadataProfileOperationMessage = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6d697a61 => { // miza
            if type_name == "CustomizationIPSettingsIpV6AddressSpec" {
                Some(|ds, _| {
                    let obj: CustomizationIpSettingsIpV6AddressSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6e746572 => { // nter
            if type_name == "HostInternetScsiHbaDiscoveryProperties" {
                Some(|ds, _| {
                    let obj: HostInternetScsiHbaDiscoveryProperties = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x70677261 => { // pgra
            if type_name == "VsanUpgradeSystemNetworkPartitionIssue" {
                Some(|ds, _| {
                    let obj: VsanUpgradeSystemNetworkPartitionIssue = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x746f7265 => { // tore
            if type_name == "DatastoreNamespaceManagerDirectoryInfo" {
                Some(|ds, _| {
                    let obj: DatastoreNamespaceManagerDirectoryInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x74776f72 => { // twor
            if type_name == "DVSNetworkResourceManagementCapability" {
                Some(|ds, _| {
                    let obj: DvsNetworkResourceManagementCapability = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_object_deserializer_39<'de, A: de::MapAccess<'de>>(type_name: &str) -> Option<fn(de::value::MapAccessDeserializer<A>, &str) -> Result<VimAny, A::Error>> {
    let s = &type_name[11..15];
    let Some(type_ord) = to_u32(s) else {
        return None;
    };
    match type_ord {
        0x42726f77 => { // Brow
            if type_name == "EnvironmentBrowserConfigOptionQuerySpec" {
                Some(|ds, _| {
                    let obj: EnvironmentBrowserConfigOptionQuerySpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4d616e61 => { // Mana
            match type_name {
                "HostVMotionManagerDstInstantCloneResult" => {
                    Some(|ds, _| {
                        let obj: HostVMotionManagerDstInstantCloneResult = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "HostVMotionManagerSrcInstantCloneResult" => {
                    Some(|ds, _| {
                        let obj: HostVMotionManagerSrcInstantCloneResult = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x50617373 => { // Pass
            if type_name == "VirtualSCSIPassthroughDeviceBackingInfo" {
                Some(|ds, _| {
                    let obj: VirtualScsiPassthroughDeviceBackingInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x53797374 => { // Syst
            if type_name == "VsanUpgradeSystemHostsDisconnectedIssue" {
                Some(|ds, _| {
                    let obj: VsanUpgradeSystemHostsDisconnectedIssue = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x56697274 => { // Virt
            match type_name {
                "DistributedVirtualSwitchHostProductSpec" => {
                    Some(|ds, _| {
                        let obj: DistributedVirtualSwitchHostProductSpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "DistributedVirtualSwitchKeyedOpaqueBlob" => {
                    Some(|ds, _| {
                        let obj: DistributedVirtualSwitchKeyedOpaqueBlob = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x616c506f => { // alPo
            if type_name == "VirtualSerialPortThinPrintBackingOption" {
                Some(|ds, _| {
                    let obj: VirtualSerialPortThinPrintBackingOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x616e6e65 => { // anne
            if type_name == "HostFibreChannelOverEthernetHbaLinkInfo" {
                Some(|ds, _| {
                    let obj: HostFibreChannelOverEthernetHbaLinkInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x61737374 => { // asst
            match type_name {
                "VirtualPCIPassthroughDynamicBackingInfo" => {
                    Some(|ds, _| {
                        let obj: VirtualPciPassthroughDynamicBackingInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "VirtualPCIPassthroughVmiopBackingOption" => {
                    Some(|ds, _| {
                        let obj: VirtualPciPassthroughVmiopBackingOption = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x63654d6f => { // ceMo
            if type_name == "NoMaintenanceModeDrsRecommendationForVM" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x66696749 => { // figI
            if type_name == "VsanHostConfigInfoNetworkInfoPortConfig" {
                Some(|ds, _| {
                    let obj: VsanHostConfigInfoNetworkInfoPortConfig = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x69627574 => { // ibut
            if type_name == "VmwareDistributedVirtualSwitchPvlanSpec" {
                Some(|ds, _| {
                    let obj: VmwareDistributedVirtualSwitchPvlanSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x696e6542 => { // ineB
            match type_name {
                "VirtualMachineBaseIndependentFilterSpec" => {
                    Some(|ds, _| {
                        let obj: VirtualMachineBaseIndependentFilterSpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "VirtualMachineBootOptionsBootableDevice" => {
                    Some(|ds, _| {
                        let obj: VirtualMachineBootOptionsBootableDevice = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x696e654d => { // ineM
            if type_name == "VirtualMachineMetadataManagerVmMetadata" {
                Some(|ds, _| {
                    let obj: VirtualMachineMetadataManagerVmMetadata = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x696e6551 => { // ineQ
            if type_name == "VirtualMachineQuickStatsMemoryTierStats" {
                Some(|ds, _| {
                    let obj: VirtualMachineQuickStatsMemoryTierStats = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6e616765 => { // nage
            if type_name == "HostPatchManagerStatusPrerequisitePatch" {
                Some(|ds, _| {
                    let obj: HostPatchManagerStatusPrerequisitePatch = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6e666f52 => { // nfoR
            if type_name == "BaseConfigInfoRawDiskMappingBackingInfo" {
                Some(|ds, _| {
                    let obj: BaseConfigInfoRawDiskMappingBackingInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6e747345 => { // ntsE
            if type_name == "VmRequirementsExceedCurrentEVCModeEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f726d61 => { // orma
            if type_name == "MemoryFileFormatNotSupportedByDatastore" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f766572 => { // over
            if type_name == "ClusterFailoverHostAdmissionControlInfo" {
                Some(|ds, _| {
                    let obj: ClusterFailoverHostAdmissionControlInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x70656352 => { // pecR
            if type_name == "VslmCreateSpecRawDiskMappingBackingSpec" {
                Some(|ds, _| {
                    let obj: VslmCreateSpecRawDiskMappingBackingSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x726e6574 => { // rnet
            if type_name == "VirtualEthernetCardNetworkBackingOption" {
                Some(|ds, _| {
                    let obj: VirtualEthernetCardNetworkBackingOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x73745769 => { // stWi
            if type_name == "CannotAddHostWithFTVmToDifferentCluster" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x744e6574 => { // tNet
            if type_name == "InsufficientNetworkResourcePoolCapacity" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x7468496e => { // thIn
            if type_name == "HostMultipathInfoFixedLogicalUnitPolicy" {
                Some(|ds, _| {
                    let obj: HostMultipathInfoFixedLogicalUnitPolicy = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x74776f72 => { // twor
            if type_name == "DvsVmVnicNetworkResourcePoolRuntimeInfo" {
                Some(|ds, _| {
                    let obj: DvsVmVnicNetworkResourcePoolRuntimeInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_object_deserializer_40<'de, A: de::MapAccess<'de>>(type_name: &str) -> Option<fn(de::value::MapAccessDeserializer<A>, &str) -> Result<VimAny, A::Error>> {
    let s = &type_name[23..31];
    let Some(type_ord) = to_u64(s) else {
        return None;
    };
    match type_ord {
        0x4361636865436f6e => { // CacheCon
            if type_name == "VirtualDiskOptionVFlashCacheConfigOption" {
                Some(|ds, _| {
                    let obj: VirtualDiskOptionVFlashCacheConfigOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4372656174654465 => { // CreateDe
            if type_name == "HostDiagnosticPartitionCreateDescription" {
                Some(|ds, _| {
                    let obj: HostDiagnosticPartitionCreateDescription = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x616e63654661696c => { // anceFail
            if type_name == "ComplianceFailureComplianceFailureValues" {
                Some(|ds, _| {
                    let obj: ComplianceFailureComplianceFailureValues = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x645372696f764261 => { // dSriovBa
            if type_name == "VirtualSriovEthernetCardSriovBackingInfo" {
                Some(|ds, _| {
                    let obj: VirtualSriovEthernetCardSriovBackingInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x684661756c74546f => { // hFaultTo
            if type_name == "CannotDisconnectHostWithFaultToleranceVm" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x68726f7567684261 => { // hroughBa
            if type_name == "VirtualCdromRemotePassthroughBackingInfo" {
                Some(|ds, _| {
                    let obj: VirtualCdromRemotePassthroughBackingInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x697373696f6e436f => { // issionCo
            if type_name == "ClusterFailoverLevelAdmissionControlInfo" {
                Some(|ds, _| {
                    let obj: ClusterFailoverLevelAdmissionControlInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6c53776974636856 => { // lSwitchV
            if type_name == "VmwareDistributedVirtualSwitchVlanIdSpec" {
                Some(|ds, _| {
                    let obj: VmwareDistributedVirtualSwitchVlanIdSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6e67566572314261 => { // ngVer1Ba
            if type_name == "VirtualDiskRawDiskMappingVer1BackingInfo" {
                Some(|ds, _| {
                    let obj: VirtualDiskRawDiskMappingVer1BackingInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f4461746173746f => { // oDatasto
            if type_name == "VirtualMachineConfigInfoDatastoreUrlPair" {
                Some(|ds, _| {
                    let obj: VirtualMachineConfigInfoDatastoreUrlPair = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f6c6174696f6e43 => { // olationC
            if type_name == "VmVnicPoolReservationViolationClearEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f6c6174696f6e52 => { // olationR
            if type_name == "VmVnicPoolReservationViolationRaiseEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f6d697a65644456 => { // omizedDV
            if type_name == "HostVnicConnectedToCustomizedDVPortEvent" {
                Some(|ds, type_name| {
                    let v = __EventVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6f726b4465766963 => { // orkDevic
            if type_name == "VirtualMachineSriovNetworkDevicePoolInfo" {
                Some(|ds, _| {
                    let obj: VirtualMachineSriovNetworkDevicePoolInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f76657279436170 => { // overyCap
            if type_name == "HostInternetScsiHbaDiscoveryCapabilities" {
                Some(|ds, _| {
                    let obj: HostInternetScsiHbaDiscoveryCapabilities = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x70656e64656e7446 => { // pendentF
            if type_name == "VirtualMachineEmptyIndependentFilterSpec" {
                Some(|ds, _| {
                    let obj: VirtualMachineEmptyIndependentFilterSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x744578536e617073 => { // tExSnaps
            if type_name == "VirtualMachineFileLayoutExSnapshotLayout" {
                Some(|ds, _| {
                    let obj: VirtualMachineFileLayoutExSnapshotLayout = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7567696e4261636b => { // uginBack
            if type_name == "VirtualPCIPassthroughPluginBackingOption" {
                Some(|ds, _| {
                    let obj: VirtualPciPassthroughPluginBackingOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x766963654261636b => { // viceBack
            if type_name == "VirtualPCIPassthroughDeviceBackingOption" {
                Some(|ds, _| {
                    let obj: VirtualPciPassthroughDeviceBackingOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7669636550617274 => { // vicePart
            if type_name == "VirtualMachineIdeDiskDevicePartitionInfo" {
                Some(|ds, _| {
                    let obj: VirtualMachineIdeDiskDevicePartitionInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7765724f6e4e6f74 => { // werOnNot
            if type_name == "FaultTolerancePrimaryPowerOnNotAttempted" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_object_deserializer_41<'de, A: de::MapAccess<'de>>(type_name: &str) -> Option<fn(de::value::MapAccessDeserializer<A>, &str) -> Result<VimAny, A::Error>> {
    let s = &type_name[7..11];
    let Some(type_ord) = to_u32(s) else {
        return None;
    };
    match type_ord {
        0x41737369 => { // Assi
            if type_name == "LicenseAssignmentManagerLicenseAssignment" {
                Some(|ds, _| {
                    let obj: LicenseAssignmentManagerLicenseAssignment = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x436f6d70 => { // Comp
            if type_name == "ClusterComputeResourceClusterConfigResult" {
                Some(|ds, _| {
                    let obj: ClusterComputeResourceClusterConfigResult = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x44727343 => { // DrsC
            match type_name {
                "StorageDrsCannotMoveDiskInMultiWriterMode" => {
                    Some(|ds, type_name| {
                        let v = __MethodFaultVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                "StorageDrsCannotMoveVmWithNoFilesInLayout" => {
                    Some(|ds, type_name| {
                        let v = __MethodFaultVisitor(Some(type_name.to_string()));
                        Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                    })
                }
                _ => None
            }
        },
        0x44727344 => { // DrsD
            if type_name == "StorageDrsDatacentersCannotShareDatastore" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x4661696c => { // Fail
            if type_name == "ClusterFailoverHostAdmissionControlPolicy" {
                Some(|ds, _| {
                    let obj: ClusterFailoverHostAdmissionControlPolicy = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4d616368 => { // Mach
            if type_name == "VirtualMachinePciSharedGpuPassthroughInfo" {
                Some(|ds, _| {
                    let obj: VirtualMachinePciSharedGpuPassthroughInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x50434950 => { // PCIP
            if type_name == "VirtualPCIPassthroughDynamicBackingOption" {
                Some(|ds, _| {
                    let obj: VirtualPciPassthroughDynamicBackingOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x53435349 => { // SCSI
            if type_name == "VirtualSCSIPassthroughDeviceBackingOption" {
                Some(|ds, _| {
                    let obj: VirtualScsiPassthroughDeviceBackingOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6173684d => { // ashM
            match type_name {
                "HostVFlashManagerVFlashResourceConfigInfo" => {
                    Some(|ds, _| {
                        let obj: HostVFlashManagerVFlashResourceConfigInfo = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "HostVFlashManagerVFlashResourceConfigSpec" => {
                    Some(|ds, _| {
                        let obj: HostVFlashManagerVFlashResourceConfigSpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x63684d61 => { // chMa
            if type_name == "HostPatchManagerPatchManagerOperationSpec" {
                Some(|ds, _| {
                    let obj: HostPatchManagerPatchManagerOperationSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x72616465 => { // rade
            if type_name == "VsanUpgradeSystemRogueHostsInClusterIssue" {
                Some(|ds, _| {
                    let obj: VsanUpgradeSystemRogueHostsInClusterIssue = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x74656d53 => { // temS
            if type_name == "HostSystemSwapConfigurationDisabledOption" {
                Some(|ds, _| {
                    let obj: HostSystemSwapConfigurationDisabledOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x75746564 => { // uted
            if type_name == "DistributedVirtualSwitchHostMemberBacking" {
                Some(|ds, _| {
                    let obj: DistributedVirtualSwitchHostMemberBacking = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_object_deserializer_42<'de, A: de::MapAccess<'de>>(type_name: &str) -> Option<fn(de::value::MapAccessDeserializer<A>, &str) -> Result<VimAny, A::Error>> {
    let s = &type_name[24..28];
    let Some(type_ord) = to_u32(s) else {
        return None;
    };
    match type_ord {
        0x48697374 => { // Hist
            if type_name == "VsanUpgradeSystemUpgradeHistoryDiskGroupOp" {
                Some(|ds, _| {
                    let obj: VsanUpgradeSystemUpgradeHistoryDiskGroupOp = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x486f7374 => { // Host
            if type_name == "DistributedVirtualSwitchHostMemberPnicSpec" {
                Some(|ds, _| {
                    let obj: DistributedVirtualSwitchHostMemberPnicSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4e657477 => { // Netw
            if type_name == "DistributedVirtualSwitchNetworkOffloadSpec" {
                Some(|ds, _| {
                    let obj: DistributedVirtualSwitchNetworkOffloadSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x5372696f => { // Srio
            if type_name == "VirtualSriovEthernetCardSriovBackingOption" {
                Some(|ds, _| {
                    let obj: VirtualSriovEthernetCardSriovBackingOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x616c6c79 => { // ally
            if type_name == "StorageDrsCannotMoveManuallyPlacedSwapFile" {
                Some(|ds, type_name| {
                    let v = __MethodFaultVisitor(Some(type_name.to_string()));
                    Ok(VimAny::Object(Box::new(ds.deserialize_map(v)?)))
                })
            } else { None }
        },
        0x6476616e => { // dvan
            if type_name == "ClusterDasFailoverLevelAdvancedRuntimeInfo" {
                Some(|ds, _| {
                    let obj: ClusterDasFailoverLevelAdvancedRuntimeInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x65736f75 => { // esou
            if type_name == "HostVFlashManagerVFlashResourceRunTimeInfo" {
                Some(|ds, _| {
                    let obj: HostVFlashManagerVFlashResourceRunTimeInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x67566572 => { // gVer
            if type_name == "VirtualDiskRawDiskMappingVer1BackingOption" {
                Some(|ds, _| {
                    let obj: VirtualDiskRawDiskMappingVer1BackingOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x696f6e44 => { // ionD
            if type_name == "HostSystemSwapConfigurationDatastoreOption" {
                Some(|ds, _| {
                    let obj: HostSystemSwapConfigurationDatastoreOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x696f6e48 => { // ionH
            if type_name == "HostSystemSwapConfigurationHostCacheOption" {
                Some(|ds, _| {
                    let obj: HostSystemSwapConfigurationHostCacheOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6c696461 => { // lida
            if type_name == "ClusterComputeResourceValidationResultBase" {
                Some(|ds, _| {
                    let obj: ClusterComputeResourceValidationResultBase = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6e737461 => { // nsta
            if type_name == "HostRuntimeInfoNetStackInstanceRuntimeInfo" {
                Some(|ds, _| {
                    let obj: HostRuntimeInfoNetStackInstanceRuntimeInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x726f7567 => { // roug
            if type_name == "VirtualCdromRemotePassthroughBackingOption" {
                Some(|ds, _| {
                    let obj: VirtualCdromRemotePassthroughBackingOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7373696f => { // ssio
            if type_name == "ClusterFailoverLevelAdmissionControlPolicy" {
                Some(|ds, _| {
                    let obj: ClusterFailoverLevelAdmissionControlPolicy = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_object_deserializer_43<'de, A: de::MapAccess<'de>>(type_name: &str) -> Option<fn(de::value::MapAccessDeserializer<A>, &str) -> Result<VimAny, A::Error>> {
    let s = &type_name[16..20];
    let Some(type_ord) = to_u32(s) else {
        return None;
    };
    match type_ord {
        0x436c6f63 => { // Cloc
            if type_name == "VirtualPrecisionClockSystemClockBackingInfo" {
                Some(|ds, _| {
                    let obj: VirtualPrecisionClockSystemClockBackingInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x48626141 => { // HbaA
            if type_name == "HostInternetScsiHbaAuthenticationProperties" {
                Some(|ds, _| {
                    let obj: HostInternetScsiHbaAuthenticationProperties = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4f766572 => { // Over
            if type_name == "HostFibreChannelOverEthernetTargetTransport" {
                Some(|ds, _| {
                    let obj: HostFibreChannelOverEthernetTargetTransport = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x616c5377 => { // alSw
            if type_name == "DistributedVirtualSwitchManagerImportResult" {
                Some(|ds, _| {
                    let obj: DistributedVirtualSwitchManagerImportResult = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6172644c => { // ardL
            if type_name == "VirtualEthernetCardLegacyNetworkBackingInfo" {
                Some(|ds, _| {
                    let obj: VirtualEthernetCardLegacyNetworkBackingInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6172644f => { // ardO
            if type_name == "VirtualEthernetCardOpaqueNetworkBackingInfo" {
                Some(|ds, _| {
                    let obj: VirtualEthernetCardOpaqueNetworkBackingInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x64566972 => { // dVir
            if type_name == "VmwareDistributedVirtualSwitchTrunkVlanSpec" {
                Some(|ds, _| {
                    let obj: VmwareDistributedVirtualSwitchTrunkVlanSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6d4d6973 => { // mMis
            if type_name == "VsanUpgradeSystemMissingHostsInClusterIssue" {
                Some(|ds, _| {
                    let obj: VsanUpgradeSystemMissingHostsInClusterIssue = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6d4e6f74 => { // mNot
            if type_name == "VsanUpgradeSystemNotEnoughFreeCapacityIssue" {
                Some(|ds, _| {
                    let obj: VsanUpgradeSystemNotEnoughFreeCapacityIssue = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6e666967 => { // nfig
            if type_name == "HostSystemSwapConfigurationSystemSwapOption" {
                Some(|ds, _| {
                    let obj: HostSystemSwapConfigurationSystemSwapOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6e74696d => { // ntim
            if type_name == "VirtualMachineRuntimeInfoDasProtectionState" {
                Some(|ds, _| {
                    let obj: VirtualMachineRuntimeInfoDasProtectionState = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f744f70 => { // otOp
            if type_name == "VirtualMachineBootOptionsBootableDiskDevice" {
                Some(|ds, _| {
                    let obj: VirtualMachineBootOptionsBootableDiskDevice = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_object_deserializer_44<'de, A: de::MapAccess<'de>>(type_name: &str) -> Option<fn(de::value::MapAccessDeserializer<A>, &str) -> Result<VimAny, A::Error>> {
    let s = &type_name[37..41];
    let Some(type_ord) = to_u32(s) else {
        return None;
    };
    match type_ord {
        0x63654772 => { // ceGr
            if type_name == "VirtualMachineVirtualDeviceGroupsDeviceGroup" {
                Some(|ds, _| {
                    let obj: VirtualMachineVirtualDeviceGroupsDeviceGroup = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x66696749 => { // figI
            if type_name == "DistributedVirtualSwitchHostMemberConfigInfo" {
                Some(|ds, _| {
                    let obj: DistributedVirtualSwitchHostMemberConfigInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x66696753 => { // figS
            if type_name == "DistributedVirtualSwitchHostMemberConfigSpec" {
                Some(|ds, _| {
                    let obj: DistributedVirtualSwitchHostMemberConfigSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x67687446 => { // ghtF
            if type_name == "VsanUpgradeSystemUpgradeHistoryPreflightFail" {
                Some(|ds, _| {
                    let obj: VsanUpgradeSystemUpgradeHistoryPreflightFail = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x69617469 => { // iati
            if type_name == "VStorageObjectAssociationsVmDiskAssociations" {
                Some(|ds, _| {
                    let obj: VStorageObjectAssociationsVmDiskAssociations = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x696e6749 => { // ingI
            if type_name == "VirtualDiskPartitionedRawDiskVer2BackingInfo" {
                Some(|ds, _| {
                    let obj: VirtualDiskPartitionedRawDiskVer2BackingInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6c746849 => { // lthI
            if type_name == "HostFaultToleranceManagerComponentHealthInfo" {
                Some(|ds, _| {
                    let obj: HostFaultToleranceManagerComponentHealthInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6d446576 => { // mDev
            if type_name == "VirtualMachineBootOptionsBootableCdromDevice" {
                Some(|ds, _| {
                    let obj: VirtualMachineBootOptionsBootableCdromDevice = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6e746169 => { // ntai
            if type_name == "DistributedVirtualSwitchManagerHostContainer" {
                Some(|ds, _| {
                    let obj: DistributedVirtualSwitchManagerHostContainer = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f6e496e => { // onIn
            if type_name == "ClusterComputeResourceHostConfigurationInput" {
                Some(|ds, _| {
                    let obj: ClusterComputeResourceHostConfigurationInput = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x726f6c49 => { // rolI
            if type_name == "ClusterFailoverResourcesAdmissionControlInfo" {
                Some(|ds, _| {
                    let obj: ClusterFailoverResourcesAdmissionControlInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7374696d => { // stim
            if type_name == "VsanHostClusterStatusStateCompletionEstimate" {
                Some(|ds, _| {
                    let obj: VsanHostClusterStatusStateCompletionEstimate = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7461496e => { // taIn
            if type_name == "VirtualMachineMetadataManagerVmMetadataInput" {
                Some(|ds, _| {
                    let obj: VirtualMachineMetadataManagerVmMetadataInput = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x74614f77 => { // taOw
            if type_name == "VirtualMachineMetadataManagerVmMetadataOwner" {
                Some(|ds, _| {
                    let obj: VirtualMachineMetadataManagerVmMetadataOwner = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_object_deserializer_45<'de, A: de::MapAccess<'de>>(type_name: &str) -> Option<fn(de::value::MapAccessDeserializer<A>, &str) -> Result<VimAny, A::Error>> {
    let s = &type_name[28..32];
    let Some(type_ord) = to_u32(s) else {
        return None;
    };
    match type_ord {
        0x41747472 => { // Attr
            if type_name == "HostAssignableHardwareConfigAttributeOverride" {
                Some(|ds, _| {
                    let obj: HostAssignableHardwareConfigAttributeOverride = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x4d656d62 => { // Memb
            if type_name == "DistributedVirtualSwitchHostMemberPnicBacking" {
                Some(|ds, _| {
                    let obj: DistributedVirtualSwitchHostMemberPnicBacking = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x5673616e => { // Vsan
            if type_name == "HostVsanInternalSystemDeleteVsanObjectsResult" {
                Some(|ds, _| {
                    let obj: HostVsanInternalSystemDeleteVsanObjectsResult = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x61626c65 => { // able
            if type_name == "VsanUpgradeSystemAutoClaimEnabledOnHostsIssue" {
                Some(|ds, _| {
                    let obj: VsanUpgradeSystemAutoClaimEnabledOnHostsIssue = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6174696f => { // atio
            if type_name == "HostInternetScsiHbaAuthenticationCapabilities" {
                Some(|ds, _| {
                    let obj: HostInternetScsiHbaAuthenticationCapabilities = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x67657244 => { // gerD
            match type_name {
                "HostLowLevelProvisioningManagerDiskLayoutSpec" => {
                    Some(|ds, _| {
                        let obj: HostLowLevelProvisioningManagerDiskLayoutSpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "DistributedVirtualSwitchManagerDvsProductSpec" => {
                    Some(|ds, _| {
                        let obj: DistributedVirtualSwitchManagerDvsProductSpec = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        0x67657246 => { // gerF
            if type_name == "HostLowLevelProvisioningManagerFileDeleteSpec" {
                Some(|ds, _| {
                    let obj: HostLowLevelProvisioningManagerFileDeleteSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x67657256 => { // gerV
            if type_name == "HostLowLevelProvisioningManagerVmRecoveryInfo" {
                Some(|ds, _| {
                    let obj: HostLowLevelProvisioningManagerVmRecoveryInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6c6f636b => { // lock
            if type_name == "VirtualPrecisionClockSystemClockBackingOption" {
                Some(|ds, _| {
                    let obj: VirtualPrecisionClockSystemClockBackingOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6e56616c => { // nVal
            if type_name == "HostProfileManagerCompositionValidationResult" {
                Some(|ds, _| {
                    let obj: HostProfileManagerCompositionValidationResult = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x72566d4d => { // rVmM
            if type_name == "VirtualMachineMetadataManagerVmMetadataResult" {
                Some(|ds, _| {
                    let obj: VirtualMachineMetadataManagerVmMetadataResult = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7461626c => { // tabl
            if type_name == "VirtualMachineBootOptionsBootableFloppyDevice" {
                Some(|ds, _| {
                    let obj: VirtualMachineBootOptionsBootableFloppyDevice = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x756c7454 => { // ultT
            if type_name == "MultipleCertificatesVerifyFaultThumbprintData" {
                Some(|ds, _| {
                    let obj: MultipleCertificatesVerifyFaultThumbprintData = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x77617044 => { // wapD
            if type_name == "VirtualMachineVirtualDeviceSwapDeviceSwapInfo" {
                Some(|ds, _| {
                    let obj: VirtualMachineVirtualDeviceSwapDeviceSwapInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x776f726b => { // work
            match type_name {
                "VirtualEthernetCardLegacyNetworkBackingOption" => {
                    Some(|ds, _| {
                        let obj: VirtualEthernetCardLegacyNetworkBackingOption = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                "VirtualEthernetCardOpaqueNetworkBackingOption" => {
                    Some(|ds, _| {
                        let obj: VirtualEthernetCardOpaqueNetworkBackingOption = de::Deserialize::deserialize(ds)?;
                        Ok(VimAny::Object(Box::new(obj)))
                    })
                }
                _ => None
            }
        },
        _ => None
    }
}
fn get_object_deserializer_46<'de, A: de::MapAccess<'de>>(type_name: &str) -> Option<fn(de::value::MapAccessDeserializer<A>, &str) -> Result<VimAny, A::Error>> {
    let s = &type_name[21..25];
    let Some(type_ord) = to_u32(s) else {
        return None;
    };
    match type_ord {
        0x44657461 => { // Deta
            if type_name == "VirtualMachineProfileDetailsDiskProfileDetails" {
                Some(|ds, _| {
                    let obj: VirtualMachineProfileDetailsDiskProfileDetails = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x54726166 => { // Traf
            if type_name == "DvsHostInfrastructureTrafficResourceAllocation" {
                Some(|ds, _| {
                    let obj: DvsHostInfrastructureTrafficResourceAllocation = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x63657341 => { // cesA
            if type_name == "ClusterFailoverResourcesAdmissionControlPolicy" {
                Some(|ds, _| {
                    let obj: ClusterFailoverResourcesAdmissionControlPolicy = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x64526177 => { // dRaw
            if type_name == "VirtualDiskPartitionedRawDiskVer2BackingOption" {
                Some(|ds, _| {
                    let obj: VirtualDiskPartitionedRawDiskVer2BackingOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x65486f73 => { // eHos
            if type_name == "ClusterComputeResourceHostConfigurationProfile" {
                Some(|ds, _| {
                    let obj: ClusterComputeResourceHostConfigurationProfile = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6963654f => { // iceO
            if type_name == "VirtualMachineVMCIDeviceOptionFilterSpecOption" {
                Some(|ds, _| {
                    let obj: VirtualMachineVmciDeviceOptionFilterSpecOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x696e674d => { // ingM
            if type_name == "HostLowLevelProvisioningManagerFileReserveSpec" {
                Some(|ds, _| {
                    let obj: HostLowLevelProvisioningManagerFileReserveSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7253746f => { // rSto
            if type_name == "StorageResourceManagerStorageProfileStatistics" {
                Some(|ds, _| {
                    let obj: StorageResourceManagerStorageProfileStatistics = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x72617469 => { // rati
            if type_name == "HostSystemSwapConfigurationHostLocalSwapOption" {
                Some(|ds, _| {
                    let obj: HostSystemSwapConfigurationHostLocalSwapOption = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x74636848 => { // tchH
            if type_name == "DistributedVirtualSwitchHostMemberRuntimeState" {
                Some(|ds, _| {
                    let obj: DistributedVirtualSwitchHostMemberRuntimeState = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x7463684d => { // tchM
            if type_name == "DistributedVirtualSwitchManagerHostArrayFilter" {
                Some(|ds, _| {
                    let obj: DistributedVirtualSwitchManagerHostArrayFilter = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_object_deserializer_47<'de, A: de::MapAccess<'de>>(type_name: &str) -> Option<fn(de::value::MapAccessDeserializer<A>, &str) -> Result<VimAny, A::Error>> {
    let s = &type_name[1..5];
    let Some(type_ord) = to_u32(s) else {
        return None;
    };
    match type_ord {
        0x69727475 => { // irtu
            if type_name == "VirtualMachineBootOptionsBootableEthernetDevice" {
                Some(|ds, _| {
                    let obj: VirtualMachineBootOptionsBootableEthernetDevice = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6c757374 => { // lust
            if type_name == "ClusterDasAdvancedRuntimeInfoVmcpCapabilityInfo" {
                Some(|ds, _| {
                    let obj: ClusterDasAdvancedRuntimeInfoVmcpCapabilityInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f73744c => { // ostL
            if type_name == "HostLowLevelProvisioningManagerFileDeleteResult" {
                Some(|ds, _| {
                    let obj: HostLowLevelProvisioningManagerFileDeleteResult = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6f737456 => { // ostV
            if type_name == "HostVsanInternalSystemVsanObjectOperationResult" {
                Some(|ds, _| {
                    let obj: HostVsanInternalSystemVsanObjectOperationResult = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x70646174 => { // pdat
            if type_name == "UpdateVirtualMachineFilesResultFailedVmFileInfo" {
                Some(|ds, _| {
                    let obj: UpdateVirtualMachineFilesResultFailedVmFileInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_object_deserializer_48<'de, A: de::MapAccess<'de>>(type_name: &str) -> Option<fn(de::value::MapAccessDeserializer<A>, &str) -> Result<VimAny, A::Error>> {
    let s = &type_name[28..32];
    let Some(type_ord) = to_u32(s) else {
        return None;
    };
    match type_ord {
        0x66696775 => { // figu
            if type_name == "ClusterComputeResourceDVSConfigurationValidation" {
                Some(|ds, _| {
                    let obj: ClusterComputeResourceDvsConfigurationValidation = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x67657246 => { // gerF
            if type_name == "HostLowLevelProvisioningManagerFileReserveResult" {
                Some(|ds, _| {
                    let obj: HostLowLevelProvisioningManagerFileReserveResult = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x67657248 => { // gerH
            if type_name == "DistributedVirtualSwitchManagerHostDvsFilterSpec" {
                Some(|ds, _| {
                    let obj: DistributedVirtualSwitchManagerHostDvsFilterSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x67657256 => { // gerV
            if type_name == "HostLowLevelProvisioningManagerVmMigrationStatus" {
                Some(|ds, _| {
                    let obj: HostLowLevelProvisioningManagerVmMigrationStatus = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x6e526573 => { // nRes
            if type_name == "HostProfileManagerCompositionResultResultElement" {
                Some(|ds, _| {
                    let obj: HostProfileManagerCompositionResultResultElement = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x736b4c6f => { // skLo
            if type_name == "VirtualMachineRelocateSpecDiskLocatorBackingSpec" {
                Some(|ds, _| {
                    let obj: VirtualMachineRelocateSpecDiskLocatorBackingSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x746f7261 => { // tora
            if type_name == "VStorageObjectSnapshotInfoVStorageObjectSnapshot" {
                Some(|ds, _| {
                    let obj: VStorageObjectSnapshotInfoVStorageObjectSnapshot = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_object_deserializer_49<'de, A: de::MapAccess<'de>>(type_name: &str) -> Option<fn(de::value::MapAccessDeserializer<A>, &str) -> Result<VimAny, A::Error>> {
    let s = &type_name[4..8];
    let Some(type_ord) = to_u32(s) else {
        return None;
    };
    match type_ord {
        0x4c6f774c => { // LowL
            if type_name == "HostLowLevelProvisioningManagerSnapshotLayoutSpec" {
                Some(|ds, _| {
                    let obj: HostLowLevelProvisioningManagerSnapshotLayoutSpec = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x696c6550 => { // ileP
            if type_name == "ProfileParameterMetadataParameterRelationMetadata" {
                Some(|ds, _| {
                    let obj: ProfileParameterMetadataParameterRelationMetadata = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x74657243 => { // terC
            if type_name == "ClusterComputeResourceHostConfigurationValidation" {
                Some(|ds, _| {
                    let obj: ClusterComputeResourceHostConfigurationValidation = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x74657244 => { // terD
            if type_name == "ClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots" {
                Some(|ds, _| {
                    let obj: ClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x74657246 => { // terF
            if type_name == "ClusterFailoverHostAdmissionControlInfoHostStatus" {
                Some(|ds, _| {
                    let obj: ClusterFailoverHostAdmissionControlInfoHostStatus = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x75616c4d => { // ualM
            if type_name == "VirtualMachineDeviceRuntimeInfoDeviceRuntimeState" {
                Some(|ds, _| {
                    let obj: VirtualMachineDeviceRuntimeInfoDeviceRuntimeState = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_object_deserializer_50<'de, A: de::MapAccess<'de>>(type_name: &str) -> Option<fn(de::value::MapAccessDeserializer<A>, &str) -> Result<VimAny, A::Error>> {
    let s = &type_name[28..32];
    let Some(type_ord) = to_u32(s) else {
        return None;
    };
    match type_ord {
        0x4661696c => { // Fail
            if type_name == "VVolVmConfigFileUpdateResultFailedVmConfigFileInfo" {
                Some(|ds, _| {
                    let obj: VVolVmConfigFileUpdateResultFailedVmConfigFileInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x53746f72 => { // Stor
            if type_name == "HostMultipathInfoLogicalUnitStorageArrayTypePolicy" {
                Some(|ds, _| {
                    let obj: HostMultipathInfoLogicalUnitStorageArrayTypePolicy = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x63656452 => { // cedR
            if type_name == "ClusterDasFailoverLevelAdvancedRuntimeInfoSlotInfo" {
                Some(|ds, _| {
                    let obj: ClusterDasFailoverLevelAdvancedRuntimeInfoSlotInfo = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x67657243 => { // gerC
            if type_name == "DistributedVirtualSwitchManagerCompatibilityResult" {
                Some(|ds, _| {
                    let obj: DistributedVirtualSwitchManagerCompatibilityResult = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x67657248 => { // gerH
            if type_name == "DistributedVirtualSwitchManagerHostContainerFilter" {
                Some(|ds, _| {
                    let obj: DistributedVirtualSwitchManagerHostContainerFilter = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        0x726f7570 => { // roup
            if type_name == "VirtualMachineVirtualDeviceGroupsVendorDeviceGroup" {
                Some(|ds, _| {
                    let obj: VirtualMachineVirtualDeviceGroupsVendorDeviceGroup = de::Deserialize::deserialize(ds)?;
                    Ok(VimAny::Object(Box::new(obj)))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_object_deserializer_51<'de, A: de::MapAccess<'de>>(type_name: &str) -> Option<fn(de::value::MapAccessDeserializer<A>, &str) -> Result<VimAny, A::Error>> {
    match type_name {
        "ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots" => {
            Some(|ds, _| {
                let obj: ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots = de::Deserialize::deserialize(ds)?;
                Ok(VimAny::Object(Box::new(obj)))
            })
        }
        "DistributedVirtualSwitchHostMemberTransportZoneInfo" => {
            Some(|ds, _| {
                let obj: DistributedVirtualSwitchHostMemberTransportZoneInfo = de::Deserialize::deserialize(ds)?;
                Ok(VimAny::Object(Box::new(obj)))
            })
        }
        _ => None
    }
}
fn get_object_deserializer_54<'de, A: de::MapAccess<'de>>(type_name: &str) -> Option<fn(de::value::MapAccessDeserializer<A>, &str) -> Result<VimAny, A::Error>> {
    match type_name {
        "DistributedVirtualPortgroupNsxPortgroupOperationResult" => {
            Some(|ds, _| {
                let obj: DistributedVirtualPortgroupNsxPortgroupOperationResult = de::Deserialize::deserialize(ds)?;
                Ok(VimAny::Object(Box::new(obj)))
            })
        }
        "DistributedVirtualSwitchManagerHostDvsMembershipFilter" => {
            Some(|ds, _| {
                let obj: DistributedVirtualSwitchManagerHostDvsMembershipFilter = de::Deserialize::deserialize(ds)?;
                Ok(VimAny::Object(Box::new(obj)))
            })
        }
        "VirtualMachineVendorDeviceGroupInfoComponentDeviceInfo" => {
            Some(|ds, _| {
                let obj: VirtualMachineVendorDeviceGroupInfoComponentDeviceInfo = de::Deserialize::deserialize(ds)?;
                Ok(VimAny::Object(Box::new(obj)))
            })
        }
        _ => None
    }
}
fn get_object_deserializer_62<'de, A: de::MapAccess<'de>>(type_name: &str) -> Option<fn(de::value::MapAccessDeserializer<A>, &str) -> Result<VimAny, A::Error>> {
    match type_name {
        "HostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption" => {
            Some(|ds, _| {
                let obj: HostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption = de::Deserialize::deserialize(ds)?;
                Ok(VimAny::Object(Box::new(obj)))
            })
        }
        "VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeState" => {
            Some(|ds, _| {
                let obj: VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeState = de::Deserialize::deserialize(ds)?;
                Ok(VimAny::Object(Box::new(obj)))
            })
        }
        _ => None
    }
}
pub(crate) fn get_value_deserializer(type_name: &str) -> Option<fn(&serde_json::value::RawValue) -> Result<ValueElements, serde_json::Error>> {
    match type_name.len() {
        3 => {
            if type_name == "int" {
                Some(|raw| {
                    let value: i32 = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::PrimitiveInt(value))
                })
            } else { None }
        }
        4 => {
            get_value_deserializer_4(type_name)
        }
        5 => {
            get_value_deserializer_5(type_name)
        }
        6 => {
            get_value_deserializer_6(type_name)
        }
        7 => {
            if type_name == "boolean" {
                Some(|raw| {
                    let value: bool = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::PrimitiveBoolean(value))
                })
            } else { None }
        }
        8 => {
            get_value_deserializer_8(type_name)
        }
        9 => {
            get_value_deserializer_9(type_name)
        }
        10 => {
            get_value_deserializer_10(type_name)
        }
        11 => {
            get_value_deserializer_11(type_name)
        }
        12 => {
            get_value_deserializer_12(type_name)
        }
        13 => {
            get_value_deserializer_13(type_name)
        }
        14 => {
            get_value_deserializer_14(type_name)
        }
        15 => {
            get_value_deserializer_15(type_name)
        }
        16 => {
            get_value_deserializer_16(type_name)
        }
        17 => {
            get_value_deserializer_17(type_name)
        }
        18 => {
            get_value_deserializer_18(type_name)
        }
        19 => {
            get_value_deserializer_19(type_name)
        }
        20 => {
            get_value_deserializer_20(type_name)
        }
        21 => {
            get_value_deserializer_21(type_name)
        }
        22 => {
            get_value_deserializer_22(type_name)
        }
        23 => {
            get_value_deserializer_23(type_name)
        }
        24 => {
            get_value_deserializer_24(type_name)
        }
        25 => {
            get_value_deserializer_25(type_name)
        }
        26 => {
            get_value_deserializer_26(type_name)
        }
        27 => {
            get_value_deserializer_27(type_name)
        }
        28 => {
            get_value_deserializer_28(type_name)
        }
        29 => {
            get_value_deserializer_29(type_name)
        }
        30 => {
            get_value_deserializer_30(type_name)
        }
        31 => {
            get_value_deserializer_31(type_name)
        }
        32 => {
            get_value_deserializer_32(type_name)
        }
        33 => {
            get_value_deserializer_33(type_name)
        }
        34 => {
            get_value_deserializer_34(type_name)
        }
        35 => {
            get_value_deserializer_35(type_name)
        }
        36 => {
            get_value_deserializer_36(type_name)
        }
        37 => {
            get_value_deserializer_37(type_name)
        }
        38 => {
            get_value_deserializer_38(type_name)
        }
        39 => {
            get_value_deserializer_39(type_name)
        }
        40 => {
            get_value_deserializer_40(type_name)
        }
        41 => {
            get_value_deserializer_41(type_name)
        }
        42 => {
            get_value_deserializer_42(type_name)
        }
        43 => {
            get_value_deserializer_43(type_name)
        }
        44 => {
            get_value_deserializer_44(type_name)
        }
        45 => {
            get_value_deserializer_45(type_name)
        }
        46 => {
            get_value_deserializer_46(type_name)
        }
        47 => {
            get_value_deserializer_47(type_name)
        }
        48 => {
            get_value_deserializer_48(type_name)
        }
        49 => {
            get_value_deserializer_49(type_name)
        }
        50 => {
            get_value_deserializer_50(type_name)
        }
        51 => {
            get_value_deserializer_51(type_name)
        }
        52 => {
            get_value_deserializer_52(type_name)
        }
        53 => {
            get_value_deserializer_53(type_name)
        }
        54 => {
            get_value_deserializer_54(type_name)
        }
        55 => {
            get_value_deserializer_55(type_name)
        }
        56 => {
            get_value_deserializer_56(type_name)
        }
        57 => {
            get_value_deserializer_57(type_name)
        }
        58 => {
            get_value_deserializer_58(type_name)
        }
        59 => {
            get_value_deserializer_59(type_name)
        }
        60 => {
            if type_name == "ArrayOfVsanUpgradeSystemV2ObjectsPresentDuringDowngradeIssue" {
                Some(|raw| {
                    let value: Vec<VsanUpgradeSystemV2ObjectsPresentDuringDowngradeIssue> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVsanUpgradeSystemV2ObjectsPresentDuringDowngradeIssue(value))
                })
            } else { None }
        }
        61 => {
            get_value_deserializer_61(type_name)
        }
        62 => {
            get_value_deserializer_62(type_name)
        }
        65 => {
            if type_name == "ArrayOfHostProfileManagerCompositionValidationResultResultElement" {
                Some(|raw| {
                    let value: Vec<HostProfileManagerCompositionValidationResultResultElement> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostProfileManagerCompositionValidationResultResultElement(value))
                })
            } else { None }
        }
        66 => {
            get_value_deserializer_66(type_name)
        }
        69 => {
            get_value_deserializer_69(type_name)
        }
        70 => {
            if type_name == "ArrayOfClusterComputeResourceDvsProfileDVPortgroupSpecToServiceMapping" {
                Some(|raw| {
                    let value: Vec<ClusterComputeResourceDvsProfileDvPortgroupSpecToServiceMapping> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterComputeResourceDvsProfileDvPortgroupSpecToServiceMapping(value))
                })
            } else { None }
        }
        _ => None,
    }
}
fn get_value_deserializer_4(type_name: &str) -> Option<fn(&serde_json::value::RawValue) -> Result<ValueElements, serde_json::Error>> {
    match type_name {
        "byte" => {
            Some(|raw| {
                let value: i8 = serde_json::from_str(raw.get())?;
                Ok(ValueElements::PrimitiveByte(value))
            })
        }
        "long" => {
            Some(|raw| {
                let value: i64 = serde_json::from_str(raw.get())?;
                Ok(ValueElements::PrimitiveLong(value))
            })
        }
        _ => None
    }
}
fn get_value_deserializer_5(type_name: &str) -> Option<fn(&serde_json::value::RawValue) -> Result<ValueElements, serde_json::Error>> {
    match type_name {
        "short" => {
            Some(|raw| {
                let value: i16 = serde_json::from_str(raw.get())?;
                Ok(ValueElements::PrimitiveShort(value))
            })
        }
        "float" => {
            Some(|raw| {
                let value: f32 = serde_json::from_str(raw.get())?;
                Ok(ValueElements::PrimitiveFloat(value))
            })
        }
        _ => None
    }
}
fn get_value_deserializer_6(type_name: &str) -> Option<fn(&serde_json::value::RawValue) -> Result<ValueElements, serde_json::Error>> {
    match type_name {
        "double" => {
            Some(|raw| {
                let value: f64 = serde_json::from_str(raw.get())?;
                Ok(ValueElements::PrimitiveDouble(value))
            })
        }
        "string" => {
            Some(|raw| {
                let value: String = serde_json::from_str(raw.get())?;
                Ok(ValueElements::PrimitiveString(value))
            })
        }
        "anyURI" => {
            Some(|raw| {
                let value: String = serde_json::from_str(raw.get())?;
                Ok(ValueElements::PrimitiveUri(value))
            })
        }
        _ => None
    }
}
fn get_value_deserializer_8(type_name: &str) -> Option<fn(&serde_json::value::RawValue) -> Result<ValueElements, serde_json::Error>> {
    match type_name {
        "dateTime" => {
            Some(|raw| {
                let value: String = serde_json::from_str(raw.get())?;
                Ok(ValueElements::PrimitiveDateTime(value))
            })
        }
        "TypeName" => {
            Some(|raw| {
                let value: String = serde_json::from_str(raw.get())?;
                Ok(ValueElements::PrimitiveTypeName(value))
            })
        }
        _ => None
    }
}
fn get_value_deserializer_9(type_name: &str) -> Option<fn(&serde_json::value::RawValue) -> Result<ValueElements, serde_json::Error>> {
    match type_name {
        "ArrayOfID" => {
            Some(|raw| {
                let value: Vec<Id> = serde_json::from_str(raw.get())?;
                Ok(ValueElements::ArrayOfId(value))
            })
        }
        "DayOfWeek" => {
            Some(|raw| {
                let value: super::enums::DayOfWeekEnum = serde_json::from_str(raw.get())?;
                Ok(ValueElements::DayOfWeek(value))
            })
        }
        _ => None
    }
}
fn get_value_deserializer_10(type_name: &str) -> Option<fn(&serde_json::value::RawValue) -> Result<ValueElements, serde_json::Error>> {
    match type_name {
        "ArrayOfInt" => {
            Some(|raw| {
                let value: Vec<i32> = serde_json::from_str(raw.get())?;
                Ok(ValueElements::ArrayOfInt(value))
            })
        }
        "MethodName" => {
            Some(|raw| {
                let value: String = serde_json::from_str(raw.get())?;
                Ok(ValueElements::PrimitiveMethodName(value))
            })
        }
        "ArrayOfTag" => {
            Some(|raw| {
                let value: Vec<Tag> = serde_json::from_str(raw.get())?;
                Ok(ValueElements::ArrayOfTag(value))
            })
        }
        _ => None
    }
}
fn get_value_deserializer_11(type_name: &str) -> Option<fn(&serde_json::value::RawValue) -> Result<ValueElements, serde_json::Error>> {
    let s = &type_name[0..8];
    let Some(type_ord) = to_u64(s) else {
        return None;
    };
    match type_ord {
        0x41727261794f6642 => { // ArrayOfB
            if type_name == "ArrayOfByte" {
                Some(|raw| {
                    let value: Vec<i8> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfByte(value))
                })
            } else { None }
        },
        0x41727261794f664c => { // ArrayOfL
            if type_name == "ArrayOfLong" {
                Some(|raw| {
                    let value: Vec<i64> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfLong(value))
                })
            } else { None }
        },
        0x44706d4265686176 => { // DpmBehav
            if type_name == "DpmBehavior" {
                Some(|raw| {
                    let value: super::enums::DpmBehaviorEnum = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::DpmBehavior(value))
                })
            } else { None }
        },
        0x4472734265686176 => { // DrsBehav
            if type_name == "DrsBehavior" {
                Some(|raw| {
                    let value: super::enums::DrsBehaviorEnum = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::DrsBehavior(value))
                })
            } else { None }
        },
        0x5368617265734c65 => { // SharesLe
            if type_name == "SharesLevel" {
                Some(|raw| {
                    let value: super::enums::SharesLevelEnum = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::SharesLevel(value))
                })
            } else { None }
        },
        0x5765656b4f664d6f => { // WeekOfMo
            if type_name == "WeekOfMonth" {
                Some(|raw| {
                    let value: super::enums::WeekOfMonthEnum = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::WeekOfMonth(value))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_value_deserializer_12(type_name: &str) -> Option<fn(&serde_json::value::RawValue) -> Result<ValueElements, serde_json::Error>> {
    let s = &type_name[4..8];
    let Some(type_ord) = to_u32(s) else {
        return None;
    };
    match type_ord {
        0x36344269 => { // 64Bi
            if type_name == "base64Binary" {
                Some(|raw| {
                    let value: Vec<u8> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::PrimitiveBinary(value))
                })
            } else { None }
        },
        0x65727479 => { // erty
            if type_name == "PropertyPath" {
                Some(|raw| {
                    let value: String = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::PrimitivePropPath(value))
                })
            } else { None }
        },
        0x794f6645 => { // yOfE
            if type_name == "ArrayOfEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfEvent(value))
                })
            } else { None }
        },
        0x794f6646 => { // yOfF
            if type_name == "ArrayOfFloat" {
                Some(|raw| {
                    let value: Vec<f32> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfFloat(value))
                })
            } else { None }
        },
        0x794f6653 => { // yOfS
            if type_name == "ArrayOfShort" {
                Some(|raw| {
                    let value: Vec<i16> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfShort(value))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_value_deserializer_13(type_name: &str) -> Option<fn(&serde_json::value::RawValue) -> Result<ValueElements, serde_json::Error>> {
    let s = &type_name[5..9];
    let Some(type_ord) = to_u32(s) else {
        return None;
    };
    match type_ord {
        0x4f664163 => { // OfAc
            if type_name == "ArrayOfAction" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::ActionTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfAction(value))
                })
            } else { None }
        },
        0x4f66416e => { // OfAn
            if type_name == "ArrayOfAnyURI" {
                Some(|raw| {
                    let value: Vec<String> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfUri(value))
                })
            } else { None }
        },
        0x4f66446f => { // OfDo
            if type_name == "ArrayOfDouble" {
                Some(|raw| {
                    let value: Vec<f64> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDouble(value))
                })
            } else { None }
        },
        0x4f664970 => { // OfIp
            if type_name == "ArrayOfIpPool" {
                Some(|raw| {
                    let value: Vec<IpPool> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfIpPool(value))
                })
            } else { None }
        },
        0x4f664e6f => { // OfNo
            if type_name == "ArrayOfNoHost" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNoHost(value))
                })
            } else { None }
        },
        0x4f665374 => { // OfSt
            if type_name == "ArrayOfString" {
                Some(|raw| {
                    let value: Vec<String> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfString(value))
                })
            } else { None }
        },
        0x5072696f => { // Prio
            if type_name == "DasVmPriority" {
                Some(|raw| {
                    let value: super::enums::DasVmPriorityEnum = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::DasVmPriority(value))
                })
            } else { None }
        },
        0x6e666f53 => { // nfoS
            if type_name == "TaskInfoState" {
                Some(|raw| {
                    let value: super::enums::TaskInfoStateEnum = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::TaskInfoState(value))
                })
            } else { None }
        },
        0x74617473 => { // tats
            if type_name == "PerfStatsType" {
                Some(|raw| {
                    let value: super::enums::PerfStatsTypeEnum = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::PerfStatsType(value))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_value_deserializer_14(type_name: &str) -> Option<fn(&serde_json::value::RawValue) -> Result<ValueElements, serde_json::Error>> {
    let s = &type_name[5..9];
    let Some(type_ord) = to_u32(s) else {
        return None;
    };
    match type_ord {
        0x4f66416e => { // OfAn
            if type_name == "ArrayOfAnyType" {
                Some(|raw| {
                    let value: Vec<VimAny> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfAnyType(value))
                })
            } else { None }
        },
        0x4f66426f => { // OfBo
            if type_name == "ArrayOfBoolean" {
                Some(|raw| {
                    let value: Vec<bool> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfBoolean(value))
                })
            } else { None }
        },
        0x4f664556 => { // OfEV
            if type_name == "ArrayOfEVCMode" {
                Some(|raw| {
                    let value: Vec<EvcMode> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfEvcMode(value))
                })
            } else { None }
        },
        0x4f664576 => { // OfEv
            if type_name == "ArrayOfEventEx" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfEventEx(value))
                })
            } else { None }
        },
        0x4f66486f => { // OfHo
            if type_name == "ArrayOfHostFru" {
                Some(|raw| {
                    let value: Vec<HostFru> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostFru(value))
                })
            } else { None }
        },
        0x4f664970 => { // OfIp
            if type_name == "ArrayOfIpRange" {
                Some(|raw| {
                    let value: Vec<IpRange> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfIpRange(value))
                })
            } else { None }
        },
        0x4f664f76 => { // OfOv
            if type_name == "ArrayOfOvfFile" {
                Some(|raw| {
                    let value: Vec<OvfFile> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfFile(value))
                })
            } else { None }
        },
        0x4f665363 => { // OfSc
            if type_name == "ArrayOfScsiLun" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::ScsiLunTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfScsiLun(value))
                })
            } else { None }
        },
        0x4f66566d => { // OfVm
            if type_name == "ArrayOfVmEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmEvent(value))
                })
            } else { None }
        },
        0x63636573 => { // cces
            if type_name == "HostAccessMode" {
                Some(|raw| {
                    let value: super::enums::HostAccessModeEnum = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::HostAccessMode(value))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_value_deserializer_15(type_name: &str) -> Option<fn(&serde_json::value::RawValue) -> Result<ValueElements, serde_json::Error>> {
    let s = &type_name[7..11];
    let Some(type_ord) = to_u32(s) else {
        return None;
    };
    match type_ord {
        0x44617465 => { // Date
            if type_name == "ArrayOfDateTime" {
                Some(|raw| {
                    let value: Vec<String> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDateTime(value))
                })
            } else { None }
        },
        0x44767345 => { // DvsE
            if type_name == "ArrayOfDvsEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsEvent(value))
                })
            } else { None }
        },
        0x44767346 => { // DvsF
            if type_name == "ArrayOfDvsFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsFault(value))
                })
            } else { None }
        },
        0x46696c65 => { // File
            if type_name == "ArrayOfFileInfo" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::FileInfoTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfFileInfo(value))
                })
            } else { None }
        },
        0x4b657956 => { // KeyV
            if type_name == "ArrayOfKeyValue" {
                Some(|raw| {
                    let value: Vec<KeyValue> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfKeyValue(value))
                })
            } else { None }
        },
        0x4d616352 => { // MacR
            if type_name == "ArrayOfMacRange" {
                Some(|raw| {
                    let value: Vec<MacRange> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfMacRange(value))
                })
            } else { None }
        },
        0x4d6f6465 => { // Mode
            if type_name == "ArrayOfModeInfo" {
                Some(|raw| {
                    let value: Vec<ModeInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfModeInfo(value))
                })
            } else { None }
        },
        0x4e6f7441 => { // NotA
            if type_name == "ArrayOfNotAFile" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNotAFile(value))
                })
            } else { None }
        },
        0x4e6f7446 => { // NotF
            if type_name == "ArrayOfNotFound" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNotFound(value))
                })
            } else { None }
        },
        0x4f766646 => { // OvfF
            if type_name == "ArrayOfOvfFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfFault(value))
                })
            } else { None }
        },
        0x52656c61 => { // Rela
            if type_name == "ArrayOfRelation" {
                Some(|raw| {
                    let value: Vec<Relation> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfRelation(value))
                })
            } else { None }
        },
        0x53444443 => { // SDDC
            if type_name == "ArrayOfSDDCBase" {
                Some(|raw| {
                    let value: Vec<SddcBase> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfSddcBase(value))
                })
            } else { None }
        },
        0x53696e67 => { // Sing
            if type_name == "ArrayOfSingleIp" {
                Some(|raw| {
                    let value: Vec<SingleIp> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfSingleIp(value))
                })
            } else { None }
        },
        0x53697465 => { // Site
            if type_name == "ArrayOfSiteInfo" {
                Some(|raw| {
                    let value: Vec<SiteInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfSiteInfo(value))
                })
            } else { None }
        },
        0x5461736b => { // Task
            if type_name == "ArrayOfTaskInfo" {
                Some(|raw| {
                    let value: Vec<TaskInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfTaskInfo(value))
                })
            } else { None }
        },
        0x54696d65 => { // Time
            if type_name == "ArrayOfTimedout" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfTimedout(value))
                })
            } else { None }
        },
        0x54797065 => { // Type
            if type_name == "ArrayOfTypeName" {
                Some(|raw| {
                    let value: Vec<String> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfTypeName(value))
                })
            } else { None }
        },
        0x56696d46 => { // VimF
            if type_name == "ArrayOfVimFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVimFault(value))
                })
            } else { None }
        },
        0x6d617279 => { // mary
            if type_name == "PerfSummaryType" {
                Some(|raw| {
                    let value: super::enums::PerfSummaryTypeEnum = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::PerfSummaryType(value))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_value_deserializer_16(type_name: &str) -> Option<fn(&serde_json::value::RawValue) -> Result<ValueElements, serde_json::Error>> {
    let s = &type_name[9..13];
    let Some(type_ord) = to_u32(s) else {
        return None;
    };
    match type_ord {
        0x41646472 => { // Addr
            if type_name == "ArrayOfIpAddress" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::IpAddressTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfIpAddress(value))
                })
            } else { None }
        },
        0x47617465 => { // Gate
            if type_name == "ArrayOfNoGateway" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNoGateway(value))
                })
            } else { None }
        },
        0x53506f6c => { // SPol
            if type_name == "ArrayOfDVSPolicy" {
                Some(|raw| {
                    let value: Vec<DvsPolicy> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsPolicy(value))
                })
            } else { None }
        },
        0x616e4661 => { // anFa
            if type_name == "ArrayOfVsanFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVsanFault(value))
                })
            } else { None }
        },
        0x61726d49 => { // armI
            if type_name == "ArrayOfAlarmInfo" {
                Some(|raw| {
                    let value: Vec<AlarmInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfAlarmInfo(value))
                })
            } else { None }
        },
        0x61726d53 => { // armS
            if type_name == "ArrayOfAlarmSpec" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::AlarmSpecTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfAlarmSpec(value))
                })
            } else { None }
        },
        0x6174654b => { // ateK
            if type_name == "ObjectUpdateKind" {
                Some(|raw| {
                    let value: super::enums::ObjectUpdateKindEnum = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ObjectUpdateKind(value))
                })
            } else { None }
        },
        0x64617465 => { // date
            if type_name == "ArrayOfUpdateSet" {
                Some(|raw| {
                    let value: Vec<UpdateSet> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfUpdateSet(value))
                })
            } else { None }
        },
        0x65737449 => { // estI
            if type_name == "ArrayOfGuestInfo" {
                Some(|raw| {
                    let value: Vec<GuestInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGuestInfo(value))
                })
            } else { None }
        },
        0x66457870 => { // fExp
            if type_name == "ArrayOfOvfExport" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfExport(value))
                })
            } else { None }
        },
        0x66496d70 => { // fImp
            if type_name == "ArrayOfOvfImport" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfImport(value))
                })
            } else { None }
        },
        0x68616e67 => { // hang
            if type_name == "PropertyChangeOp" {
                Some(|raw| {
                    let value: super::enums::PropertyChangeOpEnum = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::PropertyChangeOp(value))
                })
            } else { None }
        },
        0x6c654576 => { // leEv
            if type_name == "ArrayOfRoleEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfRoleEvent(value))
                })
            } else { None }
        },
        0x6c654661 => { // leFa
            if type_name == "ArrayOfFileFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfFileFault(value))
                })
            } else { None }
        },
        0x6c655175 => { // leQu
            if type_name == "ArrayOfFileQuery" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::FileQueryTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfFileQuery(value))
                })
            } else { None }
        },
        0x6e676c65 => { // ngle
            if type_name == "ArrayOfSingleMac" {
                Some(|raw| {
                    let value: Vec<SingleMac> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfSingleMac(value))
                })
            } else { None }
        },
        0x6f636b53 => { // ockS
            if type_name == "ArrayOfClockSkew" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClockSkew(value))
                })
            } else { None }
        },
        0x6f654661 => { // oeFa
            if type_name == "ArrayOfFcoeFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfFcoeFault(value))
                })
            } else { None }
        },
        0x6f757449 => { // outI
            if type_name == "ArrayOfAboutInfo" {
                Some(|raw| {
                    let value: Vec<AboutInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfAboutInfo(value))
                })
            } else { None }
        },
        0x6f776e4d => { // ownM
            if type_name == "HostLockdownMode" {
                Some(|raw| {
                    let value: super::enums::HostLockdownModeEnum = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::HostLockdownMode(value))
                })
            } else { None }
        },
        0x73497050 => { // sIpP
            if type_name == "ArrayOfDvsIpPort" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::DvsIpPortTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsIpPort(value))
                })
            } else { None }
        },
        0x736b4576 => { // skEv
            if type_name == "ArrayOfTaskEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfTaskEvent(value))
                })
            } else { None }
        },
        0x736b4973 => { // skIs
            if type_name == "ArrayOfDiskIsUSB" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDiskIsUsb(value))
                })
            } else { None }
        },
        0x73744576 => { // stEv
            if type_name == "ArrayOfHostEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostEvent(value))
                })
            } else { None }
        },
        0x744f7074 => { // tOpt
            if type_name == "ArrayOfIntOption" {
                Some(|raw| {
                    let value: Vec<IntOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfIntOption(value))
                })
            } else { None }
        },
        0x74506f6c => { // tPol
            if type_name == "ArrayOfIntPolicy" {
                Some(|raw| {
                    let value: Vec<IntPolicy> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfIntPolicy(value))
                })
            } else { None }
        },
        0x74656e73 => { // tens
            if type_name == "ArrayOfExtension" {
                Some(|raw| {
                    let value: Vec<Extension> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfExtension(value))
                })
            } else { None }
        },
        0x74696f6e => { // tion
            if type_name == "ArrayOfOptionDef" {
                Some(|raw| {
                    let value: Vec<OptionDef> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOptionDef(value))
                })
            } else { None }
        },
        0x74704661 => { // tpFa
            if type_name == "ArrayOfHttpFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHttpFault(value))
                })
            } else { None }
        },
        0x794f6657 => { // yOfW
            if type_name == "ArrayOfDayOfWeek" {
                Some(|raw| {
                    let value: Vec<super::enums::DayOfWeekEnum> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDayOfWeek(value))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_value_deserializer_17(type_name: &str) -> Option<fn(&serde_json::value::RawValue) -> Result<ValueElements, serde_json::Error>> {
    let s = &type_name[7..15];
    let Some(type_ord) = to_u64(s) else {
        return None;
    };
    match type_ord {
        0x416c61726d457665 => { // AlarmEve
            if type_name == "ArrayOfAlarmEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfAlarmEvent(value))
                })
            } else { None }
        },
        0x416c61726d537461 => { // AlarmSta
            if type_name == "ArrayOfAlarmState" {
                Some(|raw| {
                    let value: Vec<AlarmState> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfAlarmState(value))
                })
            } else { None }
        },
        0x416e737765724669 => { // AnswerFi
            if type_name == "ArrayOfAnswerFile" {
                Some(|raw| {
                    let value: Vec<AnswerFile> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfAnswerFile(value))
                })
            } else { None }
        },
        0x426f6f6c4f707469 => { // BoolOpti
            if type_name == "ArrayOfBoolOption" {
                Some(|raw| {
                    let value: Vec<BoolOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfBoolOption(value))
                })
            } else { None }
        },
        0x426f6f6c506f6c69 => { // BoolPoli
            if type_name == "ArrayOfBoolPolicy" {
                Some(|raw| {
                    let value: Vec<BoolPolicy> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfBoolPolicy(value))
                })
            } else { None }
        },
        0x4361706162696c69 => { // Capabili
            if type_name == "ArrayOfCapability" {
                Some(|raw| {
                    let value: Vec<Capability> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCapability(value))
                })
            } else { None }
        },
        0x43727970746f5370 => { // CryptoSp
            if type_name == "ArrayOfCryptoSpec" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::CryptoSpecTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCryptoSpec(value))
                })
            } else { None }
        },
        0x44565353756d6d61 => { // DVSSumma
            if type_name == "ArrayOfDVSSummary" {
                Some(|raw| {
                    let value: Vec<DvsSummary> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsSummary(value))
                })
            } else { None }
        },
        0x446174614f626a65 => { // DataObje
            if type_name == "ArrayOfDataObject" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::DataObjectTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDataObject(value))
                })
            } else { None }
        },
        0x44767350726f6669 => { // DvsProfi
            if type_name == "ArrayOfDvsProfile" {
                Some(|raw| {
                    let value: Vec<DvsProfile> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsProfile(value))
                })
            } else { None }
        },
        0x4661756c74734279 => { // FaultsBy
            if type_name == "ArrayOfFaultsByVM" {
                Some(|raw| {
                    let value: Vec<FaultsByVm> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfFaultsByVm(value))
                })
            } else { None }
        },
        0x46636f65436f6e66 => { // FcoeConf
            if type_name == "ArrayOfFcoeConfig" {
                Some(|raw| {
                    let value: Vec<FcoeConfig> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfFcoeConfig(value))
                })
            } else { None }
        },
        0x46696c654c6f636b => { // FileLock
            if type_name == "ArrayOfFileLocked" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfFileLocked(value))
                })
            } else { None }
        },
        0x486f737444657669 => { // HostDevi
            if type_name == "ArrayOfHostDevice" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::HostDeviceTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostDevice(value))
                })
            } else { None }
        },
        0x486f737454637048 => { // HostTcpH
            if type_name == "ArrayOfHostTcpHba" {
                Some(|raw| {
                    let value: Vec<HostTcpHba> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostTcpHba(value))
                })
            } else { None }
        },
        0x496d706f72745370 => { // ImportSp
            if type_name == "ArrayOfImportSpec" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::ImportSpecTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfImportSpec(value))
                })
            } else { None }
        },
        0x4973637369466175 => { // IscsiFau
            if type_name == "ArrayOfIscsiFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfIscsiFault(value))
                })
            } else { None }
        },
        0x4c65617365537461 => { // LeaseSta
            if type_name == "HttpNfcLeaseState" {
                Some(|raw| {
                    let value: super::enums::HttpNfcLeaseStateEnum = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::HttpNfcLeaseState(value))
                })
            } else { None }
        },
        0x4c6f6e674f707469 => { // LongOpti
            if type_name == "ArrayOfLongOption" {
                Some(|raw| {
                    let value: Vec<LongOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfLongOption(value))
                })
            } else { None }
        },
        0x4c6f6e67506f6c69 => { // LongPoli
            if type_name == "ArrayOfLongPolicy" {
                Some(|raw| {
                    let value: Vec<LongPolicy> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfLongPolicy(value))
                })
            } else { None }
        },
        0x4d61634164647265 => { // MacAddre
            if type_name == "ArrayOfMacAddress" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::MacAddressTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfMacAddress(value))
                })
            } else { None }
        },
        0x4d6574686f644e61 => { // MethodNa
            if type_name == "ArrayOfMethodName" {
                Some(|raw| {
                    let value: Vec<String> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfMethodName(value))
                })
            } else { None }
        },
        0x4d6f756e74457272 => { // MountErr
            if type_name == "ArrayOfMountError" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfMountError(value))
                })
            } else { None }
        },
        0x4e6f566d496e5641 => { // NoVmInVA
            if type_name == "ArrayOfNoVmInVApp" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNoVmInVApp(value))
                })
            } else { None }
        },
        0x4e7664696d6d4775 => { // NvdimmGu
            if type_name == "ArrayOfNvdimmGuid" {
                Some(|raw| {
                    let value: Vec<NvdimmGuid> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNvdimmGuid(value))
                })
            } else { None }
        },
        0x4f626a6563745370 => { // ObjectSp
            if type_name == "ArrayOfObjectSpec" {
                Some(|raw| {
                    let value: Vec<ObjectSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfObjectSpec(value))
                })
            } else { None }
        },
        0x4f7074696f6e5479 => { // OptionTy
            if type_name == "ArrayOfOptionType" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::OptionTypeTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOptionType(value))
                })
            } else { None }
        },
        0x4f7666456c656d65 => { // OvfEleme
            if type_name == "ArrayOfOvfElement" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfElement(value))
                })
            } else { None }
        },
        0x5065726d69737369 => { // Permissi
            if type_name == "ArrayOfPermission" {
                Some(|raw| {
                    let value: Vec<Permission> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPermission(value))
                })
            } else { None }
        },
        0x536861726573496e => { // SharesIn
            if type_name == "ArrayOfSharesInfo" {
                Some(|raw| {
                    let value: Vec<SharesInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfSharesInfo(value))
                })
            } else { None }
        },
        0x5461736b52656173 => { // TaskReas
            if type_name == "ArrayOfTaskReason" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::TaskReasonTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfTaskReason(value))
                })
            } else { None }
        },
        0x56566f6c486f7374 => { // VVolHost
            if type_name == "ArrayOfVVolHostPE" {
                Some(|raw| {
                    let value: Vec<VVolHostPe> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVVolHostPe(value))
                })
            } else { None }
        },
        0x5669727475616c54 => { // VirtualT
            if type_name == "ArrayOfVirtualTPM" {
                Some(|raw| {
                    let value: Vec<VirtualTpm> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualTpm(value))
                })
            } else { None }
        },
        0x5669727475616c55 => { // VirtualU
            if type_name == "ArrayOfVirtualUSB" {
                Some(|raw| {
                    let value: Vec<VirtualUsb> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualUsb(value))
                })
            } else { None }
        },
        0x5669727475616c57 => { // VirtualW
            if type_name == "ArrayOfVirtualWDT" {
                Some(|raw| {
                    let value: Vec<VirtualWdt> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualWdt(value))
                })
            } else { None }
        },
        0x744e6f6465537461 => { // tNodeSta
            if type_name == "VsanHostNodeState" {
                Some(|raw| {
                    let value: super::enums::VsanHostNodeStateEnum = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::VsanHostNodeState(value))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_value_deserializer_18(type_name: &str) -> Option<fn(&serde_json::value::RawValue) -> Result<ValueElements, serde_json::Error>> {
    let s = &type_name[7..15];
    let Some(type_ord) = to_u64(s) else {
        return None;
    };
    match type_ord {
        0x416c61726d416374 => { // AlarmAct
            if type_name == "ArrayOfAlarmAction" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::AlarmActionTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfAlarmAction(value))
                })
            } else { None }
        },
        0x4261746368526573 => { // BatchRes
            if type_name == "ArrayOfBatchResult" {
                Some(|raw| {
                    let value: Vec<BatchResult> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfBatchResult(value))
                })
            } else { None }
        },
        0x436865636b526573 => { // CheckRes
            if type_name == "ArrayOfCheckResult" {
                Some(|raw| {
                    let value: Vec<CheckResult> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCheckResult(value))
                })
            } else { None }
        },
        0x43727970746f4b65 => { // CryptoKe
            if type_name == "ArrayOfCryptoKeyId" {
                Some(|raw| {
                    let value: Vec<CryptoKeyId> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCryptoKeyId(value))
                })
            } else { None }
        },
        0x4456506f72745374 => { // DVPortSt
            if type_name == "ArrayOfDVPortState" {
                Some(|raw| {
                    let value: Vec<DvPortState> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvPortState(value))
                })
            } else { None }
        },
        0x4465736372697074 => { // Descript
            if type_name == "ArrayOfDescription" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::DescriptionTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDescription(value))
                })
            } else { None }
        },
        0x44706d4265686176 => { // DpmBehav
            if type_name == "ArrayOfDpmBehavior" {
                Some(|raw| {
                    let value: Vec<super::enums::DpmBehaviorEnum> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDpmBehavior(value))
                })
            } else { None }
        },
        0x4472734265686176 => { // DrsBehav
            if type_name == "ArrayOfDrsBehavior" {
                Some(|raw| {
                    let value: Vec<super::enums::DrsBehaviorEnum> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDrsBehavior(value))
                })
            } else { None }
        },
        0x46696c746572496e => { // FilterIn
            if type_name == "ArrayOfFilterInUse" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfFilterInUse(value))
                })
            } else { None }
        },
        0x466c6f61744f7074 => { // FloatOpt
            if type_name == "ArrayOfFloatOption" {
                Some(|raw| {
                    let value: Vec<FloatOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfFloatOption(value))
                })
            } else { None }
        },
        0x486f737443707549 => { // HostCpuI
            if type_name == "ArrayOfHostCpuInfo" {
                Some(|raw| {
                    let value: Vec<HostCpuInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostCpuInfo(value))
                })
            } else { None }
        },
        0x486f737450636965 => { // HostPcie
            if type_name == "ArrayOfHostPcieHba" {
                Some(|raw| {
                    let value: Vec<HostPcieHba> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostPcieHba(value))
                })
            } else { None }
        },
        0x486f737452646d61 => { // HostRdma
            if type_name == "ArrayOfHostRdmaHba" {
                Some(|raw| {
                    let value: Vec<HostRdmaHba> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostRdmaHba(value))
                })
            } else { None }
        },
        0x486f737453657276 => { // HostServ
            if type_name == "ArrayOfHostService" {
                Some(|raw| {
                    let value: Vec<HostService> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostService(value))
                })
            } else { None }
        },
        0x486f737453657649 => { // HostSevI
            if type_name == "ArrayOfHostSevInfo" {
                Some(|raw| {
                    let value: Vec<HostSevInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostSevInfo(value))
                })
            } else { None }
        },
        0x486f737453677849 => { // HostSgxI
            if type_name == "ArrayOfHostSgxInfo" {
                Some(|raw| {
                    let value: Vec<HostSgxInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostSgxInfo(value))
                })
            } else { None }
        },
        0x486f737456766f6c => { // HostVvol
            if type_name == "ArrayOfHostVvolNQN" {
                Some(|raw| {
                    let value: Vec<HostVvolNqn> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostVvolNqn(value))
                })
            } else { None }
        },
        0x496e76616c69644e => { // InvalidN
            if type_name == "ArrayOfInvalidName" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInvalidName(value))
                })
            } else { None }
        },
        0x496e76616c696454 => { // InvalidT
            if type_name == "ArrayOfInvalidType" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInvalidType(value))
                })
            } else { None }
        },
        0x4973637369537461 => { // IscsiSta
            if type_name == "ArrayOfIscsiStatus" {
                Some(|raw| {
                    let value: Vec<IscsiStatus> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfIscsiStatus(value))
                })
            } else { None }
        },
        0x4b6579416e795661 => { // KeyAnyVa
            if type_name == "ArrayOfKeyAnyValue" {
                Some(|raw| {
                    let value: Vec<KeyAnyValue> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfKeyAnyValue(value))
                })
            } else { None }
        },
        0x4b65794e6f74466f => { // KeyNotFo
            if type_name == "ArrayOfKeyNotFound" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfKeyNotFound(value))
                })
            } else { None }
        },
        0x4c696e6b50726f66 => { // LinkProf
            if type_name == "ArrayOfLinkProfile" {
                Some(|raw| {
                    let value: Vec<LinkProfile> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfLinkProfile(value))
                })
            } else { None }
        },
        0x4d6574686f644661 => { // MethodFa
            if type_name == "ArrayOfMethodFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfMethodFault(value))
                })
            } else { None }
        },
        0x4e6f4469736b466f => { // NoDiskFo
            if type_name == "ArrayOfNoDiskFound" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNoDiskFound(value))
                })
            } else { None }
        },
        0x4e6f4469736b5370 => { // NoDiskSp
            if type_name == "ArrayOfNoDiskSpace" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNoDiskSpace(value))
                })
            } else { None }
        },
        0x4f7074696f6e5661 => { // OptionVa
            if type_name == "ArrayOfOptionValue" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::OptionValueTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOptionValue(value))
                })
            } else { None }
        },
        0x4f75744f66426f75 => { // OutOfBou
            if type_name == "ArrayOfOutOfBounds" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOutOfBounds(value))
                })
            } else { None }
        },
        0x4f766646696c6549 => { // OvfFileI
            if type_name == "ArrayOfOvfFileItem" {
                Some(|raw| {
                    let value: Vec<OvfFileItem> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfFileItem(value))
                })
            } else { None }
        },
        0x4f766650726f7065 => { // OvfPrope
            if type_name == "ArrayOfOvfProperty" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfProperty(value))
                })
            } else { None }
        },
        0x506879736963616c => { // Physical
            if type_name == "ArrayOfPhysicalNic" {
                Some(|raw| {
                    let value: Vec<PhysicalNic> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPhysicalNic(value))
                })
            } else { None }
        },
        0x5343534953686172 => { // SCSIShar
            if type_name == "VirtualSCSISharing" {
                Some(|raw| {
                    let value: super::enums::VirtualScsiSharingEnum = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::VirtualScsiSharing(value))
                })
            } else { None }
        },
        0x5368617265734c65 => { // SharesLe
            if type_name == "ArrayOfSharesLevel" {
                Some(|raw| {
                    let value: Vec<super::enums::SharesLevelEnum> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfSharesLevel(value))
                })
            } else { None }
        },
        0x53797374656d4572 => { // SystemEr
            if type_name == "ArrayOfSystemError" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfSystemError(value))
                })
            } else { None }
        },
        0x5573657250726f66 => { // UserProf
            if type_name == "ArrayOfUserProfile" {
                Some(|raw| {
                    let value: Vec<UserProfile> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfUserProfile(value))
                })
            } else { None }
        },
        0x5573657253657373 => { // UserSess
            if type_name == "ArrayOfUserSession" {
                Some(|raw| {
                    let value: Vec<UserSession> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfUserSession(value))
                })
            } else { None }
        },
        0x5669727475616c44 => { // VirtualD
            if type_name == "ArrayOfVirtualDisk" {
                Some(|raw| {
                    let value: Vec<VirtualDisk> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualDisk(value))
                })
            } else { None }
        },
        0x566c616e50726f66 => { // VlanProf
            if type_name == "ArrayOfVlanProfile" {
                Some(|raw| {
                    let value: Vec<VlanProfile> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVlanProfile(value))
                })
            } else { None }
        },
        0x576169744f707469 => { // WaitOpti
            if type_name == "ArrayOfWaitOptions" {
                Some(|raw| {
                    let value: Vec<WaitOptions> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfWaitOptions(value))
                })
            } else { None }
        },
        0x5765656b4f664d6f => { // WeekOfMo
            if type_name == "ArrayOfWeekOfMonth" {
                Some(|raw| {
                    let value: Vec<super::enums::WeekOfMonthEnum> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfWeekOfMonth(value))
                })
            } else { None }
        },
        0x61726d4f70657261 => { // armOpera
            if type_name == "StateAlarmOperator" {
                Some(|raw| {
                    let value: super::enums::StateAlarmOperatorEnum = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::StateAlarmOperator(value))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_value_deserializer_19(type_name: &str) -> Option<fn(&serde_json::value::RawValue) -> Result<ValueElements, serde_json::Error>> {
    let s = &type_name[8..16];
    let Some(type_ord) = to_u64(s) else {
        return None;
    };
    match type_ord {
        0x4865616c74685374 => { // HealthSt
            if type_name == "VsanHostHealthState" {
                Some(|raw| {
                    let value: super::enums::VsanHostHealthStateEnum = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::VsanHostHealthState(value))
                })
            } else { None }
        },
        0x56506f7274537461 => { // VPortSta
            if type_name == "ArrayOfDVPortStatus" {
                Some(|raw| {
                    let value: Vec<DvPortStatus> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvPortStatus(value))
                })
            } else { None }
        },
        0x565353656c656374 => { // VSSelect
            if type_name == "ArrayOfDVSSelection" {
                Some(|raw| {
                    let value: Vec<DvsSelection> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsSelection(value))
                })
            } else { None }
        },
        0x616e616765725374 => { // anagerSt
            if type_name == "LicenseManagerState" {
                Some(|raw| {
                    let value: super::enums::LicenseManagerStateEnum = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::LicenseManagerState(value))
                })
            } else { None }
        },
        0x61726d4f70657261 => { // armOpera
            if type_name == "MetricAlarmOperator" {
                Some(|raw| {
                    let value: super::enums::MetricAlarmOperatorEnum = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::MetricAlarmOperator(value))
                })
            } else { None }
        },
        0x617365363442696e => { // ase64Bin
            if type_name == "ArrayOfBase64Binary" {
                Some(|raw| {
                    let value: Vec<Vec<u8>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfBinary(value))
                })
            } else { None }
        },
        0x61756c7473427948 => { // aultsByH
            if type_name == "ArrayOfFaultsByHost" {
                Some(|raw| {
                    let value: Vec<FaultsByHost> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfFaultsByHost(value))
                })
            } else { None }
        },
        0x626a656374557064 => { // bjectUpd
            if type_name == "ArrayOfObjectUpdate" {
                Some(|raw| {
                    let value: Vec<ObjectUpdate> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfObjectUpdate(value))
                })
            } else { None }
        },
        0x6541636365737369 => { // eAccessi
            if type_name == "DatastoreAccessible" {
                Some(|raw| {
                    let value: super::enums::DatastoreAccessibleEnum = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::DatastoreAccessible(value))
                })
            } else { None }
        },
        0x65616c7468557064 => { // ealthUpd
            if type_name == "ArrayOfHealthUpdate" {
                Some(|raw| {
                    let value: Vec<HealthUpdate> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHealthUpdate(value))
                })
            } else { None }
        },
        0x656c656374696f6e => { // election
            if type_name == "ArrayOfSelectionSet" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::SelectionSetTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfSelectionSet(value))
                })
            } else { None }
        },
        0x656d6f7665466169 => { // emoveFai
            if type_name == "ArrayOfRemoveFailed" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfRemoveFailed(value))
                })
            } else { None }
        },
        0x656e6572616c4576 => { // eneralEv
            if type_name == "ArrayOfGeneralEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGeneralEvent(value))
                })
            } else { None }
        },
        0x657266496e746572 => { // erfInter
            if type_name == "ArrayOfPerfInterval" {
                Some(|raw| {
                    let value: Vec<PerfInterval> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPerfInterval(value))
                })
            } else { None }
        },
        0x6572664d65747269 => { // erfMetri
            if type_name == "ArrayOfPerfMetricId" {
                Some(|raw| {
                    let value: Vec<PerfMetricId> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPerfMetricId(value))
                })
            } else { None }
        },
        0x657373696f6e4576 => { // essionEv
            if type_name == "ArrayOfSessionEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfSessionEvent(value))
                })
            } else { None }
        },
        0x6574686f64416374 => { // ethodAct
            if type_name == "ArrayOfMethodAction" {
                Some(|raw| {
                    let value: Vec<MethodAction> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfMethodAction(value))
                })
            } else { None }
        },
        0x68617265734f7074 => { // haresOpt
            if type_name == "ArrayOfSharesOption" {
                Some(|raw| {
                    let value: Vec<SharesOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfSharesOption(value))
                })
            } else { None }
        },
        0x686f6963654f7074 => { // hoiceOpt
            if type_name == "ArrayOfChoiceOption" {
                Some(|raw| {
                    let value: Vec<ChoiceOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfChoiceOption(value))
                })
            } else { None }
        },
        0x6963656e73654576 => { // icenseEv
            if type_name == "ArrayOfLicenseEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfLicenseEvent(value))
                })
            } else { None }
        },
        0x696c654c6f636b49 => { // ileLockI
            if type_name == "ArrayOfFileLockInfo" {
                Some(|raw| {
                    let value: Vec<FileLockInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfFileLockInfo(value))
                })
            } else { None }
        },
        0x696c654e6f74466f => { // ileNotFo
            if type_name == "ArrayOfFileNotFound" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfFileNotFound(value))
                })
            } else { None }
        },
        0x696c65546f6f4c61 => { // ileTooLa
            if type_name == "ArrayOfFileTooLarge" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfFileTooLarge(value))
                })
            } else { None }
        },
        0x69727475616c4364 => { // irtualCd
            if type_name == "ArrayOfVirtualCdrom" {
                Some(|raw| {
                    let value: Vec<VirtualCdrom> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualCdrom(value))
                })
            } else { None }
        },
        0x69727475616c4531 => { // irtualE1
            if type_name == "ArrayOfVirtualE1000" {
                Some(|raw| {
                    let value: Vec<VirtualE1000> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualE1000(value))
                })
            } else { None }
        },
        0x69736b546f6f536d => { // iskTooSm
            if type_name == "ArrayOfDiskTooSmall" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDiskTooSmall(value))
                })
            } else { None }
        },
        0x6c61726d53657474 => { // larmSett
            if type_name == "ArrayOfAlarmSetting" {
                Some(|raw| {
                    let value: Vec<AlarmSetting> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfAlarmSetting(value))
                })
            } else { None }
        },
        0x6c75737465724576 => { // lusterEv
            if type_name == "ArrayOfClusterEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterEvent(value))
                })
            } else { None }
        },
        0x6d436c6f6e654576 => { // mCloneEv
            if type_name == "ArrayOfVmCloneEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmCloneEvent(value))
                })
            } else { None }
        },
        0x6d436f6e66696749 => { // mConfigI
            if type_name == "ArrayOfVmConfigInfo" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::VmConfigInfoTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmConfigInfo(value))
                })
            } else { None }
        },
        0x6d436f6e66696753 => { // mConfigS
            if type_name == "ArrayOfVmConfigSpec" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::VmConfigSpecTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmConfigSpec(value))
                })
            } else { None }
        },
        0x6e74697479426163 => { // ntityBac
            if type_name == "ArrayOfEntityBackup" {
                Some(|raw| {
                    let value: Vec<EntityBackup> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfEntityBackup(value))
                })
            } else { None }
        },
        0x6e74697479537461 => { // ntitySta
            if type_name == "ManagedEntityStatus" {
                Some(|raw| {
                    let value: super::enums::ManagedEntityStatusEnum = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ManagedEntityStatus(value))
                })
            } else { None }
        },
        0x6e76616c69644576 => { // nvalidEv
            if type_name == "ArrayOfInvalidEvent" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInvalidEvent(value))
                })
            } else { None }
        },
        0x6e76616c69644c6f => { // nvalidLo
            if type_name == "ArrayOfInvalidLogin" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInvalidLogin(value))
                })
            } else { None }
        },
        0x6e76616c69645374 => { // nvalidSt
            if type_name == "ArrayOfInvalidState" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInvalidState(value))
                })
            } else { None }
        },
        0x6f46696c74657249 => { // oFilterI
            if type_name == "ArrayOfIoFilterInfo" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::IoFilterInfoTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfIoFilterInfo(value))
                })
            } else { None }
        },
        0x6f5065726d697373 => { // oPermiss
            if type_name == "ArrayOfNoPermission" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNoPermission(value))
                })
            } else { None }
        },
        0x6f5669727475616c => { // oVirtual
            if type_name == "ArrayOfNoVirtualNic" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNoVirtualNic(value))
                })
            } else { None }
        },
        0x6f6c6963794f7074 => { // olicyOpt
            if type_name == "ArrayOfPolicyOption" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::PolicyOptionTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPolicyOption(value))
                })
            } else { None }
        },
        0x6f6e666967546172 => { // onfigTar
            if type_name == "ArrayOfConfigTarget" {
                Some(|raw| {
                    let value: Vec<ConfigTarget> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfConfigTarget(value))
                })
            } else { None }
        },
        0x6f6e6e6563746564 => { // onnected
            if type_name == "ArrayOfConnectedIso" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfConnectedIso(value))
                })
            } else { None }
        },
        0x6f6f4d616e79486f => { // ooManyHo
            if type_name == "ArrayOfTooManyHosts" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfTooManyHosts(value))
                })
            } else { None }
        },
        0x6f737442494f5349 => { // ostBIOSI
            if type_name == "ArrayOfHostBIOSInfo" {
                Some(|raw| {
                    let value: Vec<HostBiosInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostBiosInfo(value))
                })
            } else { None }
        },
        0x6f7374426c6f636b => { // ostBlock
            if type_name == "ArrayOfHostBlockHba" {
                Some(|raw| {
                    let value: Vec<HostBlockHba> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostBlockHba(value))
                })
            } else { None }
        },
        0x6f73744461734576 => { // ostDasEv
            if type_name == "ArrayOfHostDasEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostDasEvent(value))
                })
            } else { None }
        },
        0x6f7374447678436c => { // ostDvxCl
            if type_name == "ArrayOfHostDvxClass" {
                Some(|raw| {
                    let value: Vec<HostDvxClass> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostDvxClass(value))
                })
            } else { None }
        },
        0x6f7374466c616749 => { // ostFlagI
            if type_name == "ArrayOfHostFlagInfo" {
                Some(|raw| {
                    let value: Vec<HostFlagInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostFlagInfo(value))
                })
            } else { None }
        },
        0x6f7374496e446f6d => { // ostInDom
            if type_name == "ArrayOfHostInDomain" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostInDomain(value))
                })
            } else { None }
        },
        0x6f73744970436f6e => { // ostIpCon
            if type_name == "ArrayOfHostIpConfig" {
                Some(|raw| {
                    let value: Vec<HostIpConfig> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostIpConfig(value))
                })
            } else { None }
        },
        0x6f737449706d6949 => { // ostIpmiI
            if type_name == "ArrayOfHostIpmiInfo" {
                Some(|raw| {
                    let value: Vec<HostIpmiInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostIpmiInfo(value))
                })
            } else { None }
        },
        0x6f73744e756d6149 => { // ostNumaI
            if type_name == "ArrayOfHostNumaInfo" {
                Some(|raw| {
                    let value: Vec<HostNumaInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostNumaInfo(value))
                })
            } else { None }
        },
        0x6f73744e756d614e => { // ostNumaN
            if type_name == "ArrayOfHostNumaNode" {
                Some(|raw| {
                    let value: Vec<HostNumaNode> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostNumaNode(value))
                })
            } else { None }
        },
        0x6f73744e766d6553 => { // ostNvmeS
            if type_name == "ArrayOfHostNvmeSpec" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::HostNvmeSpecTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostNvmeSpec(value))
                })
            } else { None }
        },
        0x6f73745363736944 => { // ostScsiD
            if type_name == "ArrayOfHostScsiDisk" {
                Some(|raw| {
                    let value: Vec<HostScsiDisk> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostScsiDisk(value))
                })
            } else { None }
        },
        0x6f73745666667353 => { // ostVffsS
            if type_name == "ArrayOfHostVffsSpec" {
                Some(|raw| {
                    let value: Vec<HostVffsSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostVffsSpec(value))
                })
            } else { None }
        },
        0x6f7374566d667353 => { // ostVmfsS
            if type_name == "ArrayOfHostVmfsSpec" {
                Some(|raw| {
                    let value: Vec<HostVmfsSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostVmfsSpec(value))
                })
            } else { None }
        },
        0x6f74537570706f72 => { // otSuppor
            if type_name == "ArrayOfNotSupported" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNotSupported(value))
                })
            } else { None }
        },
        0x7067726164654576 => { // pgradeEv
            if type_name == "ArrayOfUpgradeEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfUpgradeEvent(value))
                })
            } else { None }
        },
        0x7070564170705374 => { // ppVAppSt
            if type_name == "VirtualAppVAppState" {
                Some(|raw| {
                    let value: super::enums::VirtualAppVAppStateEnum = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::VirtualAppVAppState(value))
                })
            } else { None }
        },
        0x70706c7950726f66 => { // pplyProf
            if type_name == "ArrayOfApplyProfile" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::ApplyProfileTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfApplyProfile(value))
                })
            } else { None }
        },
        0x726f66696c654576 => { // rofileEv
            if type_name == "ArrayOfProfileEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfProfileEvent(value))
                })
            } else { None }
        },
        0x726f706572747950 => { // ropertyP
            if type_name == "ArrayOfPropertyPath" {
                Some(|raw| {
                    let value: Vec<String> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPropPath(value))
                })
            } else { None }
        },
        0x726f706572747953 => { // ropertyS
            if type_name == "ArrayOfPropertySpec" {
                Some(|raw| {
                    let value: Vec<PropertySpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPropertySpec(value))
                })
            } else { None }
        },
        0x7365724e6f74466f => { // serNotFo
            if type_name == "ArrayOfUserNotFound" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfUserNotFound(value))
                })
            } else { None }
        },
        0x736c6d546167456e => { // slmTagEn
            if type_name == "ArrayOfVslmTagEntry" {
                Some(|raw| {
                    let value: Vec<VslmTagEntry> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVslmTagEntry(value))
                })
            } else { None }
        },
        0x7472696e674f7074 => { // tringOpt
            if type_name == "ArrayOfStringOption" {
                Some(|raw| {
                    let value: Vec<StringOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfStringOption(value))
                })
            } else { None }
        },
        0x7472696e67506f6c => { // tringPol
            if type_name == "ArrayOfStringPolicy" {
                Some(|raw| {
                    let value: Vec<StringPolicy> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfStringPolicy(value))
                })
            } else { None }
        },
        0x75657374416c6961 => { // uestAlia
            if type_name == "ArrayOfGuestAliases" {
                Some(|raw| {
                    let value: Vec<GuestAliases> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGuestAliases(value))
                })
            } else { None }
        },
        0x756573744e696349 => { // uestNicI
            if type_name == "ArrayOfGuestNicInfo" {
                Some(|raw| {
                    let value: Vec<GuestNicInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGuestNicInfo(value))
                })
            } else { None }
        },
        0x756d657269635261 => { // umericRa
            if type_name == "ArrayOfNumericRange" {
                Some(|raw| {
                    let value: Vec<NumericRange> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNumericRange(value))
                })
            } else { None }
        },
        0x756e74696d654661 => { // untimeFa
            if type_name == "ArrayOfRuntimeFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfRuntimeFault(value))
                })
            } else { None }
        },
        0x76656e7441726744 => { // ventArgD
            if type_name == "ArrayOfEventArgDesc" {
                Some(|raw| {
                    let value: Vec<EventArgDesc> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfEventArgDesc(value))
                })
            } else { None }
        },
        0x7666417474726962 => { // vfAttrib
            if type_name == "ArrayOfOvfAttribute" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfAttribute(value))
                })
            } else { None }
        },
        0x76664e6f486f7374 => { // vfNoHost
            if type_name == "ArrayOfOvfNoHostNic" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfNoHostNic(value))
                })
            } else { None }
        },
        0x7666586d6c466f72 => { // vfXmlFor
            if type_name == "ArrayOfOvfXmlFormat" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfXmlFormat(value))
                })
            } else { None }
        },
        0x796e616d69634172 => { // ynamicAr
            if type_name == "ArrayOfDynamicArray" {
                Some(|raw| {
                    let value: Vec<DynamicArray> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDynamicArray(value))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_value_deserializer_20(type_name: &str) -> Option<fn(&serde_json::value::RawValue) -> Result<ValueElements, serde_json::Error>> {
    let s = &type_name[9..17];
    let Some(type_ord) = to_u64(s) else {
        return None;
    };
    match type_ord {
        0x417661696c61626c => { // Availabl
            if type_name == "ArrayOfNoAvailableIp" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNoAvailableIp(value))
                })
            } else { None }
        },
        0x436c6f6e65644576 => { // ClonedEv
            if type_name == "ArrayOfVmClonedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmClonedEvent(value))
                })
            } else { None }
        },
        0x436f6e6669674661 => { // ConfigFa
            if type_name == "ArrayOfVmConfigFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmConfigFault(value))
                })
            } else { None }
        },
        0x4c6f6746696c6549 => { // LogFileI
            if type_name == "ArrayOfVmLogFileInfo" {
                Some(|raw| {
                    let value: Vec<VmLogFileInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmLogFileInfo(value))
                })
            } else { None }
        },
        0x50494368616c6c65 => { // PIChalle
            if type_name == "ArrayOfSSPIChallenge" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfSspiChallenge(value))
                })
            } else { None }
        },
        0x506f727453657474 => { // PortSett
            if type_name == "ArrayOfDVPortSetting" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::DvPortSettingTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvPortSetting(value))
                })
            } else { None }
        },
        0x534361706162696c => { // SCapabil
            if type_name == "ArrayOfDVSCapability" {
                Some(|raw| {
                    let value: Vec<DvsCapability> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsCapability(value))
                })
            } else { None }
        },
        0x53436f6e66696749 => { // SConfigI
            if type_name == "ArrayOfDVSConfigInfo" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::DvsConfigInfoTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsConfigInfo(value))
                })
            } else { None }
        },
        0x53436f6e66696753 => { // SConfigS
            if type_name == "ArrayOfDVSConfigSpec" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::DvsConfigSpecTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsConfigSpec(value))
                })
            } else { None }
        },
        0x5343726561746553 => { // SCreateS
            if type_name == "ArrayOfDVSCreateSpec" {
                Some(|raw| {
                    let value: Vec<DvsCreateSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsCreateSpec(value))
                })
            } else { None }
        },
        0x5375626a6563744e => { // SubjectN
            if type_name == "ArrayOfNoSubjectName" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNoSubjectName(value))
                })
            } else { None }
        },
        0x57776e436f6e666c => { // WwnConfl
            if type_name == "ArrayOfVmWwnConflict" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmWwnConflict(value))
                })
            } else { None }
        },
        0x6163656d656e7453 => { // acementS
            if type_name == "ArrayOfPlacementSpec" {
                Some(|raw| {
                    let value: Vec<PlacementSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPlacementSpec(value))
                })
            } else { None }
        },
        0x616e4469736b4661 => { // anDiskFa
            if type_name == "ArrayOfVsanDiskFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVsanDiskFault(value))
                })
            } else { None }
        },
        0x617073686f744661 => { // apshotFa
            if type_name == "ArrayOfSnapshotFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfSnapshotFault(value))
                })
            } else { None }
        },
        0x6176657273616c53 => { // aversalS
            if type_name == "ArrayOfTraversalSpec" {
                Some(|raw| {
                    let value: Vec<TraversalSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfTraversalSpec(value))
                })
            } else { None }
        },
        0x63656e7365536f75 => { // censeSou
            if type_name == "ArrayOfLicenseSource" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::LicenseSourceTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfLicenseSource(value))
                })
            } else { None }
        },
        0x636f766572794576 => { // coveryEv
            if type_name == "ArrayOfRecoveryEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfRecoveryEvent(value))
                })
            } else { None }
        },
        0x637369506f727449 => { // csiPortI
            if type_name == "ArrayOfIscsiPortInfo" {
                Some(|raw| {
                    let value: Vec<IscsiPortInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfIscsiPortInfo(value))
                })
            } else { None }
        },
        0x6375726974794572 => { // curityEr
            if type_name == "ArrayOfSecurityError" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfSecurityError(value))
                })
            } else { None }
        },
        0x64696d6d53756d6d => { // dimmSumm
            if type_name == "ArrayOfNvdimmSummary" {
                Some(|raw| {
                    let value: Vec<NvdimmSummary> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNvdimmSummary(value))
                })
            } else { None }
        },
        0x656e74417267756d => { // entArgum
            if type_name == "ArrayOfEventArgument" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::EventArgumentTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfEventArgument(value))
                })
            } else { None }
        },
        0x6573744469736b49 => { // estDiskI
            if type_name == "ArrayOfGuestDiskInfo" {
                Some(|raw| {
                    let value: Vec<GuestDiskInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGuestDiskInfo(value))
                })
            } else { None }
        },
        0x65737446696c6549 => { // estFileI
            if type_name == "ArrayOfGuestFileInfo" {
                Some(|raw| {
                    let value: Vec<GuestFileInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGuestFileInfo(value))
                })
            } else { None }
        },
        0x66436f6e73747261 => { // fConstra
            if type_name == "ArrayOfOvfConstraint" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfConstraint(value))
                })
            } else { None }
        },
        0x664d61707065644f => { // fMappedO
            if type_name == "ArrayOfOvfMappedOsId" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfMappedOsId(value))
                })
            } else { None }
        },
        0x664f7074696f6e49 => { // fOptionI
            if type_name == "ArrayOfOvfOptionInfo" {
                Some(|raw| {
                    let value: Vec<OvfOptionInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfOptionInfo(value))
                })
            } else { None }
        },
        0x697463684970556e => { // itchIpUn
            if type_name == "ArrayOfSwitchIpUnset" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfSwitchIpUnset(value))
                })
            } else { None }
        },
        0x6a656374436f6e74 => { // jectCont
            if type_name == "ArrayOfObjectContent" {
                Some(|raw| {
                    let value: Vec<ObjectContent> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfObjectContent(value))
                })
            } else { None }
        },
        0x6c6556696f6c6174 => { // leViolat
            if type_name == "ArrayOfRuleViolation" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfRuleViolation(value))
                })
            } else { None }
        },
        0x6c656374696f6e53 => { // lectionS
            if type_name == "ArrayOfSelectionSpec" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::SelectionSpecTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfSelectionSpec(value))
                })
            } else { None }
        },
        0x6c6c6261636b4576 => { // llbackEv
            if type_name == "ArrayOfRollbackEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfRollbackEvent(value))
                })
            } else { None }
        },
        0x6c6d436c6f6e6553 => { // lmCloneS
            if type_name == "ArrayOfVslmCloneSpec" {
                Some(|raw| {
                    let value: Vec<VslmCloneSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVslmCloneSpec(value))
                })
            } else { None }
        },
        0x6d506f7765725374 => { // mPowerSt
            if type_name == "HostSystemPowerState" {
                Some(|raw| {
                    let value: super::enums::HostSystemPowerStateEnum = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::HostSystemPowerState(value))
                })
            } else { None }
        },
        0x6d65737061636546 => { // mespaceF
            if type_name == "ArrayOfNamespaceFull" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNamespaceFull(value))
                })
            } else { None }
        },
        0x6d696e4469736162 => { // minDisab
            if type_name == "ArrayOfAdminDisabled" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfAdminDisabled(value))
                })
            } else { None }
        },
        0x6d69744578636565 => { // mitExcee
            if type_name == "ArrayOfLimitExceeded" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfLimitExceeded(value))
                })
            } else { None }
        },
        0x6e61676564427949 => { // nagedByI
            if type_name == "ArrayOfManagedByInfo" {
                Some(|raw| {
                    let value: Vec<ManagedByInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfManagedByInfo(value))
                })
            } else { None }
        },
        0x6e656c506f727454 => { // nelPortT
            if type_name == "FibreChannelPortType" {
                Some(|raw| {
                    let value: super::enums::FibreChannelPortTypeEnum = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::FibreChannelPortType(value))
                })
            } else { None }
        },
        0x6f66696c65506f6c => { // ofilePol
            if type_name == "ArrayOfProfilePolicy" {
                Some(|raw| {
                    let value: Vec<ProfilePolicy> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfProfilePolicy(value))
                })
            } else { None }
        },
        0x70654469736b4661 => { // peDiskFa
            if type_name == "ArrayOfWipeDiskFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfWipeDiskFault(value))
                })
            } else { None }
        },
        0x706c69636174654e => { // plicateN
            if type_name == "ArrayOfDuplicateName" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDuplicateName(value))
                })
            } else { None }
        },
        0x7070436c6f6e6553 => { // ppCloneS
            if type_name == "ArrayOfVAppCloneSpec" {
                Some(|raw| {
                    let value: Vec<VAppCloneSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVAppCloneSpec(value))
                })
            } else { None }
        },
        0x7265616479457869 => { // readyExi
            if type_name == "ArrayOfAlreadyExists" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfAlreadyExists(value))
                })
            } else { None }
        },
        0x7266517565727953 => { // rfQueryS
            if type_name == "ArrayOfPerfQuerySpec" {
                Some(|raw| {
                    let value: Vec<PerfQuerySpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPerfQuerySpec(value))
                })
            } else { None }
        },
        0x7266537461747354 => { // rfStatsT
            if type_name == "ArrayOfPerfStatsType" {
                Some(|raw| {
                    let value: Vec<super::enums::PerfStatsTypeEnum> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPerfStatsType(value))
                })
            } else { None }
        },
        0x727475616c446576 => { // rtualDev
            if type_name == "ArrayOfVirtualDevice" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::VirtualDeviceTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualDevice(value))
                })
            } else { None }
        },
        0x727475616c446973 => { // rtualDis
            if type_name == "ArrayOfVirtualDiskId" {
                Some(|raw| {
                    let value: Vec<VirtualDiskId> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualDiskId(value))
                })
            } else { None }
        },
        0x727475616c453130 => { // rtualE10
            if type_name == "ArrayOfVirtualE1000e" {
                Some(|raw| {
                    let value: Vec<VirtualE1000E> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualE1000E(value))
                })
            } else { None }
        },
        0x727475616c466c6f => { // rtualFlo
            if type_name == "ArrayOfVirtualFloppy" {
                Some(|raw| {
                    let value: Vec<VirtualFloppy> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualFloppy(value))
                })
            } else { None }
        },
        0x727475616c4e5644 => { // rtualNVD
            if type_name == "ArrayOfVirtualNVDIMM" {
                Some(|raw| {
                    let value: Vec<VirtualNvdimm> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualNvdimm(value))
                })
            } else { None }
        },
        0x727475616c566d78 => { // rtualVmx
            if type_name == "ArrayOfVirtualVmxnet" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::VirtualVmxnetTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualVmxnet(value))
                })
            } else { None }
        },
        0x73566d5072696f72 => { // sVmPrior
            if type_name == "ArrayOfDasVmPriority" {
                Some(|raw| {
                    let value: Vec<super::enums::DasVmPriorityEnum> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDasVmPriority(value))
                })
            } else { None }
        },
        0x736b496e666f5374 => { // skInfoSt
            if type_name == "ArrayOfTaskInfoState" {
                Some(|raw| {
                    let value: Vec<super::enums::TaskInfoStateEnum> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfTaskInfoState(value))
                })
            } else { None }
        },
        0x736b536368656475 => { // skSchedu
            if type_name == "ArrayOfTaskScheduler" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::TaskSchedulerTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfTaskScheduler(value))
                })
            } else { None }
        },
        0x736f75726365496e => { // sourceIn
            if type_name == "ArrayOfResourceInUse" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfResourceInUse(value))
                })
            } else { None }
        },
        0x7373696e67497050 => { // ssingIpP
            if type_name == "ArrayOfMissingIpPool" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfMissingIpPool(value))
                })
            } else { None }
        },
        0x7373696e674f626a => { // ssingObj
            if type_name == "ArrayOfMissingObject" {
                Some(|raw| {
                    let value: Vec<MissingObject> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfMissingObject(value))
                })
            } else { None }
        },
        0x7373776f72644669 => { // sswordFi
            if type_name == "ArrayOfPasswordField" {
                Some(|raw| {
                    let value: Vec<PasswordField> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPasswordField(value))
                })
            } else { None }
        },
        0x7374437075496449 => { // stCpuIdI
            if type_name == "ArrayOfHostCpuIdInfo" {
                Some(|raw| {
                    let value: Vec<HostCpuIdInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostCpuIdInfo(value))
                })
            } else { None }
        },
        0x7374446e73436f6e => { // stDnsCon
            if type_name == "ArrayOfHostDnsConfig" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::HostDnsConfigTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostDnsConfig(value))
                })
            } else { None }
        },
        0x73744970526f7574 => { // stIpRout
            if type_name == "ArrayOfHostIpRouteOp" {
                Some(|raw| {
                    let value: Vec<HostIpRouteOp> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostIpRouteOp(value))
                })
            } else { None }
        },
        0x73744d6f756e7449 => { // stMountI
            if type_name == "ArrayOfHostMountInfo" {
                Some(|raw| {
                    let value: Vec<HostMountInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostMountInfo(value))
                })
            } else { None }
        },
        0x73744e6173566f6c => { // stNasVol
            if type_name == "ArrayOfHostNasVolume" {
                Some(|raw| {
                    let value: Vec<HostNasVolume> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostNasVolume(value))
                })
            } else { None }
        },
        0x73744e7470436f6e => { // stNtpCon
            if type_name == "ArrayOfHostNtpConfig" {
                Some(|raw| {
                    let value: Vec<HostNtpConfig> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostNtpConfig(value))
                })
            } else { None }
        },
        0x7374506369446576 => { // stPciDev
            if type_name == "ArrayOfHostPciDevice" {
                Some(|raw| {
                    let value: Vec<HostPciDevice> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostPciDevice(value))
                })
            } else { None }
        },
        0x7374506f72744772 => { // stPortGr
            if type_name == "ArrayOfHostPortGroup" {
                Some(|raw| {
                    let value: Vec<HostPortGroup> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostPortGroup(value))
                })
            } else { None }
        },
        0x7374507470436f6e => { // stPtpCon
            if type_name == "ArrayOfHostPtpConfig" {
                Some(|raw| {
                    let value: Vec<HostPtpConfig> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostPtpConfig(value))
                })
            } else { None }
        },
        0x73745372696f7649 => { // stSriovI
            if type_name == "ArrayOfHostSriovInfo" {
                Some(|raw| {
                    let value: Vec<HostSriovInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostSriovInfo(value))
                })
            } else { None }
        },
        0x7441446972656374 => { // tADirect
            if type_name == "ArrayOfNotADirectory" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNotADirectory(value))
                })
            } else { None }
        },
        0x74456e6f75676843 => { // tEnoughC
            if type_name == "ArrayOfNotEnoughCpus" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNotEnoughCpus(value))
                })
            } else { None }
        },
        0x7445787072657373 => { // tExpress
            if type_name == "ArrayOfIntExpression" {
                Some(|raw| {
                    let value: Vec<IntExpression> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfIntExpression(value))
                })
            } else { None }
        },
        0x7461626173654572 => { // tabaseEr
            if type_name == "ArrayOfDatabaseError" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDatabaseError(value))
                })
            } else { None }
        },
        0x746173746f726549 => { // tastoreI
            if type_name == "ArrayOfDatastoreInfo" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::DatastoreInfoTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDatastoreInfo(value))
                })
            } else { None }
        },
        0x74654f7065726174 => { // teOperat
            if type_name == "ArrayUpdateOperation" {
                Some(|raw| {
                    let value: super::enums::ArrayUpdateOperationEnum = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayUpdateOperation(value))
                })
            } else { None }
        },
        0x74656e6465644576 => { // tendedEv
            if type_name == "ArrayOfExtendedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfExtendedEvent(value))
                })
            } else { None }
        },
        0x74656e6465644661 => { // tendedFa
            if type_name == "ArrayOfExtendedFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfExtendedFault(value))
                })
            } else { None }
        },
        0x74696f6e50726f66 => { // tionProf
            if type_name == "ArrayOfOptionProfile" {
                Some(|raw| {
                    let value: Vec<OptionProfile> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOptionProfile(value))
                })
            } else { None }
        },
        0x754d617463684576 => { // uMatchEv
            if type_name == "ArrayOfMtuMatchEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfMtuMatchEvent(value))
                })
            } else { None }
        },
        0x7553746174757349 => { // uStatusI
            if type_name == "ArrayOfDpuStatusInfo" {
                Some(|raw| {
                    let value: Vec<DpuStatusInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDpuStatusInfo(value))
                })
            } else { None }
        },
        0x756c74446f6d6169 => { // ultDomai
            if type_name == "ArrayOfFaultDomainId" {
                Some(|raw| {
                    let value: Vec<FaultDomainId> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfFaultDomainId(value))
                })
            } else { None }
        },
        0x7573746572416374 => { // usterAct
            if type_name == "ArrayOfClusterAction" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::ClusterActionTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterAction(value))
                })
            } else { None }
        },
        0x76616c696442756e => { // validBun
            if type_name == "ArrayOfInvalidBundle" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInvalidBundle(value))
                })
            } else { None }
        },
        0x76616c6964466f6c => { // validFol
            if type_name == "ArrayOfInvalidFolder" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInvalidFolder(value))
                })
            } else { None }
        },
        0x76616c6964466f72 => { // validFor
            if type_name == "ArrayOfInvalidFormat" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInvalidFormat(value))
                })
            } else { None }
        },
        0x76616c69644c6f63 => { // validLoc
            if type_name == "ArrayOfInvalidLocale" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInvalidLocale(value))
                })
            } else { None }
        },
        0x7669636547726f75 => { // viceGrou
            if type_name == "ArrayOfDeviceGroupId" {
                Some(|raw| {
                    let value: Vec<DeviceGroupId> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDeviceGroupId(value))
                })
            } else { None }
        },
        0x7950726f76696465 => { // yProvide
            if type_name == "ArrayOfKeyProviderId" {
                Some(|raw| {
                    let value: Vec<KeyProviderId> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfKeyProviderId(value))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_value_deserializer_21(type_name: &str) -> Option<fn(&serde_json::value::RawValue) -> Result<ValueElements, serde_json::Error>> {
    let s = &type_name[7..15];
    let Some(type_ord) = to_u64(s) else {
        return None;
    };
    match type_ord {
        0x42617365436f6e66 => { // BaseConf
            if type_name == "ArrayOfBaseConfigInfo" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::BaseConfigInfoTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfBaseConfigInfo(value))
                })
            } else { None }
        },
        0x436c757374657244 => { // ClusterD
            if type_name == "ArrayOfClusterDasData" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::ClusterDasDataTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterDasData(value))
                })
            } else { None }
        },
        0x436c757374657256 => { // ClusterV
            if type_name == "ArrayOfClusterVmGroup" {
                Some(|raw| {
                    let value: Vec<ClusterVmGroup> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterVmGroup(value))
                })
            } else { None }
        },
        0x43727970746f4b65 => { // CryptoKe
            if type_name == "ArrayOfCryptoKeyPlain" {
                Some(|raw| {
                    let value: Vec<CryptoKeyPlain> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCryptoKeyPlain(value))
                })
            } else { None }
        },
        0x43727970746f5370 => { // CryptoSp
            if type_name == "ArrayOfCryptoSpecNoOp" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::CryptoSpecNoOpTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCryptoSpecNoOp(value))
                })
            } else { None }
        },
        0x437573746f6d4669 => { // CustomFi
            if type_name == "ArrayOfCustomFieldDef" {
                Some(|raw| {
                    let value: Vec<CustomFieldDef> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCustomFieldDef(value))
                })
            } else { None }
        },
        0x445653436f6e7461 => { // DVSConta
            if type_name == "ArrayOfDVSContactInfo" {
                Some(|raw| {
                    let value: Vec<DvsContactInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsContactInfo(value))
                })
            } else { None }
        },
        0x44565352756e7469 => { // DVSRunti
            if type_name == "ArrayOfDVSRuntimeInfo" {
                Some(|raw| {
                    let value: Vec<DvsRuntimeInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsRuntimeInfo(value))
                })
            } else { None }
        },
        0x446173436f6e6669 => { // DasConfi
            if type_name == "ArrayOfDasConfigFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDasConfigFault(value))
                })
            } else { None }
        },
        0x4461746173746f72 => { // Datastor
            if type_name == "ArrayOfDatastoreEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDatastoreEvent(value))
                })
            } else { None }
        },
        0x4465766963654e6f => { // DeviceNo
            if type_name == "ArrayOfDeviceNotFound" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDeviceNotFound(value))
                })
            } else { None }
        },
        0x4469736b4368616e => { // DiskChan
            if type_name == "ArrayOfDiskChangeInfo" {
                Some(|raw| {
                    let value: Vec<DiskChangeInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDiskChangeInfo(value))
                })
            } else { None }
        },
        0x4469736b43727970 => { // DiskCryp
            if type_name == "ArrayOfDiskCryptoSpec" {
                Some(|raw| {
                    let value: Vec<DiskCryptoSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDiskCryptoSpec(value))
                })
            } else { None }
        },
        0x4469736b49734e6f => { // DiskIsNo
            if type_name == "ArrayOfDiskIsNonLocal" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDiskIsNonLocal(value))
                })
            } else { None }
        },
        0x446f6d61696e4e6f => { // DomainNo
            if type_name == "ArrayOfDomainNotFound" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDomainNotFound(value))
                })
            } else { None }
        },
        0x4475706c69636174 => { // Duplicat
            if type_name == "ArrayOfDuplicateDisks" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDuplicateDisks(value))
                })
            } else { None }
        },
        0x447673496d706f72 => { // DvsImpor
            if type_name == "ArrayOfDvsImportEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsImportEvent(value))
                })
            } else { None }
        },
        0x4476734970506f72 => { // DvsIpPor
            if type_name == "ArrayOfDvsIpPortRange" {
                Some(|raw| {
                    let value: Vec<DvsIpPortRange> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsIpPortRange(value))
                })
            } else { None }
        },
        0x4476734d65726765 => { // DvsMerge
            if type_name == "ArrayOfDvsMergedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsMergedEvent(value))
                })
            } else { None }
        },
        0x4476735472616666 => { // DvsTraff
            if type_name == "ArrayOfDvsTrafficRule" {
                Some(|raw| {
                    let value: Vec<DvsTrafficRule> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsTrafficRule(value))
                })
            } else { None }
        },
        0x447673564e696350 => { // DvsVNicP
            if type_name == "ArrayOfDvsVNicProfile" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::DvsVNicProfileTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsVNicProfile(value))
                })
            } else { None }
        },
        0x455643436f6e6669 => { // EVCConfi
            if type_name == "ArrayOfEVCConfigFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfEvcConfigFault(value))
                })
            } else { None }
        },
        0x4665617475726545 => { // FeatureE
            if type_name == "ArrayOfFeatureEVCMode" {
                Some(|raw| {
                    let value: Vec<FeatureEvcMode> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfFeatureEvcMode(value))
                })
            } else { None }
        },
        0x46696c6551756572 => { // FileQuer
            if type_name == "ArrayOfFileQueryFlags" {
                Some(|raw| {
                    let value: Vec<FileQueryFlags> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfFileQueryFlags(value))
                })
            } else { None }
        },
        0x466f6c6465724669 => { // FolderFi
            if type_name == "ArrayOfFolderFileInfo" {
                Some(|raw| {
                    let value: Vec<FolderFileInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfFolderFileInfo(value))
                })
            } else { None }
        },
        0x4674497373756573 => { // FtIssues
            if type_name == "ArrayOfFtIssuesOnHost" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfFtIssuesOnHost(value))
                })
            } else { None }
        },
        0x4775657374537461 => { // GuestSta
            if type_name == "ArrayOfGuestStackInfo" {
                Some(|raw| {
                    let value: Vec<GuestStackInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGuestStackInfo(value))
                })
            } else { None }
        },
        0x48414572726f7273 => { // HAErrors
            if type_name == "ArrayOfHAErrorsAtDest" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHaErrorsAtDest(value))
                })
            } else { None }
        },
        0x486f737441636365 => { // HostAcce
            if type_name == "ArrayOfHostAccessMode" {
                Some(|raw| {
                    let value: Vec<super::enums::HostAccessModeEnum> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostAccessMode(value))
                })
            } else { None }
        },
        0x486f737441646465 => { // HostAdde
            if type_name == "ArrayOfHostAddedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostAddedEvent(value))
                })
            } else { None }
        },
        0x486f7374426f6f74 => { // HostBoot
            if type_name == "ArrayOfHostBootDevice" {
                Some(|raw| {
                    let value: Vec<HostBootDevice> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostBootDevice(value))
                })
            } else { None }
        },
        0x486f737443617061 => { // HostCapa
            if type_name == "ArrayOfHostCapability" {
                Some(|raw| {
                    let value: Vec<HostCapability> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostCapability(value))
                })
            } else { None }
        },
        0x486f7374436f6e66 => { // HostConf
            match type_name {
                "ArrayOfHostConfigInfo" => {
                    Some(|raw| {
                        let value: Vec<HostConfigInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostConfigInfo(value))
                    })
                }
                "ArrayOfHostConfigSpec" => {
                    Some(|raw| {
                        let value: Vec<HostConfigSpec> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostConfigSpec(value))
                    })
                }
                _ => None
            }
        },
        0x486f737443707550 => { // HostCpuP
            if type_name == "ArrayOfHostCpuPackage" {
                Some(|raw| {
                    let value: Vec<HostCpuPackage> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostCpuPackage(value))
                })
            } else { None }
        },
        0x486f73744461734f => { // HostDasO
            if type_name == "ArrayOfHostDasOkEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostDasOkEvent(value))
                })
            } else { None }
        },
        0x486f737444696765 => { // HostDige
            if type_name == "ArrayOfHostDigestInfo" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::HostDigestInfoTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostDigestInfo(value))
                })
            } else { None }
        },
        0x486f737446696c65 => { // HostFile
            if type_name == "ArrayOfHostFileAccess" {
                Some(|raw| {
                    let value: Vec<HostFileAccess> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostFileAccess(value))
                })
            } else { None }
        },
        0x486f73744d656d6f => { // HostMemo
            if type_name == "ArrayOfHostMemorySpec" {
                Some(|raw| {
                    let value: Vec<HostMemorySpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostMemorySpec(value))
                })
            } else { None }
        },
        0x486f73744e617453 => { // HostNatS
            if type_name == "ArrayOfHostNatService" {
                Some(|raw| {
                    let value: Vec<HostNatService> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostNatService(value))
                })
            } else { None }
        },
        0x486f7374504d656d => { // HostPMem
            if type_name == "ArrayOfHostPMemVolume" {
                Some(|raw| {
                    let value: Vec<HostPMemVolume> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostPMemVolume(value))
                })
            } else { None }
        },
        0x486f737452646d61 => { // HostRdma
            if type_name == "ArrayOfHostRdmaDevice" {
                Some(|raw| {
                    let value: Vec<HostRdmaDevice> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostRdmaDevice(value))
                })
            } else { None }
        },
        0x486f737453797374 => { // HostSyst
            if type_name == "ArrayOfHostSystemInfo" {
                Some(|raw| {
                    let value: Vec<HostSystemInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostSystemInfo(value))
                })
            } else { None }
        },
        0x486f737456666174 => { // HostVfat
            if type_name == "ArrayOfHostVfatVolume" {
                Some(|raw| {
                    let value: Vec<HostVfatVolume> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostVfatVolume(value))
                })
            } else { None }
        },
        0x486f737456666673 => { // HostVffs
            if type_name == "ArrayOfHostVffsVolume" {
                Some(|raw| {
                    let value: Vec<HostVffsVolume> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostVffsVolume(value))
                })
            } else { None }
        },
        0x486f737456697274 => { // HostVirt
            if type_name == "ArrayOfHostVirtualNic" {
                Some(|raw| {
                    let value: Vec<HostVirtualNic> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostVirtualNic(value))
                })
            } else { None }
        },
        0x486f7374566d6673 => { // HostVmfs
            if type_name == "ArrayOfHostVmfsVolume" {
                Some(|raw| {
                    let value: Vec<HostVmfsVolume> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostVmfsVolume(value))
                })
            } else { None }
        },
        0x486f737456766f6c => { // HostVvol
            if type_name == "ArrayOfHostVvolVolume" {
                Some(|raw| {
                    let value: Vec<HostVvolVolume> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostVvolVolume(value))
                })
            } else { None }
        },
        0x496e76616c696442 => { // InvalidB
            if type_name == "ArrayOfInvalidBmcRole" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInvalidBmcRole(value))
                })
            } else { None }
        },
        0x496e76616c69644c => { // InvalidL
            if type_name == "ArrayOfInvalidLicense" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInvalidLicense(value))
                })
            } else { None }
        },
        0x496e76616c696452 => { // InvalidR
            if type_name == "ArrayOfInvalidRequest" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInvalidRequest(value))
                })
            } else { None }
        },
        0x496e76616c696456 => { // InvalidV
            if type_name == "ArrayOfInvalidVmState" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInvalidVmState(value))
                })
            } else { None }
        },
        0x4970526f75746550 => { // IpRouteP
            if type_name == "ArrayOfIpRouteProfile" {
                Some(|raw| {
                    let value: Vec<IpRouteProfile> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfIpRouteProfile(value))
                })
            } else { None }
        },
        0x4b6d697053657276 => { // KmipServ
            match type_name {
                "ArrayOfKmipServerInfo" => {
                    Some(|raw| {
                        let value: Vec<KmipServerInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfKmipServerInfo(value))
                    })
                }
                "ArrayOfKmipServerSpec" => {
                    Some(|raw| {
                        let value: Vec<KmipServerSpec> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfKmipServerSpec(value))
                    })
                }
                _ => None
            }
        },
        0x4c6963656e736545 => { // LicenseE
            if type_name == "ArrayOfLicenseExpired" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfLicenseExpired(value))
                })
            } else { None }
        },
        0x4d6574686f644469 => { // MethodDi
            if type_name == "ArrayOfMethodDisabled" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfMethodDisabled(value))
                })
            } else { None }
        },
        0x4d6574686f644e6f => { // MethodNo
            if type_name == "ArrayOfMethodNotFound" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfMethodNotFound(value))
                })
            } else { None }
        },
        0x4d6967726174696f => { // Migratio
            match type_name {
                "ArrayOfMigrationEvent" => {
                    Some(|raw| {
                        let value: Vec<Event> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfMigrationEvent(value))
                    })
                }
                "ArrayOfMigrationFault" => {
                    Some(|raw| {
                        let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfMigrationFault(value))
                    })
                }
                _ => None
            }
        },
        0x4e6173436f6e6669 => { // NasConfi
            if type_name == "ArrayOfNasConfigFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNasConfigFault(value))
                })
            } else { None }
        },
        0x4e65744970537461 => { // NetIpSta
            if type_name == "ArrayOfNetIpStackInfo" {
                Some(|raw| {
                    let value: Vec<NetIpStackInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNetIpStackInfo(value))
                })
            } else { None }
        },
        0x4e6574776f726b50 => { // NetworkP
            if type_name == "ArrayOfNetworkProfile" {
                Some(|raw| {
                    let value: Vec<NetworkProfile> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNetworkProfile(value))
                })
            } else { None }
        },
        0x4e6574776f726b53 => { // NetworkS
            if type_name == "ArrayOfNetworkSummary" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::NetworkSummaryTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNetworkSummary(value))
                })
            } else { None }
        },
        0x4e6f4c6963656e73 => { // NoLicens
            if type_name == "ArrayOfNoLicenseEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNoLicenseEvent(value))
                })
            } else { None }
        },
        0x4e6f74496d706c65 => { // NotImple
            if type_name == "ArrayOfNotImplemented" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNotImplemented(value))
                })
            } else { None }
        },
        0x4e7664696d6d4469 => { // NvdimmDi
            if type_name == "ArrayOfNvdimmDimmInfo" {
                Some(|raw| {
                    let value: Vec<NvdimmDimmInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNvdimmDimmInfo(value))
                })
            } else { None }
        },
        0x4f76664e6574776f => { // OvfNetwo
            if type_name == "ArrayOfOvfNetworkInfo" {
                Some(|raw| {
                    let value: Vec<OvfNetworkInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfNetworkInfo(value))
                })
            } else { None }
        },
        0x4f76665265736f75 => { // OvfResou
            if type_name == "ArrayOfOvfResourceMap" {
                Some(|raw| {
                    let value: Vec<OvfResourceMap> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfResourceMap(value))
                })
            } else { None }
        },
        0x4f76665379737465 => { // OvfSyste
            if type_name == "ArrayOfOvfSystemFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfSystemFault(value))
                })
            } else { None }
        },
        0x5065726653616d70 => { // PerfSamp
            if type_name == "ArrayOfPerfSampleInfo" {
                Some(|raw| {
                    let value: Vec<PerfSampleInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPerfSampleInfo(value))
                })
            } else { None }
        },
        0x506f644469736b4c => { // PodDiskL
            if type_name == "ArrayOfPodDiskLocator" {
                Some(|raw| {
                    let value: Vec<PodDiskLocator> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPodDiskLocator(value))
                })
            } else { None }
        },
        0x50726f7065727479 => { // Property
            if type_name == "ArrayOfPropertyChange" {
                Some(|raw| {
                    let value: Vec<PropertyChange> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPropertyChange(value))
                })
            } else { None }
        },
        0x5265626f6f745265 => { // RebootRe
            if type_name == "ArrayOfRebootRequired" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfRebootRequired(value))
                })
            } else { None }
        },
        0x5265747269657665 => { // Retrieve
            if type_name == "ArrayOfRetrieveResult" {
                Some(|raw| {
                    let value: Vec<RetrieveResult> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfRetrieveResult(value))
                })
            } else { None }
        },
        0x526f6c6541646465 => { // RoleAdde
            if type_name == "ArrayOfRoleAddedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfRoleAddedEvent(value))
                })
            } else { None }
        },
        0x53534c5665726966 => { // SSLVerif
            if type_name == "ArrayOfSSLVerifyFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfSslVerifyFault(value))
                })
            } else { None }
        },
        0x53656e64534e4d50 => { // SendSNMP
            if type_name == "ArrayOfSendSNMPAction" {
                Some(|raw| {
                    let value: Vec<SendSnmpAction> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfSendSnmpAction(value))
                })
            } else { None }
        },
        0x5365727669636543 => { // ServiceC
            if type_name == "ArrayOfServiceContent" {
                Some(|raw| {
                    let value: Vec<ServiceContent> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfServiceContent(value))
                })
            } else { None }
        },
        0x536572766963654c => { // ServiceL
            if type_name == "ArrayOfServiceLocator" {
                Some(|raw| {
                    let value: Vec<ServiceLocator> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfServiceLocator(value))
                })
            } else { None }
        },
        0x5365727669636550 => { // ServiceP
            if type_name == "ArrayOfServiceProfile" {
                Some(|raw| {
                    let value: Vec<ServiceProfile> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfServiceProfile(value))
                })
            } else { None }
        },
        0x536e617073686f74 => { // Snapshot
            if type_name == "ArrayOfSnapshotLocked" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfSnapshotLocked(value))
                })
            } else { None }
        },
        0x536f757263654e6f => { // SourceNo
            if type_name == "ArrayOfSourceNodeSpec" {
                Some(|raw| {
                    let value: Vec<SourceNodeSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfSourceNodeSpec(value))
                })
            } else { None }
        },
        0x53746f7261676550 => { // StorageP
            if type_name == "ArrayOfStorageProfile" {
                Some(|raw| {
                    let value: Vec<StorageProfile> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfStorageProfile(value))
                })
            } else { None }
        },
        0x5461736b46696c74 => { // TaskFilt
            if type_name == "ArrayOfTaskFilterSpec" {
                Some(|raw| {
                    let value: Vec<TaskFilterSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfTaskFilterSpec(value))
                })
            } else { None }
        },
        0x5461736b496e5072 => { // TaskInPr
            if type_name == "ArrayOfTaskInProgress" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfTaskInProgress(value))
                })
            } else { None }
        },
        0x5461736b52656173 => { // TaskReas
            if type_name == "ArrayOfTaskReasonUser" {
                Some(|raw| {
                    let value: Vec<TaskReasonUser> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfTaskReasonUser(value))
                })
            } else { None }
        },
        0x546f6f4d616e7944 => { // TooManyD
            if type_name == "ArrayOfTooManyDevices" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfTooManyDevices(value))
                })
            } else { None }
        },
        0x56417070436f6e66 => { // VAppConf
            match type_name {
                "ArrayOfVAppConfigInfo" => {
                    Some(|raw| {
                        let value: Vec<VAppConfigInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVAppConfigInfo(value))
                    })
                }
                "ArrayOfVAppConfigSpec" => {
                    Some(|raw| {
                        let value: Vec<VAppConfigSpec> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVAppConfigSpec(value))
                    })
                }
                _ => None
            }
        },
        0x564170704e6f7452 => { // VAppNotR
            if type_name == "ArrayOfVAppNotRunning" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVAppNotRunning(value))
                })
            } else { None }
        },
        0x5653746f72616765 => { // VStorage
            if type_name == "ArrayOfVStorageObject" {
                Some(|raw| {
                    let value: Vec<VStorageObject> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVStorageObject(value))
                })
            } else { None }
        },
        0x5669727475616c50 => { // VirtualP
            if type_name == "ArrayOfVirtualPCNet32" {
                Some(|raw| {
                    let value: Vec<VirtualPcNet32> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualPcNet32(value))
                })
            } else { None }
        },
        0x5669727475616c56 => { // VirtualV
            match type_name {
                "ArrayOfVirtualVmxnet2" => {
                    Some(|raw| {
                        let value: Vec<VirtualVmxnet2> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualVmxnet2(value))
                    })
                }
                "ArrayOfVirtualVmxnet3" => {
                    Some(|raw| {
                        let value: Vec<Box<dyn super::traits::VirtualVmxnet3Trait>> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualVmxnet3(value))
                    })
                }
                _ => None
            }
        },
        0x566d437265617465 => { // VmCreate
            if type_name == "ArrayOfVmCreatedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmCreatedEvent(value))
                })
            } else { None }
        },
        0x566d4469736b4669 => { // VmDiskFi
            if type_name == "ArrayOfVmDiskFileInfo" {
                Some(|raw| {
                    let value: Vec<VmDiskFileInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmDiskFileInfo(value))
                })
            } else { None }
        },
        0x566d4c696d69744c => { // VmLimitL
            if type_name == "ArrayOfVmLimitLicense" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmLimitLicense(value))
                })
            } else { None }
        },
        0x566d4c6f6746696c => { // VmLogFil
            if type_name == "ArrayOfVmLogFileQuery" {
                Some(|raw| {
                    let value: Vec<VmLogFileQuery> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmLogFileQuery(value))
                })
            } else { None }
        },
        0x566d4d6573736167 => { // VmMessag
            if type_name == "ArrayOfVmMessageEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmMessageEvent(value))
                })
            } else { None }
        },
        0x566d52656d6f7665 => { // VmRemove
            if type_name == "ArrayOfVmRemovedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmRemovedEvent(value))
                })
            } else { None }
        },
        0x566d52656e616d65 => { // VmRename
            if type_name == "ArrayOfVmRenamedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmRenamedEvent(value))
                })
            } else { None }
        },
        0x566d66734d6f756e => { // VmfsMoun
            if type_name == "ArrayOfVmfsMountFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmfsMountFault(value))
                })
            } else { None }
        },
        0x5673616e506f6c69 => { // VsanPoli
            if type_name == "ArrayOfVsanPolicyCost" {
                Some(|raw| {
                    let value: Vec<VsanPolicyCost> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVsanPolicyCost(value))
                })
            } else { None }
        },
        0x56736c6d43726561 => { // VslmCrea
            if type_name == "ArrayOfVslmCreateSpec" {
                Some(|raw| {
                    let value: Vec<VslmCreateSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVslmCreateSpec(value))
                })
            } else { None }
        },
        0x6f6d6d616e64456e => { // ommandEn
            if type_name == "SimpleCommandEncoding" {
                Some(|raw| {
                    let value: super::enums::SimpleCommandEncodingEnum = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::SimpleCommandEncoding(value))
                })
            } else { None }
        },
        0x76736c6d56436c6f => { // vslmVClo
            if type_name == "ArrayOfvslmVClockInfo" {
                Some(|raw| {
                    let value: Vec<VslmVClockInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfvslmVClockInfo(value))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_value_deserializer_22(type_name: &str) -> Option<fn(&serde_json::value::RawValue) -> Result<ValueElements, serde_json::Error>> {
    let s = &type_name[7..15];
    let Some(type_ord) = to_u64(s) else {
        return None;
    };
    match type_ord {
        0x416c61726d457870 => { // AlarmExp
            if type_name == "ArrayOfAlarmExpression" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::AlarmExpressionTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfAlarmExpression(value))
                })
            } else { None }
        },
        0x416c61726d46696c => { // AlarmFil
            if type_name == "ArrayOfAlarmFilterSpec" {
                Some(|raw| {
                    let value: Vec<AlarmFilterSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfAlarmFilterSpec(value))
                })
            } else { None }
        },
        0x416c726561647955 => { // AlreadyU
            if type_name == "ArrayOfAlreadyUpgraded" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfAlreadyUpgraded(value))
                })
            } else { None }
        },
        0x4172726179557064 => { // ArrayUpd
            if type_name == "ArrayOfArrayUpdateSpec" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::ArrayUpdateSpecTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfArrayUpdateSpec(value))
                })
            } else { None }
        },
        0x436c757374657252 => { // ClusterR
            match type_name {
                "ArrayOfClusterRuleInfo" => {
                    Some(|raw| {
                        let value: Vec<Box<dyn super::traits::ClusterRuleInfoTrait>> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfClusterRuleInfo(value))
                    })
                }
                "ArrayOfClusterRuleSpec" => {
                    Some(|raw| {
                        let value: Vec<ClusterRuleSpec> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfClusterRuleSpec(value))
                    })
                }
                _ => None
            }
        },
        0x437075496e636f6d => { // CpuIncom
            if type_name == "ArrayOfCpuIncompatible" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCpuIncompatible(value))
                })
            } else { None }
        },
        0x43727970746f4b65 => { // CryptoKe
            if type_name == "ArrayOfCryptoKeyResult" {
                Some(|raw| {
                    let value: Vec<CryptoKeyResult> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCryptoKeyResult(value))
                })
            } else { None }
        },
        0x446173456e61626c => { // DasEnabl
            if type_name == "ArrayOfDasEnabledEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDasEnabledEvent(value))
                })
            } else { None }
        },
        0x4461746163656e74 => { // Datacent
            if type_name == "ArrayOfDatacenterEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDatacenterEvent(value))
                })
            } else { None }
        },
        0x4461746173746f72 => { // Datastor
            if type_name == "ArrayOfDatastoreOption" {
                Some(|raw| {
                    let value: Vec<DatastoreOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDatastoreOption(value))
                })
            } else { None }
        },
        0x4461746554696d65 => { // DateTime
            if type_name == "ArrayOfDateTimeProfile" {
                Some(|raw| {
                    let value: Vec<DateTimeProfile> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDateTimeProfile(value))
                })
            } else { None }
        },
        0x4472734469736162 => { // DrsDisab
            if type_name == "ArrayOfDrsDisabledOnVm" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDrsDisabledOnVm(value))
                })
            } else { None }
        },
        0x447273456e61626c => { // DrsEnabl
            if type_name == "ArrayOfDrsEnabledEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDrsEnabledEvent(value))
                })
            } else { None }
        },
        0x44767067496d706f => { // DvpgImpo
            if type_name == "ArrayOfDvpgImportEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvpgImportEvent(value))
                })
            } else { None }
        },
        0x4476734372656174 => { // DvsCreat
            if type_name == "ArrayOfDvsCreatedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsCreatedEvent(value))
                })
            } else { None }
        },
        0x44767346696c7465 => { // DvsFilte
            match type_name {
                "ArrayOfDvsFilterConfig" => {
                    Some(|raw| {
                        let value: Vec<Box<dyn super::traits::DvsFilterConfigTrait>> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfDvsFilterConfig(value))
                    })
                }
                "ArrayOfDvsFilterPolicy" => {
                    Some(|raw| {
                        let value: Vec<DvsFilterPolicy> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfDvsFilterPolicy(value))
                    })
                }
                _ => None
            }
        },
        0x44767352656e616d => { // DvsRenam
            if type_name == "ArrayOfDvsRenamedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsRenamedEvent(value))
                })
            } else { None }
        },
        0x447673526573746f => { // DvsResto
            if type_name == "ArrayOfDvsRestoreEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsRestoreEvent(value))
                })
            } else { None }
        },
        0x44767353696e676c => { // DvsSingl
            if type_name == "ArrayOfDvsSingleIpPort" {
                Some(|raw| {
                    let value: Vec<DvsSingleIpPort> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsSingleIpPort(value))
                })
            } else { None }
        },
        0x44796e616d696350 => { // DynamicP
            if type_name == "ArrayOfDynamicProperty" {
                Some(|raw| {
                    let value: Vec<DynamicProperty> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDynamicProperty(value))
                })
            } else { None }
        },
        0x456e746974795072 => { // EntityPr
            if type_name == "ArrayOfEntityPrivilege" {
                Some(|raw| {
                    let value: Vec<EntityPrivilege> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfEntityPrivilege(value))
                })
            } else { None }
        },
        0x456e756d44657363 => { // EnumDesc
            if type_name == "ArrayOfEnumDescription" {
                Some(|raw| {
                    let value: Vec<EnumDescription> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfEnumDescription(value))
                })
            } else { None }
        },
        0x4576656e7446696c => { // EventFil
            if type_name == "ArrayOfEventFilterSpec" {
                Some(|raw| {
                    let value: Vec<EventFilterSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfEventFilterSpec(value))
                })
            } else { None }
        },
        0x46696c654e616d65 => { // FileName
            if type_name == "ArrayOfFileNameTooLong" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfFileNameTooLong(value))
                })
            } else { None }
        },
        0x46696c654e6f7457 => { // FileNotW
            if type_name == "ArrayOfFileNotWritable" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfFileNotWritable(value))
                })
            } else { None }
        },
        0x4669726577616c6c => { // Firewall
            if type_name == "ArrayOfFirewallProfile" {
                Some(|raw| {
                    let value: Vec<FirewallProfile> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfFirewallProfile(value))
                })
            } else { None }
        },
        0x466f6c6465724669 => { // FolderFi
            if type_name == "ArrayOfFolderFileQuery" {
                Some(|raw| {
                    let value: Vec<FolderFileQuery> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfFolderFileQuery(value))
                })
            } else { None }
        },
        0x476174657761794e => { // GatewayN
            if type_name == "ArrayOfGatewayNotFound" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGatewayNotFound(value))
                })
            } else { None }
        },
        0x47656e6572696344 => { // GenericD
            if type_name == "ArrayOfGenericDrsFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGenericDrsFault(value))
                })
            } else { None }
        },
        0x4775657374526567 => { // GuestReg
            if type_name == "ArrayOfGuestRegKeySpec" {
                Some(|raw| {
                    let value: Vec<GuestRegKeySpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGuestRegKeySpec(value))
                })
            } else { None }
        },
        0x4775657374536372 => { // GuestScr
            if type_name == "ArrayOfGuestScreenInfo" {
                Some(|raw| {
                    let value: Vec<GuestScreenInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGuestScreenInfo(value))
                })
            } else { None }
        },
        0x486f73744163636f => { // HostAcco
            if type_name == "ArrayOfHostAccountSpec" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::HostAccountSpecTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostAccountSpec(value))
                })
            } else { None }
        },
        0x486f7374436f6e66 => { // HostConf
            if type_name == "ArrayOfHostConfigFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostConfigFault(value))
                })
            } else { None }
        },
        0x486f7374436f6e6e => { // HostConn
            match type_name {
                "ArrayOfHostConnectInfo" => {
                    Some(|raw| {
                        let value: Vec<HostConnectInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostConnectInfo(value))
                    })
                }
                "ArrayOfHostConnectSpec" => {
                    Some(|raw| {
                        let value: Vec<HostConnectSpec> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostConnectSpec(value))
                    })
                }
                _ => None
            }
        },
        0x486f737444686370 => { // HostDhcp
            if type_name == "ArrayOfHostDhcpService" {
                Some(|raw| {
                    let value: Vec<HostDhcpService> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostDhcpService(value))
                })
            } else { None }
        },
        0x486f737446656174 => { // HostFeat
            if type_name == "ArrayOfHostFeatureMask" {
                Some(|raw| {
                    let value: Vec<HostFeatureMask> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostFeatureMask(value))
                })
            } else { None }
        },
        0x486f737447617465 => { // HostGate
            if type_name == "ArrayOfHostGatewaySpec" {
                Some(|raw| {
                    let value: Vec<HostGatewaySpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostGatewaySpec(value))
                })
            } else { None }
        },
        0x486f73744c696365 => { // HostLice
            if type_name == "ArrayOfHostLicenseSpec" {
                Some(|raw| {
                    let value: Vec<HostLicenseSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostLicenseSpec(value))
                })
            } else { None }
        },
        0x486f73744c697374 => { // HostList
            if type_name == "ArrayOfHostListSummary" {
                Some(|raw| {
                    let value: Vec<HostListSummary> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostListSummary(value))
                })
            } else { None }
        },
        0x486f73744e657477 => { // HostNetw
            if type_name == "ArrayOfHostNetworkInfo" {
                Some(|raw| {
                    let value: Vec<HostNetworkInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostNetworkInfo(value))
                })
            } else { None }
        },
        0x486f7374506f7765 => { // HostPowe
            if type_name == "ArrayOfHostPowerPolicy" {
                Some(|raw| {
                    let value: Vec<HostPowerPolicy> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostPowerPolicy(value))
                })
            } else { None }
        },
        0x486f737450726f78 => { // HostProx
            if type_name == "ArrayOfHostProxySwitch" {
                Some(|raw| {
                    let value: Vec<HostProxySwitch> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostProxySwitch(value))
                })
            } else { None }
        },
        0x486f737452756e74 => { // HostRunt
            if type_name == "ArrayOfHostRuntimeInfo" {
                Some(|raw| {
                    let value: Vec<HostRuntimeInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostRuntimeInfo(value))
                })
            } else { None }
        },
        0x486f737453657276 => { // HostServ
            if type_name == "ArrayOfHostServiceInfo" {
                Some(|raw| {
                    let value: Vec<HostServiceInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostServiceInfo(value))
                })
            } else { None }
        },
        0x486f73745372696f => { // HostSrio
            if type_name == "ArrayOfHostSriovConfig" {
                Some(|raw| {
                    let value: Vec<HostSriovConfig> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostSriovConfig(value))
                })
            } else { None }
        },
        0x486f7374564d6f74 => { // HostVMot
            if type_name == "ArrayOfHostVMotionInfo" {
                Some(|raw| {
                    let value: Vec<HostVMotionInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostVMotionInfo(value))
                })
            } else { None }
        },
        0x496e76616c696441 => { // InvalidA
            if type_name == "ArrayOfInvalidArgument" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInvalidArgument(value))
                })
            } else { None }
        },
        0x496e76616c696448 => { // InvalidH
            if type_name == "ArrayOfInvalidHostName" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInvalidHostName(value))
                })
            } else { None }
        },
        0x496e76616c696450 => { // InvalidP
            if type_name == "ArrayOfInvalidProperty" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInvalidProperty(value))
                })
            } else { None }
        },
        0x496e76616c696456 => { // InvalidV
            if type_name == "ArrayOfInvalidVmConfig" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInvalidVmConfig(value))
                })
            } else { None }
        },
        0x4b6d6970436c7573 => { // KmipClus
            if type_name == "ArrayOfKmipClusterInfo" {
                Some(|raw| {
                    let value: Vec<KmipClusterInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfKmipClusterInfo(value))
                })
            } else { None }
        },
        0x4d697373696e6750 => { // MissingP
            if type_name == "ArrayOfMissingProperty" {
                Some(|raw| {
                    let value: Vec<MissingProperty> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfMissingProperty(value))
                })
            } else { None }
        },
        0x4e65744970436f6e => { // NetIpCon
            match type_name {
                "ArrayOfNetIpConfigInfo" => {
                    Some(|raw| {
                        let value: Vec<NetIpConfigInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfNetIpConfigInfo(value))
                    })
                }
                "ArrayOfNetIpConfigSpec" => {
                    Some(|raw| {
                        let value: Vec<NetIpConfigSpec> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfNetIpConfigSpec(value))
                    })
                }
                _ => None
            }
        },
        0x4e6f50656572486f => { // NoPeerHo
            if type_name == "ArrayOfNoPeerHostFound" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNoPeerHostFound(value))
                })
            } else { None }
        },
        0x4e6f64654e657477 => { // NodeNetw
            if type_name == "ArrayOfNodeNetworkSpec" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::NodeNetworkSpecTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNodeNetworkSpec(value))
                })
            } else { None }
        },
        0x4e756d506f727473 => { // NumPorts
            if type_name == "ArrayOfNumPortsProfile" {
                Some(|raw| {
                    let value: Vec<NumPortsProfile> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNumPortsProfile(value))
                })
            } else { None }
        },
        0x4f76664578706f72 => { // OvfExpor
            if type_name == "ArrayOfOvfExportFailed" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfExportFailed(value))
                })
            } else { None }
        },
        0x4f7666496d706f72 => { // OvfImpor
            if type_name == "ArrayOfOvfImportFailed" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfImportFailed(value))
                })
            } else { None }
        },
        0x4f7666496e76616c => { // OvfInval
            if type_name == "ArrayOfOvfInvalidValue" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfInvalidValue(value))
                })
            } else { None }
        },
        0x4f766650726f7065 => { // OvfPrope
            if type_name == "ArrayOfOvfPropertyType" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfPropertyType(value))
                })
            } else { None }
        },
        0x4f766657726f6e67 => { // OvfWrong
            if type_name == "ArrayOfOvfWrongElement" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfWrongElement(value))
                })
            } else { None }
        },
        0x50617373776f7264 => { // Password
            if type_name == "ArrayOfPasswordExpired" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPasswordExpired(value))
                })
            } else { None }
        },
        0x5061746368537570 => { // PatchSup
            if type_name == "ArrayOfPatchSuperseded" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPatchSuperseded(value))
                })
            } else { None }
        },
        0x50657266436f756e => { // PerfCoun
            if type_name == "ArrayOfPerfCounterInfo" {
                Some(|raw| {
                    let value: Vec<PerfCounterInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPerfCounterInfo(value))
                })
            } else { None }
        },
        0x5065726653756d6d => { // PerfSumm
            if type_name == "ArrayOfPerfSummaryType" {
                Some(|raw| {
                    let value: Vec<super::enums::PerfSummaryTypeEnum> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPerfSummaryType(value))
                })
            } else { None }
        },
        0x5065726d69737369 => { // Permissi
            if type_name == "ArrayOfPermissionEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPermissionEvent(value))
                })
            } else { None }
        },
        0x506879736963616c => { // Physical
            match type_name {
                "ArrayOfPhysicalNicHint" => {
                    Some(|raw| {
                        let value: Vec<Box<dyn super::traits::PhysicalNicHintTrait>> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfPhysicalNicHint(value))
                    })
                }
                "ArrayOfPhysicalNicSpec" => {
                    Some(|raw| {
                        let value: Vec<PhysicalNicSpec> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfPhysicalNicSpec(value))
                    })
                }
                _ => None
            }
        },
        0x506c6163656d656e => { // Placemen
            match type_name {
                "ArrayOfPlacementAction" => {
                    Some(|raw| {
                        let value: Vec<PlacementAction> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfPlacementAction(value))
                    })
                }
                "ArrayOfPlacementResult" => {
                    Some(|raw| {
                        let value: Vec<PlacementResult> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfPlacementResult(value))
                    })
                }
                _ => None
            }
        },
        0x506f776572537973 => { // PowerSys
            if type_name == "ArrayOfPowerSystemInfo" {
                Some(|raw| {
                    let value: Vec<PowerSystemInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPowerSystemInfo(value))
                })
            } else { None }
        },
        0x50726f66696c654d => { // ProfileM
            if type_name == "ArrayOfProfileMetadata" {
                Some(|raw| {
                    let value: Vec<ProfileMetadata> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfProfileMetadata(value))
                })
            } else { None }
        },
        0x5175657374696f6e => { // Question
            if type_name == "ArrayOfQuestionPending" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfQuestionPending(value))
                })
            } else { None }
        },
        0x52444d4e6f745072 => { // RDMNotPr
            if type_name == "ArrayOfRDMNotPreserved" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfRdmNotPreserved(value))
                })
            } else { None }
        },
        0x52444d4e6f745375 => { // RDMNotSu
            if type_name == "ArrayOfRDMNotSupported" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfRdmNotSupported(value))
                })
            } else { None }
        },
        0x5265706c69636174 => { // Replicat
            if type_name == "ArrayOfReplicationSpec" {
                Some(|raw| {
                    let value: Vec<ReplicationSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfReplicationSpec(value))
                })
            } else { None }
        },
        0x5265717565737443 => { // RequestC
            if type_name == "ArrayOfRequestCanceled" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfRequestCanceled(value))
                })
            } else { None }
        },
        0x5265747269657665 => { // Retrieve
            if type_name == "ArrayOfRetrieveOptions" {
                Some(|raw| {
                    let value: Vec<RetrieveOptions> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfRetrieveOptions(value))
                })
            } else { None }
        },
        0x526f6c6c6261636b => { // Rollback
            if type_name == "ArrayOfRollbackFailure" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfRollbackFailure(value))
                })
            } else { None }
        },
        0x52756e5363726970 => { // RunScrip
            if type_name == "ArrayOfRunScriptAction" {
                Some(|raw| {
                    let value: Vec<RunScriptAction> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfRunScriptAction(value))
                })
            } else { None }
        },
        0x5365637572697479 => { // Security
            if type_name == "ArrayOfSecurityProfile" {
                Some(|raw| {
                    let value: Vec<SecurityProfile> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfSecurityProfile(value))
                })
            } else { None }
        },
        0x53656e64456d6169 => { // SendEmai
            if type_name == "ArrayOfSendEmailAction" {
                Some(|raw| {
                    let value: Vec<SendEmailAction> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfSendEmailAction(value))
                })
            } else { None }
        },
        0x536872696e6b4469 => { // ShrinkDi
            if type_name == "ArrayOfShrinkDiskFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfShrinkDiskFault(value))
                })
            } else { None }
        },
        0x536f667477617265 => { // Software
            if type_name == "ArrayOfSoftwarePackage" {
                Some(|raw| {
                    let value: Vec<SoftwarePackage> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfSoftwarePackage(value))
                })
            } else { None }
        },
        0x53746f7261676549 => { // StorageI
            if type_name == "ArrayOfStorageIORMInfo" {
                Some(|raw| {
                    let value: Vec<StorageIormInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfStorageIormInfo(value))
                })
            } else { None }
        },
        0x53797374656d4576 => { // SystemEv
            if type_name == "ArrayOfSystemEventInfo" {
                Some(|raw| {
                    let value: Vec<SystemEventInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfSystemEventInfo(value))
                })
            } else { None }
        },
        0x5461736b44657363 => { // TaskDesc
            if type_name == "ArrayOfTaskDescription" {
                Some(|raw| {
                    let value: Vec<TaskDescription> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfTaskDescription(value))
                })
            } else { None }
        },
        0x5461736b52656173 => { // TaskReas
            if type_name == "ArrayOfTaskReasonAlarm" {
                Some(|raw| {
                    let value: Vec<TaskReasonAlarm> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfTaskReasonAlarm(value))
                })
            } else { None }
        },
        0x546f6f6c73436f6e => { // ToolsCon
            if type_name == "ArrayOfToolsConfigInfo" {
                Some(|raw| {
                    let value: Vec<ToolsConfigInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfToolsConfigInfo(value))
                })
            } else { None }
        },
        0x5479706544657363 => { // TypeDesc
            if type_name == "ArrayOfTypeDescription" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::TypeDescriptionTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfTypeDescription(value))
                })
            } else { None }
        },
        0x556e657870656374 => { // Unexpect
            if type_name == "ArrayOfUnexpectedFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfUnexpectedFault(value))
                })
            } else { None }
        },
        0x5573625363616e43 => { // UsbScanC
            if type_name == "ArrayOfUsbScanCodeSpec" {
                Some(|raw| {
                    let value: Vec<UsbScanCodeSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfUsbScanCodeSpec(value))
                })
            } else { None }
        },
        0x56417070436f6e66 => { // VAppConf
            if type_name == "ArrayOfVAppConfigFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVAppConfigFault(value))
                })
            } else { None }
        },
        0x5641707050726f64 => { // VAppProd
            match type_name {
                "ArrayOfVAppProductInfo" => {
                    Some(|raw| {
                        let value: Vec<VAppProductInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVAppProductInfo(value))
                    })
                }
                "ArrayOfVAppProductSpec" => {
                    Some(|raw| {
                        let value: Vec<VAppProductSpec> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVAppProductSpec(value))
                    })
                }
                _ => None
            }
        },
        0x564d494e6f745375 => { // VMINotSu
            if type_name == "ArrayOfVMINotSupported" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmiNotSupported(value))
                })
            } else { None }
        },
        0x564d6f74696f6e4c => { // VMotionL
            if type_name == "ArrayOfVMotionLinkDown" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVMotionLinkDown(value))
                })
            } else { None }
        },
        0x564d776172655673 => { // VMwareVs
            if type_name == "ArrayOfVMwareVspanPort" {
                Some(|raw| {
                    let value: Vec<VMwareVspanPort> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVMwareVspanPort(value))
                })
            } else { None }
        },
        0x56696d5661736150 => { // VimVasaP
            if type_name == "ArrayOfVimVasaProvider" {
                Some(|raw| {
                    let value: Vec<VimVasaProvider> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVimVasaProvider(value))
                })
            } else { None }
        },
        0x5669727475616c44 => { // VirtualD
            if type_name == "ArrayOfVirtualDiskSpec" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::VirtualDiskSpecTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualDiskSpec(value))
                })
            } else { None }
        },
        0x5669727475616c48 => { // VirtualH
            if type_name == "ArrayOfVirtualHardware" {
                Some(|raw| {
                    let value: Vec<VirtualHardware> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualHardware(value))
                })
            } else { None }
        },
        0x5669727475616c4b => { // VirtualK
            if type_name == "ArrayOfVirtualKeyboard" {
                Some(|raw| {
                    let value: Vec<VirtualKeyboard> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualKeyboard(value))
                })
            } else { None }
        },
        0x566d4465706c6f79 => { // VmDeploy
            if type_name == "ArrayOfVmDeployedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmDeployedEvent(value))
                })
            } else { None }
        },
        0x566d4469736b4669 => { // VmDiskFi
            if type_name == "ArrayOfVmDiskFileQuery" {
                Some(|raw| {
                    let value: Vec<VmDiskFileQuery> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmDiskFileQuery(value))
                })
            } else { None }
        },
        0x566d4576656e7441 => { // VmEventA
            if type_name == "ArrayOfVmEventArgument" {
                Some(|raw| {
                    let value: Vec<VmEventArgument> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmEventArgument(value))
                })
            } else { None }
        },
        0x566d4d6967726174 => { // VmMigrat
            if type_name == "ArrayOfVmMigratedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmMigratedEvent(value))
                })
            } else { None }
        },
        0x566d4e7672616d46 => { // VmNvramF
            if type_name == "ArrayOfVmNvramFileInfo" {
                Some(|raw| {
                    let value: Vec<VmNvramFileInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmNvramFileInfo(value))
                })
            } else { None }
        },
        0x566d4f727068616e => { // VmOrphan
            if type_name == "ArrayOfVmOrphanedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmOrphanedEvent(value))
                })
            } else { None }
        },
        0x566d526573756d69 => { // VmResumi
            if type_name == "ArrayOfVmResumingEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmResumingEvent(value))
                })
            } else { None }
        },
        0x566d537461727469 => { // VmStarti
            if type_name == "ArrayOfVmStartingEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmStartingEvent(value))
                })
            } else { None }
        },
        0x566d53746f707069 => { // VmStoppi
            if type_name == "ArrayOfVmStoppingEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmStoppingEvent(value))
                })
            } else { None }
        },
        0x56736c6d4d696772 => { // VslmMigr
            if type_name == "ArrayOfVslmMigrateSpec" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::VslmMigrateSpecTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVslmMigrateSpec(value))
                })
            } else { None }
        },
        0x5769746e6573734e => { // WitnessN
            if type_name == "ArrayOfWitnessNodeInfo" {
                Some(|raw| {
                    let value: Vec<WitnessNodeInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfWitnessNodeInfo(value))
                })
            } else { None }
        },
        0x65724f7065726174 => { // erOperat
            if type_name == "HostPowerOperationType" {
                Some(|raw| {
                    let value: super::enums::HostPowerOperationTypeEnum = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::HostPowerOperationType(value))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_value_deserializer_23(type_name: &str) -> Option<fn(&serde_json::value::RawValue) -> Result<ValueElements, serde_json::Error>> {
    let s = &type_name[7..15];
    let Some(type_ord) = to_u64(s) else {
        return None;
    };
    match type_ord {
        0x41646d696e4e6f74 => { // AdminNot
            if type_name == "ArrayOfAdminNotDisabled" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfAdminNotDisabled(value))
                })
            } else { None }
        },
        0x416c61726d446573 => { // AlarmDes
            if type_name == "ArrayOfAlarmDescription" {
                Some(|raw| {
                    let value: Vec<AlarmDescription> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfAlarmDescription(value))
                })
            } else { None }
        },
        0x416c726561647943 => { // AlreadyC
            if type_name == "ArrayOfAlreadyConnected" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfAlreadyConnected(value))
                })
            } else { None }
        },
        0x43616e6e6f744163 => { // CannotAc
            if type_name == "ArrayOfCannotAccessFile" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCannotAccessFile(value))
                })
            } else { None }
        },
        0x43616e6e6f744372 => { // CannotCr
            if type_name == "ArrayOfCannotCreateFile" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCannotCreateFile(value))
                })
            } else { None }
        },
        0x43616e6e6f744465 => { // CannotDe
            if type_name == "ArrayOfCannotDeleteFile" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCannotDeleteFile(value))
                })
            } else { None }
        },
        0x43616e6e6f745573 => { // CannotUs
            if type_name == "ArrayOfCannotUseNetwork" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCannotUseNetwork(value))
                })
            } else { None }
        },
        0x436c757374657244 => { // ClusterD
            if type_name == "ArrayOfClusterDrsFaults" {
                Some(|raw| {
                    let value: Vec<ClusterDrsFaults> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterDrsFaults(value))
                })
            } else { None }
        },
        0x436c757374657247 => { // ClusterG
            match type_name {
                "ArrayOfClusterGroupInfo" => {
                    Some(|raw| {
                        let value: Vec<Box<dyn super::traits::ClusterGroupInfoTrait>> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfClusterGroupInfo(value))
                    })
                }
                "ArrayOfClusterGroupSpec" => {
                    Some(|raw| {
                        let value: Vec<ClusterGroupSpec> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfClusterGroupSpec(value))
                    })
                }
                _ => None
            }
        },
        0x436c757374657248 => { // ClusterH
            if type_name == "ArrayOfClusterHostGroup" {
                Some(|raw| {
                    let value: Vec<ClusterHostGroup> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterHostGroup(value))
                })
            } else { None }
        },
        0x436f6d706c69616e => { // Complian
            if type_name == "ArrayOfComplianceResult" {
                Some(|raw| {
                    let value: Vec<ComplianceResult> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfComplianceResult(value))
                })
            } else { None }
        },
        0x436f6e6375727265 => { // Concurre
            if type_name == "ArrayOfConcurrentAccess" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfConcurrentAccess(value))
                })
            } else { None }
        },
        0x4372656174655461 => { // CreateTa
            if type_name == "ArrayOfCreateTaskAction" {
                Some(|raw| {
                    let value: Vec<CreateTaskAction> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCreateTaskAction(value))
                })
            } else { None }
        },
        0x437573746f6d4669 => { // CustomFi
            match type_name {
                "ArrayOfCustomFieldEvent" => {
                    Some(|raw| {
                        let value: Vec<Event> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfCustomFieldEvent(value))
                    })
                }
                "ArrayOfCustomFieldValue" => {
                    Some(|raw| {
                        let value: Vec<Box<dyn super::traits::CustomFieldValueTrait>> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfCustomFieldValue(value))
                    })
                }
                _ => None
            }
        },
        0x4456506f7274436f => { // DVPortCo
            match type_name {
                "ArrayOfDVPortConfigInfo" => {
                    Some(|raw| {
                        let value: Vec<DvPortConfigInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfDvPortConfigInfo(value))
                    })
                }
                "ArrayOfDVPortConfigSpec" => {
                    Some(|raw| {
                        let value: Vec<DvPortConfigSpec> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfDvPortConfigSpec(value))
                    })
                }
                _ => None
            }
        },
        0x4456506f72746772 => { // DVPortgr
            if type_name == "ArrayOfDVPortgroupEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvPortgroupEvent(value))
                })
            } else { None }
        },
        0x4461734469736162 => { // DasDisab
            if type_name == "ArrayOfDasDisabledEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDasDisabledEvent(value))
                })
            } else { None }
        },
        0x4461746173746f72 => { // Datastor
            if type_name == "ArrayOfDatastoreSummary" {
                Some(|raw| {
                    let value: Vec<DatastoreSummary> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDatastoreSummary(value))
                })
            } else { None }
        },
        0x4469736b4368616e => { // DiskChan
            if type_name == "ArrayOfDiskChangeExtent" {
                Some(|raw| {
                    let value: Vec<DiskChangeExtent> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDiskChangeExtent(value))
                })
            } else { None }
        },
        0x4469736b4e6f7453 => { // DiskNotS
            if type_name == "ArrayOfDiskNotSupported" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDiskNotSupported(value))
                })
            } else { None }
        },
        0x4472734469736162 => { // DrsDisab
            if type_name == "ArrayOfDrsDisabledEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDrsDisabledEvent(value))
                })
            } else { None }
        },
        0x4476706752657374 => { // DvpgRest
            if type_name == "ArrayOfDvpgRestoreEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvpgRestoreEvent(value))
                })
            } else { None }
        },
        0x4476734576656e74 => { // DvsEvent
            if type_name == "ArrayOfDvsEventArgument" {
                Some(|raw| {
                    let value: Vec<DvsEventArgument> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsEventArgument(value))
                })
            } else { None }
        },
        0x447673486f73744c => { // DvsHostL
            if type_name == "ArrayOfDvsHostLeftEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsHostLeftEvent(value))
                })
            } else { None }
        },
        0x4476734e6f744175 => { // DvsNotAu
            if type_name == "ArrayOfDvsNotAuthorized" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsNotAuthorized(value))
                })
            } else { None }
        },
        0x44767353636f7065 => { // DvsScope
            if type_name == "ArrayOfDvsScopeViolated" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsScopeViolated(value))
                })
            } else { None }
        },
        0x4476735570677261 => { // DvsUpgra
            if type_name == "ArrayOfDvsUpgradedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsUpgradedEvent(value))
                })
            } else { None }
        },
        0x4576656e74446573 => { // EventDes
            if type_name == "ArrayOfEventDescription" {
                Some(|raw| {
                    let value: Vec<EventDescription> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfEventDescription(value))
                })
            } else { None }
        },
        0x4661696c546f456e => { // FailToEn
            if type_name == "ArrayOfFailToEnableSPBM" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfFailToEnableSpbm(value))
                })
            } else { None }
        },
        0x4661696c6f766572 => { // Failover
            if type_name == "ArrayOfFailoverNodeInfo" {
                Some(|raw| {
                    let value: Vec<FailoverNodeInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfFailoverNodeInfo(value))
                })
            } else { None }
        },
        0x4665617475726549 => { // FeatureI
            if type_name == "LicenseFeatureInfoState" {
                Some(|raw| {
                    let value: super::enums::LicenseFeatureInfoStateEnum = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::LicenseFeatureInfoState(value))
                })
            } else { None }
        },
        0x47656e6572616c55 => { // GeneralU
            if type_name == "ArrayOfGeneralUserEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGeneralUserEvent(value))
                })
            } else { None }
        },
        0x47726f7570416c61 => { // GroupAla
            if type_name == "ArrayOfGroupAlarmAction" {
                Some(|raw| {
                    let value: Vec<GroupAlarmAction> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGroupAlarmAction(value))
                })
            } else { None }
        },
        0x4775657374417574 => { // GuestAut
            if type_name == "ArrayOfGuestAuthSubject" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::GuestAuthSubjectTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGuestAuthSubject(value))
                })
            } else { None }
        },
        0x477565737450726f => { // GuestPro
            match type_name {
                "ArrayOfGuestProcessInfo" => {
                    Some(|raw| {
                        let value: Vec<GuestProcessInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfGuestProcessInfo(value))
                    })
                }
                "ArrayOfGuestProgramSpec" => {
                    Some(|raw| {
                        let value: Vec<Box<dyn super::traits::GuestProgramSpecTrait>> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfGuestProgramSpec(value))
                    })
                }
                _ => None
            }
        },
        0x4865616c74685570 => { // HealthUp
            if type_name == "ArrayOfHealthUpdateInfo" {
                Some(|raw| {
                    let value: Vec<HealthUpdateInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHealthUpdateInfo(value))
                })
            } else { None }
        },
        0x486f73744170706c => { // HostAppl
            if type_name == "ArrayOfHostApplyProfile" {
                Some(|raw| {
                    let value: Vec<HostApplyProfile> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostApplyProfile(value))
                })
            } else { None }
        },
        0x486f7374436f6e66 => { // HostConf
            match type_name {
                "ArrayOfHostConfigChange" => {
                    Some(|raw| {
                        let value: Vec<HostConfigChange> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostConfigChange(value))
                    })
                }
                "ArrayOfHostConfigFailed" => {
                    Some(|raw| {
                        let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostConfigFailed(value))
                    })
                }
                _ => None
            }
        },
        0x486f7374436f6e6e => { // HostConn
            if type_name == "ArrayOfHostConnectFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostConnectFault(value))
                })
            } else { None }
        },
        0x486f737444617465 => { // HostDate
            if type_name == "ArrayOfHostDateTimeInfo" {
                Some(|raw| {
                    let value: Vec<HostDateTimeInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostDateTimeInfo(value))
                })
            } else { None }
        },
        0x486f737446697265 => { // HostFire
            match type_name {
                "ArrayOfHostFirewallInfo" => {
                    Some(|raw| {
                        let value: Vec<HostFirewallInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostFirewallInfo(value))
                    })
                }
                "ArrayOfHostFirewallRule" => {
                    Some(|raw| {
                        let value: Vec<HostFirewallRule> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostFirewallRule(value))
                    })
                }
                _ => None
            }
        },
        0x486f737447726170 => { // HostGrap
            if type_name == "ArrayOfHostGraphicsInfo" {
                Some(|raw| {
                    let value: Vec<HostGraphicsInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostGraphicsInfo(value))
                })
            } else { None }
        },
        0x486f737448617264 => { // HostHard
            if type_name == "ArrayOfHostHardwareInfo" {
                Some(|raw| {
                    let value: Vec<HostHardwareInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostHardwareInfo(value))
                })
            } else { None }
        },
        0x486f7374496f4669 => { // HostIoFi
            if type_name == "ArrayOfHostIoFilterInfo" {
                Some(|raw| {
                    let value: Vec<HostIoFilterInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostIoFilterInfo(value))
                })
            } else { None }
        },
        0x486f73744970526f => { // HostIpRo
            if type_name == "ArrayOfHostIpRouteEntry" {
                Some(|raw| {
                    let value: Vec<HostIpRouteEntry> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostIpRouteEntry(value))
                })
            } else { None }
        },
        0x486f73744c6f636b => { // HostLock
            if type_name == "ArrayOfHostLockdownMode" {
                Some(|raw| {
                    let value: Vec<super::enums::HostLockdownModeEnum> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostLockdownMode(value))
                })
            } else { None }
        },
        0x486f73744e6f7443 => { // HostNotC
            if type_name == "ArrayOfHostNotConnected" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostNotConnected(value))
                })
            } else { None }
        },
        0x486f73744e6f7452 => { // HostNotR
            if type_name == "ArrayOfHostNotReachable" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostNotReachable(value))
                })
            } else { None }
        },
        0x486f73744e766d65 => { // HostNvme
            if type_name == "ArrayOfHostNvmeTopology" {
                Some(|raw| {
                    let value: Vec<HostNvmeTopology> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostNvmeTopology(value))
                })
            } else { None }
        },
        0x486f73744f706171 => { // HostOpaq
            if type_name == "ArrayOfHostOpaqueSwitch" {
                Some(|raw| {
                    let value: Vec<HostOpaqueSwitch> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostOpaqueSwitch(value))
                })
            } else { None }
        },
        0x486f737452656d6f => { // HostRemo
            if type_name == "ArrayOfHostRemovedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostRemovedEvent(value))
                })
            } else { None }
        },
        0x486f737453637369 => { // HostScsi
            if type_name == "ArrayOfHostScsiTopology" {
                Some(|raw| {
                    let value: Vec<HostScsiTopology> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostScsiTopology(value))
                })
            } else { None }
        },
        0x486f737453656375 => { // HostSecu
            if type_name == "ArrayOfHostSecuritySpec" {
                Some(|raw| {
                    let value: Vec<HostSecuritySpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostSecuritySpec(value))
                })
            } else { None }
        },
        0x487474704e66634c => { // HttpNfcL
            if type_name == "ArrayOfHttpNfcLeaseInfo" {
                Some(|raw| {
                    let value: Vec<HttpNfcLeaseInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHttpNfcLeaseInfo(value))
                })
            } else { None }
        },
        0x496e666f55706772 => { // InfoUpgr
            if type_name == "ArrayOfInfoUpgradeEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInfoUpgradeEvent(value))
                })
            } else { None }
        },
        0x496e76616c696443 => { // InvalidC
            if type_name == "ArrayOfInvalidCAMServer" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInvalidCamServer(value))
                })
            } else { None }
        },
        0x496e76616c696444 => { // InvalidD
            if type_name == "ArrayOfInvalidDatastore" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInvalidDatastore(value))
                })
            } else { None }
        },
        0x496e76616c696448 => { // InvalidH
            if type_name == "ArrayOfInvalidHostState" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInvalidHostState(value))
                })
            } else { None }
        },
        0x496e76616c696450 => { // InvalidP
            if type_name == "ArrayOfInvalidPrivilege" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInvalidPrivilege(value))
                })
            } else { None }
        },
        0x4970416464726573 => { // IpAddres
            if type_name == "ArrayOfIpAddressProfile" {
                Some(|raw| {
                    let value: Vec<IpAddressProfile> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfIpAddressProfile(value))
                })
            } else { None }
        },
        0x49736f496d616765 => { // IsoImage
            if type_name == "ArrayOfIsoImageFileInfo" {
                Some(|raw| {
                    let value: Vec<IsoImageFileInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfIsoImageFileInfo(value))
                })
            } else { None }
        },
        0x4b65726e656c4d6f => { // KernelMo
            if type_name == "ArrayOfKernelModuleInfo" {
                Some(|raw| {
                    let value: Vec<KernelModuleInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfKernelModuleInfo(value))
                })
            } else { None }
        },
        0x4b6d697053657276 => { // KmipServ
            if type_name == "ArrayOfKmipServerStatus" {
                Some(|raw| {
                    let value: Vec<KmipServerStatus> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfKmipServerStatus(value))
                })
            } else { None }
        },
        0x4c6963656e736555 => { // LicenseU
            if type_name == "ArrayOfLicenseUsageInfo" {
                Some(|raw| {
                    let value: Vec<LicenseUsageInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfLicenseUsageInfo(value))
                })
            } else { None }
        },
        0x4d69736d61746368 => { // Mismatch
            if type_name == "ArrayOfMismatchedBundle" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfMismatchedBundle(value))
                })
            } else { None }
        },
        0x4d74754d69736d61 => { // MtuMisma
            if type_name == "ArrayOfMtuMismatchEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfMtuMismatchEvent(value))
                })
            } else { None }
        },
        0x4e61734461746173 => { // NasDatas
            if type_name == "ArrayOfNasDatastoreInfo" {
                Some(|raw| {
                    let value: Vec<NasDatastoreInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNasDatastoreInfo(value))
                })
            } else { None }
        },
        0x4e6574446e73436f => { // NetDnsCo
            match type_name {
                "ArrayOfNetDnsConfigInfo" => {
                    Some(|raw| {
                        let value: Vec<NetDnsConfigInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfNetDnsConfigInfo(value))
                    })
                }
                "ArrayOfNetDnsConfigSpec" => {
                    Some(|raw| {
                        let value: Vec<NetDnsConfigSpec> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfNetDnsConfigSpec(value))
                    })
                }
                _ => None
            }
        },
        0x4e6574776f726b43 => { // NetworkC
            if type_name == "ArrayOfNetworkCopyFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNetworkCopyFault(value))
                })
            } else { None }
        },
        0x4e6f436f6d706174 => { // NoCompat
            if type_name == "ArrayOfNoCompatibleHost" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNoCompatibleHost(value))
                })
            } else { None }
        },
        0x4e6f477565737448 => { // NoGuestH
            if type_name == "ArrayOfNoGuestHeartbeat" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNoGuestHeartbeat(value))
                })
            } else { None }
        },
        0x4e6f5065726d6973 => { // NoPermis
            if type_name == "ArrayOfNoPermissionOnAD" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNoPermissionOnAd(value))
                })
            } else { None }
        },
        0x4e6f744175746865 => { // NotAuthe
            if type_name == "ArrayOfNotAuthenticated" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNotAuthenticated(value))
                })
            } else { None }
        },
        0x4e6f74537570706f => { // NotSuppo
            if type_name == "ArrayOfNotSupportedHost" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNotSupportedHost(value))
                })
            } else { None }
        },
        0x4e7664696d6d4865 => { // NvdimmHe
            if type_name == "ArrayOfNvdimmHealthInfo" {
                Some(|raw| {
                    let value: Vec<NvdimmHealthInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNvdimmHealthInfo(value))
                })
            } else { None }
        },
        0x4e7664696d6d5265 => { // NvdimmRe
            if type_name == "ArrayOfNvdimmRegionInfo" {
                Some(|raw| {
                    let value: Vec<NvdimmRegionInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNvdimmRegionInfo(value))
                })
            } else { None }
        },
        0x4e7664696d6d5379 => { // NvdimmSy
            if type_name == "ArrayOfNvdimmSystemInfo" {
                Some(|raw| {
                    let value: Vec<NvdimmSystemInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNvdimmSystemInfo(value))
                })
            } else { None }
        },
        0x4f626a6563745570 => { // ObjectUp
            if type_name == "ArrayOfObjectUpdateKind" {
                Some(|raw| {
                    let value: Vec<super::enums::ObjectUpdateKindEnum> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfObjectUpdateKind(value))
                })
            } else { None }
        },
        0x4f75744f6653796e => { // OutOfSyn
            if type_name == "ArrayOfOutOfSyncDvsHost" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOutOfSyncDvsHost(value))
                })
            } else { None }
        },
        0x4f7666436f6e7375 => { // OvfConsu
            if type_name == "ArrayOfOvfConsumerFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfConsumerFault(value))
                })
            } else { None }
        },
        0x4f76664861726477 => { // OvfHardw
            if type_name == "ArrayOfOvfHardwareCheck" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfHardwareCheck(value))
                })
            } else { None }
        },
        0x4f7666496e746572 => { // OvfInter
            if type_name == "ArrayOfOvfInternalError" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfInternalError(value))
                })
            } else { None }
        },
        0x4f7666496e76616c => { // OvfInval
            if type_name == "ArrayOfOvfInvalidVmName" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfInvalidVmName(value))
                })
            } else { None }
        },
        0x4f766650726f7065 => { // OvfPrope
            if type_name == "ArrayOfOvfPropertyValue" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfPropertyValue(value))
                })
            } else { None }
        },
        0x4f7666556e6b6e6f => { // OvfUnkno
            match type_name {
                "ArrayOfOvfUnknownDevice" => {
                    Some(|raw| {
                        let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfOvfUnknownDevice(value))
                    })
                }
                "ArrayOfOvfUnknownEntity" => {
                    Some(|raw| {
                        let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfOvfUnknownEntity(value))
                    })
                }
                _ => None
            }
        },
        0x50657266456e7469 => { // PerfEnti
            if type_name == "ArrayOfPerfEntityMetric" {
                Some(|raw| {
                    let value: Vec<PerfEntityMetric> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPerfEntityMetric(value))
                })
            } else { None }
        },
        0x506572664d657472 => { // PerfMetr
            if type_name == "ArrayOfPerfMetricSeries" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::PerfMetricSeriesTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPerfMetricSeries(value))
                })
            } else { None }
        },
        0x506f727447726f75 => { // PortGrou
            if type_name == "ArrayOfPortGroupProfile" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::PortGroupProfileTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPortGroupProfile(value))
                })
            } else { None }
        },
        0x50726f7065727479 => { // Property
            if type_name == "ArrayOfPropertyChangeOp" {
                Some(|raw| {
                    let value: Vec<super::enums::PropertyChangeOpEnum> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPropertyChangeOp(value))
                })
            } else { None }
        },
        0x5265706c69636174 => { // Replicat
            if type_name == "ArrayOfReplicationFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfReplicationFault(value))
                })
            } else { None }
        },
        0x526f6c6552656d6f => { // RoleRemo
            if type_name == "ArrayOfRoleRemovedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfRoleRemovedEvent(value))
                })
            } else { None }
        },
        0x526f6c6555706461 => { // RoleUpda
            if type_name == "ArrayOfRoleUpdatedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfRoleUpdatedEvent(value))
                })
            } else { None }
        },
        0x53534c4469736162 => { // SSLDisab
            if type_name == "ArrayOfSSLDisabledFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfSslDisabledFault(value))
                })
            } else { None }
        },
        0x536e617073686f74 => { // Snapshot
            match type_name {
                "ArrayOfSnapshotDisabled" => {
                    Some(|raw| {
                        let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfSnapshotDisabled(value))
                    })
                }
                "ArrayOfSnapshotNoChange" => {
                    Some(|raw| {
                        let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfSnapshotNoChange(value))
                    })
                }
                _ => None
            }
        },
        0x537472696e674578 => { // StringEx
            if type_name == "ArrayOfStringExpression" {
                Some(|raw| {
                    let value: Vec<StringExpression> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfStringExpression(value))
                })
            } else { None }
        },
        0x5461736b52656173 => { // TaskReas
            if type_name == "ArrayOfTaskReasonSystem" {
                Some(|raw| {
                    let value: Vec<TaskReasonSystem> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfTaskReasonSystem(value))
                })
            } else { None }
        },
        0x5461736b54696d65 => { // TaskTime
            if type_name == "ArrayOfTaskTimeoutEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfTaskTimeoutEvent(value))
                })
            } else { None }
        },
        0x546f6f6c73556e61 => { // ToolsUna
            if type_name == "ArrayOfToolsUnavailable" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfToolsUnavailable(value))
                })
            } else { None }
        },
        0x556e7265636f676e => { // Unrecogn
            if type_name == "ArrayOfUnrecognizedHost" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfUnrecognizedHost(value))
                })
            } else { None }
        },
        0x556e737570706f72 => { // Unsuppor
            if type_name == "ArrayOfUnsupportedGuest" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfUnsupportedGuest(value))
                })
            } else { None }
        },
        0x5573657247726f75 => { // UserGrou
            if type_name == "ArrayOfUserGroupProfile" {
                Some(|raw| {
                    let value: Vec<UserGroupProfile> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfUserGroupProfile(value))
                })
            } else { None }
        },
        0x5573657253656172 => { // UserSear
            if type_name == "ArrayOfUserSearchResult" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::UserSearchResultTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfUserSearchResult(value))
                })
            } else { None }
        },
        0x5573657255706772 => { // UserUpgr
            if type_name == "ArrayOfUserUpgradeEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfUserUpgradeEvent(value))
                })
            } else { None }
        },
        0x5641534153746f72 => { // VASAStor
            if type_name == "ArrayOfVASAStorageArray" {
                Some(|raw| {
                    let value: Vec<VasaStorageArray> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVasaStorageArray(value))
                })
            } else { None }
        },
        0x5641707050726f70 => { // VAppProp
            match type_name {
                "ArrayOfVAppPropertyInfo" => {
                    Some(|raw| {
                        let value: Vec<VAppPropertyInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVAppPropertyInfo(value))
                    })
                }
                "ArrayOfVAppPropertySpec" => {
                    Some(|raw| {
                        let value: Vec<VAppPropertySpec> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVAppPropertySpec(value))
                    })
                }
                _ => None
            }
        },
        0x5669727475616c53 => { // VirtualS
            if type_name == "ArrayOfVirtualSoundCard" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::VirtualSoundCardTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualSoundCard(value))
                })
            } else { None }
        },
        0x5669727475616c54 => { // VirtualT
            if type_name == "ArrayOfVirtualTPMOption" {
                Some(|raw| {
                    let value: Vec<VirtualTpmOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualTpmOption(value))
                })
            } else { None }
        },
        0x5669727475616c55 => { // VirtualU
            if type_name == "ArrayOfVirtualUSBOption" {
                Some(|raw| {
                    let value: Vec<VirtualUsbOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualUsbOption(value))
                })
            } else { None }
        },
        0x5669727475616c57 => { // VirtualW
            if type_name == "ArrayOfVirtualWDTOption" {
                Some(|raw| {
                    let value: Vec<VirtualWdtOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualWdtOption(value))
                })
            } else { None }
        },
        0x566d436f6e666967 => { // VmConfig
            if type_name == "ArrayOfVmConfigFileInfo" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::VmConfigFileInfoTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmConfigFileInfo(value))
                })
            } else { None }
        },
        0x566d436f6e6e6563 => { // VmConnec
            if type_name == "ArrayOfVmConnectedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmConnectedEvent(value))
                })
            } else { None }
        },
        0x566d4661696c6f76 => { // VmFailov
            if type_name == "ArrayOfVmFailoverFailed" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmFailoverFailed(value))
                })
            } else { None }
        },
        0x566d4e7672616d46 => { // VmNvramF
            if type_name == "ArrayOfVmNvramFileQuery" {
                Some(|raw| {
                    let value: Vec<VmNvramFileQuery> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmNvramFileQuery(value))
                })
            } else { None }
        },
        0x566d506f77657265 => { // VmPowere
            if type_name == "ArrayOfVmPoweredOnEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmPoweredOnEvent(value))
                })
            } else { None }
        },
        0x566d52656c6f6361 => { // VmReloca
            if type_name == "ArrayOfVmRelocatedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmRelocatedEvent(value))
                })
            } else { None }
        },
        0x566d526573657474 => { // VmResett
            if type_name == "ArrayOfVmResettingEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmResettingEvent(value))
                })
            } else { None }
        },
        0x566d53757370656e => { // VmSuspen
            if type_name == "ArrayOfVmSuspendedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmSuspendedEvent(value))
                })
            } else { None }
        },
        0x566d557067726164 => { // VmUpgrad
            if type_name == "ArrayOfVmUpgradingEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmUpgradingEvent(value))
                })
            } else { None }
        },
        0x566d6673436f6e66 => { // VmfsConf
            if type_name == "ArrayOfVmfsConfigOption" {
                Some(|raw| {
                    let value: Vec<VmfsConfigOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmfsConfigOption(value))
                })
            } else { None }
        },
        0x566e6963506f7274 => { // VnicPort
            if type_name == "ArrayOfVnicPortArgument" {
                Some(|raw| {
                    let value: Vec<VnicPortArgument> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVnicPortArgument(value))
                })
            } else { None }
        },
        0x5672616d4c696d69 => { // VramLimi
            if type_name == "ArrayOfVramLimitLicense" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVramLimitLicense(value))
                })
            } else { None }
        },
        0x5673616e486f7374 => { // VsanHost
            if type_name == "ArrayOfVsanHostIpConfig" {
                Some(|raw| {
                    let value: Vec<VsanHostIpConfig> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVsanHostIpConfig(value))
                })
            } else { None }
        },
        0x56736c6d52656c6f => { // VslmRelo
            if type_name == "ArrayOfVslmRelocateSpec" {
                Some(|raw| {
                    let value: Vec<VslmRelocateSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVslmRelocateSpec(value))
                })
            } else { None }
        },
        0x704167656e744361 => { // pAgentCa
            if type_name == "HostSnmpAgentCapability" {
                Some(|raw| {
                    let value: super::enums::HostSnmpAgentCapabilityEnum = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::HostSnmpAgentCapability(value))
                })
            } else { None }
        },
        0x744469736b526573 => { // tDiskRes
            if type_name == "VsanHostDiskResultState" {
                Some(|raw| {
                    let value: super::enums::VsanHostDiskResultStateEnum = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::VsanHostDiskResultState(value))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_value_deserializer_24(type_name: &str) -> Option<fn(&serde_json::value::RawValue) -> Result<ValueElements, serde_json::Error>> {
    let s = &type_name[10..18];
    let Some(type_ord) = to_u64(s) else {
        return None;
    };
    match type_ord {
        0x4144557365725265 => { // ADUserRe
            if type_name == "ArrayOfNonADUserRequired" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNonAdUserRequired(value))
                })
            } else { None }
        },
        0x42494f53436f6e66 => { // BIOSConf
            if type_name == "ArrayOfNetBIOSConfigInfo" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::NetBiosConfigInfoTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNetBiosConfigInfo(value))
                })
            } else { None }
        },
        0x42756e646c696e67 => { // Bundling
            if type_name == "ArrayOfLogBundlingFailed" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfLogBundlingFailed(value))
                })
            } else { None }
        },
        0x44657374726f7965 => { // Destroye
            if type_name == "ArrayOfDvsDestroyedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsDestroyedEvent(value))
                })
            } else { None }
        },
        0x44686370436f6e66 => { // DhcpConf
            match type_name {
                "ArrayOfNetDhcpConfigInfo" => {
                    Some(|raw| {
                        let value: Vec<NetDhcpConfigInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfNetDhcpConfigInfo(value))
                    })
                }
                "ArrayOfNetDhcpConfigSpec" => {
                    Some(|raw| {
                        let value: Vec<NetDhcpConfigSpec> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfNetDhcpConfigSpec(value))
                    })
                }
                _ => None
            }
        },
        0x456e6f7567684c69 => { // EnoughLi
            if type_name == "ArrayOfNotEnoughLicenses" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNotEnoughLicenses(value))
                })
            } else { None }
        },
        0x4861726477617265 => { // Hardware
            if type_name == "ArrayOfOvfHardwareExport" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfHardwareExport(value))
                })
            } else { None }
        },
        0x496d61676546696c => { // ImageFil
            if type_name == "ArrayOfIsoImageFileQuery" {
                Some(|raw| {
                    let value: Vec<IsoImageFileQuery> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfIsoImageFileQuery(value))
                })
            } else { None }
        },
        0x496e76616c696450 => { // InvalidP
            if type_name == "ArrayOfOvfInvalidPackage" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfInvalidPackage(value))
                })
            } else { None }
        },
        0x4d697373696e6745 => { // MissingE
            if type_name == "ArrayOfOvfMissingElement" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfMissingElement(value))
                })
            } else { None }
        },
        0x4e6574776f726b4d => { // NetworkM
            if type_name == "ArrayOfOvfNetworkMapping" {
                Some(|raw| {
                    let value: Vec<OvfNetworkMapping> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfNetworkMapping(value))
                })
            } else { None }
        },
        0x50726f7065727479 => { // Property
            if type_name == "ArrayOfOvfPropertyExport" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfPropertyExport(value))
                })
            } else { None }
        },
        0x5365637572697479 => { // Security
            if type_name == "ArrayOfDVSSecurityPolicy" {
                Some(|raw| {
                    let value: Vec<DvsSecurityPolicy> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsSecurityPolicy(value))
                })
            } else { None }
        },
        0x5370656354696d65 => { // SpecTime
            if type_name == "TaskFilterSpecTimeOption" {
                Some(|raw| {
                    let value: super::enums::TaskFilterSpecTimeOptionEnum = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::TaskFilterSpecTimeOption(value))
                })
            } else { None }
        },
        0x53746f7261676550 => { // StorageP
            if type_name == "ArrayOfNasStorageProfile" {
                Some(|raw| {
                    let value: Vec<NasStorageProfile> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNasStorageProfile(value))
                })
            } else { None }
        },
        0x5472616666696352 => { // TrafficR
            if type_name == "ArrayOfDvsTrafficRuleset" {
                Some(|raw| {
                    let value: Vec<DvsTrafficRuleset> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsTrafficRuleset(value))
                })
            } else { None }
        },
        0x57726f6e674e616d => { // WrongNam
            if type_name == "ArrayOfOvfWrongNamespace" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfWrongNamespace(value))
                })
            } else { None }
        },
        0x61436c7573746572 => { // aCluster
            if type_name == "ArrayOfVchaClusterHealth" {
                Some(|raw| {
                    let value: Vec<VchaClusterHealth> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVchaClusterHealth(value))
                })
            } else { None }
        },
        0x616261736553697a => { // abaseSiz
            if type_name == "ArrayOfDatabaseSizeParam" {
                Some(|raw| {
                    let value: Vec<DatabaseSizeParam> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDatabaseSizeParam(value))
                })
            } else { None }
        },
        0x61634368616e6765 => { // acChange
            if type_name == "ArrayOfVmMacChangedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmMacChangedEvent(value))
                })
            } else { None }
        },
        0x616c6964436f6e74 => { // alidCont
            if type_name == "ArrayOfInvalidController" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInvalidController(value))
                })
            } else { None }
        },
        0x616c696444657669 => { // alidDevi
            if type_name == "ArrayOfInvalidDeviceSpec" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInvalidDeviceSpec(value))
                })
            } else { None }
        },
        0x616c69644469736b => { // alidDisk
            if type_name == "ArrayOfInvalidDiskFormat" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInvalidDiskFormat(value))
                })
            } else { None }
        },
        0x616c696447756573 => { // alidGues
            if type_name == "ArrayOfInvalidGuestLogin" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInvalidGuestLogin(value))
                })
            } else { None }
        },
        0x616c6964506f7765 => { // alidPowe
            if type_name == "ArrayOfInvalidPowerState" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInvalidPowerState(value))
                })
            } else { None }
        },
        0x616e506f7274436f => { // anPortCo
            if type_name == "ArrayOfVspanPortConflict" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVspanPortConflict(value))
                })
            } else { None }
        },
        0x6172654970666978 => { // areIpfix
            if type_name == "ArrayOfVMwareIpfixConfig" {
                Some(|raw| {
                    let value: Vec<VMwareIpfixConfig> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVMwareIpfixConfig(value))
                })
            } else { None }
        },
        0x6355706c696e6b50 => { // cUplinkP
            if type_name == "ArrayOfPnicUplinkProfile" {
                Some(|raw| {
                    let value: Vec<PnicUplinkProfile> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPnicUplinkProfile(value))
                })
            } else { None }
        },
        0x6363657373557365 => { // ccessUse
            if type_name == "ArrayOfNoAccessUserEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNoAccessUserEvent(value))
                })
            } else { None }
        },
        0x63656d656e745261 => { // cementRa
            if type_name == "ArrayOfPlacementRankSpec" {
                Some(|raw| {
                    let value: Vec<PlacementRankSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPlacementRankSpec(value))
                })
            } else { None }
        },
        0x636b656442794669 => { // ckedByFi
            if type_name == "ArrayOfBlockedByFirewall" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfBlockedByFirewall(value))
                })
            } else { None }
        },
        0x6465724e6577486f => { // derNewHo
            if type_name == "ArrayOfFolderNewHostSpec" {
                Some(|raw| {
                    let value: Vec<FolderNewHostSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfFolderNewHostSpec(value))
                })
            } else { None }
        },
        0x65416c7265616479 => { // eAlready
            if type_name == "ArrayOfFileAlreadyExists" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfFileAlreadyExists(value))
                })
            } else { None }
        },
        0x654576656e744172 => { // eEventAr
            if type_name == "ArrayOfRoleEventArgument" {
                Some(|raw| {
                    let value: Vec<RoleEventArgument> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfRoleEventArgument(value))
                })
            } else { None }
        },
        0x655461736b536368 => { // eTaskSch
            if type_name == "ArrayOfOnceTaskScheduler" {
                Some(|raw| {
                    let value: Vec<OnceTaskScheduler> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOnceTaskScheduler(value))
                })
            } else { None }
        },
        0x6563746f72794e6f => { // ectoryNo
            if type_name == "ArrayOfDirectoryNotEmpty" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDirectoryNotEmpty(value))
                })
            } else { None }
        },
        0x6564756c65645461 => { // eduledTa
            match type_name {
                "ArrayOfScheduledTaskInfo" => {
                    Some(|raw| {
                        let value: Vec<ScheduledTaskInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfScheduledTaskInfo(value))
                    })
                }
                "ArrayOfScheduledTaskSpec" => {
                    Some(|raw| {
                        let value: Vec<Box<dyn super::traits::ScheduledTaskSpecTrait>> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfScheduledTaskSpec(value))
                    })
                }
                _ => None
            }
        },
        0x6567697374657265 => { // egistere
            if type_name == "ArrayOfVmRegisteredEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmRegisteredEvent(value))
                })
            } else { None }
        },
        0x656e646564457665 => { // endedEve
            if type_name == "ArrayOfExtendedEventPair" {
                Some(|raw| {
                    let value: Vec<ExtendedEventPair> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfExtendedEventPair(value))
                })
            } else { None }
        },
        0x656e736552657374 => { // enseRest
            if type_name == "ArrayOfLicenseRestricted" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfLicenseRestricted(value))
                })
            } else { None }
        },
        0x65726963436f6d70 => { // ericComp
            if type_name == "ProfileNumericComparator" {
                Some(|raw| {
                    let value: super::enums::ProfileNumericComparatorEnum = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ProfileNumericComparator(value))
                })
            } else { None }
        },
        0x6572697461626c65 => { // eritable
            if type_name == "ArrayOfInheritablePolicy" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::InheritablePolicyTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInheritablePolicy(value))
                })
            } else { None }
        },
        0x66696c65436f6e66 => { // fileConf
            if type_name == "ArrayOfProfileConfigInfo" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::ProfileConfigInfoTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfProfileConfigInfo(value))
                })
            } else { None }
        },
        0x66696c6543726561 => { // fileCrea
            if type_name == "ArrayOfProfileCreateSpec" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::ProfileCreateSpecTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfProfileCreateSpec(value))
                })
            } else { None }
        },
        0x66696c6545787072 => { // fileExpr
            if type_name == "ArrayOfProfileExpression" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::ProfileExpressionTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfProfileExpression(value))
                })
            } else { None }
        },
        0x68696e65506f7765 => { // hinePowe
            if type_name == "VirtualMachinePowerState" {
                Some(|raw| {
                    let value: super::enums::VirtualMachinePowerStateEnum = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::VirtualMachinePowerState(value))
                })
            } else { None }
        },
        0x686f644465736372 => { // hodDescr
            if type_name == "ArrayOfMethodDescription" {
                Some(|raw| {
                    let value: Vec<MethodDescription> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfMethodDescription(value))
                })
            } else { None }
        },
        0x686f72697a617469 => { // horizati
            if type_name == "ArrayOfAuthorizationRole" {
                Some(|raw| {
                    let value: Vec<AuthorizationRole> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfAuthorizationRole(value))
                })
            } else { None }
        },
        0x694c756e44657363 => { // iLunDesc
            if type_name == "ArrayOfScsiLunDescriptor" {
                Some(|raw| {
                    let value: Vec<ScsiLunDescriptor> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfScsiLunDescriptor(value))
                })
            } else { None }
        },
        0x696c746572486f73 => { // ilterHos
            if type_name == "ArrayOfIoFilterHostIssue" {
                Some(|raw| {
                    let value: Vec<IoFilterHostIssue> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfIoFilterHostIssue(value))
                })
            } else { None }
        },
        0x696f6e4e65744249 => { // ionNetBI
            if type_name == "CustomizationNetBIOSMode" {
                Some(|raw| {
                    let value: super::enums::CustomizationNetBiosModeEnum = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::CustomizationNetBiosMode(value))
                })
            } else { None }
        },
        0x6973636f76657265 => { // iscovere
            if type_name == "ArrayOfVmDiscoveredEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmDiscoveredEvent(value))
                })
            } else { None }
        },
        0x69736b4661696c65 => { // iskFaile
            if type_name == "ArrayOfVmDiskFailedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmDiskFailedEvent(value))
                })
            } else { None }
        },
        0x6b48617350617274 => { // kHasPart
            if type_name == "ArrayOfDiskHasPartitions" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDiskHasPartitions(value))
                })
            } else { None }
        },
        0x6c4461746173746f => { // lDatasto
            if type_name == "ArrayOfVvolDatastoreInfo" {
                Some(|raw| {
                    let value: Vec<VvolDatastoreInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVvolDatastoreInfo(value))
                })
            } else { None }
        },
        0x6c61726d45787072 => { // larmExpr
            if type_name == "ArrayOfOrAlarmExpression" {
                Some(|raw| {
                    let value: Vec<OrAlarmExpression> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOrAlarmExpression(value))
                })
            } else { None }
        },
        0x6c6c52756c65506f => { // llRulePo
            if type_name == "HostFirewallRulePortType" {
                Some(|raw| {
                    let value: super::enums::HostFirewallRulePortTypeEnum = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::HostFirewallRulePortType(value))
                })
            } else { None }
        },
        0x6d4461746173746f => { // mDatasto
            if type_name == "ArrayOfPMemDatastoreInfo" {
                Some(|raw| {
                    let value: Vec<PMemDatastoreInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPMemDatastoreInfo(value))
                })
            } else { None }
        },
        0x6d6967726174696e => { // migratin
            if type_name == "ArrayOfVmEmigratingEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmEmigratingEvent(value))
                })
            } else { None }
        },
        0x6d696e674d617463 => { // mingMatc
            if type_name == "ArrayOfTeamingMatchEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfTeamingMatchEvent(value))
                })
            } else { None }
        },
        0x6d697373696f6e50 => { // missionP
            if type_name == "ArrayOfPermissionProfile" {
                Some(|raw| {
                    let value: Vec<PermissionProfile> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPermissionProfile(value))
                })
            } else { None }
        },
        0x6e4461746173746f => { // nDatasto
            if type_name == "ArrayOfVsanDatastoreInfo" {
                Some(|raw| {
                    let value: Vec<VsanDatastoreInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVsanDatastoreInfo(value))
                })
            } else { None }
        },
        0x6e486f73744e6f64 => { // nHostNod
            if type_name == "ArrayOfVsanHostNodeState" {
                Some(|raw| {
                    let value: Vec<super::enums::VsanHostNodeStateEnum> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVsanHostNodeState(value))
                })
            } else { None }
        },
        0x6f53746172744465 => { // oStartDe
            if type_name == "ArrayOfAutoStartDefaults" {
                Some(|raw| {
                    let value: Vec<AutoStartDefaults> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfAutoStartDefaults(value))
                })
            } else { None }
        },
        0x6f6e66696746696c => { // onfigFil
            if type_name == "ArrayOfVmConfigFileQuery" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::VmConfigFileQueryTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmConfigFileQuery(value))
                })
            } else { None }
        },
        0x6f6f6c4173736f63 => { // oolAssoc
            if type_name == "ArrayOfIpPoolAssociation" {
                Some(|raw| {
                    let value: Vec<IpPoolAssociation> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfIpPoolAssociation(value))
                })
            } else { None }
        },
        0x6f72557067726164 => { // orUpgrad
            if type_name == "ArrayOfErrorUpgradeEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfErrorUpgradeEvent(value))
                })
            } else { None }
        },
        0x6f72726563744669 => { // orrectFi
            if type_name == "ArrayOfIncorrectFileType" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfIncorrectFileType(value))
                })
            } else { None }
        },
        0x6f727467726f7570 => { // ortgroup
            if type_name == "ArrayOfDVPortgroupPolicy" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::DvPortgroupPolicyTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvPortgroupPolicy(value))
                })
            } else { None }
        },
        0x6f75726365506f6f => { // ourcePoo
            if type_name == "ArrayOfResourcePoolEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfResourcePoolEvent(value))
                })
            } else { None }
        },
        0x6f7765724f6e4469 => { // owerOnDi
            if type_name == "ArrayOfVmPowerOnDisabled" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmPowerOnDisabled(value))
                })
            } else { None }
        },
        0x6f77657265644f66 => { // oweredOf
            if type_name == "ArrayOfVmPoweredOffEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmPoweredOffEvent(value))
                })
            } else { None }
        },
        0x704e66634c656173 => { // pNfcLeas
            if type_name == "ArrayOfHttpNfcLeaseState" {
                Some(|raw| {
                    let value: Vec<super::enums::HttpNfcLeaseStateEnum> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHttpNfcLeaseState(value))
                })
            } else { None }
        },
        0x7050726f70657274 => { // pPropert
            if type_name == "ArrayOfVAppPropertyFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVAppPropertyFault(value))
                })
            } else { None }
        },
        0x706c69616e636546 => { // plianceF
            if type_name == "ArrayOfComplianceFailure" {
                Some(|raw| {
                    let value: Vec<ComplianceFailure> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfComplianceFailure(value))
                })
            } else { None }
        },
        0x706c69616e63654c => { // plianceL
            if type_name == "ArrayOfComplianceLocator" {
                Some(|raw| {
                    let value: Vec<ComplianceLocator> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfComplianceLocator(value))
                })
            } else { None }
        },
        0x706c69616e636550 => { // plianceP
            if type_name == "ArrayOfComplianceProfile" {
                Some(|raw| {
                    let value: Vec<ComplianceProfile> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfComplianceProfile(value))
                })
            } else { None }
        },
        0x70746f5370656344 => { // ptoSpecD
            if type_name == "ArrayOfCryptoSpecDecrypt" {
                Some(|raw| {
                    let value: Vec<CryptoSpecDecrypt> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCryptoSpecDecrypt(value))
                })
            } else { None }
        },
        0x70746f5370656345 => { // ptoSpecE
            if type_name == "ArrayOfCryptoSpecEncrypt" {
                Some(|raw| {
                    let value: Vec<CryptoSpecEncrypt> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCryptoSpecEncrypt(value))
                })
            } else { None }
        },
        0x72616765506f6453 => { // ragePodS
            if type_name == "ArrayOfStoragePodSummary" {
                Some(|raw| {
                    let value: Vec<StoragePodSummary> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfStoragePodSummary(value))
                })
            } else { None }
        },
        0x726174696f6e4469 => { // rationDi
            if type_name == "ArrayOfMigrationDisabled" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfMigrationDisabled(value))
                })
            } else { None }
        },
        0x726174696f6e4e6f => { // rationNo
            if type_name == "ArrayOfMigrationNotReady" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfMigrationNotReady(value))
                })
            } else { None }
        },
        0x726d436c65617265 => { // rmCleare
            if type_name == "ArrayOfAlarmClearedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfAlarmClearedEvent(value))
                })
            } else { None }
        },
        0x726d437265617465 => { // rmCreate
            if type_name == "ArrayOfAlarmCreatedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfAlarmCreatedEvent(value))
                })
            } else { None }
        },
        0x726d52656d6f7665 => { // rmRemove
            if type_name == "ArrayOfAlarmRemovedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfAlarmRemovedEvent(value))
                })
            } else { None }
        },
        0x734461746173746f => { // sDatasto
            match type_name {
                "ArrayOfVmfsDatastoreInfo" => {
                    Some(|raw| {
                        let value: Vec<VmfsDatastoreInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVmfsDatastoreInfo(value))
                    })
                }
                "ArrayOfVmfsDatastoreSpec" => {
                    Some(|raw| {
                        let value: Vec<Box<dyn super::traits::VmfsDatastoreSpecTrait>> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVmfsDatastoreSpec(value))
                    })
                }
                _ => None
            }
        },
        0x736963616c4e6963 => { // sicalNic
            match type_name {
                "ArrayOfPhysicalNicConfig" => {
                    Some(|raw| {
                        let value: Vec<PhysicalNicConfig> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfPhysicalNicConfig(value))
                    })
                }
                "ArrayOfPhysicalNicIpHint" => {
                    Some(|raw| {
                        let value: Vec<PhysicalNicIpHint> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfPhysicalNicIpHint(value))
                    })
                }
                _ => None
            }
        },
        0x73696e67426d6353 => { // singBmcS
            if type_name == "ArrayOfMissingBmcSupport" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfMissingBmcSupport(value))
                })
            } else { None }
        },
        0x73696e67436f6e74 => { // singCont
            if type_name == "ArrayOfMissingController" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfMissingController(value))
                })
            } else { None }
        },
        0x73744c6973744669 => { // stListFi
            if type_name == "ArrayOfGuestListFileInfo" {
                Some(|raw| {
                    let value: Vec<GuestListFileInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGuestListFileInfo(value))
                })
            } else { None }
        },
        0x73744f7344657363 => { // stOsDesc
            if type_name == "ArrayOfGuestOsDescriptor" {
                Some(|raw| {
                    let value: Vec<GuestOsDescriptor> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGuestOsDescriptor(value))
                })
            } else { None }
        },
        0x737452656756616c => { // stRegVal
            if type_name == "ArrayOfGuestRegValueSpec" {
                Some(|raw| {
                    let value: Vec<GuestRegValueSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGuestRegValueSpec(value))
                })
            } else { None }
        },
        0x73746572436f6e66 => { // sterConf
            match type_name {
                "ArrayOfClusterConfigInfo" => {
                    Some(|raw| {
                        let value: Vec<ClusterConfigInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfClusterConfigInfo(value))
                    })
                }
                "ArrayOfClusterConfigSpec" => {
                    Some(|raw| {
                        let value: Vec<ClusterConfigSpec> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfClusterConfigSpec(value))
                    })
                }
                _ => None
            }
        },
        0x73746572536c6f74 => { // sterSlot
            if type_name == "ArrayOfClusterSlotPolicy" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::ClusterSlotPolicyTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterSlotPolicy(value))
                })
            } else { None }
        },
        0x74436f6d6d756e69 => { // tCommuni
            if type_name == "ArrayOfHostCommunication" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostCommunication(value))
                })
            } else { None }
        },
        0x74436f6e6669674d => { // tConfigM
            if type_name == "ArrayOfHostConfigManager" {
                Some(|raw| {
                    let value: Vec<HostConfigManager> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostConfigManager(value))
                })
            } else { None }
        },
        0x74436f6e66696753 => { // tConfigS
            if type_name == "ArrayOfHostConfigSummary" {
                Some(|raw| {
                    let value: Vec<HostConfigSummary> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostConfigSummary(value))
                })
            } else { None }
        },
        0x744461734572726f => { // tDasErro
            if type_name == "ArrayOfHostDasErrorEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostDasErrorEvent(value))
                })
            } else { None }
        },
        0x74446e73436f6e66 => { // tDnsConf
            if type_name == "ArrayOfHostDnsConfigSpec" {
                Some(|raw| {
                    let value: Vec<HostDnsConfigSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostDnsConfigSpec(value))
                })
            } else { None }
        },
        0x744576656e744172 => { // tEventAr
            if type_name == "ArrayOfHostEventArgument" {
                Some(|raw| {
                    let value: Vec<HostEventArgument> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostEventArgument(value))
                })
            } else { None }
        },
        0x7448626143726561 => { // tHbaCrea
            if type_name == "ArrayOfHostHbaCreateSpec" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::HostHbaCreateSpecTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostHbaCreateSpec(value))
                })
            } else { None }
        },
        0x74496e76656e746f => { // tInvento
            if type_name == "ArrayOfHostInventoryFull" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostInventoryFull(value))
                })
            } else { None }
        },
        0x744970526f757465 => { // tIpRoute
            if type_name == "ArrayOfHostIpRouteConfig" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::HostIpRouteConfigTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostIpRouteConfig(value))
                })
            } else { None }
        },
        0x744d656d6f727950 => { // tMemoryP
            if type_name == "ArrayOfHostMemoryProfile" {
                Some(|raw| {
                    let value: Vec<HostMemoryProfile> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostMemoryProfile(value))
                })
            } else { None }
        },
        0x744d756c74697061 => { // tMultipa
            if type_name == "ArrayOfHostMultipathInfo" {
                Some(|raw| {
                    let value: Vec<HostMultipathInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostMultipathInfo(value))
                })
            } else { None }
        },
        0x744e6173566f6c75 => { // tNasVolu
            if type_name == "ArrayOfHostNasVolumeSpec" {
                Some(|raw| {
                    let value: Vec<HostNasVolumeSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostNasVolumeSpec(value))
                })
            } else { None }
        },
        0x744e6574776f726b => { // tNetwork
            match type_name {
                "ArrayOfHostNetworkConfig" => {
                    Some(|raw| {
                        let value: Vec<HostNetworkConfig> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostNetworkConfig(value))
                    })
                }
                "ArrayOfHostNetworkPolicy" => {
                    Some(|raw| {
                        let value: Vec<HostNetworkPolicy> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostNetworkPolicy(value))
                    })
                }
                _ => None
            }
        },
        0x744e766d654e616d => { // tNvmeNam
            if type_name == "ArrayOfHostNvmeNamespace" {
                Some(|raw| {
                    let value: Vec<HostNvmeNamespace> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostNvmeNamespace(value))
                })
            } else { None }
        },
        0x74506f727447726f => { // tPortGro
            match type_name {
                "ArrayOfHostPortGroupPort" => {
                    Some(|raw| {
                        let value: Vec<HostPortGroupPort> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostPortGroupPort(value))
                    })
                }
                "ArrayOfHostPortGroupSpec" => {
                    Some(|raw| {
                        let value: Vec<HostPortGroupSpec> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostPortGroupSpec(value))
                    })
                }
                _ => None
            }
        },
        0x74506f7765724f70 => { // tPowerOp
            if type_name == "ArrayOfHostPowerOpFailed" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostPowerOpFailed(value))
                })
            } else { None }
        },
        0x745175616c696669 => { // tQualifi
            if type_name == "ArrayOfHostQualifiedName" {
                Some(|raw| {
                    let value: Vec<HostQualifiedName> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostQualifiedName(value))
                })
            } else { None }
        },
        0x7453657276696365 => { // tService
            match type_name {
                "ArrayOfHostServiceConfig" => {
                    Some(|raw| {
                        let value: Vec<HostServiceConfig> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostServiceConfig(value))
                    })
                }
                "ArrayOfHostServiceTicket" => {
                    Some(|raw| {
                        let value: Vec<HostServiceTicket> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostServiceTicket(value))
                    })
                }
                _ => None
            }
        },
        0x7453687574646f77 => { // tShutdow
            if type_name == "ArrayOfHostShutdownEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostShutdownEvent(value))
                })
            } else { None }
        },
        0x7453706563696669 => { // tSpecifi
            if type_name == "ArrayOfHostSpecification" {
                Some(|raw| {
                    let value: Vec<HostSpecification> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostSpecification(value))
                })
            } else { None }
        },
        0x7454706d44696765 => { // tTpmDige
            if type_name == "ArrayOfHostTpmDigestInfo" {
                Some(|raw| {
                    let value: Vec<HostTpmDigestInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostTpmDigestInfo(value))
                })
            } else { None }
        },
        0x74564d6f74696f6e => { // tVMotion
            if type_name == "ArrayOfHostVMotionConfig" {
                Some(|raw| {
                    let value: Vec<HostVMotionConfig> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostVMotionConfig(value))
                })
            } else { None }
        },
        0x745669727475616c => { // tVirtual
            if type_name == "ArrayOfHostVirtualSwitch" {
                Some(|raw| {
                    let value: Vec<HostVirtualSwitch> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostVirtualSwitch(value))
                })
            } else { None }
        },
        0x746f6d697a617469 => { // tomizati
            match type_name {
                "ArrayOfCustomizationName" => {
                    Some(|raw| {
                        let value: Vec<Box<dyn super::traits::CustomizationNameTrait>> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfCustomizationName(value))
                    })
                }
                "ArrayOfCustomizationSpec" => {
                    Some(|raw| {
                        let value: Vec<CustomizationSpec> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfCustomizationSpec(value))
                    })
                }
                _ => None
            }
        },
        0x7472696374656456 => { // trictedV
            if type_name == "ArrayOfRestrictedVersion" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfRestrictedVersion(value))
                })
            } else { None }
        },
        0x7475616c41707053 => { // tualAppS
            if type_name == "ArrayOfVirtualAppSummary" {
                Some(|raw| {
                    let value: Vec<VirtualAppSummary> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualAppSummary(value))
                })
            } else { None }
        },
        0x7475616c436f6e74 => { // tualCont
            if type_name == "ArrayOfVirtualController" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::VirtualControllerTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualController(value))
                })
            } else { None }
        },
        0x7475616c4469736b => { // tualDisk
            if type_name == "ArrayOfVirtualDiskOption" {
                Some(|raw| {
                    let value: Vec<VirtualDiskOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualDiskOption(value))
                })
            } else { None }
        },
        0x7475616c53657269 => { // tualSeri
            if type_name == "ArrayOfVirtualSerialPort" {
                Some(|raw| {
                    let value: Vec<VirtualSerialPort> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualSerialPort(value))
                })
            } else { None }
        },
        0x756666696369656e => { // ufficien
            if type_name == "ArrayOfInsufficientDisks" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInsufficientDisks(value))
                })
            } else { None }
        },
        0x756d65456469746f => { // umeEdito
            if type_name == "ArrayOfVolumeEditorError" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVolumeEditorError(value))
                })
            } else { None }
        },
        0x757370656e64696e => { // uspendin
            if type_name == "ArrayOfVmSuspendingEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmSuspendingEvent(value))
                })
            } else { None }
        },
        0x75746f52656e616d => { // utoRenam
            if type_name == "ArrayOfVmAutoRenameEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmAutoRenameEvent(value))
                })
            } else { None }
        },
        0x776e4368616e6765 => { // wnChange
            if type_name == "ArrayOfVmWwnChangedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmWwnChangedEvent(value))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_value_deserializer_25(type_name: &str) -> Option<fn(&serde_json::value::RawValue) -> Result<ValueElements, serde_json::Error>> {
    let s = &type_name[12..16];
    let Some(type_ord) = to_u32(s) else {
        return None;
    };
    match type_ord {
        0x416c6172 => { // Alar
            if type_name == "ArrayOfStateAlarmOperator" {
                Some(|raw| {
                    let value: Vec<super::enums::StateAlarmOperatorEnum> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfStateAlarmOperator(value))
                })
            } else { None }
        },
        0x41737369 => { // Assi
            match type_name {
                "ArrayOfVmMacAssignedEvent" => {
                    Some(|raw| {
                        let value: Vec<Event> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVmMacAssignedEvent(value))
                    })
                }
                "ArrayOfVmWwnAssignedEvent" => {
                    Some(|raw| {
                        let value: Vec<Event> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVmWwnAssignedEvent(value))
                    })
                }
                _ => None
            }
        },
        0x41757468 => { // Auth
            if type_name == "ArrayOfGuestAuthAliasInfo" {
                Some(|raw| {
                    let value: Vec<GuestAuthAliasInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGuestAuthAliasInfo(value))
                })
            } else { None }
        },
        0x436f6e66 => { // Conf
            match type_name {
                "ArrayOfVmMacConflictEvent" => {
                    Some(|raw| {
                        let value: Vec<Event> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVmMacConflictEvent(value))
                    })
                }
                "ArrayOfVmWwnConflictEvent" => {
                    Some(|raw| {
                        let value: Vec<Event> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVmWwnConflictEvent(value))
                    })
                }
                _ => None
            }
        },
        0x44617461 => { // Data
            if type_name == "ArrayOfLocalDatastoreInfo" {
                Some(|raw| {
                    let value: Vec<LocalDatastoreInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfLocalDatastoreInfo(value))
                })
            } else { None }
        },
        0x4576656e => { // Even
            if type_name == "ArrayOfAlarmEventArgument" {
                Some(|raw| {
                    let value: Vec<AlarmEventArgument> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfAlarmEventArgument(value))
                })
            } else { None }
        },
        0x496e7374 => { // Inst
            match type_name {
                "ArrayOfAgentInstallFailed" => {
                    Some(|raw| {
                        let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfAgentInstallFailed(value))
                    })
                }
                "ArrayOfPatchInstallFailed" => {
                    Some(|raw| {
                        let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfPatchInstallFailed(value))
                    })
                }
                _ => None
            }
        },
        0x4c696365 => { // Lice
            if type_name == "ArrayOfLocalLicenseSource" {
                Some(|raw| {
                    let value: Vec<LocalLicenseSource> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfLocalLicenseSource(value))
                })
            } else { None }
        },
        0x4d617070 => { // Mapp
            if type_name == "ArrayOfGuestMappedAliases" {
                Some(|raw| {
                    let value: Vec<GuestMappedAliases> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGuestMappedAliases(value))
                })
            } else { None }
        },
        0x4d696772 => { // Migr
            if type_name == "ArrayOfDrsVmMigratedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDrsVmMigratedEvent(value))
                })
            } else { None }
        },
        0x4e6f7441 => { // NotA
            if type_name == "ArrayOfPatchNotApplicable" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPatchNotApplicable(value))
                })
            } else { None }
        },
        0x506f7274 => { // Port
            if type_name == "ArrayOfVspanPortMoveFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVspanPortMoveFault(value))
                })
            } else { None }
        },
        0x52656769 => { // Regi
            if type_name == "ArrayOfGuestRegistryFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGuestRegistryFault(value))
                })
            } else { None }
        },
        0x52756c65 => { // Rule
            if type_name == "HostFirewallRuleDirection" {
                Some(|raw| {
                    let value: super::enums::HostFirewallRuleDirectionEnum = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::HostFirewallRuleDirection(value))
                })
            } else { None }
        },
        0x5461736b => { // Task
            if type_name == "ArrayOfDailyTaskScheduler" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::DailyTaskSchedulerTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDailyTaskScheduler(value))
                })
            } else { None }
        },
        0x55706461 => { // Upda
            if type_name == "ArrayOfVmDasUpdateOkEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmDasUpdateOkEvent(value))
                })
            } else { None }
        },
        0x616c4170 => { // alAp
            if type_name == "ArrayOfVirtualAppLinkInfo" {
                Some(|raw| {
                    let value: Vec<VirtualAppLinkInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualAppLinkInfo(value))
                })
            } else { None }
        },
        0x616c4364 => { // alCd
            if type_name == "ArrayOfVirtualCdromOption" {
                Some(|raw| {
                    let value: Vec<VirtualCdromOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualCdromOption(value))
                })
            } else { None }
        },
        0x616c4531 => { // alE1
            if type_name == "ArrayOfVirtualE1000Option" {
                Some(|raw| {
                    let value: Vec<VirtualE1000Option> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualE1000Option(value))
                })
            } else { None }
        },
        0x616c456e => { // alEn
            if type_name == "ArrayOfVirtualEnsoniq1371" {
                Some(|raw| {
                    let value: Vec<VirtualEnsoniq1371> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualEnsoniq1371(value))
                })
            } else { None }
        },
        0x616c4864 => { // alHd
            if type_name == "ArrayOfVirtualHdAudioCard" {
                Some(|raw| {
                    let value: Vec<VirtualHdAudioCard> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualHdAudioCard(value))
                })
            } else { None }
        },
        0x616c5343 => { // alSC
            if type_name == "ArrayOfVirtualSCSISharing" {
                Some(|raw| {
                    let value: Vec<super::enums::VirtualScsiSharingEnum> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualScsiSharing(value))
                })
            } else { None }
        },
        0x616c566d => { // alVm
            if type_name == "ArrayOfGeneralVmInfoEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGeneralVmInfoEvent(value))
                })
            } else { None }
        },
        0x61726d45 => { // armE
            if type_name == "ArrayOfAndAlarmExpression" {
                Some(|raw| {
                    let value: Vec<AndAlarmExpression> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfAndAlarmExpression(value))
                })
            } else { None }
        },
        0x61736b49 => { // askI
            if type_name == "ArrayOfVAppTaskInProgress" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVAppTaskInProgress(value))
                })
            } else { None }
        },
        0x61745365 => { // atSe
            if type_name == "ArrayOfHostNatServiceSpec" {
                Some(|raw| {
                    let value: Vec<HostNatServiceSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostNatServiceSpec(value))
                })
            } else { None }
        },
        0x61746173 => { // atas
            if type_name == "ArrayOfSwapDatastoreUnset" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfSwapDatastoreUnset(value))
                })
            } else { None }
        },
        0x61746554 => { // ateT
            if type_name == "ArrayOfHostDateTimeConfig" {
                Some(|raw| {
                    let value: Vec<HostDateTimeConfig> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostDateTimeConfig(value))
                })
            } else { None }
        },
        0x63526f75 => { // cRou
            if type_name == "ArrayOfStaticRouteProfile" {
                Some(|raw| {
                    let value: Vec<StaticRouteProfile> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfStaticRouteProfile(value))
                })
            } else { None }
        },
        0x63616c4e => { // calN
            match type_name {
                "ArrayOfPhysicalNicCdpInfo" => {
                    Some(|raw| {
                        let value: Vec<PhysicalNicCdpInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfPhysicalNicCdpInfo(value))
                    })
                }
                "ArrayOfPhysicalNicProfile" => {
                    Some(|raw| {
                        let value: Vec<PhysicalNicProfile> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfPhysicalNicProfile(value))
                    })
                }
                _ => None
            }
        },
        0x63617469 => { // cati
            match type_name {
                "ArrayOfReplicationGroupId" => {
                    Some(|raw| {
                        let value: Vec<ReplicationGroupId> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfReplicationGroupId(value))
                    })
                }
                "ArrayOfReplicationVmFault" => {
                    Some(|raw| {
                        let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfReplicationVmFault(value))
                    })
                }
                _ => None
            }
        },
        0x63795365 => { // cySe
            if type_name == "ArrayOfLatencySensitivity" {
                Some(|raw| {
                    let value: Vec<LatencySensitivity> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfLatencySensitivity(value))
                })
            } else { None }
        },
        0x64436861 => { // dCha
            if type_name == "ArrayOfVmUuidChangedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmUuidChangedEvent(value))
                })
            } else { None }
        },
        0x64644661 => { // ddFa
            if type_name == "ArrayOfHostAddFailedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostAddFailedEvent(value))
                })
            } else { None }
        },
        0x654e6f74 => { // eNot
            if type_name == "ArrayOfDeviceNotSupported" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDeviceNotSupported(value))
                })
            } else { None }
        },
        0x65567370 => { // eVsp
            if type_name == "ArrayOfVMwareVspanSession" {
                Some(|raw| {
                    let value: Vec<VMwareVspanSession> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVMwareVspanSession(value))
                })
            } else { None }
        },
        0x6561736f => { // easo
            if type_name == "ArrayOfTaskReasonSchedule" {
                Some(|raw| {
                    let value: Vec<TaskReasonSchedule> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfTaskReasonSchedule(value))
                })
            } else { None }
        },
        0x656d6f72 => { // emor
            if type_name == "ArrayOfHostMemoryTierInfo" {
                Some(|raw| {
                    let value: Vec<HostMemoryTierInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostMemoryTierInfo(value))
                })
            } else { None }
        },
        0x656e7446 => { // entF
            if type_name == "ArrayOfDasAgentFoundEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDasAgentFoundEvent(value))
                })
            } else { None }
        },
        0x656e7465 => { // ente
            if type_name == "ArrayOfDatacenterMismatch" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDatacenterMismatch(value))
                })
            } else { None }
        },
        0x65706c6f => { // eplo
            match type_name {
                "ArrayOfHostDeploymentInfo" => {
                    Some(|raw| {
                        let value: Vec<HostDeploymentInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostDeploymentInfo(value))
                    })
                }
                "ArrayOfNodeDeploymentSpec" => {
                    Some(|raw| {
                        let value: Vec<Box<dyn super::traits::NodeDeploymentSpecTrait>> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfNodeDeploymentSpec(value))
                    })
                }
                _ => None
            }
        },
        0x65724461 => { // erDa
            if type_name == "ArrayOfClusterDasHostInfo" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::ClusterDasHostInfoTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterDasHostInfo(value))
                })
            } else { None }
        },
        0x6572566d => { // erVm
            if type_name == "ArrayOfClusterVmReadiness" {
                Some(|raw| {
                    let value: Vec<ClusterVmReadiness> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterVmReadiness(value))
                })
            } else { None }
        },
        0x6577506f => { // ewPo
            if type_name == "ArrayOfVsanNewPolicyBatch" {
                Some(|raw| {
                    let value: Vec<VsanNewPolicyBatch> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVsanNewPolicyBatch(value))
                })
            } else { None }
        },
        0x67655265 => { // geRe
            if type_name == "ArrayOfStorageRequirement" {
                Some(|raw| {
                    let value: Vec<StorageRequirement> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfStorageRequirement(value))
                })
            } else { None }
        },
        0x69634f72 => { // icOr
            if type_name == "ArrayOfHostNicOrderPolicy" {
                Some(|raw| {
                    let value: Vec<HostNicOrderPolicy> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostNicOrderPolicy(value))
                })
            } else { None }
        },
        0x69644970 => { // idIp
            if type_name == "ArrayOfInvalidIpfixConfig" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInvalidIpfixConfig(value))
                })
            } else { None }
        },
        0x696c7572 => { // ilur
            if type_name == "ArrayOfDVSFailureCriteria" {
                Some(|raw| {
                    let value: Vec<DvsFailureCriteria> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsFailureCriteria(value))
                })
            } else { None }
        },
        0x69726577 => { // irew
            if type_name == "ArrayOfHostFirewallConfig" {
                Some(|raw| {
                    let value: Vec<HostFirewallConfig> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostFirewallConfig(value))
                })
            } else { None }
        },
        0x69727475 => { // irtu
            if type_name == "ArrayOfHostVirtualNicSpec" {
                Some(|raw| {
                    let value: Vec<HostVirtualNicSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostVirtualNicSpec(value))
                })
            } else { None }
        },
        0x69736b44 => { // iskD
            if type_name == "ArrayOfHostDiskDimensions" {
                Some(|raw| {
                    let value: Vec<HostDiskDimensions> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostDiskDimensions(value))
                })
            } else { None }
        },
        0x69747943 => { // ityC
            if type_name == "ArrayOfAffinityConfigured" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfAffinityConfigured(value))
                })
            } else { None }
        },
        0x697a6162 => { // izab
            if type_name == "ArrayOfLocalizableMessage" {
                Some(|raw| {
                    let value: Vec<LocalizableMessage> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfLocalizableMessage(value))
                })
            } else { None }
        },
        0x6b73546f => { // ksTo
            if type_name == "ArrayOfNoDisksToCustomize" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNoDisksToCustomize(value))
                })
            } else { None }
        },
        0x6c654465 => { // leDe
            if type_name == "ArrayOfProfileDescription" {
                Some(|raw| {
                    let value: Vec<ProfileDescription> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfProfileDescription(value))
                })
            } else { None }
        },
        0x6c655265 => { // leRe
            if type_name == "HostLicensableResourceKey" {
                Some(|raw| {
                    let value: super::enums::HostLicensableResourceKeyEnum = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::HostLicensableResourceKey(value))
                })
            } else { None }
        },
        0x6c656765 => { // lege
            if type_name == "ArrayOfPrivilegePolicyDef" {
                Some(|raw| {
                    let value: Vec<PrivilegePolicyDef> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPrivilegePolicyDef(value))
                })
            } else { None }
        },
        0x6c726561 => { // lrea
            if type_name == "ArrayOfVmfsAlreadyMounted" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmfsAlreadyMounted(value))
                })
            } else { None }
        },
        0x6c746572 => { // lter
            if type_name == "ArrayOfDvsFilterParameter" {
                Some(|raw| {
                    let value: Vec<DvsFilterParameter> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsFilterParameter(value))
                })
            } else { None }
        },
        0x6d626967 => { // mbig
            if type_name == "ArrayOfVmfsAmbiguousMount" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmfsAmbiguousMount(value))
                })
            } else { None }
        },
        0x6d697373 => { // miss
            match type_name {
                "ArrayOfEVCAdmissionFailed" => {
                    Some(|raw| {
                        let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfEvcAdmissionFailed(value))
                    })
                }
                "ArrayOfNoPermissionOnHost" => {
                    Some(|raw| {
                        let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfNoPermissionOnHost(value))
                    })
                }
                _ => None
            }
        },
        0x6d697a61 => { // miza
            match type_name {
                "ArrayOfCustomizationEvent" => {
                    Some(|raw| {
                        let value: Vec<Event> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfCustomizationEvent(value))
                    })
                }
                "ArrayOfCustomizationFault" => {
                    Some(|raw| {
                        let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfCustomizationFault(value))
                    })
                }
                _ => None
            }
        },
        0x6e654661 => { // neFa
            if type_name == "ArrayOfVmCloneFailedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmCloneFailedEvent(value))
                })
            } else { None }
        },
        0x6e65546f => { // neTo
            if type_name == "VirtualMachineToolsStatus" {
                Some(|raw| {
                    let value: super::enums::VirtualMachineToolsStatusEnum = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::VirtualMachineToolsStatus(value))
                })
            } else { None }
        },
        0x6e67436c => { // ngCl
            if type_name == "ArrayOfVmBeingClonedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmBeingClonedEvent(value))
                })
            } else { None }
        },
        0x6e6d7043 => { // nmpC
            if type_name == "ArrayOfHostSnmpConfigSpec" {
                Some(|raw| {
                    let value: Vec<HostSnmpConfigSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostSnmpConfigSpec(value))
                })
            } else { None }
        },
        0x6e6e6563 => { // nnec
            match type_name {
                "ArrayOfOvfConnectedDevice" => {
                    Some(|raw| {
                        let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfOvfConnectedDevice(value))
                    })
                }
                "HostSystemConnectionState" => {
                    Some(|raw| {
                        let value: super::enums::HostSystemConnectionStateEnum = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::HostSystemConnectionState(value))
                    })
                }
                _ => None
            }
        },
        0x6e73756d => { // nsum
            if type_name == "ArrayOfOvfConsumerOstNode" {
                Some(|raw| {
                    let value: Vec<OvfConsumerOstNode> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfConsumerOstNode(value))
                })
            } else { None }
        },
        0x6e744465 => { // ntDe
            if type_name == "ArrayOfElementDescription" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::ElementDescriptionTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfElementDescription(value))
                })
            } else { None }
        },
        0x6e784661 => { // nxFa
            if type_name == "ArrayOfHostCnxFailedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostCnxFailedEvent(value))
                })
            } else { None }
        },
        0x6e794775 => { // nyGu
            if type_name == "ArrayOfTooManyGuestLogons" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfTooManyGuestLogons(value))
                })
            } else { None }
        },
        0x6f537065 => { // oSpe
            if type_name == "ArrayOfCryptoSpecRegister" {
                Some(|raw| {
                    let value: Vec<CryptoSpecRegister> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCryptoSpecRegister(value))
                })
            } else { None }
        },
        0x6f636b49 => { // ockI
            if type_name == "ArrayOfFileLockInfoResult" {
                Some(|raw| {
                    let value: Vec<FileLockInfoResult> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfFileLockInfoResult(value))
                })
            } else { None }
        },
        0x6f6d706c => { // ompl
            if type_name == "ArrayOfHostCompliantEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostCompliantEvent(value))
                })
            } else { None }
        },
        0x6f6e4e6f => { // onNo
            if type_name == "ArrayOfVMotionNotLicensed" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVMotionNotLicensed(value))
                })
            } else { None }
        },
        0x6f6e666c => { // onfl
            if type_name == "ArrayOfVMOnConflictDVPort" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmOnConflictDvPort(value))
                })
            } else { None }
        },
        0x6f6e6e65 => { // onne
            if type_name == "ArrayOfHostConnectedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostConnectedEvent(value))
                })
            } else { None }
        },
        0x6f6f7444 => { // ootD
            if type_name == "ArrayOfHostBootDeviceInfo" {
                Some(|raw| {
                    let value: Vec<HostBootDeviceInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostBootDeviceInfo(value))
                })
            } else { None }
        },
        0x6f706572 => { // oper
            if type_name == "ArrayOfOvfPropertyNetwork" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfPropertyNetwork(value))
                })
            } else { None }
        },
        0x6f726167 => { // orag
            if type_name == "ArrayOfPodStorageDrsEntry" {
                Some(|raw| {
                    let value: Vec<PodStorageDrsEntry> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPodStorageDrsEntry(value))
                })
            } else { None }
        },
        0x6f737442 => { // ostB
            if type_name == "ArrayOfHostHostBusAdapter" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::HostHostBusAdapterTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostHostBusAdapter(value))
                })
            } else { None }
        },
        0x6f737443 => { // ostC
            if type_name == "ArrayOfVsanHostConfigInfo" {
                Some(|raw| {
                    let value: Vec<VsanHostConfigInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVsanHostConfigInfo(value))
                })
            } else { None }
        },
        0x6f737444 => { // ostD
            if type_name == "ArrayOfVsanHostDiskResult" {
                Some(|raw| {
                    let value: Vec<VsanHostDiskResult> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVsanHostDiskResult(value))
                })
            } else { None }
        },
        0x70436861 => { // pCha
            if type_name == "ArrayOfHostIpChangedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostIpChangedEvent(value))
                })
            } else { None }
        },
        0x7073686f => { // psho
            if type_name == "ArrayOfVmSnapshotFileInfo" {
                Some(|raw| {
                    let value: Vec<VmSnapshotFileInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmSnapshotFileInfo(value))
                })
            } else { None }
        },
        0x72617068 => { // raph
            if type_name == "ArrayOfHostGraphicsConfig" {
                Some(|raw| {
                    let value: Vec<HostGraphicsConfig> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostGraphicsConfig(value))
                })
            } else { None }
        },
        0x72636543 => { // rceC
            if type_name == "ArrayOfResourceConfigSpec" {
                Some(|raw| {
                    let value: Vec<ResourceConfigSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfResourceConfigSpec(value))
                })
            } else { None }
        },
        0x72697a61 => { // riza
            if type_name == "ArrayOfAuthorizationEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfAuthorizationEvent(value))
                })
            } else { None }
        },
        0x72744c69 => { // rtLi
            if type_name == "ArrayOfDvsPortLinkUpEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsPortLinkUpEvent(value))
                })
            } else { None }
        },
        0x72747946 => { // rtyF
            if type_name == "ArrayOfPropertyFilterSpec" {
                Some(|raw| {
                    let value: Vec<PropertyFilterSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPropertyFilterSpec(value))
                })
            } else { None }
        },
        0x73654469 => { // seDi
            if type_name == "ArrayOfLicenseDiagnostics" {
                Some(|raw| {
                    let value: Vec<LicenseDiagnostics> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfLicenseDiagnostics(value))
                })
            } else { None }
        },
        0x73654665 => { // seFe
            if type_name == "ArrayOfLicenseFeatureInfo" {
                Some(|raw| {
                    let value: Vec<LicenseFeatureInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfLicenseFeatureInfo(value))
                })
            } else { None }
        },
        0x7373696e => { // ssin
            if type_name == "ArrayOfOvfMissingHardware" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfMissingHardware(value))
                })
            } else { None }
        },
        0x73744661 => { // stFa
            if type_name == "ArrayOfDasHostFailedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDasHostFailedEvent(value))
                })
            } else { None }
        },
        0x73744a6f => { // stJo
            if type_name == "ArrayOfDvsHostJoinedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsHostJoinedEvent(value))
                })
            } else { None }
        },
        0x73745265 => { // stRe
            if type_name == "ArrayOfVmGuestRebootEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmGuestRebootEvent(value))
                })
            } else { None }
        },
        0x7374564e => { // stVN
            match type_name {
                "ArrayOfDvsHostVNicProfile" => {
                    Some(|raw| {
                        let value: Vec<DvsHostVNicProfile> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfDvsHostVNicProfile(value))
                    })
                }
                "ArrayOfNsxHostVNicProfile" => {
                    Some(|raw| {
                        let value: Vec<NsxHostVNicProfile> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfNsxHostVNicProfile(value))
                    })
                }
                _ => None
            }
        },
        0x73757070 => { // supp
            if type_name == "ArrayOfOvfUnsupportedType" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfUnsupportedType(value))
                })
            } else { None }
        },
        0x74416363 => { // tAcc
            if type_name == "ArrayOfCannotAccessVmDisk" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCannotAccessVmDisk(value))
                })
            } else { None }
        },
        0x7447726f => { // tGro
            if type_name == "ArrayOfVmPortGroupProfile" {
                Some(|raw| {
                    let value: Vec<VmPortGroupProfile> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmPortGroupProfile(value))
                })
            } else { None }
        },
        0x744e6f74 => { // tNot
            match type_name {
                "ArrayOfDVPortNotSupported" => {
                    Some(|raw| {
                        let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfDvPortNotSupported(value))
                    })
                }
                "ArrayOfDigestNotSupported" => {
                    Some(|raw| {
                        let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfDigestNotSupported(value))
                    })
                }
                _ => None
            }
        },
        0x74617274 => { // tart
            if type_name == "ArrayOfAutoStartPowerInfo" {
                Some(|raw| {
                    let value: Vec<AutoStartPowerInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfAutoStartPowerInfo(value))
                })
            } else { None }
        },
        0x746f7265 => { // tore
            match type_name {
                "ArrayOfDatastoreFileEvent" => {
                    Some(|raw| {
                        let value: Vec<Event> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfDatastoreFileEvent(value))
                    })
                }
                "ArrayOfDatastoreHostMount" => {
                    Some(|raw| {
                        let value: Vec<DatastoreHostMount> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfDatastoreHostMount(value))
                    })
                }
                _ => None
            }
        },
        0x7474696e => { // ttin
            if type_name == "ArrayOfNicSettingMismatch" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNicSettingMismatch(value))
                })
            } else { None }
        },
        0x756c6564 => { // uled
            if type_name == "ArrayOfScheduledTaskEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfScheduledTaskEvent(value))
                })
            } else { None }
        },
        0x756e4475 => { // unDu
            if type_name == "ArrayOfScsiLunDurableName" {
                Some(|raw| {
                    let value: Vec<ScsiLunDurableName> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfScsiLunDurableName(value))
                })
            } else { None }
        },
        0x75746865 => { // uthe
            if type_name == "ArrayOfSSPIAuthentication" {
                Some(|raw| {
                    let value: Vec<SspiAuthentication> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfSspiAuthentication(value))
                })
            } else { None }
        },
        0x76665365 => { // vfSe
            match type_name {
                "ArrayOfVAppOvfSectionInfo" => {
                    Some(|raw| {
                        let value: Vec<VAppOvfSectionInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVAppOvfSectionInfo(value))
                    })
                }
                "ArrayOfVAppOvfSectionSpec" => {
                    Some(|raw| {
                        let value: Vec<VAppOvfSectionSpec> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVAppOvfSectionSpec(value))
                    })
                }
                _ => None
            }
        },
        0x766d6543 => { // vmeC
            if type_name == "ArrayOfHostNvmeController" {
                Some(|raw| {
                    let value: Vec<HostNvmeController> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostNvmeController(value))
                })
            } else { None }
        },
        0x79426163 => { // yBac
            if type_name == "ArrayOfEntityBackupConfig" {
                Some(|raw| {
                    let value: Vec<EntityBackupConfig> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfEntityBackupConfig(value))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_value_deserializer_26(type_name: &str) -> Option<fn(&serde_json::value::RawValue) -> Result<ValueElements, serde_json::Error>> {
    let s = &type_name[11..19];
    let Some(type_ord) = to_u64(s) else {
        return None;
    };
    match type_ord {
        0x4163746976654469 => { // ActiveDi
            if type_name == "ArrayOfHostActiveDirectory" {
                Some(|raw| {
                    let value: Vec<HostActiveDirectory> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostActiveDirectory(value))
                })
            } else { None }
        },
        0x41737369676e6564 => { // Assigned
            if type_name == "ArrayOfUserAssignedToGroup" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfUserAssignedToGroup(value))
                })
            } else { None }
        },
        0x436f6d706f736974 => { // Composit
            if type_name == "ArrayOfPerfCompositeMetric" {
                Some(|raw| {
                    let value: Vec<PerfCompositeMetric> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPerfCompositeMetric(value))
                })
            } else { None }
        },
        0x436f6e666967566c => { // ConfigVl
            if type_name == "ArrayOfFcoeConfigVlanRange" {
                Some(|raw| {
                    let value: Vec<FcoeConfigVlanRange> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfFcoeConfigVlanRange(value))
                })
            } else { None }
        },
        0x446173456e61626c => { // DasEnabl
            if type_name == "ArrayOfHostDasEnabledEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostDasEnabledEvent(value))
                })
            } else { None }
        },
        0x4461746173746f72 => { // Datastor
            if type_name == "ArrayOfVmfsDatastoreOption" {
                Some(|raw| {
                    let value: Vec<VmfsDatastoreOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmfsDatastoreOption(value))
                })
            } else { None }
        },
        0x4468637053657276 => { // DhcpServ
            if type_name == "ArrayOfHostDhcpServiceSpec" {
                Some(|raw| {
                    let value: Vec<HostDhcpServiceSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostDhcpServiceSpec(value))
                })
            } else { None }
        },
        0x4469736b4d617070 => { // DiskMapp
            if type_name == "ArrayOfHostDiskMappingInfo" {
                Some(|raw| {
                    let value: Vec<HostDiskMappingInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostDiskMappingInfo(value))
                })
            } else { None }
        },
        0x456e746974794d65 => { // EntityMe
            if type_name == "ArrayOfPerfEntityMetricCSV" {
                Some(|raw| {
                    let value: Vec<PerfEntityMetricCsv> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPerfEntityMetricCsv(value))
                })
            } else { None }
        },
        0x4669627265436861 => { // FibreCha
            if type_name == "ArrayOfHostFibreChannelHba" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::HostFibreChannelHbaTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostFibreChannelHba(value))
                })
            } else { None }
        },
        0x4669726577616c6c => { // Firewall
            if type_name == "ArrayOfHostFirewallRuleset" {
                Some(|raw| {
                    let value: Vec<HostFirewallRuleset> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostFirewallRuleset(value))
                })
            } else { None }
        },
        0x4861726477617265 => { // Hardware
            if type_name == "ArrayOfHostHardwareSummary" {
                Some(|raw| {
                    let value: Vec<HostHardwareSummary> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostHardwareSummary(value))
                })
            } else { None }
        },
        0x486f73744469736b => { // HostDisk
            match type_name {
                "ArrayOfVsanHostDiskMapInfo" => {
                    Some(|raw| {
                        let value: Vec<VsanHostDiskMapInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVsanHostDiskMapInfo(value))
                    })
                }
                "ArrayOfVsanHostDiskMapping" => {
                    Some(|raw| {
                        let value: Vec<VsanHostDiskMapping> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVsanHostDiskMapping(value))
                    })
                }
                _ => None
            }
        },
        0x486f73744865616c => { // HostHeal
            if type_name == "ArrayOfVsanHostHealthState" {
                Some(|raw| {
                    let value: Vec<super::enums::VsanHostHealthStateEnum> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVsanHostHealthState(value))
                })
            } else { None }
        },
        0x486f737452756e74 => { // HostRunt
            if type_name == "ArrayOfVsanHostRuntimeInfo" {
                Some(|raw| {
                    let value: Vec<VsanHostRuntimeInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVsanHostRuntimeInfo(value))
                })
            } else { None }
        },
        0x496e7465726e6574 => { // Internet
            if type_name == "ArrayOfHostInternetScsiHba" {
                Some(|raw| {
                    let value: Vec<HostInternetScsiHba> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostInternetScsiHba(value))
                })
            } else { None }
        },
        0x4c756e4361706162 => { // LunCapab
            if type_name == "ArrayOfScsiLunCapabilities" {
                Some(|raw| {
                    let value: Vec<ScsiLunCapabilities> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfScsiLunCapabilities(value))
                })
            } else { None }
        },
        0x4d61696e74656e61 => { // Maintena
            if type_name == "ArrayOfHostMaintenanceSpec" {
                Some(|raw| {
                    let value: Vec<HostMaintenanceSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostMaintenanceSpec(value))
                })
            } else { None }
        },
        0x4d6574726963496e => { // MetricIn
            if type_name == "ArrayOfPerfMetricIntSeries" {
                Some(|raw| {
                    let value: Vec<PerfMetricIntSeries> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPerfMetricIntSeries(value))
                })
            } else { None }
        },
        0x4d65747269635365 => { // MetricSe
            if type_name == "ArrayOfPerfMetricSeriesCSV" {
                Some(|raw| {
                    let value: Vec<PerfMetricSeriesCsv> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPerfMetricSeriesCsv(value))
                })
            } else { None }
        },
        0x4e6173566f6c756d => { // NasVolum
            if type_name == "ArrayOfHostNasVolumeConfig" {
                Some(|raw| {
                    let value: Vec<HostNasVolumeConfig> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostNasVolumeConfig(value))
                })
            } else { None }
        },
        0x4e65744361706162 => { // NetCapab
            if type_name == "ArrayOfHostNetCapabilities" {
                Some(|raw| {
                    let value: Vec<HostNetCapabilities> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostNetCapabilities(value))
                })
            } else { None }
        },
        0x4e6f646552756e74 => { // NodeRunt
            if type_name == "ArrayOfVchaNodeRuntimeInfo" {
                Some(|raw| {
                    let value: Vec<VchaNodeRuntimeInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVchaNodeRuntimeInfo(value))
                })
            } else { None }
        },
        0x4e766d65436f6e6e => { // NvmeConn
            if type_name == "ArrayOfHostNvmeConnectSpec" {
                Some(|raw| {
                    let value: Vec<HostNvmeConnectSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostNvmeConnectSpec(value))
                })
            } else { None }
        },
        0x506172616c6c656c => { // Parallel
            if type_name == "ArrayOfHostParallelScsiHba" {
                Some(|raw| {
                    let value: Vec<HostParallelScsiHba> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostParallelScsiHba(value))
                })
            } else { None }
        },
        0x50617373776f7264 => { // Password
            if type_name == "ArrayOfUserPasswordChanged" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfUserPasswordChanged(value))
                })
            } else { None }
        },
        0x5063695061737374 => { // PciPasst
            if type_name == "ArrayOfHostPciPassthruInfo" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::HostPciPassthruInfoTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostPciPassthruInfo(value))
                })
            } else { None }
        },
        0x506f727447726f75 => { // PortGrou
            if type_name == "ArrayOfHostPortGroupConfig" {
                Some(|raw| {
                    let value: Vec<HostPortGroupConfig> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostPortGroupConfig(value))
                })
            } else { None }
        },
        0x50726976696c6567 => { // Privileg
            if type_name == "ArrayOfUserPrivilegeResult" {
                Some(|raw| {
                    let value: Vec<UserPrivilegeResult> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfUserPrivilegeResult(value))
                })
            } else { None }
        },
        0x50726f7669646572 => { // Provider
            if type_name == "ArrayOfPerfProviderSummary" {
                Some(|raw| {
                    let value: Vec<PerfProviderSummary> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPerfProviderSummary(value))
                })
            } else { None }
        },
        0x50726f7879537769 => { // ProxySwi
            if type_name == "ArrayOfHostProxySwitchSpec" {
                Some(|raw| {
                    let value: Vec<HostProxySwitchSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostProxySwitchSpec(value))
                })
            } else { None }
        },
        0x53637369546f706f => { // ScsiTopo
            if type_name == "ArrayOfHostScsiTopologyLun" {
                Some(|raw| {
                    let value: Vec<HostScsiTopologyLun> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostScsiTopologyLun(value))
                })
            } else { None }
        },
        0x536e6d7044657374 => { // SnmpDest
            if type_name == "ArrayOfHostSnmpDestination" {
                Some(|raw| {
                    let value: Vec<HostSnmpDestination> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostSnmpDestination(value))
                })
            } else { None }
        },
        0x53796e634661696c => { // SyncFail
            if type_name == "ArrayOfHostSyncFailedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostSyncFailedEvent(value))
                })
            } else { None }
        },
        0x5461726765745472 => { // TargetTr
            if type_name == "ArrayOfHostTargetTransport" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::HostTargetTransportTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostTargetTransport(value))
                })
            } else { None }
        },
        0x54706d4576656e74 => { // TpmEvent
            if type_name == "ArrayOfHostTpmEventDetails" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::HostTpmEventDetailsTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostTpmEventDetails(value))
                })
            } else { None }
        },
        0x5669727475616c49 => { // VirtualI
            if type_name == "ArrayOfVMOnVirtualIntranet" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmOnVirtualIntranet(value))
                })
            } else { None }
        },
        0x57776e4368616e67 => { // WwnChang
            if type_name == "ArrayOfHostWwnChangedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostWwnChangedEvent(value))
                })
            } else { None }
        },
        0x6164794265696e67 => { // adyBeing
            if type_name == "ArrayOfAlreadyBeingManaged" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfAlreadyBeingManaged(value))
                })
            } else { None }
        },
        0x616e74696e654d6f => { // antineMo
            if type_name == "ArrayOfQuarantineModeFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfQuarantineModeFault(value))
                })
            } else { None }
        },
        0x617073686f744669 => { // apshotFi
            if type_name == "ArrayOfVmSnapshotFileQuery" {
                Some(|raw| {
                    let value: Vec<VmSnapshotFileQuery> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmSnapshotFileQuery(value))
                })
            } else { None }
        },
        0x61736150726f7669 => { // asaProvi
            if type_name == "ArrayOfVimVasaProviderInfo" {
                Some(|raw| {
                    let value: Vec<VimVasaProviderInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVimVasaProviderInfo(value))
                })
            } else { None }
        },
        0x6174696f6e457272 => { // ationErr
            if type_name == "ArrayOfMigrationErrorEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfMigrationErrorEvent(value))
                })
            } else { None }
        },
        0x636f6e6669677572 => { // configur
            if type_name == "ArrayOfVmReconfiguredEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmReconfiguredEvent(value))
                })
            } else { None }
        },
        0x645265636f726469 => { // dRecordi
            if type_name == "ArrayOfVmEndRecordingEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmEndRecordingEvent(value))
                })
            } else { None }
        },
        0x645265706c617969 => { // dReplayi
            if type_name == "ArrayOfVmEndReplayingEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmEndReplayingEvent(value))
                })
            } else { None }
        },
        0x64756c6564546173 => { // duledTas
            if type_name == "ArrayOfScheduledTaskDetail" {
                Some(|raw| {
                    let value: Vec<ScheduledTaskDetail> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfScheduledTaskDetail(value))
                })
            } else { None }
        },
        0x656d656e7452616e => { // ementRan
            if type_name == "ArrayOfPlacementRankResult" {
                Some(|raw| {
                    let value: Vec<PlacementRankResult> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPlacementRankResult(value))
                })
            } else { None }
        },
        0x65706c6f796d656e => { // eploymen
            if type_name == "ArrayOfOvfDeploymentOption" {
                Some(|raw| {
                    let value: Vec<OvfDeploymentOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfDeploymentOption(value))
                })
            } else { None }
        },
        0x65724576656e7441 => { // erEventA
            if type_name == "ArrayOfFolderEventArgument" {
                Some(|raw| {
                    let value: Vec<FolderEventArgument> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfFolderEventArgument(value))
                })
            } else { None }
        },
        0x6573745374616e64 => { // estStand
            if type_name == "ArrayOfVmGuestStandbyEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmGuestStandbyEvent(value))
                })
            } else { None }
        },
        0x666f726d436f6e66 => { // formConf
            if type_name == "ArrayOfPlatformConfigFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPlatformConfigFault(value))
                })
            } else { None }
        },
        0x676564456e746974 => { // gedEntit
            if type_name == "ArrayOfManagedEntityStatus" {
                Some(|raw| {
                    let value: Vec<super::enums::ManagedEntityStatusEnum> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfManagedEntityStatus(value))
                })
            } else { None }
        },
        0x68496e7465677269 => { // hIntegri
            if type_name == "ArrayOfPatchIntegrityError" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPatchIntegrityError(value))
                })
            } else { None }
        },
        0x694661756c74506e => { // iFaultPn
            if type_name == "ArrayOfIscsiFaultPnicInUse" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfIscsiFaultPnicInUse(value))
                })
            } else { None }
        },
        0x694661756c74566e => { // iFaultVn
            if type_name == "ArrayOfIscsiFaultVnicInUse" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfIscsiFaultVnicInUse(value))
                })
            } else { None }
        },
        0x6963416c61726d4f => { // icAlarmO
            if type_name == "ArrayOfMetricAlarmOperator" {
                Some(|raw| {
                    let value: Vec<super::enums::MetricAlarmOperatorEnum> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfMetricAlarmOperator(value))
                })
            } else { None }
        },
        0x6963616c4e696348 => { // icalNicH
            if type_name == "ArrayOfPhysicalNicHintInfo" {
                Some(|raw| {
                    let value: Vec<PhysicalNicHintInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPhysicalNicHintInfo(value))
                })
            } else { None }
        },
        0x6963616c4e69634c => { // icalNicL
            if type_name == "ArrayOfPhysicalNicLinkInfo" {
                Some(|raw| {
                    let value: Vec<PhysicalNicLinkInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPhysicalNicLinkInfo(value))
                })
            } else { None }
        },
        0x6963616c4e69634e => { // icalNicN
            if type_name == "ArrayOfPhysicalNicNameHint" {
                Some(|raw| {
                    let value: Vec<PhysicalNicNameHint> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPhysicalNicNameHint(value))
                })
            } else { None }
        },
        0x696441737369676e => { // idAssign
            if type_name == "ArrayOfVmUuidAssignedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmUuidAssignedEvent(value))
                })
            } else { None }
        },
        0x6964436f6e666c69 => { // idConfli
            if type_name == "ArrayOfVmUuidConflictEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmUuidConflictEvent(value))
                })
            } else { None }
        },
        0x69656e7443657274 => { // ientCert
            if type_name == "ArrayOfNoClientCertificate" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNoClientCertificate(value))
                })
            } else { None }
        },
        0x696c654368616e67 => { // ileChang
            if type_name == "ArrayOfProfileChangedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfProfileChangedEvent(value))
                })
            } else { None }
        },
        0x696c654372656174 => { // ileCreat
            if type_name == "ArrayOfProfileCreatedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfProfileCreatedEvent(value))
                })
            } else { None }
        },
        0x696c654578656375 => { // ileExecu
            if type_name == "ArrayOfProfileExecuteError" {
                Some(|raw| {
                    let value: Vec<ProfileExecuteError> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfProfileExecuteError(value))
                })
            } else { None }
        },
        0x696c6550726f7065 => { // ilePrope
            if type_name == "ArrayOfProfilePropertyPath" {
                Some(|raw| {
                    let value: Vec<ProfilePropertyPath> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfProfilePropertyPath(value))
                })
            } else { None }
        },
        0x696c6552656d6f76 => { // ileRemov
            if type_name == "ArrayOfProfileRemovedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfProfileRemovedEvent(value))
                })
            } else { None }
        },
        0x696c655570646174 => { // ileUpdat
            if type_name == "ArrayOfProfileUpdateFailed" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfProfileUpdateFailed(value))
                })
            } else { None }
        },
        0x696c746572436f6e => { // ilterCon
            if type_name == "ArrayOfDvsFilterConfigSpec" {
                Some(|raw| {
                    let value: Vec<DvsFilterConfigSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsFilterConfigSpec(value))
                })
            } else { None }
        },
        0x696e654d6f766550 => { // ineMoveP
            if type_name == "VirtualMachineMovePriority" {
                Some(|raw| {
                    let value: super::enums::VirtualMachineMovePriorityEnum = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::VirtualMachineMovePriority(value))
                })
            } else { None }
        },
        0x696e674372656174 => { // ingCreat
            if type_name == "ArrayOfVmBeingCreatedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmBeingCreatedEvent(value))
                })
            } else { None }
        },
        0x696e675570677261 => { // ingUpgra
            if type_name == "ArrayOfWarningUpgradeEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfWarningUpgradeEvent(value))
                })
            } else { None }
        },
        0x696f6e4e6f745375 => { // ionNotSu
            if type_name == "ArrayOfVMotionNotSupported" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVMotionNotSupported(value))
                })
            } else { None }
        },
        0x69736b4e6f744176 => { // iskNotAv
            if type_name == "ArrayOfSsdDiskNotAvailable" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfSsdDiskNotAvailable(value))
                })
            } else { None }
        },
        0x69736b4e6f745375 => { // iskNotSu
            match type_name {
                "ArrayOfIDEDiskNotSupported" => {
                    Some(|raw| {
                        let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfIdeDiskNotSupported(value))
                    })
                }
                "ArrayOfRawDiskNotSupported" => {
                    Some(|raw| {
                        let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfRawDiskNotSupported(value))
                    })
                }
                _ => None
            }
        },
        0x697373696e674174 => { // issingAt
            if type_name == "ArrayOfOvfMissingAttribute" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfMissingAttribute(value))
                })
            } else { None }
        },
        0x6c69644564697469 => { // lidEditi
            if type_name == "ArrayOfInvalidEditionEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInvalidEditionEvent(value))
                })
            } else { None }
        },
        0x6c696450726f7065 => { // lidPrope
            if type_name == "ArrayOfInvalidPropertyType" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInvalidPropertyType(value))
                })
            } else { None }
        },
        0x6c69646174654d61 => { // lidateMa
            if type_name == "ArrayOfVmValidateMaxDevice" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmValidateMaxDevice(value))
                })
            } else { None }
        },
        0x6c6f636174655370 => { // locateSp
            if type_name == "ArrayOfVmRelocateSpecEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmRelocateSpecEvent(value))
                })
            } else { None }
        },
        0x6c795461736b5363 => { // lyTaskSc
            match type_name {
                "ArrayOfHourlyTaskScheduler" => {
                    Some(|raw| {
                        let value: Vec<Box<dyn super::traits::HourlyTaskSchedulerTrait>> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHourlyTaskScheduler(value))
                    })
                }
                "ArrayOfWeeklyTaskScheduler" => {
                    Some(|raw| {
                        let value: Vec<WeeklyTaskScheduler> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfWeeklyTaskScheduler(value))
                    })
                }
                _ => None
            }
        },
        0x6d506f7765726564 => { // mPowered
            if type_name == "ArrayOfDrsVmPoweredOnEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDrsVmPoweredOnEvent(value))
                })
            } else { None }
        },
        0x6d6d4e616d657370 => { // mmNamesp
            if type_name == "ArrayOfNvdimmNamespaceInfo" {
                Some(|raw| {
                    let value: Vec<NvdimmNamespaceInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNvdimmNamespaceInfo(value))
                })
            } else { None }
        },
        0x6d70617469626c65 => { // mpatible
            if type_name == "ArrayOfIncompatibleSetting" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfIncompatibleSetting(value))
                })
            } else { None }
        },
        0x6e636f6d70617469 => { // ncompati
            if type_name == "ArrayOfCpuIncompatible1ECX" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCpuIncompatible1Ecx(value))
                })
            } else { None }
        },
        0x6e64656444657363 => { // ndedDesc
            if type_name == "ArrayOfExtendedDescription" {
                Some(|raw| {
                    let value: Vec<ExtendedDescription> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfExtendedDescription(value))
                })
            } else { None }
        },
        0x6e73654578706972 => { // nseExpir
            if type_name == "ArrayOfLicenseExpiredEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfLicenseExpiredEvent(value))
                })
            } else { None }
        },
        0x6e73654d616e6167 => { // nseManag
            if type_name == "ArrayOfLicenseManagerState" {
                Some(|raw| {
                    let value: Vec<super::enums::LicenseManagerStateEnum> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfLicenseManagerState(value))
                })
            } else { None }
        },
        0x6e73655365727665 => { // nseServe
            if type_name == "ArrayOfLicenseServerSource" {
                Some(|raw| {
                    let value: Vec<LicenseServerSource> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfLicenseServerSource(value))
                })
            } else { None }
        },
        0x6e73696f6e436c69 => { // nsionCli
            if type_name == "ArrayOfExtensionClientInfo" {
                Some(|raw| {
                    let value: Vec<ExtensionClientInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfExtensionClientInfo(value))
                })
            } else { None }
        },
        0x6e73696f6e486561 => { // nsionHea
            if type_name == "ArrayOfExtensionHealthInfo" {
                Some(|raw| {
                    let value: Vec<ExtensionHealthInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfExtensionHealthInfo(value))
                })
            } else { None }
        },
        0x6e73696f6e536572 => { // nsionSer
            if type_name == "ArrayOfExtensionServerInfo" {
                Some(|raw| {
                    let value: Vec<ExtensionServerInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfExtensionServerInfo(value))
                })
            } else { None }
        },
        0x6f6c735570677261 => { // olsUpgra
            if type_name == "ArrayOfVmToolsUpgradeFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmToolsUpgradeFault(value))
                })
            } else { None }
        },
        0x6f6c756d654e6f74 => { // olumeNot
            if type_name == "ArrayOfNasVolumeNotMounted" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNasVolumeNotMounted(value))
                })
            } else { None }
        },
        0x6f6d4669656c6444 => { // omFieldD
            if type_name == "ArrayOfCustomFieldDefEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCustomFieldDefEvent(value))
                })
            } else { None }
        },
        0x6f6d697a6174696f => { // omizatio
            if type_name == "ArrayOfCustomizationFailed" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCustomizationFailed(value))
                })
            } else { None }
        },
        0x6f726b496e616363 => { // orkInacc
            if type_name == "ArrayOfNetworkInaccessible" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNetworkInaccessible(value))
                })
            } else { None }
        },
        0x6f7274426c6f636b => { // ortBlock
            if type_name == "ArrayOfDvsPortBlockedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsPortBlockedEvent(value))
                })
            } else { None }
        },
        0x6f72744372656174 => { // ortCreat
            if type_name == "ArrayOfDvsPortCreatedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsPortCreatedEvent(value))
                })
            } else { None }
        },
        0x6f727444656c6574 => { // ortDelet
            if type_name == "ArrayOfDvsPortDeletedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsPortDeletedEvent(value))
                })
            } else { None }
        },
        0x6f74416363657373 => { // otAccess
            if type_name == "ArrayOfCannotAccessNetwork" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCannotAccessNetwork(value))
                })
            } else { None }
        },
        0x706c696e6b506f72 => { // plinkPor
            if type_name == "ArrayOfDVSUplinkPortPolicy" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::DvsUplinkPortPolicyTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsUplinkPortPolicy(value))
                })
            } else { None }
        },
        0x706c6f794661696c => { // ployFail
            if type_name == "ArrayOfVmDeployFailedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmDeployFailedEvent(value))
                })
            } else { None }
        },
        0x7075436f6d706174 => { // puCompat
            if type_name == "ArrayOfOvfCpuCompatibility" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfCpuCompatibility(value))
                })
            } else { None }
        },
        0x7079496d61676546 => { // pyImageF
            if type_name == "ArrayOfFloppyImageFileInfo" {
                Some(|raw| {
                    let value: Vec<FloppyImageFileInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfFloppyImageFileInfo(value))
                })
            } else { None }
        },
        0x72616c566d457272 => { // ralVmErr
            if type_name == "ArrayOfGeneralVmErrorEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGeneralVmErrorEvent(value))
                })
            } else { None }
        },
        0x7265445653436f6e => { // reDVSCon
            match type_name {
                "ArrayOfVMwareDVSConfigInfo" => {
                    Some(|raw| {
                        let value: Vec<VMwareDvsConfigInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVMwareDvsConfigInfo(value))
                    })
                }
                "ArrayOfVMwareDVSConfigSpec" => {
                    Some(|raw| {
                        let value: Vec<VMwareDvsConfigSpec> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVMwareDvsConfigSpec(value))
                    })
                }
                _ => None
            }
        },
        0x7265644164646f6e => { // redAddon
            if type_name == "ArrayOfExpiredAddonLicense" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfExpiredAddonLicense(value))
                })
            } else { None }
        },
        0x726564536f667477 => { // redSoftw
            if type_name == "ArrayOfDesiredSoftwareSpec" {
                Some(|raw| {
                    let value: Vec<DesiredSoftwareSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDesiredSoftwareSpec(value))
                })
            } else { None }
        },
        0x73636f6e6e656374 => { // sconnect
            if type_name == "ArrayOfVmDisconnectedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmDisconnectedEvent(value))
                })
            } else { None }
        },
        0x73686f7452657665 => { // shotReve
            if type_name == "ArrayOfSnapshotRevertIssue" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfSnapshotRevertIssue(value))
                })
            } else { None }
        },
        0x7373616765457272 => { // ssageErr
            if type_name == "ArrayOfVmMessageErrorEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmMessageErrorEvent(value))
                })
            } else { None }
        },
        0x73746f6d697a6162 => { // stomizab
            if type_name == "ArrayOfUncustomizableGuest" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfUncustomizableGuest(value))
                })
            } else { None }
        },
        0x73746f7265416363 => { // storeAcc
            if type_name == "ArrayOfDatastoreAccessible" {
                Some(|raw| {
                    let value: Vec<super::enums::DatastoreAccessibleEnum> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDatastoreAccessible(value))
                })
            } else { None }
        },
        0x73746f7265436170 => { // storeCap
            if type_name == "ArrayOfDatastoreCapability" {
                Some(|raw| {
                    let value: Vec<DatastoreCapability> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDatastoreCapability(value))
                })
            } else { None }
        },
        0x7441757468416e79 => { // tAuthAny
            if type_name == "ArrayOfGuestAuthAnySubject" {
                Some(|raw| {
                    let value: Vec<GuestAuthAnySubject> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGuestAuthAnySubject(value))
                })
            } else { None }
        },
        0x7441757468656e74 => { // tAuthent
            if type_name == "ArrayOfGuestAuthentication" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::GuestAuthenticationTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGuestAuthentication(value))
                })
            } else { None }
        },
        0x7446696c65417474 => { // tFileAtt
            if type_name == "ArrayOfGuestFileAttributes" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::GuestFileAttributesTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGuestFileAttributes(value))
                })
            } else { None }
        },
        0x745265674b65794e => { // tRegKeyN
            if type_name == "ArrayOfGuestRegKeyNameSpec" {
                Some(|raw| {
                    let value: Vec<GuestRegKeyNameSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGuestRegKeyNameSpec(value))
                })
            } else { None }
        },
        0x7461626c65457870 => { // tableExp
            if type_name == "ArrayOfNegatableExpression" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::NegatableExpressionTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNegatableExpression(value))
                })
            } else { None }
        },
        0x746572436f6e6669 => { // terConfi
            match type_name {
                "ArrayOfClusterConfigInfoEx" => {
                    Some(|raw| {
                        let value: Vec<ClusterConfigInfoEx> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfClusterConfigInfoEx(value))
                    })
                }
                "ArrayOfClusterConfigSpecEx" => {
                    Some(|raw| {
                        let value: Vec<ClusterConfigSpecEx> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfClusterConfigSpecEx(value))
                    })
                }
                _ => None
            }
        },
        0x7465724372656174 => { // terCreat
            if type_name == "ArrayOfClusterCreatedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterCreatedEvent(value))
                })
            } else { None }
        },
        0x7465724472734d69 => { // terDrsMi
            if type_name == "ArrayOfClusterDrsMigration" {
                Some(|raw| {
                    let value: Vec<ClusterDrsMigration> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterDrsMigration(value))
                })
            } else { None }
        },
        0x746572496f46696c => { // terIoFil
            if type_name == "ArrayOfClusterIoFilterInfo" {
                Some(|raw| {
                    let value: Vec<ClusterIoFilterInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterIoFilterInfo(value))
                })
            } else { None }
        },
        0x7465725573616765 => { // terUsage
            if type_name == "ArrayOfClusterUsageSummary" {
                Some(|raw| {
                    let value: Vec<ClusterUsageSummary> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterUsageSummary(value))
                })
            } else { None }
        },
        0x746853797374656d => { // thSystem
            if type_name == "ArrayOfHealthSystemRuntime" {
                Some(|raw| {
                    let value: Vec<HealthSystemRuntime> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHealthSystemRuntime(value))
                })
            } else { None }
        },
        0x74794576656e7441 => { // tyEventA
            if type_name == "ArrayOfEntityEventArgument" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::EntityEventArgumentTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfEntityEventArgument(value))
                })
            } else { None }
        },
        0x75616c4170705641 => { // ualAppVA
            if type_name == "ArrayOfVirtualAppVAppState" {
                Some(|raw| {
                    let value: Vec<super::enums::VirtualAppVAppStateEnum> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualAppVAppState(value))
                })
            } else { None }
        },
        0x75616c4465766963 => { // ualDevic
            if type_name == "ArrayOfVirtualDeviceOption" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::VirtualDeviceOptionTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualDeviceOption(value))
                })
            } else { None }
        },
        0x75616c4469736b52 => { // ualDiskR
            if type_name == "ArrayOfVirtualDiskRuleSpec" {
                Some(|raw| {
                    let value: Vec<VirtualDiskRuleSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualDiskRuleSpec(value))
                })
            } else { None }
        },
        0x75616c4531303030 => { // ualE1000
            if type_name == "ArrayOfVirtualE1000eOption" {
                Some(|raw| {
                    let value: Vec<VirtualE1000EOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualE1000EOption(value))
                })
            } else { None }
        },
        0x75616c4574686572 => { // ualEther
            if type_name == "ArrayOfVirtualEthernetCard" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::VirtualEthernetCardTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualEthernetCard(value))
                })
            } else { None }
        },
        0x75616c466c6f7070 => { // ualFlopp
            if type_name == "ArrayOfVirtualFloppyOption" {
                Some(|raw| {
                    let value: Vec<VirtualFloppyOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualFloppyOption(value))
                })
            } else { None }
        },
        0x75616c4e5644494d => { // ualNVDIM
            if type_name == "ArrayOfVirtualNVDIMMOption" {
                Some(|raw| {
                    let value: Vec<VirtualNvdimmOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualNvdimmOption(value))
                })
            } else { None }
        },
        0x75616c506172616c => { // ualParal
            if type_name == "ArrayOfVirtualParallelPort" {
                Some(|raw| {
                    let value: Vec<VirtualParallelPort> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualParallelPort(value))
                })
            } else { None }
        },
        0x75616c564d49524f => { // ualVMIRO
            if type_name == "ArrayOfVirtualVMIROMOption" {
                Some(|raw| {
                    let value: Vec<VirtualVmiromOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualVmiromOption(value))
                })
            } else { None }
        },
        0x75616c566d786e65 => { // ualVmxne
            match type_name {
                "ArrayOfVirtualVmxnet3Vrdma" => {
                    Some(|raw| {
                        let value: Vec<VirtualVmxnet3Vrdma> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualVmxnet3Vrdma(value))
                    })
                }
                "ArrayOfVirtualVmxnetOption" => {
                    Some(|raw| {
                        let value: Vec<Box<dyn super::traits::VirtualVmxnetOptionTrait>> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualVmxnetOption(value))
                    })
                }
                _ => None
            }
        },
        0x7565537769746368 => { // ueSwitch
            if type_name == "ArrayOfOpaqueSwitchProfile" {
                Some(|raw| {
                    let value: Vec<OpaqueSwitchProfile> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOpaqueSwitchProfile(value))
                })
            } else { None }
        },
        0x756e744372656174 => { // untCreat
            if type_name == "ArrayOfAccountCreatedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfAccountCreatedEvent(value))
                })
            } else { None }
        },
        0x756e7452656d6f76 => { // untRemov
            if type_name == "ArrayOfAccountRemovedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfAccountRemovedEvent(value))
                })
            } else { None }
        },
        0x756e745570646174 => { // untUpdat
            if type_name == "ArrayOfAccountUpdatedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfAccountUpdatedEvent(value))
                })
            } else { None }
        },
        0x75706c6963617465 => { // uplicate
            if type_name == "ArrayOfOvfDuplicateElement" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfDuplicateElement(value))
                })
            } else { None }
        },
        0x75726365506f6f6c => { // urcePool
            if type_name == "ArrayOfResourcePoolSummary" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::ResourcePoolSummaryTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfResourcePoolSummary(value))
                })
            } else { None }
        },
        0x776179436f6e6e65 => { // wayConne
            if type_name == "ArrayOfGatewayConnectFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGatewayConnectFault(value))
                })
            } else { None }
        },
        0x7761794e6f745265 => { // wayNotRe
            if type_name == "ArrayOfGatewayNotReachable" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGatewayNotReachable(value))
                })
            } else { None }
        },
        0x78566f6c756d654e => { // xVolumeN
            if type_name == "ArrayOfLinuxVolumeNotClean" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfLinuxVolumeNotClean(value))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_value_deserializer_27(type_name: &str) -> Option<fn(&serde_json::value::RawValue) -> Result<ValueElements, serde_json::Error>> {
    let s = &type_name[13..21];
    let Some(type_ord) = to_u64(s) else {
        return None;
    };
    match type_ord {
        0x416363657373566d => { // AccessVm
            match type_name {
                "ArrayOfCannotAccessVmConfig" => {
                    Some(|raw| {
                        let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfCannotAccessVmConfig(value))
                    })
                }
                "ArrayOfCannotAccessVmDevice" => {
                    Some(|raw| {
                        let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfCannotAccessVmDevice(value))
                    })
                }
                _ => None
            }
        },
        0x416374696f6e4172 => { // ActionAr
            if type_name == "ArrayOfMethodActionArgument" {
                Some(|raw| {
                    let value: Vec<MethodActionArgument> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfMethodActionArgument(value))
                })
            } else { None }
        },
        0x41737369676e6d65 => { // Assignme
            if type_name == "ArrayOfVAppIPAssignmentInfo" {
                Some(|raw| {
                    let value: Vec<VAppIpAssignmentInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVAppIpAssignmentInfo(value))
                })
            } else { None }
        },
        0x41756469744d6f64 => { // AuditMod
            if type_name == "ArrayOfHostInAuditModeEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostInAuditModeEvent(value))
                })
            } else { None }
        },
        0x42494f53436f6e66 => { // BIOSConf
            if type_name == "ArrayOfWinNetBIOSConfigInfo" {
                Some(|raw| {
                    let value: Vec<WinNetBiosConfigInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfWinNetBiosConfigInfo(value))
                })
            } else { None }
        },
        0x445653506f727453 => { // DVSPortS
            if type_name == "ArrayOfVMwareDVSPortSetting" {
                Some(|raw| {
                    let value: Vec<VMwareDvsPortSetting> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVMwareDvsPortSetting(value))
                })
            } else { None }
        },
        0x4469726563746f72 => { // Director
            if type_name == "ArrayOfActiveDirectoryFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfActiveDirectoryFault(value))
                })
            } else { None }
        },
        0x46696c6543726561 => { // FileCrea
            if type_name == "ArrayOfAnswerFileCreateSpec" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::AnswerFileCreateSpecTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfAnswerFileCreateSpec(value))
                })
            } else { None }
        },
        0x46696c6551756572 => { // FileQuer
            if type_name == "ArrayOfVmDiskFileQueryFlags" {
                Some(|raw| {
                    let value: Vec<VmDiskFileQueryFlags> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmDiskFileQueryFlags(value))
                })
            } else { None }
        },
        0x486f737441646446 => { // HostAddF
            if type_name == "ArrayOfImportHostAddFailure" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfImportHostAddFailure(value))
                })
            } else { None }
        },
        0x496d61676546696c => { // ImageFil
            if type_name == "ArrayOfFloppyImageFileQuery" {
                Some(|raw| {
                    let value: Vec<FloppyImageFileQuery> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfFloppyImageFileQuery(value))
                })
            } else { None }
        },
        0x4c6561726e696e67 => { // Learning
            if type_name == "ArrayOfDVSMacLearningPolicy" {
                Some(|raw| {
                    let value: Vec<DvsMacLearningPolicy> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsMacLearningPolicy(value))
                })
            } else { None }
        },
        0x4e6574776f726b53 => { // NetworkS
            if type_name == "ArrayOfOpaqueNetworkSummary" {
                Some(|raw| {
                    let value: Vec<OpaqueNetworkSummary> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOpaqueNetworkSummary(value))
                })
            } else { None }
        },
        0x5265706c61794469 => { // ReplayDi
            if type_name == "ArrayOfRecordReplayDisabled" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfRecordReplayDisabled(value))
                })
            } else { None }
        },
        0x526f757465546162 => { // RouteTab
            if type_name == "ArrayOfHostIpRouteTableInfo" {
                Some(|raw| {
                    let value: Vec<HostIpRouteTableInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostIpRouteTableInfo(value))
                })
            } else { None }
        },
        0x534d456e61626c65 => { // SMEnable
            if type_name == "ArrayOfLocalTSMEnabledEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfLocalTsmEnabledEvent(value))
                })
            } else { None }
        },
        0x564d73426c6f636b => { // VMsBlock
            if type_name == "ArrayOfActiveVMsBlockingEVC" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfActiveVMsBlockingEvc(value))
                })
            } else { None }
        },
        0x6164654661696c65 => { // adeFaile
            if type_name == "ArrayOfVmUpgradeFailedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmUpgradeFailedEvent(value))
                })
            } else { None }
        },
        0x61676564456e7469 => { // agedEnti
            if type_name == "ArrayOfExtManagedEntityInfo" {
                Some(|raw| {
                    let value: Vec<ExtManagedEntityInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfExtManagedEntityInfo(value))
                })
            } else { None }
        },
        0x616c696456616c75 => { // alidValu
            if type_name == "ArrayOfOvfInvalidValueEmpty" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfInvalidValueEmpty(value))
                })
            } else { None }
        },
        0x6174696f6e496e66 => { // ationInf
            if type_name == "LicenseReservationInfoState" {
                Some(|raw| {
                    let value: super::enums::LicenseReservationInfoStateEnum = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::LicenseReservationInfoState(value))
                })
            } else { None }
        },
        0x6253706563696669 => { // bSpecifi
            if type_name == "ArrayOfHostSubSpecification" {
                Some(|raw| {
                    let value: Vec<HostSubSpecification> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostSubSpecification(value))
                })
            } else { None }
        },
        0x634c65617365486f => { // cLeaseHo
            if type_name == "ArrayOfHttpNfcLeaseHostInfo" {
                Some(|raw| {
                    let value: Vec<HttpNfcLeaseHostInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHttpNfcLeaseHostInfo(value))
                })
            } else { None }
        },
        0x635465616d696e67 => { // cTeaming
            if type_name == "ArrayOfHostNicTeamingPolicy" {
                Some(|raw| {
                    let value: Vec<HostNicTeamingPolicy> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostNicTeamingPolicy(value))
                })
            } else { None }
        },
        0x63566d436f6e6669 => { // cVmConfi
            if type_name == "ArrayOfGenericVmConfigFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGenericVmConfigFault(value))
                })
            } else { None }
        },
        0x6365436f6e666967 => { // ceConfig
            if type_name == "ArrayOfResourceConfigOption" {
                Some(|raw| {
                    let value: Vec<ResourceConfigOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfResourceConfigOption(value))
                })
            } else { None }
        },
        0x63654e6f74417661 => { // ceNotAva
            if type_name == "ArrayOfResourceNotAvailable" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfResourceNotAvailable(value))
                })
            } else { None }
        },
        0x644461746173746f => { // dDatasto
            if type_name == "ArrayOfInvalidDatastorePath" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInvalidDatastorePath(value))
                })
            } else { None }
        },
        0x6444657669636542 => { // dDeviceB
            if type_name == "ArrayOfInvalidDeviceBacking" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInvalidDeviceBacking(value))
                })
            } else { None }
        },
        0x64496e6465784172 => { // dIndexAr
            if type_name == "ArrayOfInvalidIndexArgument" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInvalidIndexArgument(value))
                })
            } else { None }
        },
        0x6449706d694c6f67 => { // dIpmiLog
            if type_name == "ArrayOfInvalidIpmiLoginInfo" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInvalidIpmiLoginInfo(value))
                })
            } else { None }
        },
        0x644e6574776f726b => { // dNetwork
            if type_name == "ArrayOfInvalidNetworkInType" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInvalidNetworkInType(value))
                })
            } else { None }
        },
        0x6450726f70657274 => { // dPropert
            if type_name == "ArrayOfInvalidPropertyValue" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInvalidPropertyValue(value))
                })
            } else { None }
        },
        0x645363686564756c => { // dSchedul
            if type_name == "ArrayOfInvalidScheduledTask" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInvalidScheduledTask(value))
                })
            } else { None }
        },
        0x65447273436f6e66 => { // eDrsConf
            match type_name {
                "ArrayOfStorageDrsConfigInfo" => {
                    Some(|raw| {
                        let value: Vec<StorageDrsConfigInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfStorageDrsConfigInfo(value))
                    })
                }
                "ArrayOfStorageDrsConfigSpec" => {
                    Some(|raw| {
                        let value: Vec<StorageDrsConfigSpec> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfStorageDrsConfigSpec(value))
                    })
                }
                _ => None
            }
        },
        0x654472734f707469 => { // eDrsOpti
            if type_name == "ArrayOfStorageDrsOptionSpec" {
                Some(|raw| {
                    let value: Vec<StorageDrsOptionSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfStorageDrsOptionSpec(value))
                })
            } else { None }
        },
        0x654576656e744172 => { // eEventAr
            if type_name == "ArrayOfProfileEventArgument" {
                Some(|raw| {
                    let value: Vec<ProfileEventArgument> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfProfileEventArgument(value))
                })
            } else { None }
        },
        0x6545786563757465 => { // eExecute
            if type_name == "ArrayOfProfileExecuteResult" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::ProfileExecuteResultTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfProfileExecuteResult(value))
                })
            } else { None }
        },
        0x65506c6163656d65 => { // ePlaceme
            if type_name == "ArrayOfStoragePlacementSpec" {
                Some(|raw| {
                    let value: Vec<StoragePlacementSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfStoragePlacementSpec(value))
                })
            } else { None }
        },
        0x6563746564446174 => { // ectedDat
            if type_name == "ArrayOfNoConnectedDatastore" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNoConnectedDatastore(value))
                })
            } else { None }
        },
        0x65644d6967726174 => { // edMigrat
            if type_name == "ArrayOfVmFailedMigrateEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmFailedMigrateEvent(value))
                })
            } else { None }
        },
        0x6564546f52657365 => { // edToRese
            if type_name == "ArrayOfVmFailedToResetEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmFailedToResetEvent(value))
                })
            } else { None }
        },
        0x65696e6752657365 => { // eingRese
            if type_name == "ArrayOfVmDasBeingResetEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmDasBeingResetEvent(value))
                })
            } else { None }
        },
        0x6574616461746149 => { // etadataI
            if type_name == "ArrayOfPatchMetadataInvalid" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPatchMetadataInvalid(value))
                })
            } else { None }
        },
        0x667352657363616e => { // fsRescan
            if type_name == "ArrayOfHostVmfsRescanResult" {
                Some(|raw| {
                    let value: Vec<HostVmfsRescanResult> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostVmfsRescanResult(value))
                })
            } else { None }
        },
        0x674465706c6f7965 => { // gDeploye
            if type_name == "ArrayOfVmBeingDeployedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmBeingDeployedEvent(value))
                })
            } else { None }
        },
        0x674d696772617465 => { // gMigrate
            if type_name == "ArrayOfVmBeingMigratedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmBeingMigratedEvent(value))
                })
            } else { None }
        },
        0x674d69734d617463 => { // gMisMatc
            if type_name == "ArrayOfTeamingMisMatchEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfTeamingMisMatchEvent(value))
                })
            } else { None }
        },
        0x67726f757053656c => { // groupSel
            if type_name == "ArrayOfDVPortgroupSelection" {
                Some(|raw| {
                    let value: Vec<DvPortgroupSelection> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvPortgroupSelection(value))
                })
            } else { None }
        },
        0x68616e6e656c506f => { // hannelPo
            if type_name == "ArrayOfFibreChannelPortType" {
                Some(|raw| {
                    let value: Vec<super::enums::FibreChannelPortTypeEnum> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfFibreChannelPortType(value))
                })
            } else { None }
        },
        0x69674d697373696e => { // igMissin
            if type_name == "ArrayOfVmConfigMissingEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmConfigMissingEvent(value))
                })
            } else { None }
        },
        0x697a6174696f6e46 => { // izationF
            if type_name == "ArrayOfCustomizationFixedIp" {
                Some(|raw| {
                    let value: Vec<CustomizationFixedIp> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCustomizationFixedIp(value))
                })
            } else { None }
        },
        0x697a6174696f6e4f => { // izationO
            if type_name == "ArrayOfCustomizationOptions" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::CustomizationOptionsTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCustomizationOptions(value))
                })
            } else { None }
        },
        0x697a6174696f6e50 => { // izationP
            if type_name == "ArrayOfCustomizationPending" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCustomizationPending(value))
                })
            } else { None }
        },
        0x697a6174696f6e53 => { // izationS
            if type_name == "ArrayOfCustomizationSysprep" {
                Some(|raw| {
                    let value: Vec<CustomizationSysprep> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCustomizationSysprep(value))
                })
            } else { None }
        },
        0x6b4576656e744172 => { // kEventAr
            if type_name == "ArrayOfNetworkEventArgument" {
                Some(|raw| {
                    let value: Vec<NetworkEventArgument> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNetworkEventArgument(value))
                })
            } else { None }
        },
        0x6b506f6c69637950 => { // kPolicyP
            if type_name == "ArrayOfNetworkPolicyProfile" {
                Some(|raw| {
                    let value: Vec<NetworkPolicyProfile> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNetworkPolicyProfile(value))
                })
            } else { None }
        },
        0x6b526f6c6c626163 => { // kRollbac
            if type_name == "ArrayOfNetworkRollbackEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNetworkRollbackEvent(value))
                })
            } else { None }
        },
        0x6c417070496d706f => { // lAppImpo
            if type_name == "ArrayOfVirtualAppImportSpec" {
                Some(|raw| {
                    let value: Vec<VirtualAppImportSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualAppImportSpec(value))
                })
            } else { None }
        },
        0x6c486f7374496e66 => { // lHostInf
            if type_name == "ArrayOfGeneralHostInfoEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGeneralHostInfoEvent(value))
                })
            } else { None }
        },
        0x6c494445436f6e74 => { // lIDECont
            if type_name == "ArrayOfVirtualIDEController" {
                Some(|raw| {
                    let value: Vec<VirtualIdeController> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualIdeController(value))
                })
            } else { None }
        },
        0x6c4d616368696e65 => { // lMachine
            match type_name {
                "ArrayOfVirtualMachineTicket" => {
                    Some(|raw| {
                        let value: Vec<VirtualMachineTicket> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualMachineTicket(value))
                    })
                }
                "ArrayOfVirtualMachineVMIROM" => {
                    Some(|raw| {
                        let value: Vec<VirtualMachineVmirom> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualMachineVmirom(value))
                    })
                }
                _ => None
            }
        },
        0x6c504349436f6e74 => { // lPCICont
            if type_name == "ArrayOfVirtualPCIController" {
                Some(|raw| {
                    let value: Vec<VirtualPciController> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualPciController(value))
                })
            } else { None }
        },
        0x6c50434e65743332 => { // lPCNet32
            if type_name == "ArrayOfVirtualPCNet32Option" {
                Some(|raw| {
                    let value: Vec<VirtualPcNet32Option> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualPcNet32Option(value))
                })
            } else { None }
        },
        0x6c505332436f6e74 => { // lPS2Cont
            if type_name == "ArrayOfVirtualPS2Controller" {
                Some(|raw| {
                    let value: Vec<VirtualPs2Controller> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualPs2Controller(value))
                })
            } else { None }
        },
        0x6c53494f436f6e74 => { // lSIOCont
            if type_name == "ArrayOfVirtualSIOController" {
                Some(|raw| {
                    let value: Vec<VirtualSioController> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualSioController(value))
                })
            } else { None }
        },
        0x6c53776974636850 => { // lSwitchP
            if type_name == "ArrayOfVirtualSwitchProfile" {
                Some(|raw| {
                    let value: Vec<VirtualSwitchProfile> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualSwitchProfile(value))
                })
            } else { None }
        },
        0x6c555342436f6e74 => { // lUSBCont
            if type_name == "ArrayOfVirtualUSBController" {
                Some(|raw| {
                    let value: Vec<VirtualUsbController> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualUsbController(value))
                })
            } else { None }
        },
        0x6c566d786e657432 => { // lVmxnet2
            if type_name == "ArrayOfVirtualVmxnet2Option" {
                Some(|raw| {
                    let value: Vec<VirtualVmxnet2Option> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualVmxnet2Option(value))
                })
            } else { None }
        },
        0x6c566d786e657433 => { // lVmxnet3
            if type_name == "ArrayOfVirtualVmxnet3Option" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::VirtualVmxnet3OptionTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualVmxnet3Option(value))
                })
            } else { None }
        },
        0x6c61726d45787072 => { // larmExpr
            match type_name {
                "ArrayOfEventAlarmExpression" => {
                    Some(|raw| {
                        let value: Vec<EventAlarmExpression> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfEventAlarmExpression(value))
                    })
                }
                "ArrayOfStateAlarmExpression" => {
                    Some(|raw| {
                        let value: Vec<StateAlarmExpression> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfStateAlarmExpression(value))
                    })
                }
                _ => None
            }
        },
        0x6c6553797374656d => { // leSystem
            if type_name == "ArrayOfHostFileSystemVolume" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::HostFileSystemVolumeTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostFileSystemVolume(value))
                })
            } else { None }
        },
        0x6c72656164795570 => { // lreadyUp
            if type_name == "ArrayOfToolsAlreadyUpgraded" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfToolsAlreadyUpgraded(value))
                })
            } else { None }
        },
        0x6c74657253706563 => { // lterSpec
            if type_name == "ArrayOfTaskFilterSpecByTime" {
                Some(|raw| {
                    let value: Vec<TaskFilterSpecByTime> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfTaskFilterSpecByTime(value))
                })
            } else { None }
        },
        0x6c7468436865636b => { // lthCheck
            if type_name == "ArrayOfDVSHealthCheckConfig" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::DvsHealthCheckConfigTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsHealthCheckConfig(value))
                })
            } else { None }
        },
        0x6d4576656e744c6f => { // mEventLo
            if type_name == "ArrayOfHostTpmEventLogEntry" {
                Some(|raw| {
                    let value: Vec<HostTpmEventLogEntry> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostTpmEventLogEntry(value))
                })
            } else { None }
        },
        0x6d616765436f7079 => { // mageCopy
            if type_name == "ArrayOfToolsImageCopyFailed" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfToolsImageCopyFailed(value))
                })
            } else { None }
        },
        0x6d65446973636f76 => { // meDiscov
            match type_name {
                "ArrayOfHostNvmeDiscoverSpec" => {
                    Some(|raw| {
                        let value: Vec<HostNvmeDiscoverSpec> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostNvmeDiscoverSpec(value))
                    })
                }
                "ArrayOfHostNvmeDiscoveryLog" => {
                    Some(|raw| {
                        let value: Vec<HostNvmeDiscoveryLog> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostNvmeDiscoveryLog(value))
                    })
                }
                _ => None
            }
        },
        0x6d696e456e61626c => { // minEnabl
            if type_name == "ArrayOfHostAdminEnableEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostAdminEnableEvent(value))
                })
            } else { None }
        },
        0x6e436f6e666c6963 => { // nConflic
            if type_name == "ArrayOfHostWwnConflictEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostWwnConflictEvent(value))
                })
            } else { None }
        },
        0x6e4e6f74436f6e66 => { // nNotConf
            if type_name == "ArrayOfVMotionNotConfigured" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVMotionNotConfigured(value))
                })
            } else { None }
        },
        0x6e6d704661696c65 => { // nmpFaile
            if type_name == "ArrayOfAlarmSnmpFailedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfAlarmSnmpFailedEvent(value))
                })
            } else { None }
        },
        0x6e746572436f6e66 => { // nterConf
            match type_name {
                "ArrayOfDatacenterConfigInfo" => {
                    Some(|raw| {
                        let value: Vec<DatacenterConfigInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfDatacenterConfigInfo(value))
                    })
                }
                "ArrayOfDatacenterConfigSpec" => {
                    Some(|raw| {
                        let value: Vec<DatacenterConfigSpec> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfDatacenterConfigSpec(value))
                    })
                }
                _ => None
            }
        },
        0x6f6d70617469626c => { // ompatibl
            if type_name == "ArrayOfCpuIncompatible81EDX" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCpuIncompatible81Edx(value))
                })
            } else { None }
        },
        0x6f6e557365725265 => { // onUserRe
            if type_name == "ArrayOfSolutionUserRequired" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfSolutionUserRequired(value))
                })
            } else { None }
        },
        0x6f6e666967757265 => { // onfigure
            if type_name == "ArrayOfDvsReconfiguredEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsReconfiguredEvent(value))
                })
            } else { None }
        },
        0x6f72746564446174 => { // ortedDat
            if type_name == "ArrayOfUnsupportedDatastore" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfUnsupportedDatastore(value))
                })
            } else { None }
        },
        0x6f72794465736372 => { // oryDescr
            if type_name == "ArrayOfInventoryDescription" {
                Some(|raw| {
                    let value: Vec<InventoryDescription> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInventoryDescription(value))
                })
            } else { None }
        },
        0x6f74696f6e4e6574 => { // otionNet
            if type_name == "ArrayOfHostVMotionNetConfig" {
                Some(|raw| {
                    let value: Vec<HostVMotionNetConfig> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostVMotionNetConfig(value))
                })
            } else { None }
        },
        0x6f746f636f6c456e => { // otocolEn
            if type_name == "ArrayOfHostProtocolEndpoint" {
                Some(|raw| {
                    let value: Vec<HostProtocolEndpoint> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostProtocolEndpoint(value))
                })
            } else { None }
        },
        0x6f757465436f6e66 => { // outeConf
            match type_name {
                "ArrayOfNetIpRouteConfigInfo" => {
                    Some(|raw| {
                        let value: Vec<NetIpRouteConfigInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfNetIpRouteConfigInfo(value))
                    })
                }
                "ArrayOfNetIpRouteConfigSpec" => {
                    Some(|raw| {
                        let value: Vec<NetIpRouteConfigSpec> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfNetIpRouteConfigSpec(value))
                    })
                }
                _ => None
            }
        },
        0x70436f6e66696750 => { // pConfigP
            if type_name == "ArrayOfHostPtpConfigPtpPort" {
                Some(|raw| {
                    let value: Vec<HostPtpConfigPtpPort> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostPtpConfigPtpPort(value))
                })
            } else { None }
        },
        0x7048626143726561 => { // pHbaCrea
            if type_name == "ArrayOfHostTcpHbaCreateSpec" {
                Some(|raw| {
                    let value: Vec<HostTcpHbaCreateSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostTcpHbaCreateSpec(value))
                })
            } else { None }
        },
        0x70646174654f7065 => { // pdateOpe
            if type_name == "ArrayOfArrayUpdateOperation" {
                Some(|raw| {
                    let value: Vec<super::enums::ArrayUpdateOperationEnum> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfArrayUpdateOperation(value))
                })
            } else { None }
        },
        0x7065726174696f6e => { // peration
            if type_name == "ArrayOfGuestOperationsFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGuestOperationsFault(value))
                })
            } else { None }
        },
        0x7065727479517561 => { // pertyQua
            if type_name == "ArrayOfOvfPropertyQualifier" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfPropertyQualifier(value))
                })
            } else { None }
        },
        0x72416374696f6e48 => { // rActionH
            if type_name == "ArrayOfClusterActionHistory" {
                Some(|raw| {
                    let value: Vec<ClusterActionHistory> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterActionHistory(value))
                })
            } else { None }
        },
        0x72446173436f6e66 => { // rDasConf
            if type_name == "ArrayOfClusterDasConfigInfo" {
                Some(|raw| {
                    let value: Vec<ClusterDasConfigInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterDasConfigInfo(value))
                })
            } else { None }
        },
        0x72446173566d5365 => { // rDasVmSe
            if type_name == "ArrayOfClusterDasVmSettings" {
                Some(|raw| {
                    let value: Vec<ClusterDasVmSettings> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterDasVmSettings(value))
                })
            } else { None }
        },
        0x7244706d436f6e66 => { // rDpmConf
            if type_name == "ArrayOfClusterDpmConfigInfo" {
                Some(|raw| {
                    let value: Vec<ClusterDpmConfigInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterDpmConfigInfo(value))
                })
            } else { None }
        },
        0x72447273436f6e66 => { // rDrsConf
            if type_name == "ArrayOfClusterDrsConfigInfo" {
                Some(|raw| {
                    let value: Vec<ClusterDrsConfigInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterDrsConfigInfo(value))
                })
            } else { None }
        },
        0x7263654d6f756e74 => { // rceMount
            if type_name == "ArrayOfHostForceMountedInfo" {
                Some(|raw| {
                    let value: Vec<HostForceMountedInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostForceMountedInfo(value))
                })
            } else { None }
        },
        0x726f636573734e6f => { // rocessNo
            if type_name == "ArrayOfGuestProcessNotFound" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGuestProcessNotFound(value))
                })
            } else { None }
        },
        0x727447726f757050 => { // rtGroupP
            if type_name == "ArrayOfHostPortGroupProfile" {
                Some(|raw| {
                    let value: Vec<HostPortGroupProfile> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostPortGroupProfile(value))
                })
            } else { None }
        },
        0x727475616c4e6963 => { // rtualNic
            if type_name == "ArrayOfHostVirtualNicConfig" {
                Some(|raw| {
                    let value: Vec<HostVirtualNicConfig> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostVirtualNicConfig(value))
                })
            } else { None }
        },
        0x7344697361626c65 => { // sDisable
            if type_name == "ArrayOfHostDasDisabledEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostDasDisabledEvent(value))
                })
            } else { None }
        },
        0x73456e61626c696e => { // sEnablin
            if type_name == "ArrayOfHostDasEnablingEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostDasEnablingEvent(value))
                })
            } else { None }
        },
        0x7365484150726f74 => { // seHAProt
            if type_name == "ArrayOfWillLoseHAProtection" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfWillLoseHaProtection(value))
                })
            } else { None }
        },
        0x736553697a654573 => { // seSizeEs
            if type_name == "ArrayOfDatabaseSizeEstimate" {
                Some(|raw| {
                    let value: Vec<DatabaseSizeEstimate> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDatabaseSizeEstimate(value))
                })
            } else { None }
        },
        0x73696f6e41646465 => { // sionAdde
            if type_name == "ArrayOfPermissionAddedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPermissionAddedEvent(value))
                })
            } else { None }
        },
        0x7369784163636f75 => { // sixAccou
            if type_name == "ArrayOfHostPosixAccountSpec" {
                Some(|raw| {
                    let value: Vec<HostPosixAccountSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostPosixAccountSpec(value))
                })
            } else { None }
        },
        0x73745673616e4469 => { // stVsanDi
            if type_name == "ArrayOfVsanHostVsanDiskInfo" {
                Some(|raw| {
                    let value: Vec<VsanHostVsanDiskInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVsanHostVsanDiskInfo(value))
                })
            } else { None }
        },
        0x7374656d4865616c => { // stemHeal
            if type_name == "ArrayOfHostSystemHealthInfo" {
                Some(|raw| {
                    let value: Vec<HostSystemHealthInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostSystemHealthInfo(value))
                })
            } else { None }
        },
        0x7374656d506f7765 => { // stemPowe
            if type_name == "ArrayOfHostSystemPowerState" {
                Some(|raw| {
                    let value: Vec<super::enums::HostSystemPowerStateEnum> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostSystemPowerState(value))
                })
            } else { None }
        },
        0x74436f6d706f6e65 => { // tCompone
            if type_name == "ArrayOfProductComponentInfo" {
                Some(|raw| {
                    let value: Vec<ProductComponentInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfProductComponentInfo(value))
                })
            } else { None }
        },
        0x7449736f6c617465 => { // tIsolate
            if type_name == "ArrayOfDasHostIsolatedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDasHostIsolatedEvent(value))
                })
            } else { None }
        },
        0x744c696e6b446f77 => { // tLinkDow
            if type_name == "ArrayOfDvsPortLinkDownEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsPortLinkDownEvent(value))
                })
            } else { None }
        },
        0x744c6f63616c506f => { // tLocalPo
            if type_name == "ArrayOfDVSHostLocalPortInfo" {
                Some(|raw| {
                    let value: Vec<DvsHostLocalPortInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsHostLocalPortInfo(value))
                })
            } else { None }
        },
        0x7453657276696365 => { // tService
            if type_name == "ArrayOfHostNatServiceConfig" {
                Some(|raw| {
                    let value: Vec<HostNatServiceConfig> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostNatServiceConfig(value))
                })
            } else { None }
        },
        0x7453687574646f77 => { // tShutdow
            if type_name == "ArrayOfVmGuestShutdownEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmGuestShutdownEvent(value))
                })
            } else { None }
        },
        0x74537461636b496e => { // tStackIn
            if type_name == "ArrayOfHostNetStackInstance" {
                Some(|raw| {
                    let value: Vec<HostNetStackInstance> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostNetStackInstance(value))
                })
            } else { None }
        },
        0x7453746174757355 => { // tStatusU
            if type_name == "ArrayOfDvsHostStatusUpdated" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsHostStatusUpdated(value))
                })
            } else { None }
        },
        0x7455706772616465 => { // tUpgrade
            if type_name == "ArrayOfVcAgentUpgradedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVcAgentUpgradedEvent(value))
                })
            } else { None }
        },
        0x7465557067726164 => { // teUpgrad
            if type_name == "ArrayOfTemplateUpgradeEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfTemplateUpgradeEvent(value))
                })
            } else { None }
        },
        0x74697479436f6e66 => { // tityConf
            if type_name == "ArrayOfVAppEntityConfigInfo" {
                Some(|raw| {
                    let value: Vec<VAppEntityConfigInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVAppEntityConfigInfo(value))
                })
            } else { None }
        },
        0x746974794d657472 => { // tityMetr
            if type_name == "ArrayOfPerfEntityMetricBase" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::PerfEntityMetricBaseTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPerfEntityMetricBase(value))
                })
            } else { None }
        },
        0x7475726543617061 => { // tureCapa
            if type_name == "ArrayOfDVSFeatureCapability" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::DvsFeatureCapabilityTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsFeatureCapability(value))
                })
            } else { None }
        },
        0x747946696c746572 => { // tyFilter
            if type_name == "ArrayOfPropertyFilterUpdate" {
                Some(|raw| {
                    let value: Vec<PropertyFilterUpdate> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPropertyFilterUpdate(value))
                })
            } else { None }
        },
        0x7567684c6f676963 => { // ughLogic
            if type_name == "ArrayOfNotEnoughLogicalCpus" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNotEnoughLogicalCpus(value))
                })
            } else { None }
        },
        0x776f726b52756c65 => { // workRule
            if type_name == "ArrayOfDvsNetworkRuleAction" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::DvsNetworkRuleActionTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsNetworkRuleAction(value))
                })
            } else { None }
        },
        0x7870656374656445 => { // xpectedE
            if type_name == "ArrayOfOvfUnexpectedElement" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfUnexpectedElement(value))
                })
            } else { None }
        },
        0x795461736b536368 => { // yTaskSch
            if type_name == "ArrayOfMonthlyTaskScheduler" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::MonthlyTaskSchedulerTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfMonthlyTaskScheduler(value))
                })
            } else { None }
        },
        0x7a65644d6574686f => { // zedMetho
            if type_name == "ArrayOfLocalizedMethodFault" {
                Some(|raw| {
                    let value: Vec<LocalizedMethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfLocalizedMethodFault(value))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_value_deserializer_28(type_name: &str) -> Option<fn(&serde_json::value::RawValue) -> Result<ValueElements, serde_json::Error>> {
    let s = &type_name[14..22];
    let Some(type_ord) = to_u64(s) else {
        return None;
    };
    match type_ord {
        0x41484349436f6e74 => { // AHCICont
            if type_name == "ArrayOfVirtualAHCIController" {
                Some(|raw| {
                    let value: Vec<VirtualAhciController> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualAhciController(value))
                })
            } else { None }
        },
        0x43414d4365727469 => { // CAMCerti
            if type_name == "ArrayOfInvalidCAMCertificate" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInvalidCamCertificate(value))
                })
            } else { None }
        },
        0x436f6d706c69616e => { // Complian
            if type_name == "ArrayOfHostNonCompliantEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostNonCompliantEvent(value))
                })
            } else { None }
        },
        0x436f6e6e65637465 => { // Connecte
            if type_name == "ArrayOfDvsPortConnectedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsPortConnectedEvent(value))
                })
            } else { None }
        },
        0x436f6e6e65637469 => { // Connecti
            if type_name == "ArrayOfHostNfcConnectionInfo" {
                Some(|raw| {
                    let value: Vec<HostNfcConnectionInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostNfcConnectionInfo(value))
                })
            } else { None }
        },
        0x44617341616d486f => { // DasAamHo
            if type_name == "ArrayOfClusterDasAamHostInfo" {
                Some(|raw| {
                    let value: Vec<ClusterDasAamHostInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterDasAamHostInfo(value))
                })
            } else { None }
        },
        0x4461734461746153 => { // DasDataS
            if type_name == "ArrayOfClusterDasDataSummary" {
                Some(|raw| {
                    let value: Vec<ClusterDasDataSummary> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterDasDataSummary(value))
                })
            } else { None }
        },
        0x4461746173746f72 => { // Datastor
            if type_name == "ArrayOfInvalidDatastoreState" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInvalidDatastoreState(value))
                })
            } else { None }
        },
        0x44657374726f7965 => { // Destroye
            if type_name == "ArrayOfClusterDestroyedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterDestroyedEvent(value))
                })
            } else { None }
        },
        0x44697361626c696e => { // Disablin
            if type_name == "ArrayOfHostDasDisablingEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostDasDisablingEvent(value))
                })
            } else { None }
        },
        0x4469736b436f6e66 => { // DiskConf
            if type_name == "ArrayOfVirtualDiskConfigSpec" {
                Some(|raw| {
                    let value: Vec<VirtualDiskConfigSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualDiskConfigSpec(value))
                })
            } else { None }
        },
        0x45646974696f6e4c => { // EditionL
            match type_name {
                "ArrayOfExpiredEditionLicense" => {
                    Some(|raw| {
                        let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfExpiredEditionLicense(value))
                    })
                }
                "ArrayOfInvalidEditionLicense" => {
                    Some(|raw| {
                        let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfInvalidEditionLicense(value))
                    })
                }
                _ => None
            }
        },
        0x456e746974794e6f => { // EntityNo
            if type_name == "ArrayOfLicenseEntityNotFound" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfLicenseEntityNotFound(value))
                })
            } else { None }
        },
        0x466561747572654c => { // FeatureL
            if type_name == "ArrayOfExpiredFeatureLicense" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfExpiredFeatureLicense(value))
                })
            } else { None }
        },
        0x4861726477617265 => { // Hardware
            if type_name == "ArrayOfVirtualHardwareOption" {
                Some(|raw| {
                    let value: Vec<VirtualHardwareOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualHardwareOption(value))
                })
            } else { None }
        },
        0x486f73744572726f => { // HostErro
            if type_name == "ArrayOfGeneralHostErrorEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGeneralHostErrorEvent(value))
                })
            } else { None }
        },
        0x494f524d436f6e66 => { // IORMConf
            if type_name == "ArrayOfStorageIORMConfigSpec" {
                Some(|raw| {
                    let value: Vec<StorageIormConfigSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfStorageIormConfigSpec(value))
                })
            } else { None }
        },
        0x496e436c75737465 => { // InCluste
            if type_name == "ArrayOfHostNotInClusterEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostNotInClusterEvent(value))
                })
            } else { None }
        },
        0x496e746572666163 => { // Interfac
            if type_name == "ArrayOfVMotionInterfaceIssue" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVMotionInterfaceIssue(value))
                })
            } else { None }
        },
        0x49706d694d616341 => { // IpmiMacA
            if type_name == "ArrayOfInvalidIpmiMacAddress" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInvalidIpmiMacAddress(value))
                })
            } else { None }
        },
        0x4b6579626f617264 => { // Keyboard
            if type_name == "ArrayOfVirtualKeyboardOption" {
                Some(|raw| {
                    let value: Vec<VirtualKeyboardOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualKeyboardOption(value))
                })
            } else { None }
        },
        0x4c65617365446576 => { // LeaseDev
            if type_name == "ArrayOfHttpNfcLeaseDeviceUrl" {
                Some(|raw| {
                    let value: Vec<HttpNfcLeaseDeviceUrl> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHttpNfcLeaseDeviceUrl(value))
                })
            } else { None }
        },
        0x4d616368696e654d => { // MachineM
            if type_name == "ArrayOfVirtualMachineMessage" {
                Some(|raw| {
                    let value: Vec<VirtualMachineMessage> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineMessage(value))
                })
            } else { None }
        },
        0x4d616368696e6553 => { // MachineS
            match type_name {
                "ArrayOfVirtualMachineSgxInfo" => {
                    Some(|raw| {
                        let value: Vec<VirtualMachineSgxInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualMachineSgxInfo(value))
                    })
                }
                "ArrayOfVirtualMachineSummary" => {
                    Some(|raw| {
                        let value: Vec<VirtualMachineSummary> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualMachineSummary(value))
                    })
                }
                _ => None
            }
        },
        0x4d616368696e6555 => { // MachineU
            if type_name == "ArrayOfVirtualMachineUsbInfo" {
                Some(|raw| {
                    let value: Vec<VirtualMachineUsbInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineUsbInfo(value))
                })
            } else { None }
        },
        0x4e564d45436f6e74 => { // NVMECont
            if type_name == "ArrayOfVirtualNVMEController" {
                Some(|raw| {
                    let value: Vec<VirtualNvmeController> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualNvmeController(value))
                })
            } else { None }
        },
        0x4e61734372656465 => { // NasCrede
            if type_name == "ArrayOfInvalidNasCredentials" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInvalidNasCredentials(value))
                })
            } else { None }
        },
        0x4f53437261736865 => { // OSCrashe
            if type_name == "ArrayOfVmGuestOSCrashedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmGuestOsCrashedEvent(value))
                })
            } else { None }
        },
        0x4f626a6563744e6f => { // ObjectNo
            if type_name == "ArrayOfManagedObjectNotFound" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfManagedObjectNotFound(value))
                })
            } else { None }
        },
        0x5043495061737374 => { // PCIPasst
            if type_name == "ArrayOfVirtualPCIPassthrough" {
                Some(|raw| {
                    let value: Vec<VirtualPciPassthrough> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualPciPassthrough(value))
                })
            } else { None }
        },
        0x5061737374687275 => { // Passthru
            if type_name == "ArrayOfHostPciPassthruConfig" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::HostPciPassthruConfigTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostPciPassthruConfig(value))
                })
            } else { None }
        },
        0x506f696e74696e67 => { // Pointing
            if type_name == "ArrayOfVirtualPointingDevice" {
                Some(|raw| {
                    let value: Vec<VirtualPointingDevice> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualPointingDevice(value))
                })
            } else { None }
        },
        0x506f6c6963794d65 => { // PolicyMe
            if type_name == "ArrayOfProfilePolicyMetadata" {
                Some(|raw| {
                    let value: Vec<ProfilePolicyMetadata> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfProfilePolicyMetadata(value))
                })
            } else { None }
        },
        0x507265636973696f => { // Precisio
            if type_name == "ArrayOfVirtualPrecisionClock" {
                Some(|raw| {
                    let value: Vec<VirtualPrecisionClock> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualPrecisionClock(value))
                })
            } else { None }
        },
        0x5265636f6d6d656e => { // Recommen
            if type_name == "ArrayOfClusterRecommendation" {
                Some(|raw| {
                    let value: Vec<ClusterRecommendation> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterRecommendation(value))
                })
            } else { None }
        },
        0x5265636f7264696e => { // Recordin
            if type_name == "ArrayOfVmStartRecordingEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmStartRecordingEvent(value))
                })
            } else { None }
        },
        0x52656c6f63617465 => { // Relocate
            if type_name == "ArrayOfVmBeingRelocatedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmBeingRelocatedEvent(value))
                })
            } else { None }
        },
        0x5265706c6179696e => { // Replayin
            if type_name == "ArrayOfVmStartReplayingEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmStartReplayingEvent(value))
                })
            } else { None }
        },
        0x53415441436f6e74 => { // SATACont
            if type_name == "ArrayOfVirtualSATAController" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::VirtualSataControllerTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualSataController(value))
                })
            } else { None }
        },
        0x53435349436f6e74 => { // SCSICont
            if type_name == "ArrayOfVirtualSCSIController" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::VirtualScsiControllerTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualScsiController(value))
                })
            } else { None }
        },
        0x534d456e61626c65 => { // SMEnable
            if type_name == "ArrayOfRemoteTSMEnabledEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfRemoteTsmEnabledEvent(value))
                })
            } else { None }
        },
        0x536e617073686f74 => { // Snapshot
            match type_name {
                "ArrayOfInvalidSnapshotFormat" => {
                    Some(|raw| {
                        let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfInvalidSnapshotFormat(value))
                    })
                }
                "ArrayOfTooManySnapshotLevels" => {
                    Some(|raw| {
                        let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfTooManySnapshotLevels(value))
                    })
                }
                _ => None
            }
        },
        0x536f756e64426c61 => { // SoundBla
            if type_name == "ArrayOfVirtualSoundBlaster16" {
                Some(|raw| {
                    let value: Vec<VirtualSoundBlaster16> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualSoundBlaster16(value))
                })
            } else { None }
        },
        0x5468756d62707269 => { // Thumbpri
            if type_name == "ArrayOfHostSslThumbprintInfo" {
                Some(|raw| {
                    let value: Vec<HostSslThumbprintInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostSslThumbprintInfo(value))
                })
            } else { None }
        },
        0x546f6c6572616e63 => { // Toleranc
            if type_name == "ArrayOfVmFaultToleranceIssue" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmFaultToleranceIssue(value))
                })
            } else { None }
        },
        0x556e626c6f636b65 => { // Unblocke
            if type_name == "ArrayOfDvsPortUnblockedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsPortUnblockedEvent(value))
                })
            } else { None }
        },
        0x56616c75654e6f74 => { // ValueNot
            if type_name == "ArrayOfOvfHostValueNotParsed" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfHostValueNotParsed(value))
                })
            } else { None }
        },
        0x56696f6c6174696f => { // Violatio
            if type_name == "ArrayOfDrsRuleViolationEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDrsRuleViolationEvent(value))
                })
            } else { None }
        },
        0x566d486f73745275 => { // VmHostRu
            if type_name == "ArrayOfClusterVmHostRuleInfo" {
                Some(|raw| {
                    let value: Vec<ClusterVmHostRuleInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterVmHostRuleInfo(value))
                })
            } else { None }
        },
        0x566d5761726e696e => { // VmWarnin
            if type_name == "ArrayOfGeneralVmWarningEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGeneralVmWarningEvent(value))
                })
            } else { None }
        },
        0x566f6c756d655573 => { // VolumeUs
            if type_name == "ArrayOfHostNasVolumeUserInfo" {
                Some(|raw| {
                    let value: Vec<HostNasVolumeUserInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostNasVolumeUserInfo(value))
                })
            } else { None }
        },
        0x6144657669636542 => { // aDeviceB
            if type_name == "ArrayOfHostRdmaDeviceBacking" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::HostRdmaDeviceBackingTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostRdmaDeviceBacking(value))
                })
            } else { None }
        },
        0x61696c4661696c65 => { // ailFaile
            if type_name == "ArrayOfAlarmEmailFailedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfAlarmEmailFailedEvent(value))
                })
            } else { None }
        },
        0x616e4e6f74537570 => { // anNotSup
            if type_name == "ArrayOfWakeOnLanNotSupported" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfWakeOnLanNotSupported(value))
                })
            } else { None }
        },
        0x6174654661696c65 => { // ateFaile
            if type_name == "ArrayOfVmRelocateFailedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmRelocateFailedEvent(value))
                })
            } else { None }
        },
        0x6174696f6e42756c => { // ationBul
            if type_name == "ArrayOfDvsOperationBulkFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsOperationBulkFault(value))
                })
            } else { None }
        },
        0x6261636b43617061 => { // backCapa
            if type_name == "ArrayOfDVSRollbackCapability" {
                Some(|raw| {
                    let value: Vec<DvsRollbackCapability> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsRollbackCapability(value))
                })
            } else { None }
        },
        0x62657252756e7469 => { // berRunti
            if type_name == "ArrayOfHostMemberRuntimeInfo" {
                Some(|raw| {
                    let value: Vec<HostMemberRuntimeInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostMemberRuntimeInfo(value))
                })
            } else { None }
        },
        0x63654c696d697452 => { // ceLimitR
            if type_name == "ArrayOfNamespaceLimitReached" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNamespaceLimitReached(value))
                })
            } else { None }
        },
        0x636f6e6e65637465 => { // connecte
            if type_name == "ArrayOfHostDisconnectedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostDisconnectedEvent(value))
                })
            } else { None }
        },
        0x6446726f6d506174 => { // dFromPat
            if type_name == "ArrayOfVmReloadFromPathEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmReloadFromPathEvent(value))
                })
            } else { None }
        },
        0x6452656c61796f75 => { // dRelayou
            if type_name == "ArrayOfVmFailedRelayoutEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmFailedRelayoutEvent(value))
                })
            } else { None }
        },
        0x6461727941646465 => { // daryAdde
            if type_name == "ArrayOfVmSecondaryAddedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmSecondaryAddedEvent(value))
                })
            } else { None }
        },
        0x646174654572726f => { // dateErro
            if type_name == "ArrayOfVmDasUpdateErrorEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmDasUpdateErrorEvent(value))
                })
            } else { None }
        },
        0x64617465486f7374 => { // dateHost
            match type_name {
                "ArrayOfOvfValidateHostParams" => {
                    Some(|raw| {
                        let value: Vec<OvfValidateHostParams> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfOvfValidateHostParams(value))
                    })
                }
                "ArrayOfOvfValidateHostResult" => {
                    Some(|raw| {
                        let value: Vec<OvfValidateHostResult> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfOvfValidateHostResult(value))
                    })
                }
                _ => None
            }
        },
        0x65486f7374496e43 => { // eHostInC
            if type_name == "ArrayOfNoActiveHostInCluster" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNoActiveHostInCluster(value))
                })
            } else { None }
        },
        0x6555706772616465 => { // eUpgrade
            if type_name == "ArrayOfTemplateUpgradedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfTemplateUpgradedEvent(value))
                })
            } else { None }
        },
        0x6556696f6c617465 => { // eViolate
            if type_name == "ArrayOfResourceViolatedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfResourceViolatedEvent(value))
                })
            } else { None }
        },
        0x6563746564446576 => { // ectedDev
            if type_name == "ArrayOfOvfConnectedDeviceIso" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfConnectedDeviceIso(value))
                })
            } else { None }
        },
        0x6572536561726368 => { // erSearch
            if type_name == "ArrayOfPosixUserSearchResult" {
                Some(|raw| {
                    let value: Vec<PosixUserSearchResult> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPosixUserSearchResult(value))
                })
            } else { None }
        },
        0x6572696353656e73 => { // ericSens
            if type_name == "ArrayOfHostNumericSensorInfo" {
                Some(|raw| {
                    let value: Vec<HostNumericSensorInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostNumericSensorInfo(value))
                })
            } else { None }
        },
        0x66696c65436f6e66 => { // fileConf
            match type_name {
                "ArrayOfHostProfileConfigInfo" => {
                    Some(|raw| {
                        let value: Vec<HostProfileConfigInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostProfileConfigInfo(value))
                    })
                }
                "ArrayOfHostProfileConfigSpec" => {
                    Some(|raw| {
                        let value: Vec<Box<dyn super::traits::HostProfileConfigSpecTrait>> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostProfileConfigSpec(value))
                    })
                }
                _ => None
            }
        },
        0x674b65795265636f => { // gKeyReco
            if type_name == "ArrayOfGuestRegKeyRecordSpec" {
                Some(|raw| {
                    let value: Vec<GuestRegKeyRecordSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGuestRegKeyRecordSpec(value))
                })
            } else { None }
        },
        0x6753746f7265546f => { // gStoreTo
            if type_name == "ArrayOfHostPlugStoreTopology" {
                Some(|raw| {
                    let value: Vec<HostPlugStoreTopology> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostPlugStoreTopology(value))
                })
            } else { None }
        },
        0x6756616c75654461 => { // gValueDa
            if type_name == "ArrayOfGuestRegValueDataSpec" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::GuestRegValueDataSpecTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGuestRegValueDataSpec(value))
                })
            } else { None }
        },
        0x6756616c75654e61 => { // gValueNa
            if type_name == "ArrayOfGuestRegValueNameSpec" {
                Some(|raw| {
                    let value: Vec<GuestRegValueNameSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGuestRegValueNameSpec(value))
                })
            } else { None }
        },
        0x6765417661696c61 => { // geAvaila
            if type_name == "ArrayOfPrivilegeAvailability" {
                Some(|raw| {
                    let value: Vec<PrivilegeAvailability> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPrivilegeAvailability(value))
                })
            } else { None }
        },
        0x67655761726e696e => { // geWarnin
            if type_name == "ArrayOfVmMessageWarningEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmMessageWarningEvent(value))
                })
            } else { None }
        },
        0x6769737472794b65 => { // gistryKe
            if type_name == "ArrayOfGuestRegistryKeyFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGuestRegistryKeyFault(value))
                })
            } else { None }
        },
        0x677261646543616e => { // gradeCan
            if type_name == "ArrayOfToolsUpgradeCancelled" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfToolsUpgradeCancelled(value))
                })
            } else { None }
        },
        0x694469736b506172 => { // iDiskPar
            if type_name == "ArrayOfHostScsiDiskPartition" {
                Some(|raw| {
                    let value: Vec<HostScsiDiskPartition> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostScsiDiskPartition(value))
                })
            } else { None }
        },
        0x69616c4174746163 => { // ialAttac
            if type_name == "ArrayOfHostSerialAttachedHba" {
                Some(|raw| {
                    let value: Vec<HostSerialAttachedHba> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostSerialAttachedHba(value))
                })
            } else { None }
        },
        0x69636174696f6e50 => { // icationP
            if type_name == "ArrayOfAuthenticationProfile" {
                Some(|raw| {
                    let value: Vec<AuthenticationProfile> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfAuthenticationProfile(value))
                })
            } else { None }
        },
        0x6963656e73654461 => { // icenseDa
            if type_name == "CustomizationLicenseDataMode" {
                Some(|raw| {
                    let value: super::enums::CustomizationLicenseDataModeEnum = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::CustomizationLicenseDataMode(value))
                })
            } else { None }
        },
        0x6963794368616e67 => { // icyChang
            if type_name == "ArrayOfVsanPolicyChangeBatch" {
                Some(|raw| {
                    let value: Vec<VsanPolicyChangeBatch> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVsanPolicyChangeBatch(value))
                })
            } else { None }
        },
        0x6967676572696e67 => { // iggering
            if type_name == "ArrayOfAlarmTriggeringAction" {
                Some(|raw| {
                    let value: Vec<AlarmTriggeringAction> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfAlarmTriggeringAction(value))
                })
            } else { None }
        },
        0x696c655175657279 => { // ileQuery
            if type_name == "ArrayOfVmDiskFileQueryFilter" {
                Some(|raw| {
                    let value: Vec<VmDiskFileQueryFilter> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmDiskFileQueryFilter(value))
                })
            } else { None }
        },
        0x696c655374617475 => { // ileStatu
            if type_name == "ArrayOfAnswerFileStatusError" {
                Some(|raw| {
                    let value: Vec<AnswerFileStatusError> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfAnswerFileStatusError(value))
                })
            } else { None }
        },
        0x696e44697361626c => { // inDisabl
            if type_name == "ArrayOfHostAdminDisableEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostAdminDisableEvent(value))
                })
            } else { None }
        },
        0x696e53657373696f => { // inSessio
            if type_name == "ArrayOfUserLoginSessionEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfUserLoginSessionEvent(value))
                })
            } else { None }
        },
        0x696f6e4b65795265 => { // ionKeyRe
            if type_name == "ArrayOfEncryptionKeyRequired" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfEncryptionKeyRequired(value))
                })
            } else { None }
        },
        0x697361626c65536e => { // isableSn
            if type_name == "ArrayOfCannotDisableSnapshot" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCannotDisableSnapshot(value))
                })
            } else { None }
        },
        0x6b44696d656e7369 => { // kDimensi
            match type_name {
                "ArrayOfHostDiskDimensionsChs" => {
                    Some(|raw| {
                        let value: Vec<HostDiskDimensionsChs> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostDiskDimensionsChs(value))
                    })
                }
                "ArrayOfHostDiskDimensionsLba" => {
                    Some(|raw| {
                        let value: Vec<HostDiskDimensionsLba> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostDiskDimensionsLba(value))
                    })
                }
                _ => None
            }
        },
        0x6b4d617070696e67 => { // kMapping
            if type_name == "ArrayOfHostDiskMappingOption" {
                Some(|raw| {
                    let value: Vec<HostDiskMappingOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostDiskMappingOption(value))
                })
            } else { None }
        },
        0x6b50617274697469 => { // kPartiti
            match type_name {
                "ArrayOfHostDiskPartitionInfo" => {
                    Some(|raw| {
                        let value: Vec<HostDiskPartitionInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostDiskPartitionInfo(value))
                    })
                }
                "ArrayOfHostDiskPartitionSpec" => {
                    Some(|raw| {
                        let value: Vec<HostDiskPartitionSpec> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostDiskPartitionSpec(value))
                    })
                }
                _ => None
            }
        },
        0x6c61726d45787072 => { // larmExpr
            if type_name == "ArrayOfMetricAlarmExpression" {
                Some(|raw| {
                    let value: Vec<MetricAlarmExpression> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfMetricAlarmExpression(value))
                })
            } else { None }
        },
        0x6c65546f4578706f => { // leToExpo
            if type_name == "ArrayOfOvfUnableToExportDisk" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfUnableToExportDisk(value))
                })
            } else { None }
        },
        0x6c6f625265616446 => { // lobReadF
            if type_name == "ArrayOfBackupBlobReadFailure" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfBackupBlobReadFailure(value))
                })
            } else { None }
        },
        0x6c74657253706563 => { // lterSpec
            if type_name == "ArrayOfEventFilterSpecByTime" {
                Some(|raw| {
                    let value: Vec<EventFilterSpecByTime> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfEventFilterSpecByTime(value))
                })
            } else { None }
        },
        0x6c7469706c654d61 => { // ltipleMa
            if type_name == "ArrayOfGuestMultipleMappings" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGuestMultipleMappings(value))
                })
            } else { None }
        },
        0x6e61726965734e6f => { // nariesNo
            if type_name == "ArrayOfPatchBinariesNotFound" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPatchBinariesNotFound(value))
                })
            } else { None }
        },
        0x6e74416666696e69 => { // ntAffini
            if type_name == "ArrayOfPlacementAffinityRule" {
                Some(|raw| {
                    let value: Vec<PlacementAffinityRule> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPlacementAffinityRule(value))
                })
            } else { None }
        },
        0x6f6c6c6564426163 => { // olledBac
            if type_name == "ArrayOfVmDateRolledBackEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmDateRolledBackEvent(value))
                })
            } else { None }
        },
        0x6f6d6d616e64456e => { // ommandEn
            if type_name == "ArrayOfSimpleCommandEncoding" {
                Some(|raw| {
                    let value: Vec<super::enums::SimpleCommandEncodingEnum> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfSimpleCommandEncoding(value))
                })
            } else { None }
        },
        0x6f6e5265736f7572 => { // onResour
            if type_name == "ArrayOfExtensionResourceInfo" {
                Some(|raw| {
                    let value: Vec<ExtensionResourceInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfExtensionResourceInfo(value))
                })
            } else { None }
        },
        0x6f6e5461736b5479 => { // onTaskTy
            if type_name == "ArrayOfExtensionTaskTypeInfo" {
                Some(|raw| {
                    let value: Vec<ExtensionTaskTypeInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfExtensionTaskTypeInfo(value))
                })
            } else { None }
        },
        0x6f6e5761726e696e => { // onWarnin
            if type_name == "ArrayOfMigrationWarningEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfMigrationWarningEvent(value))
                })
            } else { None }
        },
        0x6f72416464726573 => { // orAddres
            if type_name == "ArrayOfCollectorAddressUnset" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCollectorAddressUnset(value))
                })
            } else { None }
        },
        0x6f72746564486f73 => { // ortedHos
            if type_name == "ArrayOfNotSupportedHostInDvs" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNotSupportedHostInDvs(value))
                })
            } else { None }
        },
        0x6f744661696c7572 => { // otFailur
            if type_name == "ArrayOfIScsiBootFailureEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfIScsiBootFailureEvent(value))
                })
            } else { None }
        },
        0x6f757465436f6e66 => { // outeConf
            if type_name == "ArrayOfHostIpRouteConfigSpec" {
                Some(|raw| {
                    let value: Vec<HostIpRouteConfigSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostIpRouteConfigSpec(value))
                })
            } else { None }
        },
        0x7053657276696365 => { // pService
            if type_name == "ArrayOfHostDhcpServiceConfig" {
                Some(|raw| {
                    let value: Vec<HostDhcpServiceConfig> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostDhcpServiceConfig(value))
                })
            } else { None }
        },
        0x7065634465657052 => { // pecDeepR
            if type_name == "ArrayOfCryptoSpecDeepRecrypt" {
                Some(|raw| {
                    let value: Vec<CryptoSpecDeepRecrypt> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCryptoSpecDeepRecrypt(value))
                })
            } else { None }
        },
        0x70656e64656e6379 => { // pendency
            if type_name == "ArrayOfIscsiDependencyEntity" {
                Some(|raw| {
                    let value: Vec<IscsiDependencyEntity> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfIscsiDependencyEntity(value))
                })
            } else { None }
        },
        0x70706f7274656445 => { // pportedE
            if type_name == "ArrayOfOvfUnsupportedElement" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfUnsupportedElement(value))
                })
            } else { None }
        },
        0x70706f7274656450 => { // pportedP
            if type_name == "ArrayOfOvfUnsupportedPackage" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfUnsupportedPackage(value))
                })
            } else { None }
        },
        0x70706f7274656453 => { // pportedS
            match type_name {
                "ArrayOfOvfUnsupportedSection" => {
                    Some(|raw| {
                        let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfOvfUnsupportedSection(value))
                    })
                }
                "ArrayOfOvfUnsupportedSubType" => {
                    Some(|raw| {
                        let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfOvfUnsupportedSubType(value))
                    })
                }
                _ => None
            }
        },
        0x7175654e6574776f => { // queNetwo
            if type_name == "ArrayOfHostOpaqueNetworkInfo" {
                Some(|raw| {
                    let value: Vec<HostOpaqueNetworkInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostOpaqueNetworkInfo(value))
                })
            } else { None }
        },
        0x724c6576656c5265 => { // rLevelRe
            if type_name == "ArrayOfFailoverLevelRestored" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfFailoverLevelRestored(value))
                })
            } else { None }
        },
        0x7261676544657669 => { // rageDevi
            if type_name == "ArrayOfHostStorageDeviceInfo" {
                Some(|raw| {
                    let value: Vec<HostStorageDeviceInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostStorageDeviceInfo(value))
                })
            } else { None }
        },
        0x726552656e616d65 => { // reRename
            if type_name == "ArrayOfDatastoreRenamedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDatastoreRenamedEvent(value))
                })
            } else { None }
        },
        0x7265616479496e73 => { // readyIns
            if type_name == "ArrayOfPatchAlreadyInstalled" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPatchAlreadyInstalled(value))
                })
            } else { None }
        },
        0x7265645469636b65 => { // redTicke
            if type_name == "ArrayOfVmAcquiredTicketEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmAcquiredTicketEvent(value))
                })
            } else { None }
        },
        0x726d697373696f6e => { // rmission
            if type_name == "ArrayOfGuestPermissionDenied" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGuestPermissionDenied(value))
                })
            } else { None }
        },
        0x726f7570436f6e66 => { // roupConf
            match type_name {
                "ArrayOfDVPortgroupConfigInfo" => {
                    Some(|raw| {
                        let value: Vec<DvPortgroupConfigInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfDvPortgroupConfigInfo(value))
                    })
                }
                "ArrayOfDVPortgroupConfigSpec" => {
                    Some(|raw| {
                        let value: Vec<DvPortgroupConfigSpec> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfDvPortgroupConfigSpec(value))
                    })
                }
                _ => None
            }
        },
        0x7365744661696c65 => { // setFaile
            if type_name == "ArrayOfVmDasResetFailedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmDasResetFailedEvent(value))
                })
            } else { None }
        },
        0x7369626c65446174 => { // sibleDat
            if type_name == "ArrayOfInaccessibleDatastore" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInaccessibleDatastore(value))
                })
            } else { None }
        },
        0x7374506f7274436f => { // stPortCo
            if type_name == "ArrayOfVspanDestPortConflict" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVspanDestPortConflict(value))
                })
            } else { None }
        },
        0x7374656d43617061 => { // stemCapa
            if type_name == "ArrayOfPowerSystemCapability" {
                Some(|raw| {
                    let value: Vec<PowerSystemCapability> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPowerSystemCapability(value))
                })
            } else { None }
        },
        0x73746572436f6e66 => { // sterConf
            match type_name {
                "ArrayOfVchaClusterConfigInfo" => {
                    Some(|raw| {
                        let value: Vec<VchaClusterConfigInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVchaClusterConfigInfo(value))
                    })
                }
                "ArrayOfVsanClusterConfigInfo" => {
                    Some(|raw| {
                        let value: Vec<VsanClusterConfigInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVsanClusterConfigInfo(value))
                    })
                }
                "ArrayOfVchaClusterConfigSpec" => {
                    Some(|raw| {
                        let value: Vec<VchaClusterConfigSpec> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVchaClusterConfigSpec(value))
                    })
                }
                _ => None
            }
        },
        0x74436c7573746572 => { // tCluster
            if type_name == "ArrayOfVsanHostClusterStatus" {
                Some(|raw| {
                    let value: Vec<VsanHostClusterStatus> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVsanHostClusterStatus(value))
                })
            } else { None }
        },
        0x744469736b4d6170 => { // tDiskMap
            if type_name == "ArrayOfVsanHostDiskMapResult" {
                Some(|raw| {
                    let value: Vec<VsanHostDiskMapResult> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVsanHostDiskMapResult(value))
                })
            } else { None }
        },
        0x7461646174614e6f => { // tadataNo
            if type_name == "ArrayOfPatchMetadataNotFound" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPatchMetadataNotFound(value))
                })
            } else { None }
        },
        0x7465506f6c696379 => { // tePolicy
            if type_name == "ArrayOfCompositePolicyOption" {
                Some(|raw| {
                    let value: Vec<CompositePolicyOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCompositePolicyOption(value))
                })
            } else { None }
        },
        0x74684e616d656453 => { // thNamedS
            if type_name == "ArrayOfGuestAuthNamedSubject" {
                Some(|raw| {
                    let value: Vec<GuestAuthNamedSubject> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGuestAuthNamedSubject(value))
                })
            } else { None }
        },
        0x7469626c65446174 => { // tibleDat
            if type_name == "ArrayOfNoCompatibleDatastore" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNoCompatibleDatastore(value))
                })
            } else { None }
        },
        0x74696f6e436f6e66 => { // tionConf
            if type_name == "ArrayOfReplicationConfigSpec" {
                Some(|raw| {
                    let value: Vec<ReplicationConfigSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfReplicationConfigSpec(value))
                })
            } else { None }
        },
        0x74696f6e53776974 => { // tionSwit
            if type_name == "ArrayOfDestinationSwitchFull" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDestinationSwitchFull(value))
                })
            } else { None }
        },
        0x746970617468496e => { // tipathIn
            if type_name == "ArrayOfHostMultipathInfoPath" {
                Some(|raw| {
                    let value: Vec<HostMultipathInfoPath> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostMultipathInfoPath(value))
                })
            } else { None }
        },
        0x7475616c53776974 => { // tualSwit
            if type_name == "ArrayOfHostVirtualSwitchSpec" {
                Some(|raw| {
                    let value: Vec<HostVirtualSwitchSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostVirtualSwitchSpec(value))
                })
            } else { None }
        },
        0x7475726543617061 => { // tureCapa
            if type_name == "ArrayOfHostFeatureCapability" {
                Some(|raw| {
                    let value: Vec<HostFeatureCapability> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostFeatureCapability(value))
                })
            } else { None }
        },
        0x756c74496e76616c => { // ultInval
            if type_name == "ArrayOfIscsiFaultInvalidVnic" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfIscsiFaultInvalidVnic(value))
                })
            } else { None }
        },
        0x756d65724f766653 => { // umerOvfS
            if type_name == "ArrayOfOvfConsumerOvfSection" {
                Some(|raw| {
                    let value: Vec<OvfConsumerOvfSection> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfConsumerOvfSection(value))
                })
            } else { None }
        },
        0x7879537769746368 => { // xySwitch
            if type_name == "ArrayOfHostProxySwitchConfig" {
                Some(|raw| {
                    let value: Vec<HostProxySwitchConfig> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostProxySwitchConfig(value))
                })
            } else { None }
        },
        0x7a6174696f6e5061 => { // zationPa
            if type_name == "ArrayOfCustomizationPassword" {
                Some(|raw| {
                    let value: Vec<CustomizationPassword> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCustomizationPassword(value))
                })
            } else { None }
        },
        0x7a6174696f6e5370 => { // zationSp
            match type_name {
                "ArrayOfCustomizationSpecInfo" => {
                    Some(|raw| {
                        let value: Vec<CustomizationSpecInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfCustomizationSpecInfo(value))
                    })
                }
                "ArrayOfCustomizationSpecItem" => {
                    Some(|raw| {
                        let value: Vec<CustomizationSpecItem> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfCustomizationSpecItem(value))
                    })
                }
                _ => None
            }
        },
        0x7a6174696f6e5573 => { // zationUs
            if type_name == "ArrayOfCustomizationUserData" {
                Some(|raw| {
                    let value: Vec<CustomizationUserData> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCustomizationUserData(value))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_value_deserializer_29(type_name: &str) -> Option<fn(&serde_json::value::RawValue) -> Result<ValueElements, serde_json::Error>> {
    let s = &type_name[13..21];
    let Some(type_ord) = to_u64(s) else {
        return None;
    };
    match type_ord {
        0x426c6f6257726974 => { // BlobWrit
            if type_name == "ArrayOfBackupBlobWriteFailure" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfBackupBlobWriteFailure(value))
                })
            } else { None }
        },
        0x44565350766c616e => { // DVSPvlan
            if type_name == "ArrayOfVMwareDVSPvlanMapEntry" {
                Some(|raw| {
                    let value: Vec<VMwareDvsPvlanMapEntry> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVMwareDvsPvlanMapEntry(value))
                })
            } else { None }
        },
        0x4465637279707450 => { // DecryptP
            if type_name == "ArrayOfCannotDecryptPasswords" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCannotDecryptPasswords(value))
                })
            } else { None }
        },
        0x4469726563746f72 => { // Director
            if type_name == "ArrayOfActiveDirectoryProfile" {
                Some(|raw| {
                    let value: Vec<ActiveDirectoryProfile> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfActiveDirectoryProfile(value))
                })
            } else { None }
        },
        0x4476734470754361 => { // DvsDpuCa
            if type_name == "ArrayOfVMwareDvsDpuCapability" {
                Some(|raw| {
                    let value: Vec<VMwareDvsDpuCapability> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVMwareDvsDpuCapability(value))
                })
            } else { None }
        },
        0x4476734c61637047 => { // DvsLacpG
            if type_name == "ArrayOfVMwareDvsLacpGroupSpec" {
                Some(|raw| {
                    let value: Vec<VMwareDvsLacpGroupSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVMwareDvsLacpGroupSpec(value))
                })
            } else { None }
        },
        0x4476734c6167566c => { // DvsLagVl
            if type_name == "ArrayOfVMwareDvsLagVlanConfig" {
                Some(|raw| {
                    let value: Vec<VMwareDvsLagVlanConfig> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVMwareDvsLagVlanConfig(value))
                })
            } else { None }
        },
        0x4476734d74754361 => { // DvsMtuCa
            if type_name == "ArrayOfVMwareDvsMtuCapability" {
                Some(|raw| {
                    let value: Vec<VMwareDvsMtuCapability> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVMwareDvsMtuCapability(value))
                })
            } else { None }
        },
        0x4661696c6564486f => { // FailedHo
            if type_name == "ArrayOfFolderFailedHostResult" {
                Some(|raw| {
                    let value: Vec<FolderFailedHostResult> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfFolderFailedHostResult(value))
                })
            } else { None }
        },
        0x4669656c64537472 => { // FieldStr
            if type_name == "ArrayOfCustomFieldStringValue" {
                Some(|raw| {
                    let value: Vec<CustomFieldStringValue> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCustomFieldStringValue(value))
                })
            } else { None }
        },
        0x46696c6553746174 => { // FileStat
            if type_name == "ArrayOfAnswerFileStatusResult" {
                Some(|raw| {
                    let value: Vec<AnswerFileStatusResult> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfAnswerFileStatusResult(value))
                })
            } else { None }
        },
        0x46696c6555706461 => { // FileUpda
            if type_name == "ArrayOfAnswerFileUpdateFailed" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfAnswerFileUpdateFailed(value))
                })
            } else { None }
        },
        0x4865617274626561 => { // Heartbea
            if type_name == "AutoStartWaitHeartbeatSetting" {
                Some(|raw| {
                    let value: super::enums::AutoStartWaitHeartbeatSettingEnum = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::AutoStartWaitHeartbeatSetting(value))
                })
            } else { None }
        },
        0x4970506f6f6c436f => { // IpPoolCo
            if type_name == "ArrayOfIpPoolIpPoolConfigInfo" {
                Some(|raw| {
                    let value: Vec<IpPoolIpPoolConfigInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfIpPoolIpPoolConfigInfo(value))
                })
            } else { None }
        },
        0x4d616e6167656d65 => { // Manageme
            if type_name == "ArrayOfDVSMacManagementPolicy" {
                Some(|raw| {
                    let value: Vec<DvsMacManagementPolicy> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsMacManagementPolicy(value))
                })
            } else { None }
        },
        0x4e616d6573706163 => { // Namespac
            if type_name == "ArrayOfNvdimmNamespaceDetails" {
                Some(|raw| {
                    let value: Vec<NvdimmNamespaceDetails> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNvdimmNamespaceDetails(value))
                })
            } else { None }
        },
        0x4e6f74496e557067 => { // NotInUpg
            if type_name == "ArrayOfSwitchNotInUpgradeMode" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfSwitchNotInUpgradeMode(value))
                })
            } else { None }
        },
        0x506c75674e6f7453 => { // PlugNotS
            if type_name == "ArrayOfCpuHotPlugNotSupported" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCpuHotPlugNotSupported(value))
                })
            } else { None }
        },
        0x526f757465546162 => { // RouteTab
            if type_name == "ArrayOfHostIpRouteTableConfig" {
                Some(|raw| {
                    let value: Vec<HostIpRouteTableConfig> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostIpRouteTableConfig(value))
                })
            } else { None }
        },
        0x53697a654e6f7453 => { // SizeNotS
            if type_name == "ArrayOfMemorySizeNotSupported" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfMemorySizeNotSupported(value))
                })
            } else { None }
        },
        0x5374616e6462794d => { // StandbyM
            if type_name == "ArrayOfExitedStandbyModeEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfExitedStandbyModeEvent(value))
                })
            } else { None }
        },
        0x55706c696e6b4c61 => { // UplinkLa
            if type_name == "ArrayOfVMwareUplinkLacpPolicy" {
                Some(|raw| {
                    let value: Vec<VMwareUplinkLacpPolicy> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVMwareUplinkLacpPolicy(value))
                })
            } else { None }
        },
        0x616465436f6d706c => { // adeCompl
            if type_name == "ArrayOfVmUpgradeCompleteEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmUpgradeCompleteEvent(value))
                })
            } else { None }
        },
        0x61676572436f6d6d => { // agerComm
            if type_name == "ArrayOfOvfManagerCommonParams" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::OvfManagerCommonParamsTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfManagerCommonParams(value))
                })
            } else { None }
        },
        0x6172794661696c6f => { // aryFailo
            if type_name == "ArrayOfVmPrimaryFailoverEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmPrimaryFailoverEvent(value))
                })
            } else { None }
        },
        0x6174696f6e436f6e => { // ationCon
            if type_name == "ArrayOfReplicationConfigFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfReplicationConfigFault(value))
                })
            } else { None }
        },
        0x6174757265566572 => { // atureVer
            if type_name == "ArrayOfHostFeatureVersionInfo" {
                Some(|raw| {
                    let value: Vec<HostFeatureVersionInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostFeatureVersionInfo(value))
                })
            } else { None }
        },
        0x617475734368616e => { // atusChan
            if type_name == "ArrayOfHostStatusChangedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostStatusChangedEvent(value))
                })
            } else { None }
        },
        0x61756c74566e6963 => { // aultVnic
            match type_name {
                "ArrayOfIscsiFaultVnicNotBound" => {
                    Some(|raw| {
                        let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfIscsiFaultVnicNotBound(value))
                    })
                }
                "ArrayOfIscsiFaultVnicNotFound" => {
                    Some(|raw| {
                        let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfIscsiFaultVnicNotFound(value))
                    })
                }
                _ => None
            }
        },
        0x6275746564566972 => { // butedVir
            if type_name == "ArrayOfDistributedVirtualPort" {
                Some(|raw| {
                    let value: Vec<DistributedVirtualPort> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDistributedVirtualPort(value))
                })
            } else { None }
        },
        0x634661696c757265 => { // cFailure
            if type_name == "ArrayOfHostNicFailureCriteria" {
                Some(|raw| {
                    let value: Vec<HostNicFailureCriteria> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostNicFailureCriteria(value))
                })
            } else { None }
        },
        0x634c65617365536f => { // cLeaseSo
            if type_name == "ArrayOfHttpNfcLeaseSourceFile" {
                Some(|raw| {
                    let value: Vec<HttpNfcLeaseSourceFile> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHttpNfcLeaseSourceFile(value))
                })
            } else { None }
        },
        0x6352656375727369 => { // cRecursi
            if type_name == "TaskFilterSpecRecursionOption" {
                Some(|raw| {
                    let value: super::enums::TaskFilterSpecRecursionOptionEnum = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::TaskFilterSpecRecursionOption(value))
                })
            } else { None }
        },
        0x6365416c6c6f6361 => { // ceAlloca
            if type_name == "ArrayOfResourceAllocationInfo" {
                Some(|raw| {
                    let value: Vec<ResourceAllocationInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfResourceAllocationInfo(value))
                })
            } else { None }
        },
        0x6365506f6f6c4d6f => { // cePoolMo
            if type_name == "ArrayOfResourcePoolMovedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfResourcePoolMovedEvent(value))
                })
            } else { None }
        },
        0x6365506f6f6c5175 => { // cePoolQu
            if type_name == "ArrayOfResourcePoolQuickStats" {
                Some(|raw| {
                    let value: Vec<ResourcePoolQuickStats> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfResourcePoolQuickStats(value))
                })
            } else { None }
        },
        0x63656e7365436f6e => { // censeCon
            if type_name == "ArrayOfHostLicenseConnectInfo" {
                Some(|raw| {
                    let value: Vec<HostLicenseConnectInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostLicenseConnectInfo(value))
                })
            } else { None }
        },
        0x63657373436f6e74 => { // cessCont
            if type_name == "ArrayOfHostAccessControlEntry" {
                Some(|raw| {
                    let value: Vec<HostAccessControlEntry> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostAccessControlEntry(value))
                })
            } else { None }
        },
        0x636b6e6f776c6564 => { // cknowled
            if type_name == "ArrayOfAlarmAcknowledgedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfAlarmAcknowledgedEvent(value))
                })
            } else { None }
        },
        0x6372697074466169 => { // criptFai
            if type_name == "ArrayOfAlarmScriptFailedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfAlarmScriptFailedEvent(value))
                })
            } else { None }
        },
        0x644465766963654f => { // dDeviceO
            if type_name == "ArrayOfInvalidDeviceOperation" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInvalidDeviceOperation(value))
                })
            } else { None }
        },
        0x644e6574776f726b => { // dNetwork
            if type_name == "ArrayOfInvalidNetworkResource" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInvalidNetworkResource(value))
                })
            } else { None }
        },
        0x644f626a65637452 => { // dObjectR
            if type_name == "ArrayOfManagedObjectReference" {
                Some(|raw| {
                    let value: Vec<ManagedObjectReference> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfManagedObjectReference(value))
                })
            } else { None }
        },
        0x646174614d616e61 => { // dataMana
            if type_name == "ArrayOfVmMetadataManagerFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmMetadataManagerFault(value))
                })
            } else { None }
        },
        0x654173736f636961 => { // eAssocia
            if type_name == "ArrayOfProfileAssociatedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfProfileAssociatedEvent(value))
                })
            } else { None }
        },
        0x65436f6d706c6961 => { // eComplia
            if type_name == "ArrayOfDrsRuleComplianceEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDrsRuleComplianceEvent(value))
                })
            } else { None }
        },
        0x65436f6e6e656374 => { // eConnect
            if type_name == "VirtualMachineConnectionState" {
                Some(|raw| {
                    let value: super::enums::VirtualMachineConnectionStateEnum = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::VirtualMachineConnectionState(value))
                })
            } else { None }
        },
        0x6544727344697361 => { // eDrsDisa
            if type_name == "ArrayOfStorageDrsDisabledOnVm" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfStorageDrsDisabledOnVm(value))
                })
            } else { None }
        },
        0x65447273566d436f => { // eDrsVmCo
            match type_name {
                "ArrayOfStorageDrsVmConfigInfo" => {
                    Some(|raw| {
                        let value: Vec<StorageDrsVmConfigInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfStorageDrsVmConfigInfo(value))
                    })
                }
                "ArrayOfStorageDrsVmConfigSpec" => {
                    Some(|raw| {
                        let value: Vec<StorageDrsVmConfigSpec> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfStorageDrsVmConfigSpec(value))
                    })
                }
                _ => None
            }
        },
        0x65496c6c6567616c => { // eIllegal
            if type_name == "ArrayOfEVCModeIllegalByVendor" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfEvcModeIllegalByVendor(value))
                })
            } else { None }
        },
        0x654d696772617469 => { // eMigrati
            if type_name == "ArrayOfStorageMigrationAction" {
                Some(|raw| {
                    let value: Vec<StorageMigrationAction> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfStorageMigrationAction(value))
                })
            } else { None }
        },
        0x654e6f64654e6574 => { // eNodeNet
            if type_name == "ArrayOfPassiveNodeNetworkSpec" {
                Some(|raw| {
                    let value: Vec<PassiveNodeNetworkSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPassiveNodeNetworkSpec(value))
                })
            } else { None }
        },
        0x65506c6163656d65 => { // ePlaceme
            match type_name {
                "ArrayOfStoragePlacementAction" => {
                    Some(|raw| {
                        let value: Vec<StoragePlacementAction> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfStoragePlacementAction(value))
                    })
                }
                "ArrayOfStoragePlacementResult" => {
                    Some(|raw| {
                        let value: Vec<StoragePlacementResult> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfStoragePlacementResult(value))
                    })
                }
                _ => None
            }
        },
        0x6552657365727661 => { // eReserva
            if type_name == "ArrayOfLicenseReservationInfo" {
                Some(|raw| {
                    let value: Vec<LicenseReservationInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfLicenseReservationInfo(value))
                })
            } else { None }
        },
        0x655265736f757263 => { // eResourc
            if type_name == "ArrayOfComputeResourceSummary" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::ComputeResourceSummaryTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfComputeResourceSummary(value))
                })
            } else { None }
        },
        0x6552657374726963 => { // eRestric
            if type_name == "ArrayOfLicenseRestrictedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfLicenseRestrictedEvent(value))
                })
            } else { None }
        },
        0x65636f6e66696775 => { // econfigu
            if type_name == "ArrayOfAlarmReconfiguredEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfAlarmReconfiguredEvent(value))
                })
            } else { None }
        },
        0x6564546f506f7765 => { // edToPowe
            if type_name == "ArrayOfVmFailedToPowerOnEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmFailedToPowerOnEvent(value))
                })
            } else { None }
        },
        0x6564546f53757370 => { // edToSusp
            if type_name == "ArrayOfVmFailedToSuspendEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmFailedToSuspendEvent(value))
                })
            } else { None }
        },
        0x656756616c756544 => { // egValueD
            if type_name == "ArrayOfGuestRegValueDwordSpec" {
                Some(|raw| {
                    let value: Vec<GuestRegValueDwordSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGuestRegValueDwordSpec(value))
                })
            } else { None }
        },
        0x656756616c756551 => { // egValueQ
            if type_name == "ArrayOfGuestRegValueQwordSpec" {
                Some(|raw| {
                    let value: Vec<GuestRegValueQwordSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGuestRegValueQwordSpec(value))
                })
            } else { None }
        },
        0x656e64656450726f => { // endedPro
            if type_name == "ArrayOfExtExtendedProductInfo" {
                Some(|raw| {
                    let value: Vec<ExtExtendedProductInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfExtExtendedProductInfo(value))
                })
            } else { None }
        },
        0x656e745461736b53 => { // entTaskS
            if type_name == "ArrayOfRecurrentTaskScheduler" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::RecurrentTaskSchedulerTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfRecurrentTaskScheduler(value))
                })
            } else { None }
        },
        0x6572636f6d6d6974 => { // ercommit
            if type_name == "ArrayOfHostOvercommittedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostOvercommittedEvent(value))
                })
            } else { None }
        },
        0x6574616461746143 => { // etadataC
            if type_name == "ArrayOfPatchMetadataCorrupted" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPatchMetadataCorrupted(value))
                })
            } else { None }
        },
        0x6666696346696c74 => { // fficFilt
            if type_name == "ArrayOfDvsTrafficFilterConfig" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::DvsTrafficFilterConfigTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsTrafficFilterConfig(value))
                })
            } else { None }
        },
        0x674e6574776f726b => { // gNetwork
            if type_name == "ArrayOfMissingNetworkIpConfig" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfMissingNetworkIpConfig(value))
                })
            } else { None }
        },
        0x67654f626a656374 => { // geObject
            if type_name == "ArrayOfVStorageObjectSnapshot" {
                Some(|raw| {
                    let value: Vec<VStorageObjectSnapshot> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVStorageObjectSnapshot(value))
                })
            } else { None }
        },
        0x676f757453657373 => { // goutSess
            if type_name == "ArrayOfUserLogoutSessionEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfUserLogoutSessionEvent(value))
                })
            } else { None }
        },
        0x6772616465466169 => { // gradeFai
            if type_name == "ArrayOfHostUpgradeFailedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostUpgradeFailedEvent(value))
                })
            } else { None }
        },
        0x696746696c655175 => { // igFileQu
            if type_name == "ArrayOfVmConfigFileQueryFlags" {
                Some(|raw| {
                    let value: Vec<VmConfigFileQueryFlags> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmConfigFileQueryFlags(value))
                })
            } else { None }
        },
        0x696f6e4576656e74 => { // ionEvent
            if type_name == "ArrayOfExtensionEventTypeInfo" {
                Some(|raw| {
                    let value: Vec<ExtensionEventTypeInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfExtensionEventTypeInfo(value))
                })
            } else { None }
        },
        0x696f6e4661756c74 => { // ionFault
            if type_name == "ArrayOfExtensionFaultTypeInfo" {
                Some(|raw| {
                    let value: Vec<ExtensionFaultTypeInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfExtensionFaultTypeInfo(value))
                })
            } else { None }
        },
        0x696f6e5072697669 => { // ionPrivi
            if type_name == "ArrayOfExtensionPrivilegeInfo" {
                Some(|raw| {
                    let value: Vec<ExtensionPrivilegeInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfExtensionPrivilegeInfo(value))
                })
            } else { None }
        },
        0x697a6174696f6e46 => { // izationF
            match type_name {
                "ArrayOfCustomizationFixedIpV6" => {
                    Some(|raw| {
                        let value: Vec<CustomizationFixedIpV6> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfCustomizationFixedIpV6(value))
                    })
                }
                "ArrayOfCustomizationFixedName" => {
                    Some(|raw| {
                        let value: Vec<CustomizationFixedName> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfCustomizationFixedName(value))
                    })
                }
                _ => None
            }
        },
        0x697a6174696f6e4c => { // izationL
            if type_name == "ArrayOfCustomizationLinuxPrep" {
                Some(|raw| {
                    let value: Vec<CustomizationLinuxPrep> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCustomizationLinuxPrep(value))
                })
            } else { None }
        },
        0x697a6174696f6e50 => { // izationP
            if type_name == "ArrayOfAuthorizationPrivilege" {
                Some(|raw| {
                    let value: Vec<AuthorizationPrivilege> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfAuthorizationPrivilege(value))
                })
            } else { None }
        },
        0x697a6174696f6e53 => { // izationS
            if type_name == "ArrayOfCustomizationSucceeded" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCustomizationSucceeded(value))
                })
            } else { None }
        },
        0x6b4d617070696e67 => { // kMapping
            if type_name == "ArrayOfOvfDiskMappingNotFound" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfDiskMappingNotFound(value))
                })
            } else { None }
        },
        0x6b4d696772617469 => { // kMigrati
            if type_name == "ArrayOfHbrDiskMigrationAction" {
                Some(|raw| {
                    let value: Vec<HbrDiskMigrationAction> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHbrDiskMigrationAction(value))
                })
            } else { None }
        },
        0x6b4f72646572436f => { // kOrderCo
            if type_name == "ArrayOfOvfDiskOrderConstraint" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfDiskOrderConstraint(value))
                })
            } else { None }
        },
        0x6c4d616368696e65 => { // lMachine
            match type_name {
                "ArrayOfVirtualMachineFileInfo" => {
                    Some(|raw| {
                        let value: Vec<VirtualMachineFileInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualMachineFileInfo(value))
                    })
                }
                "ArrayOfVirtualMachineFlagInfo" => {
                    Some(|raw| {
                        let value: Vec<VirtualMachineFlagInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualMachineFlagInfo(value))
                    })
                }
                _ => None
            }
        },
        0x6c53435349506173 => { // lSCSIPas
            if type_name == "ArrayOfVirtualSCSIPassthrough" {
                Some(|raw| {
                    let value: Vec<VirtualScsiPassthrough> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualScsiPassthrough(value))
                })
            } else { None }
        },
        0x6c536f756e644361 => { // lSoundCa
            if type_name == "ArrayOfVirtualSoundCardOption" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::VirtualSoundCardOptionTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualSoundCardOption(value))
                })
            } else { None }
        },
        0x6c566964656f4361 => { // lVideoCa
            if type_name == "ArrayOfVirtualVideoCardOption" {
                Some(|raw| {
                    let value: Vec<VirtualVideoCardOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualVideoCardOption(value))
                })
            } else { None }
        },
        0x6c6961626c654d65 => { // liableMe
            if type_name == "ArrayOfHostReliableMemoryInfo" {
                Some(|raw| {
                    let value: Vec<HostReliableMemoryInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostReliableMemoryInfo(value))
                })
            } else { None }
        },
        0x6c74657253706563 => { // lterSpec
            if type_name == "ArrayOfTaskFilterSpecByEntity" {
                Some(|raw| {
                    let value: Vec<TaskFilterSpecByEntity> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfTaskFilterSpecByEntity(value))
                })
            } else { None }
        },
        0x6c74697061746853 => { // ltipathS
            if type_name == "ArrayOfHostMultipathStateInfo" {
                Some(|raw| {
                    let value: Vec<HostMultipathStateInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostMultipathStateInfo(value))
                })
            } else { None }
        },
        0x6c794f7065726174 => { // lyOperat
            if type_name == "ArrayOfDvsApplyOperationFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsApplyOperationFault(value))
                })
            } else { None }
        },
        0x6d41747465737461 => { // mAttesta
            if type_name == "ArrayOfHostTpmAttestationInfo" {
                Some(|raw| {
                    let value: Vec<HostTpmAttestationInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostTpmAttestationInfo(value))
                })
            } else { None }
        },
        0x6d6167654e6f7441 => { // mageNotA
            if type_name == "ArrayOfToolsImageNotAvailable" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfToolsImageNotAvailable(value))
                })
            } else { None }
        },
        0x6d616e6365446573 => { // manceDes
            if type_name == "ArrayOfPerformanceDescription" {
                Some(|raw| {
                    let value: Vec<PerformanceDescription> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPerformanceDescription(value))
                })
            } else { None }
        },
        0x6d617042616e6477 => { // mapBandw
            if type_name == "ArrayOfVmfsUnmapBandwidthSpec" {
                Some(|raw| {
                    let value: Vec<VmfsUnmapBandwidthSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmfsUnmapBandwidthSpec(value))
                })
            } else { None }
        },
        0x6d65446973636f6e => { // meDiscon
            if type_name == "ArrayOfHostNvmeDisconnectSpec" {
                Some(|raw| {
                    let value: Vec<HostNvmeDisconnectSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostNvmeDisconnectSpec(value))
                })
            } else { None }
        },
        0x6d656e74496e7661 => { // mentInva
            if type_name == "ArrayOfOvfElementInvalidValue" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfElementInvalidValue(value))
                })
            } else { None }
        },
        0x6e4c696e6b436170 => { // nLinkCap
            if type_name == "ArrayOfVMotionLinkCapacityLow" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVMotionLinkCapacityLow(value))
                })
            } else { None }
        },
        0x6e5465726d696e61 => { // nTermina
            if type_name == "ArrayOfSessionTerminatedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfSessionTerminatedEvent(value))
                })
            } else { None }
        },
        0x6e6669674170706c => { // nfigAppl
            if type_name == "ArrayOfHostConfigAppliedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostConfigAppliedEvent(value))
                })
            } else { None }
        },
        0x6e74657243726561 => { // nterCrea
            if type_name == "ArrayOfDatacenterCreatedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDatacenterCreatedEvent(value))
                })
            } else { None }
        },
        0x6e74657252656e61 => { // nterRena
            if type_name == "ArrayOfDatacenterRenamedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDatacenterRenamedEvent(value))
                })
            } else { None }
        },
        0x6f6c6572616e6365 => { // olerance
            match type_name {
                "ArrayOfFaultToleranceDiskSpec" => {
                    Some(|raw| {
                        let value: Vec<FaultToleranceDiskSpec> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfFaultToleranceDiskSpec(value))
                    })
                }
                "ArrayOfFaultToleranceMetaSpec" => {
                    Some(|raw| {
                        let value: Vec<FaultToleranceMetaSpec> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfFaultToleranceMetaSpec(value))
                    })
                }
                _ => None
            }
        },
        0x6f72616765456c65 => { // orageEle
            if type_name == "ArrayOfHostStorageElementInfo" {
                Some(|raw| {
                    let value: Vec<HostStorageElementInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostStorageElementInfo(value))
                })
            } else { None }
        },
        0x6f72654576656e74 => { // oreEvent
            if type_name == "ArrayOfDatastoreEventArgument" {
                Some(|raw| {
                    let value: Vec<DatastoreEventArgument> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDatastoreEventArgument(value))
                })
            } else { None }
        },
        0x6f72746564566d78 => { // ortedVmx
            if type_name == "ArrayOfUnsupportedVmxLocation" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfUnsupportedVmxLocation(value))
                })
            } else { None }
        },
        0x6f73744c696d6974 => { // ostLimit
            if type_name == "ArrayOfEightHostLimitViolated" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfEightHostLimitViolated(value))
                })
            } else { None }
        },
        0x6f7572636552756e => { // ourceRun
            if type_name == "ArrayOfDvsResourceRuntimeInfo" {
                Some(|raw| {
                    let value: Vec<DvsResourceRuntimeInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsResourceRuntimeInfo(value))
                })
            } else { None }
        },
        0x6f78795377697463 => { // oxySwitc
            if type_name == "ArrayOfHostProxySwitchEnsInfo" {
                Some(|raw| {
                    let value: Vec<HostProxySwitchEnsInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostProxySwitchEnsInfo(value))
                })
            } else { None }
        },
        0x7054617267657454 => { // pTargetT
            if type_name == "ArrayOfHostTcpTargetTransport" {
                Some(|raw| {
                    let value: Vec<HostTcpTargetTransport> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostTcpTargetTransport(value))
                })
            } else { None }
        },
        0x706163654f6e436f => { // paceOnCo
            if type_name == "ArrayOfOvfNoSpaceOnController" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfNoSpaceOnController(value))
                })
            } else { None }
        },
        0x72417474656d7074 => { // rAttempt
            if type_name == "ArrayOfClusterAttemptedVmInfo" {
                Some(|raw| {
                    let value: Vec<ClusterAttemptedVmInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterAttemptedVmInfo(value))
                })
            } else { None }
        },
        0x7244617341616d4e => { // rDasAamN
            if type_name == "ArrayOfClusterDasAamNodeState" {
                Some(|raw| {
                    let value: Vec<ClusterDasAamNodeState> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterDasAamNodeState(value))
                })
            } else { None }
        },
        0x7244617346646d48 => { // rDasFdmH
            if type_name == "ArrayOfClusterDasFdmHostState" {
                Some(|raw| {
                    let value: Vec<ClusterDasFdmHostState> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterDasFdmHostState(value))
                })
            } else { None }
        },
        0x72446173566d436f => { // rDasVmCo
            match type_name {
                "ArrayOfClusterDasVmConfigInfo" => {
                    Some(|raw| {
                        let value: Vec<ClusterDasVmConfigInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfClusterDasVmConfigInfo(value))
                    })
                }
                "ArrayOfClusterDasVmConfigSpec" => {
                    Some(|raw| {
                        let value: Vec<ClusterDasVmConfigSpec> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfClusterDasVmConfigSpec(value))
                    })
                }
                _ => None
            }
        },
        0x72447273566d436f => { // rDrsVmCo
            match type_name {
                "ArrayOfClusterDrsVmConfigInfo" => {
                    Some(|raw| {
                        let value: Vec<ClusterDrsVmConfigInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfClusterDrsVmConfigInfo(value))
                    })
                }
                "ArrayOfClusterDrsVmConfigSpec" => {
                    Some(|raw| {
                        let value: Vec<ClusterDrsVmConfigSpec> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfClusterDrsVmConfigSpec(value))
                    })
                }
                _ => None
            }
        },
        0x72486f7374506f77 => { // rHostPow
            if type_name == "ArrayOfClusterHostPowerAction" {
                Some(|raw| {
                    let value: Vec<ClusterHostPowerAction> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterHostPowerAction(value))
                })
            } else { None }
        },
        0x724d696772617469 => { // rMigrati
            if type_name == "ArrayOfClusterMigrationAction" {
                Some(|raw| {
                    let value: Vec<ClusterMigrationAction> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterMigrationAction(value))
                })
            } else { None }
        },
        0x72506f7765724f6e => { // rPowerOn
            if type_name == "ArrayOfClusterPowerOnVmResult" {
                Some(|raw| {
                    let value: Vec<ClusterPowerOnVmResult> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterPowerOnVmResult(value))
                })
            } else { None }
        },
        0x7264776172655374 => { // rdwareSt
            if type_name == "ArrayOfHostHardwareStatusInfo" {
                Some(|raw| {
                    let value: Vec<HostHardwareStatusInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostHardwareStatusInfo(value))
                })
            } else { None }
        },
        0x726563746f727953 => { // rectoryS
            if type_name == "ArrayOfHostDirectoryStoreInfo" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::HostDirectoryStoreInfoTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostDirectoryStoreInfo(value))
                })
            } else { None }
        },
        0x7369546f706f6c6f => { // siTopolo
            if type_name == "ArrayOfHostScsiTopologyTarget" {
                Some(|raw| {
                    let value: Vec<HostScsiTopologyTarget> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostScsiTopologyTarget(value))
                })
            } else { None }
        },
        0x73696f6e52656d6f => { // sionRemo
            if type_name == "ArrayOfPermissionRemovedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPermissionRemovedEvent(value))
                })
            } else { None }
        },
        0x73696f6e55706461 => { // sionUpda
            if type_name == "ArrayOfPermissionUpdatedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPermissionUpdatedEvent(value))
                })
            } else { None }
        },
        0x73744d656d626572 => { // stMember
            if type_name == "ArrayOfVsanHostMembershipInfo" {
                Some(|raw| {
                    let value: Vec<VsanHostMembershipInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVsanHostMembershipInfo(value))
                })
            } else { None }
        },
        0x7374656d51756965 => { // stemQuie
            if type_name == "ArrayOfFilesystemQuiesceFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfFilesystemQuiesceFault(value))
                })
            } else { None }
        },
        0x7374656d5265736f => { // stemReso
            if type_name == "ArrayOfHostSystemResourceInfo" {
                Some(|raw| {
                    let value: Vec<HostSystemResourceInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostSystemResourceInfo(value))
                })
            } else { None }
        },
        0x744261636b496e53 => { // tBackInS
            if type_name == "ArrayOfDvsHostBackInSyncEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsHostBackInSyncEvent(value))
                })
            } else { None }
        },
        0x7463684d616e6167 => { // tchManag
            match type_name {
                "ArrayOfHostPatchManagerResult" => {
                    Some(|raw| {
                        let value: Vec<HostPatchManagerResult> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostPatchManagerResult(value))
                    })
                }
                "ArrayOfHostPatchManagerStatus" => {
                    Some(|raw| {
                        let value: Vec<HostPatchManagerStatus> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostPatchManagerStatus(value))
                    })
                }
                _ => None
            }
        },
        0x7465436f6e666967 => { // teConfig
            if type_name == "ArrayOfTemplateConfigFileInfo" {
                Some(|raw| {
                    let value: Vec<TemplateConfigFileInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfTemplateConfigFileInfo(value))
                })
            } else { None }
        },
        0x7472614e6574776f => { // traNetwo
            if type_name == "ArrayOfHostExtraNetworksEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostExtraNetworksEvent(value))
                })
            } else { None }
        },
        0x74776f726b416363 => { // tworkAcc
            if type_name == "ArrayOfVmNoNetworkAccessEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmNoNetworkAccessEvent(value))
                })
            } else { None }
        },
        0x75737465724e6574 => { // usterNet
            if type_name == "ArrayOfVchaClusterNetworkSpec" {
                Some(|raw| {
                    let value: Vec<VchaClusterNetworkSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVchaClusterNetworkSpec(value))
                })
            } else { None }
        },
        0x757374657252756e => { // usterRun
            if type_name == "ArrayOfVchaClusterRuntimeInfo" {
                Some(|raw| {
                    let value: Vec<VchaClusterRuntimeInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVchaClusterRuntimeInfo(value))
                })
            } else { None }
        },
        0x7574696f6e4d616e => { // utionMan
            if type_name == "ArrayOfExtSolutionManagerInfo" {
                Some(|raw| {
                    let value: Vec<ExtSolutionManagerInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfExtSolutionManagerInfo(value))
                })
            } else { None }
        },
        0x76656e746f727946 => { // ventoryF
            if type_name == "ArrayOfHostInventoryFullEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostInventoryFullEvent(value))
                })
            } else { None }
        },
        0x7765724f70657261 => { // werOpera
            if type_name == "ArrayOfHostPowerOperationType" {
                Some(|raw| {
                    let value: Vec<super::enums::HostPowerOperationTypeEnum> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostPowerOperationType(value))
                })
            } else { None }
        },
        0x776f726b5265736f => { // workReso
            if type_name == "ArrayOfDVSNetworkResourcePool" {
                Some(|raw| {
                    let value: Vec<DvsNetworkResourcePool> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsNetworkResourcePool(value))
                })
            } else { None }
        },
        0x79546f486f737441 => { // yToHostA
            if type_name == "ArrayOfGatewayToHostAuthFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGatewayToHostAuthFault(value))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_value_deserializer_30(type_name: &str) -> Option<fn(&serde_json::value::RawValue) -> Result<ValueElements, serde_json::Error>> {
    let s = &type_name[18..22];
    let Some(type_ord) = to_u32(s) else {
        return None;
    };
    match type_ord {
        0x4170706c => { // Appl
            if type_name == "ArrayOfHostProfileAppliedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostProfileAppliedEvent(value))
                })
            } else { None }
        },
        0x4368616e => { // Chan
            if type_name == "ArrayOfAlarmStatusChangedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfAlarmStatusChangedEvent(value))
                })
            } else { None }
        },
        0x436f6e66 => { // Conf
            match type_name {
                "ArrayOfStorageIORMConfigOption" => {
                    Some(|raw| {
                        let value: Vec<StorageIormConfigOption> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfStorageIormConfigOption(value))
                    })
                }
                "ArrayOfHostNetworkConfigResult" => {
                    Some(|raw| {
                        let value: Vec<HostNetworkConfigResult> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostNetworkConfigResult(value))
                    })
                }
                _ => None
            }
        },
        0x43726561 => { // Crea
            if type_name == "ArrayOfDVPortgroupCreatedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvPortgroupCreatedEvent(value))
                })
            } else { None }
        },
        0x456e6162 => { // Enab
            if type_name == "ArrayOfVmSecondaryEnabledEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmSecondaryEnabledEvent(value))
                })
            } else { None }
        },
        0x45787069 => { // Expi
            if type_name == "ArrayOfHostLicenseExpiredEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostLicenseExpiredEvent(value))
                })
            } else { None }
        },
        0x466f7250 => { // ForP
            if type_name == "ArrayOfVmPodConfigForPlacement" {
                Some(|raw| {
                    let value: Vec<VmPodConfigForPlacement> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmPodConfigForPlacement(value))
                })
            } else { None }
        },
        0x4970436f => { // IpCo
            if type_name == "ArrayOfNoVcManagedIpConfigured" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNoVcManagedIpConfigured(value))
                })
            } else { None }
        },
        0x4d4d436f => { // MMCo
            if type_name == "ArrayOfVirtualNVDIMMController" {
                Some(|raw| {
                    let value: Vec<VirtualNvdimmController> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualNvdimmController(value))
                })
            } else { None }
        },
        0x4d6f6465 => { // Mode
            if type_name == "ArrayOfMaintenanceModeFileMove" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfMaintenanceModeFileMove(value))
                })
            } else { None }
        },
        0x4e6f7442 => { // NotB
            if type_name == "ArrayOfNetworksMayNotBeTheSame" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNetworksMayNotBeTheSame(value))
                })
            } else { None }
        },
        0x4e6f7452 => { // NotR
            if type_name == "ArrayOfGatewayHostNotReachable" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGatewayHostNotReachable(value))
                })
            } else { None }
        },
        0x4e6f7453 => { // NotS
            if type_name == "ArrayOfMultiWriterNotSupported" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfMultiWriterNotSupported(value))
                })
            } else { None }
        },
        0x506f7765 => { // Powe
            if type_name == "ArrayOfOvfConsumerPowerOnFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfConsumerPowerOnFault(value))
                })
            } else { None }
        },
        0x51756965 => { // Quie
            if type_name == "ArrayOfApplicationQuiesceFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfApplicationQuiesceFault(value))
                })
            } else { None }
        },
        0x52656e61 => { // Rena
            if type_name == "ArrayOfDVPortgroupRenamedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvPortgroupRenamedEvent(value))
                })
            } else { None }
        },
        0x53657373 => { // Sess
            if type_name == "ArrayOfBadUsernameSessionEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfBadUsernameSessionEvent(value))
                })
            } else { None }
        },
        0x53706563 => { // Spec
            match type_name {
                "ArrayOfEventFilterSpecByEntity" => {
                    Some(|raw| {
                        let value: Vec<EventFilterSpecByEntity> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfEventFilterSpecByEntity(value))
                    })
                }
                "ArrayOfUsbScanCodeSpecKeyEvent" => {
                    Some(|raw| {
                        let value: Vec<UsbScanCodeSpecKeyEvent> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfUsbScanCodeSpecKeyEvent(value))
                    })
                }
                _ => None
            }
        },
        0x53746172 => { // Star
            if type_name == "ArrayOfVmSecondaryStartedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmSecondaryStartedEvent(value))
                })
            } else { None }
        },
        0x53776974 => { // Swit
            match type_name {
                "ArrayOfHostVirtualSwitchBridge" => {
                    Some(|raw| {
                        let value: Vec<Box<dyn super::traits::HostVirtualSwitchBridgeTrait>> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostVirtualSwitchBridge(value))
                    })
                }
                "ArrayOfHostVirtualSwitchConfig" => {
                    Some(|raw| {
                        let value: Vec<HostVirtualSwitchConfig> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostVirtualSwitchConfig(value))
                    })
                }
                _ => None
            }
        },
        0x556e646f => { // Undo
            if type_name == "ArrayOfUncommittedUndoableDisk" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfUncommittedUndoableDisk(value))
                })
            } else { None }
        },
        0x55756964 => { // Uuid
            if type_name == "ArrayOfVsanClusterUuidMismatch" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVsanClusterUuidMismatch(value))
                })
            } else { None }
        },
        0x5673616e => { // Vsan
            if type_name == "ArrayOfDestinationVsanDisabled" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDestinationVsanDisabled(value))
                })
            } else { None }
        },
        0x5761726e => { // Warn
            if type_name == "ArrayOfGeneralHostWarningEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGeneralHostWarningEvent(value))
                })
            } else { None }
        },
        0x616c506f => { // alPo
            if type_name == "ArrayOfVirtualSerialPortOption" {
                Some(|raw| {
                    let value: Vec<VirtualSerialPortOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualSerialPortOption(value))
                })
            } else { None }
        },
        0x6174696f => { // atio
            if type_name == "ArrayOfGatewayOperationRefused" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGatewayOperationRefused(value))
                })
            } else { None }
        },
        0x6365436f => { // ceCo
            if type_name == "ArrayOfVirtualDeviceConfigSpec" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::VirtualDeviceConfigSpecTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualDeviceConfigSpec(value))
                })
            } else { None }
        },
        0x63704361 => { // cpCa
            if type_name == "ArrayOfVMwareDvsLacpCapability" {
                Some(|raw| {
                    let value: Vec<VMwareDvsLacpCapability> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVMwareDvsLacpCapability(value))
                })
            } else { None }
        },
        0x64446576 => { // dDev
            if type_name == "ArrayOfNotSupportedDeviceForFT" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNotSupportedDeviceForFt(value))
                })
            } else { None }
        },
        0x64486f73 => { // dHos
            match type_name {
                "ArrayOfNotSupportedHostForVmcp" => {
                    Some(|raw| {
                        let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfNotSupportedHostForVmcp(value))
                    })
                }
                "ArrayOfNotSupportedHostForVsan" => {
                    Some(|raw| {
                        let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfNotSupportedHostForVsan(value))
                    })
                }
                _ => None
            }
        },
        0x6462794d => { // dbyM
            match type_name {
                "ArrayOfEnteredStandbyModeEvent" => {
                    Some(|raw| {
                        let value: Vec<Event> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfEnteredStandbyModeEvent(value))
                    })
                }
                "ArrayOfExitingStandbyModeEvent" => {
                    Some(|raw| {
                        let value: Vec<Event> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfExitingStandbyModeEvent(value))
                    })
                }
                _ => None
            }
        },
        0x65456c65 => { // eEle
            if type_name == "ArrayOfHostHardwareElementInfo" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::HostHardwareElementInfoTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostHardwareElementInfo(value))
                })
            } else { None }
        },
        0x6550726f => { // ePro
            if type_name == "ArrayOfHttpNfcLeaseProbeResult" {
                Some(|raw| {
                    let value: Vec<HttpNfcLeaseProbeResult> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHttpNfcLeaseProbeResult(value))
                })
            } else { None }
        },
        0x65517565 => { // eQue
            if type_name == "ArrayOfVmConfigFileQueryFilter" {
                Some(|raw| {
                    let value: Vec<VmConfigFileQueryFilter> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmConfigFileQueryFilter(value))
                })
            } else { None }
        },
        0x65536563 => { // eSec
            if type_name == "ArrayOfKernelModuleSectionInfo" {
                Some(|raw| {
                    let value: Vec<KernelModuleSectionInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfKernelModuleSectionInfo(value))
                })
            } else { None }
        },
        0x65636966 => { // ecif
            if type_name == "ArrayOfDVSVendorSpecificConfig" {
                Some(|raw| {
                    let value: Vec<DvsVendorSpecificConfig> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsVendorSpecificConfig(value))
                })
            } else { None }
        },
        0x65636f6e => { // econ
            if type_name == "ArrayOfHostSystemReconnectSpec" {
                Some(|raw| {
                    let value: Vec<HostSystemReconnectSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostSystemReconnectSpec(value))
                })
            } else { None }
        },
        0x65637453 => { // ectS
            if type_name == "ArrayOfVStorageObjectStateInfo" {
                Some(|raw| {
                    let value: Vec<VStorageObjectStateInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVStorageObjectStateInfo(value))
                })
            } else { None }
        },
        0x6563746f => { // ecto
            if type_name == "ArrayOfInvalidCollectorVersion" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInvalidCollectorVersion(value))
                })
            } else { None }
        },
        0x656a6563 => { // ejec
            if type_name == "ArrayOfDvsUpgradeRejectedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsUpgradeRejectedEvent(value))
                })
            } else { None }
        },
        0x65766963 => { // evic
            if type_name == "ArrayOfOvfUnknownDeviceBacking" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfUnknownDeviceBacking(value))
                })
            } else { None }
        },
        0x66696746 => { // figF
            if type_name == "ArrayOfTemplateConfigFileQuery" {
                Some(|raw| {
                    let value: Vec<TemplateConfigFileQuery> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfTemplateConfigFileQuery(value))
                })
            } else { None }
        },
        0x66696775 => { // figu
            if type_name == "ArrayOfLockerReconfiguredEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfLockerReconfiguredEvent(value))
                })
            } else { None }
        },
        0x67497056 => { // gIpV
            if type_name == "ArrayOfHostIpConfigIpV6Address" {
                Some(|raw| {
                    let value: Vec<HostIpConfigIpV6Address> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostIpConfigIpV6Address(value))
                })
            } else { None }
        },
        0x67497066 => { // gIpf
            if type_name == "ArrayOfVMwareDvsLagIpfixConfig" {
                Some(|raw| {
                    let value: Vec<VMwareDvsLagIpfixConfig> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVMwareDvsLagIpfixConfig(value))
                })
            } else { None }
        },
        0x67657454 => { // getT
            match type_name {
                "ArrayOfHostPcieTargetTransport" => {
                    Some(|raw| {
                        let value: Vec<HostPcieTargetTransport> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostPcieTargetTransport(value))
                    })
                }
                "ArrayOfHostRdmaTargetTransport" => {
                    Some(|raw| {
                        let value: Vec<HostRdmaTargetTransport> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostRdmaTargetTransport(value))
                    })
                }
                _ => None
            }
        },
        0x676e6d65 => { // gnme
            if type_name == "ArrayOfLicenseAssignmentFailed" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfLicenseAssignmentFailed(value))
                })
            } else { None }
        },
        0x68617069 => { // hapi
            if type_name == "ArrayOfDVSTrafficShapingPolicy" {
                Some(|raw| {
                    let value: Vec<DvsTrafficShapingPolicy> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsTrafficShapingPolicy(value))
                })
            } else { None }
        },
        0x6963656e => { // icen
            if type_name == "ArrayOfEvaluationLicenseSource" {
                Some(|raw| {
                    let value: Vec<EvaluationLicenseSource> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfEvaluationLicenseSource(value))
                })
            } else { None }
        },
        0x69677261 => { // igra
            if type_name == "ArrayOfVmBeingHotMigratedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmBeingHotMigratedEvent(value))
                })
            } else { None }
        },
        0x696c6553 => { // ileS
            if type_name == "ArrayOfProfileProfileStructure" {
                Some(|raw| {
                    let value: Vec<ProfileProfileStructure> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfProfileProfileStructure(value))
                })
            } else { None }
        },
        0x696c6974 => { // ilit
            if type_name == "ArrayOfCpuCompatibilityUnknown" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCpuCompatibilityUnknown(value))
                })
            } else { None }
        },
        0x696e6543 => { // ineC
            match type_name {
                "ArrayOfVirtualMachineCdromInfo" => {
                    Some(|raw| {
                        let value: Vec<VirtualMachineCdromInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualMachineCdromInfo(value))
                    })
                }
                "ArrayOfVirtualMachineCloneSpec" => {
                    Some(|raw| {
                        let value: Vec<VirtualMachineCloneSpec> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualMachineCloneSpec(value))
                    })
                }
                _ => None
            }
        },
        0x696e654d => { // ineM
            if type_name == "ArrayOfVirtualMachineMksTicket" {
                Some(|raw| {
                    let value: Vec<VirtualMachineMksTicket> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineMksTicket(value))
                })
            } else { None }
        },
        0x696e6553 => { // ineS
            match type_name {
                "ArrayOfVirtualMachineSoundInfo" => {
                    Some(|raw| {
                        let value: Vec<VirtualMachineSoundInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualMachineSoundInfo(value))
                    })
                }
                "ArrayOfVirtualMachineSriovInfo" => {
                    Some(|raw| {
                        let value: Vec<VirtualMachineSriovInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualMachineSriovInfo(value))
                    })
                }
                _ => None
            }
        },
        0x696e6556 => { // ineV
            if type_name == "ArrayOfVirtualMachineVideoCard" {
                Some(|raw| {
                    let value: Vec<VirtualMachineVideoCard> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineVideoCard(value))
                })
            } else { None }
        },
        0x696f6e4c => { // ionL
            if type_name == "ArrayOfHostConnectionLostEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostConnectionLostEvent(value))
                })
            } else { None }
        },
        0x69726563 => { // irec
            match type_name {
                "ArrayOfHostActiveDirectoryInfo" => {
                    Some(|raw| {
                        let value: Vec<HostActiveDirectoryInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostActiveDirectoryInfo(value))
                    })
                }
                "ArrayOfHostActiveDirectorySpec" => {
                    Some(|raw| {
                        let value: Vec<HostActiveDirectorySpec> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostActiveDirectorySpec(value))
                    })
                }
                _ => None
            }
        },
        0x69746550 => { // iteP
            if type_name == "ArrayOfNamespaceWriteProtected" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNamespaceWriteProtected(value))
                })
            } else { None }
        },
        0x6b526573 => { // kRes
            if type_name == "ArrayOfVsanHostDiskResultState" {
                Some(|raw| {
                    let value: Vec<super::enums::VsanHostDiskResultStateEnum> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVsanHostDiskResultState(value))
                })
            } else { None }
        },
        0x6c52756e => { // lRun
            if type_name == "ArrayOfResourcePoolRuntimeInfo" {
                Some(|raw| {
                    let value: Vec<ResourcePoolRuntimeInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfResourcePoolRuntimeInfo(value))
                })
            } else { None }
        },
        0x6c616269 => { // labi
            if type_name == "ArrayOfLicenseAvailabilityInfo" {
                Some(|raw| {
                    let value: Vec<LicenseAvailabilityInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfLicenseAvailabilityInfo(value))
                })
            } else { None }
        },
        0x6c654578 => { // leEx
            if type_name == "ArrayOfProfileSimpleExpression" {
                Some(|raw| {
                    let value: Vec<ProfileSimpleExpression> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfProfileSimpleExpression(value))
                })
            } else { None }
        },
        0x6c654d6f => { // leMo
            if type_name == "ArrayOfDatastoreFileMovedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDatastoreFileMovedEvent(value))
                })
            } else { None }
        },
        0x6c656176 => { // leav
            if type_name == "ArrayOfNvdimmInterleaveSetInfo" {
                Some(|raw| {
                    let value: Vec<NvdimmInterleaveSetInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNvdimmInterleaveSetInfo(value))
                })
            } else { None }
        },
        0x6c6f6361 => { // loca
            if type_name == "ArrayOfStorageIOAllocationInfo" {
                Some(|raw| {
                    let value: Vec<StorageIoAllocationInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfStorageIoAllocationInfo(value))
                })
            } else { None }
        },
        0x6c74446f => { // ltDo
            if type_name == "ArrayOfVsanHostFaultDomainInfo" {
                Some(|raw| {
                    let value: Vec<VsanHostFaultDomainInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVsanHostFaultDomainInfo(value))
                })
            } else { None }
        },
        0x6d706c65 => { // mple
            if type_name == "ArrayOfAlarmSnmpCompletedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfAlarmSnmpCompletedEvent(value))
                })
            } else { None }
        },
        0x6e4f6e4e => { // nOnN
            if type_name == "ArrayOfNoPermissionOnNasVolume" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNoPermissionOnNasVolume(value))
                })
            } else { None }
        },
        0x6e616765 => { // nage
            if type_name == "ArrayOfHostPatchManagerLocator" {
                Some(|raw| {
                    let value: Vec<HostPatchManagerLocator> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostPatchManagerLocator(value))
                })
            } else { None }
        },
        0x6e656446 => { // nedF
            if type_name == "ArrayOfUserUnassignedFromGroup" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfUserUnassignedFromGroup(value))
                })
            } else { None }
        },
        0x6e697479 => { // nity
            if type_name == "ArrayOfClusterAffinityRuleSpec" {
                Some(|raw| {
                    let value: Vec<ClusterAffinityRuleSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterAffinityRuleSpec(value))
                })
            } else { None }
        },
        0x6e744361 => { // ntCa
            if type_name == "ArrayOfHostSnmpAgentCapability" {
                Some(|raw| {
                    let value: Vec<super::enums::HostSnmpAgentCapabilityEnum> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostSnmpAgentCapability(value))
                })
            } else { None }
        },
        0x6f636961 => { // ocia
            if type_name == "ArrayOfProfileDissociatedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfProfileDissociatedEvent(value))
                })
            } else { None }
        },
        0x6f64436f => { // odCo
            match type_name {
                "ArrayOfStorageDrsPodConfigInfo" => {
                    Some(|raw| {
                        let value: Vec<StorageDrsPodConfigInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfStorageDrsPodConfigInfo(value))
                    })
                }
                "ArrayOfStorageDrsPodConfigSpec" => {
                    Some(|raw| {
                        let value: Vec<StorageDrsPodConfigSpec> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfStorageDrsPodConfigSpec(value))
                    })
                }
                _ => None
            }
        },
        0x6f66696c => { // ofil
            if type_name == "ArrayOfHostImageProfileSummary" {
                Some(|raw| {
                    let value: Vec<HostImageProfileSummary> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostImageProfileSummary(value))
                })
            } else { None }
        },
        0x6f6e4375 => { // onCu
            if type_name == "ArrayOfCustomizationCustomName" {
                Some(|raw| {
                    let value: Vec<CustomizationCustomName> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCustomizationCustomName(value))
                })
            } else { None }
        },
        0x6f6e4775 => { // onGu
            if type_name == "ArrayOfCustomizationGuiRunOnce" {
                Some(|raw| {
                    let value: Vec<CustomizationGuiRunOnce> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCustomizationGuiRunOnce(value))
                })
            } else { None }
        },
        0x6f6e4950 => { // onIP
            if type_name == "ArrayOfCustomizationIPSettings" {
                Some(|raw| {
                    let value: Vec<CustomizationIpSettings> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCustomizationIpSettings(value))
                })
            } else { None }
        },
        0x6f6e496e => { // onIn
            if type_name == "ArrayOfVAppOperationInProgress" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVAppOperationInProgress(value))
                })
            } else { None }
        },
        0x6f6e5072 => { // onPr
            if type_name == "ArrayOfCustomizationPrefixName" {
                Some(|raw| {
                    let value: Vec<CustomizationPrefixName> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCustomizationPrefixName(value))
                })
            } else { None }
        },
        0x6f6e5769 => { // onWi
            if type_name == "ArrayOfCustomizationWinOptions" {
                Some(|raw| {
                    let value: Vec<CustomizationWinOptions> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCustomizationWinOptions(value))
                })
            } else { None }
        },
        0x6f6e656e => { // onen
            if type_name == "ArrayOfHostHasComponentFailure" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostHasComponentFailure(value))
                })
            } else { None }
        },
        0x6f726167 => { // orag
            if type_name == "ArrayOfRetrieveVStorageObjSpec" {
                Some(|raw| {
                    let value: Vec<RetrieveVStorageObjSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfRetrieveVStorageObjSpec(value))
                })
            } else { None }
        },
        0x6f776572 => { // ower
            if type_name == "ArrayOfVmFailedToPowerOffEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmFailedToPowerOffEvent(value))
                })
            } else { None }
        },
        0x70546f44 => { // pToD
            if type_name == "ArrayOfVmRelayoutUpToDateEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmRelayoutUpToDateEvent(value))
                })
            } else { None }
        },
        0x70646174 => { // pdat
            if type_name == "ArrayOfAnswerFileUpdateFailure" {
                Some(|raw| {
                    let value: Vec<AnswerFileUpdateFailure> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfAnswerFileUpdateFailure(value))
                })
            } else { None }
        },
        0x72496e66 => { // rInf
            if type_name == "ArrayOfFileTransferInformation" {
                Some(|raw| {
                    let value: Vec<FileTransferInformation> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfFileTransferInformation(value))
                })
            } else { None }
        },
        0x72654261 => { // reBa
            if type_name == "ArrayOfVmfsDatastoreBaseOption" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::VmfsDatastoreBaseOptionTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmfsDatastoreBaseOption(value))
                })
            } else { None }
        },
        0x72654372 => { // reCr
            if type_name == "ArrayOfVmfsDatastoreCreateSpec" {
                Some(|raw| {
                    let value: Vec<VmfsDatastoreCreateSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmfsDatastoreCreateSpec(value))
                })
            } else { None }
        },
        0x72654578 => { // reEx
            match type_name {
                "ArrayOfVmfsDatastoreExpandSpec" => {
                    Some(|raw| {
                        let value: Vec<VmfsDatastoreExpandSpec> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVmfsDatastoreExpandSpec(value))
                    })
                }
                "ArrayOfVmfsDatastoreExtendSpec" => {
                    Some(|raw| {
                        let value: Vec<VmfsDatastoreExtendSpec> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVmfsDatastoreExtendSpec(value))
                    })
                }
                _ => None
            }
        },
        0x726b4361 => { // rkCa
            if type_name == "ArrayOfOpaqueNetworkCapability" {
                Some(|raw| {
                    let value: Vec<OpaqueNetworkCapability> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOpaqueNetworkCapability(value))
                })
            } else { None }
        },
        0x726b5275 => { // rkRu
            if type_name == "ArrayOfDvsLogNetworkRuleAction" {
                Some(|raw| {
                    let value: Vec<DvsLogNetworkRuleAction> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsLogNetworkRuleAction(value))
                })
            } else { None }
        },
        0x726b5461 => { // rkTa
            if type_name == "ArrayOfOpaqueNetworkTargetInfo" {
                Some(|raw| {
                    let value: Vec<OpaqueNetworkTargetInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOpaqueNetworkTargetInfo(value))
                })
            } else { None }
        },
        0x726f6c6c => { // roll
            if type_name == "ArrayOfVirtualControllerOption" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::VirtualControllerOptionTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualControllerOption(value))
                })
            } else { None }
        },
        0x72794b65 => { // ryKe
            if type_name == "ArrayOfGuestRegistryKeyInvalid" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGuestRegistryKeyInvalid(value))
                })
            } else { None }
        },
        0x72795661 => { // ryVa
            if type_name == "ArrayOfGuestRegistryValueFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGuestRegistryValueFault(value))
                })
            } else { None }
        },
        0x734c6f63 => { // sLoc
            if type_name == "ArrayOfCannotAccessLocalSource" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCannotAccessLocalSource(value))
                })
            } else { None }
        },
        0x7350726f => { // sPro
            if type_name == "ArrayOfGuestWindowsProgramSpec" {
                Some(|raw| {
                    let value: Vec<GuestWindowsProgramSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGuestWindowsProgramSpec(value))
                })
            } else { None }
        },
        0x73566d43 => { // sVmC
            if type_name == "ArrayOfCannotAccessVmComponent" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCannotAccessVmComponent(value))
                })
            } else { None }
        },
        0x73697374 => { // sist
            if type_name == "ArrayOfHostIpInconsistentEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostIpInconsistentEvent(value))
                })
            } else { None }
        },
        0x736f6c61 => { // sola
            if type_name == "ArrayOfDasClusterIsolatedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDasClusterIsolatedEvent(value))
                })
            } else { None }
        },
        0x73744572 => { // stEr
            if type_name == "ArrayOfMigrationHostErrorEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfMigrationHostErrorEvent(value))
                })
            } else { None }
        },
        0x7374616c => { // stal
            if type_name == "ArrayOfVcAgentUninstalledEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVcAgentUninstalledEvent(value))
                })
            } else { None }
        },
        0x73747261 => { // stra
            if type_name == "ArrayOfHostSgxRegistrationInfo" {
                Some(|raw| {
                    let value: Vec<HostSgxRegistrationInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostSgxRegistrationInfo(value))
                })
            } else { None }
        },
        0x7374726f => { // stro
            if type_name == "ArrayOfDatastoreDestroyedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDatastoreDestroyedEvent(value))
                })
            } else { None }
        },
        0x7453746f => { // tSto
            if type_name == "ArrayOfInsufficientStorageIops" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInsufficientStorageIops(value))
                })
            } else { None }
        },
        0x74616e63 => { // tanc
            if type_name == "ArrayOfNetStackInstanceProfile" {
                Some(|raw| {
                    let value: Vec<NetStackInstanceProfile> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNetStackInstanceProfile(value))
                })
            } else { None }
        },
        0x74656441 => { // tedA
            if type_name == "ArrayOfOvfUnsupportedAttribute" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfUnsupportedAttribute(value))
                })
            } else { None }
        },
        0x74656d4d => { // temM
            if type_name == "ArrayOfHostFileSystemMountInfo" {
                Some(|raw| {
                    let value: Vec<HostFileSystemMountInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostFileSystemMountInfo(value))
                })
            } else { None }
        },
        0x7468656e => { // then
            if type_name == "ArrayOfSAMLTokenAuthentication" {
                Some(|raw| {
                    let value: Vec<SamlTokenAuthentication> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfSamlTokenAuthentication(value))
                })
            } else { None }
        },
        0x74696350 => { // ticP
            if type_name == "ArrayOfHostDiagnosticPartition" {
                Some(|raw| {
                    let value: Vec<HostDiagnosticPartition> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostDiagnosticPartition(value))
                })
            } else { None }
        },
        0x74697469 => { // titi
            if type_name == "ArrayOfHostDiskPartitionLayout" {
                Some(|raw| {
                    let value: Vec<HostDiskPartitionLayout> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostDiskPartitionLayout(value))
                })
            } else { None }
        },
        0x746f436f => { // toCo
            if type_name == "ArrayOfClusterCryptoConfigInfo" {
                Some(|raw| {
                    let value: Vec<ClusterCryptoConfigInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterCryptoConfigInfo(value))
                })
            } else { None }
        },
        0x7475616c => { // tual
            if type_name == "ArrayOfSeSparseVirtualDiskSpec" {
                Some(|raw| {
                    let value: Vec<SeSparseVirtualDiskSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfSeSparseVirtualDiskSpec(value))
                })
            } else { None }
        },
        0x75654269 => { // ueBi
            if type_name == "ArrayOfGuestRegValueBinarySpec" {
                Some(|raw| {
                    let value: Vec<GuestRegValueBinarySpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGuestRegValueBinarySpec(value))
                })
            } else { None }
        },
        0x75655374 => { // ueSt
            if type_name == "ArrayOfGuestRegValueStringSpec" {
                Some(|raw| {
                    let value: Vec<GuestRegValueStringSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGuestRegValueStringSpec(value))
                })
            } else { None }
        },
        0x756c6551 => { // uleQ
            if type_name == "ArrayOfDvsNetworkRuleQualifier" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::DvsNetworkRuleQualifierTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsNetworkRuleQualifier(value))
                })
            } else { None }
        },
        0x75726549 => { // ureI
            if type_name == "ArrayOfLicenseFeatureInfoState" {
                Some(|raw| {
                    let value: Vec<super::enums::LicenseFeatureInfoStateEnum> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfLicenseFeatureInfoState(value))
                })
            } else { None }
        },
        0x75727369 => { // ursi
            if type_name == "EventFilterSpecRecursionOption" {
                Some(|raw| {
                    let value: super::enums::EventFilterSpecRecursionOptionEnum = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::EventFilterSpecRecursionOption(value))
                })
            } else { None }
        },
        0x76656e74 => { // vent
            if type_name == "ArrayOfDatacenterEventArgument" {
                Some(|raw| {
                    let value: Vec<DatacenterEventArgument> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDatacenterEventArgument(value))
                })
            } else { None }
        },
        0x76696365 => { // vice
            if type_name == "ArrayOfHostSriovDevicePoolInfo" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::HostSriovDevicePoolInfoTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostSriovDevicePoolInfo(value))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_value_deserializer_31(type_name: &str) -> Option<fn(&serde_json::value::RawValue) -> Result<ValueElements, serde_json::Error>> {
    let s = &type_name[15..23];
    let Some(type_ord) = to_u64(s) else {
        return None;
    };
    match type_ord {
        0x416c6c6f63617469 => { // Allocati
            if type_name == "ArrayOfResourceAllocationOption" {
                Some(|raw| {
                    let value: Vec<ResourceAllocationOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfResourceAllocationOption(value))
                })
            } else { None }
        },
        0x436f70794e6f7453 => { // CopyNotS
            if type_name == "ArrayOfSnapshotCopyNotSupported" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfSnapshotCopyNotSupported(value))
                })
            } else { None }
        },
        0x4465636f6d6d6973 => { // Decommis
            if type_name == "ArrayOfVsanHostDecommissionMode" {
                Some(|raw| {
                    let value: Vec<VsanHostDecommissionMode> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVsanHostDecommissionMode(value))
                })
            } else { None }
        },
        0x4465736372697074 => { // Descript
            match type_name {
                "ArrayOfOvfParseDescriptorParams" => {
                    Some(|raw| {
                        let value: Vec<OvfParseDescriptorParams> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfOvfParseDescriptorParams(value))
                    })
                }
                "ArrayOfOvfParseDescriptorResult" => {
                    Some(|raw| {
                        let value: Vec<OvfParseDescriptorResult> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfOvfParseDescriptorResult(value))
                    })
                }
                _ => None
            }
        },
        0x4465766963654361 => { // DeviceCa
            if type_name == "ArrayOfHostRdmaDeviceCapability" {
                Some(|raw| {
                    let value: Vec<HostRdmaDeviceCapability> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostRdmaDeviceCapability(value))
                })
            } else { None }
        },
        0x4d6163436f6e666c => { // MacConfl
            if type_name == "ArrayOfVmStaticMacConflictEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmStaticMacConflictEvent(value))
                })
            } else { None }
        },
        0x4d6f76654e6f7453 => { // MoveNotS
            if type_name == "ArrayOfSnapshotMoveNotSupported" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfSnapshotMoveNotSupported(value))
                })
            } else { None }
        },
        0x4f626a656374436f => { // ObjectCo
            if type_name == "ArrayOfVStorageObjectConfigInfo" {
                Some(|raw| {
                    let value: Vec<VStorageObjectConfigInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVStorageObjectConfigInfo(value))
                })
            } else { None }
        },
        0x506f6f6c43726561 => { // PoolCrea
            if type_name == "ArrayOfResourcePoolCreatedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfResourcePoolCreatedEvent(value))
                })
            } else { None }
        },
        0x5175657279497373 => { // QueryIss
            if type_name == "ArrayOfIoFilterQueryIssueResult" {
                Some(|raw| {
                    let value: Vec<IoFilterQueryIssueResult> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfIoFilterQueryIssueResult(value))
                })
            } else { None }
        },
        0x5342555342426163 => { // SBUSBBac
            if type_name == "ArrayOfVirtualUSBUSBBackingInfo" {
                Some(|raw| {
                    let value: Vec<VirtualUsbusbBackingInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualUsbusbBackingInfo(value))
                })
            } else { None }
        },
        0x534258484349436f => { // SBXHCICo
            if type_name == "ArrayOfVirtualUSBXHCIController" {
                Some(|raw| {
                    let value: Vec<VirtualUsbxhciController> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualUsbxhciController(value))
                })
            } else { None }
        },
        0x53506f727467726f => { // SPortgro
            if type_name == "ArrayOfVMwareDVSPortgroupPolicy" {
                Some(|raw| {
                    let value: Vec<VMwareDvsPortgroupPolicy> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVMwareDvsPortgroupPolicy(value))
                })
            } else { None }
        },
        0x5350766c616e436f => { // SPvlanCo
            if type_name == "ArrayOfVMwareDVSPvlanConfigSpec" {
                Some(|raw| {
                    let value: Vec<VMwareDvsPvlanConfigSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVMwareDvsPvlanConfigSpec(value))
                })
            } else { None }
        },
        0x53567370616e4361 => { // SVspanCa
            if type_name == "ArrayOfVMwareDVSVspanCapability" {
                Some(|raw| {
                    let value: Vec<VMwareDvsVspanCapability> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVMwareDvsVspanCapability(value))
                })
            } else { None }
        },
        0x53567370616e436f => { // SVspanCo
            if type_name == "ArrayOfVMwareDVSVspanConfigSpec" {
                Some(|raw| {
                    let value: Vec<VMwareDvsVspanConfigSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVMwareDvsVspanConfigSpec(value))
                })
            } else { None }
        },
        0x5374616e6462794d => { // StandbyM
            if type_name == "ArrayOfEnteringStandbyModeEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfEnteringStandbyModeEvent(value))
                })
            } else { None }
        },
        0x53796e63486f7374 => { // SyncHost
            if type_name == "ArrayOfDvsOutOfSyncHostArgument" {
                Some(|raw| {
                    let value: Vec<DvsOutOfSyncHostArgument> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsOutOfSyncHostArgument(value))
                })
            } else { None }
        },
        0x53797374656d566f => { // SystemVo
            if type_name == "ArrayOfHostFileSystemVolumeInfo" {
                Some(|raw| {
                    let value: Vec<HostFileSystemVolumeInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostFileSystemVolumeInfo(value))
                })
            } else { None }
        },
        0x547970654e6f7453 => { // TypeNotS
            if type_name == "ArrayOfDiskMoveTypeNotSupported" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDiskMoveTypeNotSupported(value))
                })
            } else { None }
        },
        0x556e617661696c61 => { // Unavaila
            if type_name == "ArrayOfDasAgentUnavailableEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDasAgentUnavailableEvent(value))
                })
            } else { None }
        },
        0x5644494d4d426163 => { // VDIMMBac
            if type_name == "ArrayOfVirtualNVDIMMBackingInfo" {
                Some(|raw| {
                    let value: Vec<VirtualNvdimmBackingInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualNvdimmBackingInfo(value))
                })
            } else { None }
        },
        0x616368696e654361 => { // achineCa
            if type_name == "ArrayOfVirtualMachineCapability" {
                Some(|raw| {
                    let value: Vec<VirtualMachineCapability> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineCapability(value))
                })
            } else { None }
        },
        0x616368696e65436f => { // achineCo
            match type_name {
                "ArrayOfVirtualMachineConfigInfo" => {
                    Some(|raw| {
                        let value: Vec<VirtualMachineConfigInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualMachineConfigInfo(value))
                    })
                }
                "ArrayOfVirtualMachineConfigSpec" => {
                    Some(|raw| {
                        let value: Vec<VirtualMachineConfigSpec> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualMachineConfigSpec(value))
                    })
                }
                "ArrayOfVirtualMachineConnection" => {
                    Some(|raw| {
                        let value: Vec<Box<dyn super::traits::VirtualMachineConnectionTrait>> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualMachineConnection(value))
                    })
                }
                _ => None
            }
        },
        0x616368696e654669 => { // achineFi
            if type_name == "ArrayOfVirtualMachineFileLayout" {
                Some(|raw| {
                    let value: Vec<VirtualMachineFileLayout> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineFileLayout(value))
                })
            } else { None }
        },
        0x616368696e65466c => { // achineFl
            if type_name == "ArrayOfVirtualMachineFloppyInfo" {
                Some(|raw| {
                    let value: Vec<VirtualMachineFloppyInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineFloppyInfo(value))
                })
            } else { None }
        },
        0x616368696e65496d => { // achineIm
            if type_name == "ArrayOfVirtualMachineImportSpec" {
                Some(|raw| {
                    let value: Vec<VirtualMachineImportSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineImportSpec(value))
                })
            } else { None }
        },
        0x616368696e65506f => { // achinePo
            if type_name == "ArrayOfVirtualMachinePowerState" {
                Some(|raw| {
                    let value: Vec<super::enums::VirtualMachinePowerStateEnum> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachinePowerState(value))
                })
            } else { None }
        },
        0x616368696e655175 => { // achineQu
            if type_name == "ArrayOfVirtualMachineQuickStats" {
                Some(|raw| {
                    let value: Vec<VirtualMachineQuickStats> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineQuickStats(value))
                })
            } else { None }
        },
        0x616368696e655365 => { // achineSe
            if type_name == "ArrayOfVirtualMachineSerialInfo" {
                Some(|raw| {
                    let value: Vec<VirtualMachineSerialInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineSerialInfo(value))
                })
            } else { None }
        },
        0x616368696e655461 => { // achineTa
            if type_name == "ArrayOfVirtualMachineTargetInfo" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::VirtualMachineTargetInfoTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineTargetInfo(value))
                })
            } else { None }
        },
        0x616368696e65564d => { // achineVM
            if type_name == "ArrayOfVirtualMachineVMCIDevice" {
                Some(|raw| {
                    let value: Vec<VirtualMachineVmciDevice> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineVmciDevice(value))
                })
            } else { None }
        },
        0x616368696e655663 => { // achineVc
            if type_name == "ArrayOfVirtualMachineVcpuConfig" {
                Some(|raw| {
                    let value: Vec<VirtualMachineVcpuConfig> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineVcpuConfig(value))
                })
            } else { None }
        },
        0x616368696e655769 => { // achineWi
            if type_name == "ArrayOfVirtualMachineWipeResult" {
                Some(|raw| {
                    let value: Vec<VirtualMachineWipeResult> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineWipeResult(value))
                })
            } else { None }
        },
        0x616e67655673616e => { // angeVsan
            if type_name == "ArrayOfCannotChangeVsanNodeUuid" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCannotChangeVsanNodeUuid(value))
                })
            } else { None }
        },
        0x6172616d65746572 => { // arameter
            if type_name == "ArrayOfProfileParameterMetadata" {
                Some(|raw| {
                    let value: Vec<ProfileParameterMetadata> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfProfileParameterMetadata(value))
                })
            } else { None }
        },
        0x6172794469736162 => { // aryDisab
            if type_name == "ArrayOfVmSecondaryDisabledEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmSecondaryDisabledEvent(value))
                })
            } else { None }
        },
        0x6173436f6e666967 => { // asConfig
            if type_name == "ArrayOfInvalidDasConfigArgument" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInvalidDasConfigArgument(value))
                })
            } else { None }
        },
        0x6174696f6e446573 => { // ationDes
            if type_name == "ArrayOfAuthorizationDescription" {
                Some(|raw| {
                    let value: Vec<AuthorizationDescription> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfAuthorizationDescription(value))
                })
            } else { None }
        },
        0x6174696f6e466169 => { // ationFai
            if type_name == "ArrayOfDrsInvocationFailedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDrsInvocationFailedEvent(value))
                })
            } else { None }
        },
        0x6174696f6e497047 => { // ationIpG
            if type_name == "ArrayOfCustomizationIpGenerator" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::CustomizationIpGeneratorTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCustomizationIpGenerator(value))
                })
            } else { None }
        },
        0x6174696f6e4e6574 => { // ationNet
            if type_name == "ArrayOfCustomizationNetBIOSMode" {
                Some(|raw| {
                    let value: Vec<super::enums::CustomizationNetBiosModeEnum> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCustomizationNetBiosMode(value))
                })
            } else { None }
        },
        0x6174696f6e537973 => { // ationSys
            if type_name == "ArrayOfCustomizationSysprepText" {
                Some(|raw| {
                    let value: Vec<CustomizationSysprepText> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCustomizationSysprepText(value))
                })
            } else { None }
        },
        0x6174696f6e556e6b => { // ationUnk
            if type_name == "ArrayOfCustomizationUnknownName" {
                Some(|raw| {
                    let value: Vec<CustomizationUnknownName> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCustomizationUnknownName(value))
                })
            } else { None }
        },
        0x6174697665436c6f => { // ativeClo
            if type_name == "ArrayOfTooManyNativeCloneLevels" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfTooManyNativeCloneLevels(value))
                })
            } else { None }
        },
        0x617475734368616e => { // atusChan
            if type_name == "ArrayOfHealthStatusChangedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHealthStatusChangedEvent(value))
                })
            } else { None }
        },
        0x6365506f6f6c4d6f => { // cePoolMo
            if type_name == "ArrayOfVmResourcePoolMovedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmResourcePoolMovedEvent(value))
                })
            } else { None }
        },
        0x636b496e666f4e65 => { // ckInfoNe
            if type_name == "ArrayOfNetIpStackInfoNetToMedia" {
                Some(|raw| {
                    let value: Vec<NetIpStackInfoNetToMedia> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNetIpStackInfoNetToMedia(value))
                })
            } else { None }
        },
        0x6374656444657669 => { // ctedDevi
            if type_name == "ArrayOfOvfConnectedDeviceFloppy" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfConnectedDeviceFloppy(value))
                })
            } else { None }
        },
        0x6379536174697366 => { // cySatisf
            if type_name == "ArrayOfVsanPolicySatisfiability" {
                Some(|raw| {
                    let value: Vec<VsanPolicySatisfiability> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVsanPolicySatisfiability(value))
                })
            } else { None }
        },
        0x64417564696f4361 => { // dAudioCa
            if type_name == "ArrayOfVirtualHdAudioCardOption" {
                Some(|raw| {
                    let value: Vec<VirtualHdAudioCardOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualHdAudioCardOption(value))
                })
            } else { None }
        },
        0x645461736b446573 => { // dTaskDes
            if type_name == "ArrayOfScheduledTaskDescription" {
                Some(|raw| {
                    let value: Vec<ScheduledTaskDescription> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfScheduledTaskDescription(value))
                })
            } else { None }
        },
        0x645461736b466169 => { // dTaskFai
            if type_name == "ArrayOfScheduledTaskFailedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfScheduledTaskFailedEvent(value))
                })
            } else { None }
        },
        0x6465417661696c61 => { // deAvaila
            if type_name == "ArrayOfDvsUpgradeAvailableEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsUpgradeAvailableEvent(value))
                })
            } else { None }
        },
        0x646d696e4e6f7453 => { // dminNotS
            if type_name == "ArrayOfDisableAdminNotSupported" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDisableAdminNotSupported(value))
                })
            } else { None }
        },
        0x64756c654e6f7453 => { // duleNotS
            if type_name == "ArrayOfVFlashModuleNotSupported" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVFlashModuleNotSupported(value))
                })
            } else { None }
        },
        0x65446973636f7665 => { // eDiscove
            if type_name == "ArrayOfDatastoreDiscoveredEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDatastoreDiscoveredEvent(value))
                })
            } else { None }
        },
        0x654475706c696361 => { // eDuplica
            if type_name == "ArrayOfDatastoreDuplicatedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDatastoreDuplicatedEvent(value))
                })
            } else { None }
        },
        0x6546696c65436f70 => { // eFileCop
            if type_name == "ArrayOfDatastoreFileCopiedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDatastoreFileCopiedEvent(value))
                })
            } else { None }
        },
        0x6549704465746563 => { // eIpDetec
            if type_name == "ArrayOfDuplicateIpDetectedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDuplicateIpDetectedEvent(value))
                })
            } else { None }
        },
        0x6553706563526573 => { // eSpecRes
            if type_name == "ArrayOfVAppCloneSpecResourceMap" {
                Some(|raw| {
                    let value: Vec<VAppCloneSpecResourceMap> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVAppCloneSpecResourceMap(value))
                })
            } else { None }
        },
        0x6561736543617061 => { // easeCapa
            if type_name == "ArrayOfHttpNfcLeaseCapabilities" {
                Some(|raw| {
                    let value: Vec<HttpNfcLeaseCapabilities> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHttpNfcLeaseCapabilities(value))
                })
            } else { None }
        },
        0x65635368616c6c6f => { // ecShallo
            if type_name == "ArrayOfCryptoSpecShallowRecrypt" {
                Some(|raw| {
                    let value: Vec<CryptoSpecShallowRecrypt> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCryptoSpecShallowRecrypt(value))
                })
            } else { None }
        },
        0x65636f6e66696775 => { // econfigu
            match type_name {
                "ArrayOfClusterReconfiguredEvent" => {
                    Some(|raw| {
                        let value: Vec<Event> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfClusterReconfiguredEvent(value))
                    })
                }
                "ArrayOfDvsPortReconfiguredEvent" => {
                    Some(|raw| {
                        let value: Vec<Event> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfDvsPortReconfiguredEvent(value))
                    })
                }
                _ => None
            }
        },
        0x65636f7264526570 => { // ecordRep
            if type_name == "VirtualMachineRecordReplayState" {
                Some(|raw| {
                    let value: super::enums::VirtualMachineRecordReplayStateEnum = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::VirtualMachineRecordReplayState(value))
                })
            } else { None }
        },
        0x6564437573746f6d => { // edCustom
            if type_name == "ArrayOfStructuredCustomizations" {
                Some(|raw| {
                    let value: Vec<StructuredCustomizations> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfStructuredCustomizations(value))
                })
            } else { None }
        },
        0x65644469736b4d6f => { // edDiskMo
            if type_name == "ArrayOfDisallowedDiskModeChange" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDisallowedDiskModeChange(value))
                })
            } else { None }
        },
        0x65644d6b73546963 => { // edMksTic
            if type_name == "ArrayOfVmAcquiredMksTicketEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmAcquiredMksTicketEvent(value))
                })
            } else { None }
        },
        0x656c644465664164 => { // eldDefAd
            if type_name == "ArrayOfCustomFieldDefAddedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCustomFieldDefAddedEvent(value))
                })
            } else { None }
        },
        0x6572537065634279 => { // erSpecBy
            if type_name == "ArrayOfTaskFilterSpecByUsername" {
                Some(|raw| {
                    let value: Vec<TaskFilterSpecByUsername> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfTaskFilterSpecByUsername(value))
                })
            } else { None }
        },
        0x6572537065635469 => { // erSpecTi
            if type_name == "ArrayOfTaskFilterSpecTimeOption" {
                Some(|raw| {
                    let value: Vec<super::enums::TaskFilterSpecTimeOptionEnum> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfTaskFilterSpecTimeOption(value))
                })
            } else { None }
        },
        0x6572616e6365436f => { // eranceCo
            match type_name {
                "ArrayOfFaultToleranceConfigInfo" => {
                    Some(|raw| {
                        let value: Vec<Box<dyn super::traits::FaultToleranceConfigInfoTrait>> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfFaultToleranceConfigInfo(value))
                    })
                }
                "ArrayOfFaultToleranceConfigSpec" => {
                    Some(|raw| {
                        let value: Vec<FaultToleranceConfigSpec> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfFaultToleranceConfigSpec(value))
                    })
                }
                _ => None
            }
        },
        0x65726174696f6e42 => { // erationB
            if type_name == "ArrayOfImportOperationBulkFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfImportOperationBulkFault(value))
                })
            } else { None }
        },
        0x6572766572556e61 => { // erverUna
            if type_name == "ArrayOfLicenseServerUnavailable" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfLicenseServerUnavailable(value))
                })
            } else { None }
        },
        0x6574776f726b436f => { // etworkCo
            if type_name == "ArrayOfClusterNetworkConfigSpec" {
                Some(|raw| {
                    let value: Vec<ClusterNetworkConfigSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterNetworkConfigSpec(value))
                })
            } else { None }
        },
        0x6574776f726b5275 => { // etworkRu
            match type_name {
                "ArrayOfDvsCopyNetworkRuleAction" => {
                    Some(|raw| {
                        let value: Vec<DvsCopyNetworkRuleAction> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfDvsCopyNetworkRuleAction(value))
                    })
                }
                "ArrayOfDvsDropNetworkRuleAction" => {
                    Some(|raw| {
                        let value: Vec<DvsDropNetworkRuleAction> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfDvsDropNetworkRuleAction(value))
                    })
                }
                "ArrayOfDvsPuntNetworkRuleAction" => {
                    Some(|raw| {
                        let value: Vec<DvsPuntNetworkRuleAction> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfDvsPuntNetworkRuleAction(value))
                    })
                }
                _ => None
            }
        },
        0x6576696365426163 => { // eviceBac
            if type_name == "ArrayOfVirtualDeviceBackingInfo" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::VirtualDeviceBackingInfoTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualDeviceBackingInfo(value))
                })
            } else { None }
        },
        0x6576696365427573 => { // eviceBus
            if type_name == "ArrayOfVirtualDeviceBusSlotInfo" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::VirtualDeviceBusSlotInfoTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualDeviceBusSlotInfo(value))
                })
            } else { None }
        },
        0x6576696365436f6e => { // eviceCon
            if type_name == "ArrayOfVirtualDeviceConnectInfo" {
                Some(|raw| {
                    let value: Vec<VirtualDeviceConnectInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualDeviceConnectInfo(value))
                })
            } else { None }
        },
        0x6579456e74697479 => { // eyEntity
            if type_name == "ArrayOfLicenseKeyEntityMismatch" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfLicenseKeyEntityMismatch(value))
                })
            } else { None }
        },
        0x666967496e666f49 => { // figInfoI
            if type_name == "ArrayOfNetIpConfigInfoIpAddress" {
                Some(|raw| {
                    let value: Vec<NetIpConfigInfoIpAddress> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNetIpConfigInfoIpAddress(value))
                })
            } else { None }
        },
        0x68436865636b4361 => { // hCheckCa
            if type_name == "ArrayOfDVSHealthCheckCapability" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::DvsHealthCheckCapabilityTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsHealthCheckCapability(value))
                })
            } else { None }
        },
        0x69626c6556466c61 => { // ibleVFla
            if type_name == "ArrayOfInaccessibleVFlashSource" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInaccessibleVFlashSource(value))
                })
            } else { None }
        },
        0x696365536f757263 => { // iceSourc
            if type_name == "ArrayOfHostServiceSourcePackage" {
                Some(|raw| {
                    let value: Vec<HostServiceSourcePackage> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostServiceSourcePackage(value))
                })
            } else { None }
        },
        0x696456616c756552 => { // idValueR
            if type_name == "ArrayOfOvfInvalidValueReference" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfInvalidValueReference(value))
                })
            } else { None }
        },
        0x69656e7453746f72 => { // ientStor
            if type_name == "ArrayOfInsufficientStorageSpace" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInsufficientStorageSpace(value))
                })
            } else { None }
        },
        0x696c436f6d706c65 => { // ilComple
            if type_name == "ArrayOfAlarmEmailCompletedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfAlarmEmailCompletedEvent(value))
                })
            } else { None }
        },
        0x696e67436f6e6669 => { // ingConfi
            if type_name == "ArrayOfConflictingConfiguration" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfConflictingConfiguration(value))
                })
            } else { None }
        },
        0x696e674e6574776f => { // ingNetwo
            if type_name == "ArrayOfHostMissingNetworksEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostMissingNetworksEvent(value))
                })
            } else { None }
        },
        0x696f6e436f6d7061 => { // ionCompa
            if type_name == "ArrayOfHostVMotionCompatibility" {
                Some(|raw| {
                    let value: Vec<HostVMotionCompatibility> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostVMotionCompatibility(value))
                })
            } else { None }
        },
        0x696f6e566d436f6e => { // ionVmCon
            if type_name == "ArrayOfReplicationVmConfigFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfReplicationVmConfigFault(value))
                })
            } else { None }
        },
        0x697074436f6d706c => { // iptCompl
            if type_name == "ArrayOfAlarmScriptCompleteEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfAlarmScriptCompleteEvent(value))
                })
            } else { None }
        },
        0x6973636f6e6e6563 => { // isconnec
            if type_name == "ArrayOfDvsPortDisconnectedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsPortDisconnectedEvent(value))
                })
            } else { None }
        },
        0x69736b734f6e4c65 => { // isksOnLe
            if type_name == "ArrayOfTooManyDisksOnLegacyHost" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfTooManyDisksOnLegacyHost(value))
                })
            } else { None }
        },
        0x697374656e744d65 => { // istentMe
            if type_name == "ArrayOfHostPersistentMemoryInfo" {
                Some(|raw| {
                    let value: Vec<HostPersistentMemoryInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostPersistentMemoryInfo(value))
                })
            } else { None }
        },
        0x697846696c654174 => { // ixFileAt
            if type_name == "ArrayOfGuestPosixFileAttributes" {
                Some(|raw| {
                    let value: Vec<GuestPosixFileAttributes> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGuestPosixFileAttributes(value))
                })
            } else { None }
        },
        0x6c65456e63727970 => { // leEncryp
            if type_name == "ArrayOfVmDiskFileEncryptionInfo" {
                Some(|raw| {
                    let value: Vec<VmDiskFileEncryptionInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmDiskFileEncryptionInfo(value))
                })
            } else { None }
        },
        0x6c69656e74436572 => { // lientCer
            if type_name == "ArrayOfInvalidClientCertificate" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInvalidClientCertificate(value))
                })
            } else { None }
        },
        0x6c6c6f6361746564 => { // llocated
            if type_name == "ArrayOfDvsVnicAllocatedResource" {
                Some(|raw| {
                    let value: Vec<DvsVnicAllocatedResource> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsVnicAllocatedResource(value))
                })
            } else { None }
        },
        0x6c74566e69634973 => { // ltVnicIs
            if type_name == "ArrayOfIscsiFaultVnicIsLastPath" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfIscsiFaultVnicIsLastPath(value))
                })
            } else { None }
        },
        0x6d6547656e657261 => { // meGenera
            if type_name == "ArrayOfIpHostnameGeneratorError" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfIpHostnameGeneratorError(value))
                })
            } else { None }
        },
        0x6d657243616c6c62 => { // merCallb
            if type_name == "ArrayOfOvfConsumerCallbackFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfConsumerCallbackFault(value))
                })
            } else { None }
        },
        0x6e44697361626c65 => { // nDisable
            if type_name == "ArrayOfOperationDisabledByGuest" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOperationDisabledByGuest(value))
                })
            } else { None }
        },
        0x6e4f7666436f6e73 => { // nOvfCons
            if type_name == "ArrayOfExtensionOvfConsumerInfo" {
                Some(|raw| {
                    let value: Vec<ExtensionOvfConsumerInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfExtensionOvfConsumerInfo(value))
                })
            } else { None }
        },
        0x6e666f4576656e74 => { // nfoEvent
            if type_name == "ArrayOfChangesInfoEventArgument" {
                Some(|raw| {
                    let value: Vec<ChangesInfoEventArgument> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfChangesInfoEventArgument(value))
                })
            } else { None }
        },
        0x6e675365636f6e64 => { // ngSecond
            if type_name == "ArrayOfVmStartingSecondaryEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmStartingSecondaryEvent(value))
                })
            } else { None }
        },
        0x6e736f6e69713133 => { // nsoniq13
            if type_name == "ArrayOfVirtualEnsoniq1371Option" {
                Some(|raw| {
                    let value: Vec<VirtualEnsoniq1371Option> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualEnsoniq1371Option(value))
                })
            } else { None }
        },
        0x6f6361746f724372 => { // ocatorCr
            if type_name == "ArrayOfServiceLocatorCredential" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::ServiceLocatorCredentialTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfServiceLocatorCredential(value))
                })
            } else { None }
        },
        0x6f737453656c6563 => { // ostSelec
            if type_name == "FtIssuesOnHostHostSelectionType" {
                Some(|raw| {
                    let value: super::enums::FtIssuesOnHostHostSelectionTypeEnum = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::FtIssuesOnHostHostSelectionType(value))
                })
            } else { None }
        },
        0x6f75726365556e61 => { // ourceUna
            if type_name == "ArrayOfLicenseSourceUnavailable" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfLicenseSourceUnavailable(value))
                })
            } else { None }
        },
        0x706d486f7374436f => { // pmHostCo
            match type_name {
                "ArrayOfClusterDpmHostConfigInfo" => {
                    Some(|raw| {
                        let value: Vec<ClusterDpmHostConfigInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfClusterDpmHostConfigInfo(value))
                    })
                }
                "ArrayOfClusterDpmHostConfigSpec" => {
                    Some(|raw| {
                        let value: Vec<ClusterDpmHostConfigSpec> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfClusterDpmHostConfigSpec(value))
                    })
                }
                _ => None
            }
        },
        0x706f6e656e74734f => { // ponentsO
            if type_name == "ArrayOfGuestComponentsOutOfDate" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGuestComponentsOutOfDate(value))
                })
            } else { None }
        },
        0x726174696f6e4465 => { // rationDe
            if type_name == "ArrayOfIscsiMigrationDependency" {
                Some(|raw| {
                    let value: Vec<IscsiMigrationDependency> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfIscsiMigrationDependency(value))
                })
            } else { None }
        },
        0x7263686573747261 => { // rchestra
            if type_name == "ArrayOfClusterOrchestrationInfo" {
                Some(|raw| {
                    let value: Vec<ClusterOrchestrationInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterOrchestrationInfo(value))
                })
            } else { None }
        },
        0x72696f7645746865 => { // riovEthe
            if type_name == "ArrayOfVirtualSriovEthernetCard" {
                Some(|raw| {
                    let value: Vec<VirtualSriovEthernetCard> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualSriovEthernetCard(value))
                })
            } else { None }
        },
        0x726f66696c65436f => { // rofileCo
            match type_name {
                "ArrayOfClusterProfileConfigInfo" => {
                    Some(|raw| {
                        let value: Vec<ClusterProfileConfigInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfClusterProfileConfigInfo(value))
                    })
                }
                "ArrayOfClusterProfileConfigSpec" => {
                    Some(|raw| {
                        let value: Vec<Box<dyn super::traits::ClusterProfileConfigSpecTrait>> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfClusterProfileConfigSpec(value))
                    })
                }
                _ => None
            }
        },
        0x726f66696c654372 => { // rofileCr
            if type_name == "ArrayOfClusterProfileCreateSpec" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::ClusterProfileCreateSpecTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterProfileCreateSpec(value))
                })
            } else { None }
        },
        0x727343616e6e6f74 => { // rsCannot
            if type_name == "ArrayOfStorageDrsCannotMoveFTVm" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfStorageDrsCannotMoveFtVm(value))
                })
            } else { None }
        },
        0x7273486d73556e72 => { // rsHmsUnr
            if type_name == "ArrayOfStorageDrsHmsUnreachable" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfStorageDrsHmsUnreachable(value))
                })
            } else { None }
        },
        0x72735265636f6d6d => { // rsRecomm
            if type_name == "ArrayOfClusterDrsRecommendation" {
                Some(|raw| {
                    let value: Vec<ClusterDrsRecommendation> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterDrsRecommendation(value))
                })
            } else { None }
        },
        0x7274794e6574776f => { // rtyNetwo
            if type_name == "ArrayOfOvfPropertyNetworkExport" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfPropertyNetworkExport(value))
                })
            } else { None }
        },
        0x7349706669784361 => { // sIpfixCa
            if type_name == "ArrayOfVMwareDvsIpfixCapability" {
                Some(|raw| {
                    let value: Vec<VMwareDvsIpfixCapability> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVMwareDvsIpfixCapability(value))
                })
            } else { None }
        },
        0x734c61637047726f => { // sLacpGro
            if type_name == "ArrayOfVMwareDvsLacpGroupConfig" {
                Some(|raw| {
                    let value: Vec<VMwareDvsLacpGroupConfig> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVMwareDvsLacpGroupConfig(value))
                })
            } else { None }
        },
        0x73636f6e66696775 => { // sconfigu
            if type_name == "ArrayOfLockerMisconfiguredEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfLockerMisconfiguredEvent(value))
                })
            } else { None }
        },
        0x73696e6744657065 => { // singDepe
            if type_name == "ArrayOfPatchMissingDependencies" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPatchMissingDependencies(value))
                })
            } else { None }
        },
        0x736f6c766564566d => { // solvedVm
            match type_name {
                "ArrayOfHostUnresolvedVmfsExtent" => {
                    Some(|raw| {
                        let value: Vec<HostUnresolvedVmfsExtent> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostUnresolvedVmfsExtent(value))
                    })
                }
                "ArrayOfHostUnresolvedVmfsVolume" => {
                    Some(|raw| {
                        let value: Vec<HostUnresolvedVmfsVolume> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostUnresolvedVmfsVolume(value))
                    })
                }
                _ => None
            }
        },
        0x73746f7265436f6e => { // storeCon
            if type_name == "ArrayOfHostDatastoreConnectInfo" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::HostDatastoreConnectInfoTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostDatastoreConnectInfo(value))
                })
            } else { None }
        },
        0x74486f7374496e66 => { // tHostInf
            if type_name == "ArrayOfIncorrectHostInformation" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfIncorrectHostInformation(value))
                })
            } else { None }
        },
        0x745365636f6e6461 => { // tSeconda
            if type_name == "ArrayOfPowerOnFtSecondaryFailed" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPowerOnFtSecondaryFailed(value))
                })
            } else { None }
        },
        0x74617274436f756e => { // tartCoun
            if type_name == "ArrayOfVmMaxRestartCountReached" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmMaxRestartCountReached(value))
                })
            } else { None }
        },
        0x74656456696d4170 => { // tedVimAp
            if type_name == "ArrayOfUnsupportedVimApiVersion" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfUnsupportedVimApiVersion(value))
                })
            } else { None }
        },
        0x74656e616e63654d => { // tenanceM
            if type_name == "ArrayOfExitMaintenanceModeEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfExitMaintenanceModeEvent(value))
                })
            } else { None }
        },
        0x746f726543726561 => { // toreCrea
            if type_name == "ArrayOfNASDatastoreCreatedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNasDatastoreCreatedEvent(value))
                })
            } else { None }
        },
        0x7474657374617469 => { // ttestati
            if type_name == "ArrayOfHostTpmAttestationReport" {
                Some(|raw| {
                    let value: Vec<HostTpmAttestationReport> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostTpmAttestationReport(value))
                })
            } else { None }
        },
        0x75616c4e6963436f => { // ualNicCo
            if type_name == "ArrayOfHostVirtualNicConnection" {
                Some(|raw| {
                    let value: Vec<HostVirtualNicConnection> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostVirtualNicConnection(value))
                })
            } else { None }
        },
        0x756d65726963436f => { // umericCo
            if type_name == "ArrayOfProfileNumericComparator" {
                Some(|raw| {
                    let value: Vec<super::enums::ProfileNumericComparatorEnum> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfProfileNumericComparator(value))
                })
            } else { None }
        },
        0x765461674576656e => { // vTagEven
            if type_name == "ArrayOfHostTpmNvTagEventDetails" {
                Some(|raw| {
                    let value: Vec<HostTpmNvTagEventDetails> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostTpmNvTagEventDetails(value))
                })
            } else { None }
        },
        0x766963654e6f7453 => { // viceNotS
            if type_name == "ArrayOfRemoteDeviceNotSupported" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfRemoteDeviceNotSupported(value))
                })
            } else { None }
        },
        0x77616c6c52756c65 => { // wallRule
            if type_name == "ArrayOfHostFirewallRulePortType" {
                Some(|raw| {
                    let value: Vec<super::enums::HostFirewallRulePortTypeEnum> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostFirewallRulePortType(value))
                })
            } else { None }
        },
        0x79566d4e6f745265 => { // yVmNotRe
            if type_name == "ArrayOfSecondaryVmNotRegistered" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfSecondaryVmNotRegistered(value))
                })
            } else { None }
        },
        0x7a654e6f74526563 => { // zeNotRec
            if type_name == "ArrayOfMemorySizeNotRecommended" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfMemorySizeNotRecommended(value))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_value_deserializer_32(type_name: &str) -> Option<fn(&serde_json::value::RawValue) -> Result<ValueElements, serde_json::Error>> {
    let s = &type_name[18..26];
    let Some(type_ord) = to_u64(s) else {
        return None;
    };
    match type_ord {
        0x416c726561647945 => { // AlreadyE
            if type_name == "ArrayOfSecondaryVmAlreadyEnabled" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfSecondaryVmAlreadyEnabled(value))
                })
            } else { None }
        },
        0x444d4e6f74537570 => { // DMNotSup
            if type_name == "ArrayOfPhysCompatRDMNotSupported" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPhysCompatRdmNotSupported(value))
                })
            } else { None }
        },
        0x4461746173746f72 => { // Datastor
            if type_name == "ArrayOfConflictingDatastoreFound" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfConflictingDatastoreFound(value))
                })
            } else { None }
        },
        0x4465706c6f796d65 => { // Deployme
            match type_name {
                "ArrayOfPassiveNodeDeploymentSpec" => {
                    Some(|raw| {
                        let value: Vec<PassiveNodeDeploymentSpec> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfPassiveNodeDeploymentSpec(value))
                    })
                }
                "ArrayOfVchaClusterDeploymentSpec" => {
                    Some(|raw| {
                        let value: Vec<VchaClusterDeploymentSpec> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVchaClusterDeploymentSpec(value))
                    })
                }
                _ => None
            }
        },
        0x44657374726f7965 => { // Destroye
            if type_name == "ArrayOfDVPortgroupDestroyedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvPortgroupDestroyedEvent(value))
                })
            } else { None }
        },
        0x496e76616c69644f => { // InvalidO
            if type_name == "ArrayOfReplicationInvalidOptions" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfReplicationInvalidOptions(value))
                })
            } else { None }
        },
        0x496e76616c696453 => { // InvalidS
            if type_name == "ArrayOfOvfConsumerInvalidSection" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfConsumerInvalidSection(value))
                })
            } else { None }
        },
        0x4e69634970526f75 => { // NicIpRou
            if type_name == "ArrayOfHostVirtualNicIpRouteSpec" {
                Some(|raw| {
                    let value: Vec<HostVirtualNicIpRouteSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostVirtualNicIpRouteSpec(value))
                })
            } else { None }
        },
        0x4e69634d616e6167 => { // NicManag
            if type_name == "ArrayOfHostVirtualNicManagerInfo" {
                Some(|raw| {
                    let value: Vec<HostVirtualNicManagerInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostVirtualNicManagerInfo(value))
                })
            } else { None }
        },
        0x4f6666566d496e43 => { // OffVmInC
            if type_name == "ArrayOfCannotPowerOffVmInCluster" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCannotPowerOffVmInCluster(value))
                })
            } else { None }
        },
        0x4f75744f6653796e => { // OutOfSyn
            if type_name == "ArrayOfDvsHostWentOutOfSyncEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsHostWentOutOfSyncEvent(value))
                })
            } else { None }
        },
        0x506f727467726f75 => { // Portgrou
            if type_name == "ArrayOfDvsPortJoinPortgroupEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsPortJoinPortgroupEvent(value))
                })
            } else { None }
        },
        0x5265636f6d6d656e => { // Recommen
            if type_name == "ArrayOfClusterHostRecommendation" {
                Some(|raw| {
                    let value: Vec<ClusterHostRecommendation> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterHostRecommendation(value))
                })
            } else { None }
        },
        0x53435349436f6e74 => { // SCSICont
            if type_name == "ArrayOfParaVirtualSCSIController" {
                Some(|raw| {
                    let value: Vec<ParaVirtualScsiController> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfParaVirtualScsiController(value))
                })
            } else { None }
        },
        0x5365637572697479 => { // Security
            if type_name == "ArrayOfHostNetworkSecurityPolicy" {
                Some(|raw| {
                    let value: Vec<HostNetworkSecurityPolicy> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostNetworkSecurityPolicy(value))
                })
            } else { None }
        },
        0x5370656342795573 => { // SpecByUs
            if type_name == "ArrayOfEventFilterSpecByUsername" {
                Some(|raw| {
                    let value: Vec<EventFilterSpecByUsername> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfEventFilterSpecByUsername(value))
                })
            } else { None }
        },
        0x5472696767657265 => { // Triggere
            if type_name == "ArrayOfAlarmActionTriggeredEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfAlarmActionTriggeredEvent(value))
                })
            } else { None }
        },
        0x56696f6c6174696f => { // Violatio
            if type_name == "ArrayOfDrsSoftRuleViolationEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDrsSoftRuleViolationEvent(value))
                })
            } else { None }
        },
        0x566d50726f677265 => { // VmProgre
            if type_name == "ArrayOfReplicationVmProgressInfo" {
                Some(|raw| {
                    let value: Vec<ReplicationVmProgressInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfReplicationVmProgressInfo(value))
                })
            } else { None }
        },
        0x6164654661696c65 => { // adeFaile
            if type_name == "ArrayOfVcAgentUpgradeFailedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVcAgentUpgradeFailedEvent(value))
                })
            } else { None }
        },
        0x616e616765724556 => { // anagerEV
            if type_name == "ArrayOfClusterEVCManagerEVCState" {
                Some(|raw| {
                    let value: Vec<ClusterEvcManagerEvcState> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterEvcManagerEvcState(value))
                })
            } else { None }
        },
        0x616e6462794d6f64 => { // andbyMod
            if type_name == "ArrayOfDrsExitedStandbyModeEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDrsExitedStandbyModeEvent(value))
                })
            } else { None }
        },
        0x626c655265736f75 => { // bleResou
            if type_name == "ArrayOfHostLicensableResourceKey" {
                Some(|raw| {
                    let value: Vec<super::enums::HostLicensableResourceKeyEnum> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostLicensableResourceKey(value))
                })
            } else { None }
        },
        0x636f6d6d69747465 => { // committe
            if type_name == "ArrayOfClusterOvercommittedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterOvercommittedEvent(value))
                })
            } else { None }
        },
        0x636f766572794c6f => { // coveryLo
            if type_name == "ArrayOfHostNvmeDiscoveryLogEntry" {
                Some(|raw| {
                    let value: Vec<HostNvmeDiscoveryLogEntry> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostNvmeDiscoveryLogEntry(value))
                })
            } else { None }
        },
        0x64486f7374466f72 => { // dHostFor
            if type_name == "ArrayOfNotSupportedHostForVFlash" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNotSupportedHostForVFlash(value))
                })
            } else { None }
        },
        0x64486f7374496e43 => { // dHostInC
            if type_name == "ArrayOfNotSupportedHostInCluster" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNotSupportedHostInCluster(value))
                })
            } else { None }
        },
        0x6450726f70657274 => { // dPropert
            if type_name == "ArrayOfUnconfiguredPropertyValue" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfUnconfiguredPropertyValue(value))
                })
            } else { None }
        },
        0x6544656661756c74 => { // eDefault
            if type_name == "ArrayOfIncompatibleDefaultDevice" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfIncompatibleDefaultDevice(value))
                })
            } else { None }
        },
        0x654d616e69666573 => { // eManifes
            if type_name == "ArrayOfHttpNfcLeaseManifestEntry" {
                Some(|raw| {
                    let value: Vec<HttpNfcLeaseManifestEntry> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHttpNfcLeaseManifestEntry(value))
                })
            } else { None }
        },
        0x656453657373696f => { // edSessio
            if type_name == "ArrayOfServerStartedSessionEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfServerStartedSessionEvent(value))
                })
            } else { None }
        },
        0x656454696d656f75 => { // edTimeou
            if type_name == "ArrayOfHostCnxFailedTimeoutEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostCnxFailedTimeoutEvent(value))
                })
            } else { None }
        },
        0x65686176696f7246 => { // ehaviorF
            if type_name == "ArrayOfInvalidDrsBehaviorForFtVm" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInvalidDrsBehaviorForFtVm(value))
                })
            } else { None }
        },
        0x656d61696e696e67 => { // emaining
            if type_name == "ArrayOfDiskIsLastRemainingNonSSD" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDiskIsLastRemainingNonSsd(value))
                })
            } else { None }
        },
        0x65705265626f6f74 => { // epReboot
            if type_name == "CustomizationSysprepRebootOption" {
                Some(|raw| {
                    let value: super::enums::CustomizationSysprepRebootOptionEnum = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::CustomizationSysprepRebootOption(value))
                })
            } else { None }
        },
        0x65724576656e7444 => { // erEventD
            if type_name == "ArrayOfHostTpmSignerEventDetails" {
                Some(|raw| {
                    let value: Vec<HostTpmSignerEventDetails> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostTpmSignerEventDetails(value))
                })
            } else { None }
        },
        0x65724970416c6c6f => { // erIpAllo
            if type_name == "ArrayOfIpPoolManagerIpAllocation" {
                Some(|raw| {
                    let value: Vec<IpPoolManagerIpAllocation> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfIpPoolManagerIpAllocation(value))
                })
            } else { None }
        },
        0x657373696f6e4d65 => { // essionMe
            if type_name == "ArrayOfProfileExpressionMetadata" {
                Some(|raw| {
                    let value: Vec<ProfileExpressionMetadata> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfProfileExpressionMetadata(value))
                })
            } else { None }
        },
        0x6574335672646d61 => { // et3Vrdma
            if type_name == "ArrayOfVirtualVmxnet3VrdmaOption" {
                Some(|raw| {
                    let value: Vec<VirtualVmxnet3VrdmaOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualVmxnet3VrdmaOption(value))
                })
            } else { None }
        },
        0x6574776f726b506f => { // etworkPo
            if type_name == "ArrayOfMismatchedNetworkPolicies" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfMismatchedNetworkPolicies(value))
                })
            } else { None }
        },
        0x67537065634f7065 => { // gSpecOpe
            if type_name == "VirtualDeviceConfigSpecOperation" {
                Some(|raw| {
                    let value: super::enums::VirtualDeviceConfigSpecOperationEnum = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::VirtualDeviceConfigSpecOperation(value))
                })
            } else { None }
        },
        0x67654368616e6765 => { // geChange
            if type_name == "ArrayOfGlobalMessageChangedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGlobalMessageChangedEvent(value))
                })
            } else { None }
        },
        0x6765724c6963656e => { // gerLicen
            if type_name == "ArrayOfLicenseManagerLicenseInfo" {
                Some(|raw| {
                    let value: Vec<LicenseManagerLicenseInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfLicenseManagerLicenseInfo(value))
                })
            } else { None }
        },
        0x6765724c6f63616c => { // gerLocal
            if type_name == "ArrayOfSessionManagerLocalTicket" {
                Some(|raw| {
                    let value: Vec<SessionManagerLocalTicket> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfSessionManagerLocalTicket(value))
                })
            } else { None }
        },
        0x6765725365727669 => { // gerServi
            if type_name == "ArrayOfServiceManagerServiceInfo" {
                Some(|raw| {
                    let value: Vec<ServiceManagerServiceInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfServiceManagerServiceInfo(value))
                })
            } else { None }
        },
        0x68616e6765427953 => { // hangeByS
            if type_name == "ArrayOfDisallowedChangeByService" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDisallowedChangeByService(value))
                })
            } else { None }
        },
        0x69634861734e6f50 => { // icHasNoP
            if type_name == "ArrayOfFcoeFaultPnicHasNoPortSet" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfFcoeFaultPnicHasNoPortSet(value))
                })
            } else { None }
        },
        0x696365506e696342 => { // icePnicB
            if type_name == "ArrayOfHostRdmaDevicePnicBacking" {
                Some(|raw| {
                    let value: Vec<HostRdmaDevicePnicBacking> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostRdmaDevicePnicBacking(value))
                })
            } else { None }
        },
        0x696d654368616e67 => { // imeChang
            if type_name == "ArrayOfDvsPortRuntimeChangeEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsPortRuntimeChangeEvent(value))
                })
            } else { None }
        },
        0x696e65426f6f744f => { // ineBootO
            if type_name == "ArrayOfVirtualMachineBootOptions" {
                Some(|raw| {
                    let value: Vec<VirtualMachineBootOptions> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineBootOptions(value))
                })
            } else { None }
        },
        0x696e654e6574776f => { // ineNetwo
            if type_name == "ArrayOfVirtualMachineNetworkInfo" {
                Some(|raw| {
                    let value: Vec<VirtualMachineNetworkInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineNetworkInfo(value))
                })
            } else { None }
        },
        0x696e6550726f6669 => { // ineProfi
            if type_name == "ArrayOfVirtualMachineProfileSpec" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::VirtualMachineProfileSpecTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineProfileSpec(value))
                })
            } else { None }
        },
        0x696e6552756e7469 => { // ineRunti
            if type_name == "ArrayOfVirtualMachineRuntimeInfo" {
                Some(|raw| {
                    let value: Vec<VirtualMachineRuntimeInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineRuntimeInfo(value))
                })
            } else { None }
        },
        0x696e6553746f7261 => { // ineStora
            if type_name == "ArrayOfVirtualMachineStorageInfo" {
                Some(|raw| {
                    let value: Vec<VirtualMachineStorageInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineStorageInfo(value))
                })
            } else { None }
        },
        0x696e65546f6f6c73 => { // ineTools
            if type_name == "ArrayOfVirtualMachineToolsStatus" {
                Some(|raw| {
                    let value: Vec<super::enums::VirtualMachineToolsStatusEnum> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineToolsStatus(value))
                })
            } else { None }
        },
        0x696e655669727475 => { // ineVirtu
            match type_name {
                "ArrayOfVirtualMachineVirtualNuma" => {
                    Some(|raw| {
                        let value: Vec<VirtualMachineVirtualNuma> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualMachineVirtualNuma(value))
                    })
                }
                "ArrayOfVirtualMachineVirtualPMem" => {
                    Some(|raw| {
                        let value: Vec<VirtualMachineVirtualPMem> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualMachineVirtualPMem(value))
                    })
                }
                _ => None
            }
        },
        0x6972656d656e7473 => { // irements
            if type_name == "ArrayOfFeatureRequirementsNotMet" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfFeatureRequirementsNotMet(value))
                })
            } else { None }
        },
        0x69727475616c4469 => { // irtualDi
            if type_name == "ArrayOfFileBackedVirtualDiskSpec" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::FileBackedVirtualDiskSpecTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfFileBackedVirtualDiskSpec(value))
                })
            } else { None }
        },
        0x6b52756c65517561 => { // kRuleQua
            if type_name == "ArrayOfDvsIpNetworkRuleQualifier" {
                Some(|raw| {
                    let value: Vec<DvsIpNetworkRuleQualifier> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsIpNetworkRuleQualifier(value))
                })
            } else { None }
        },
        0x6b61676543617061 => { // kageCapa
            if type_name == "ArrayOfSoftwarePackageCapability" {
                Some(|raw| {
                    let value: Vec<SoftwarePackageCapability> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfSoftwarePackageCapability(value))
                })
            } else { None }
        },
        0x6c44656661756c74 => { // lDefault
            if type_name == "ArrayOfHostFirewallDefaultPolicy" {
                Some(|raw| {
                    let value: Vec<HostFirewallDefaultPolicy> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostFirewallDefaultPolicy(value))
                })
            } else { None }
        },
        0x6c4576656e744172 => { // lEventAr
            if type_name == "ArrayOfResourcePoolEventArgument" {
                Some(|raw| {
                    let value: Vec<ResourcePoolEventArgument> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfResourcePoolEventArgument(value))
                })
            } else { None }
        },
        0x6c5265736f757263 => { // lResourc
            if type_name == "ArrayOfResourcePoolResourceUsage" {
                Some(|raw| {
                    let value: Vec<ResourcePoolResourceUsage> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfResourcePoolResourceUsage(value))
                })
            } else { None }
        },
        0x6c52756c65446972 => { // lRuleDir
            if type_name == "ArrayOfHostFirewallRuleDirection" {
                Some(|raw| {
                    let value: Vec<super::enums::HostFirewallRuleDirectionEnum> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostFirewallRuleDirection(value))
                })
            } else { None }
        },
        0x6c52756c65736574 => { // lRuleset
            if type_name == "ArrayOfHostFirewallRulesetIpList" {
                Some(|raw| {
                    let value: Vec<HostFirewallRulesetIpList> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostFirewallRulesetIpList(value))
                })
            } else { None }
        },
        0x6c6544656c657465 => { // leDelete
            if type_name == "ArrayOfDatastoreFileDeletedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDatastoreFileDeletedEvent(value))
                })
            } else { None }
        },
        0x6c6553797374656d => { // leSystem
            if type_name == "ArrayOfHostLocalFileSystemVolume" {
                Some(|raw| {
                    let value: Vec<HostLocalFileSystemVolume> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostLocalFileSystemVolume(value))
                })
            } else { None }
        },
        0x6c6c656c506f7274 => { // llelPort
            if type_name == "ArrayOfVirtualParallelPortOption" {
                Some(|raw| {
                    let value: Vec<VirtualParallelPortOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualParallelPortOption(value))
                })
            } else { None }
        },
        0x6c6f636174696f6e => { // location
            if type_name == "ArrayOfStorageIOAllocationOption" {
                Some(|raw| {
                    let value: Vec<StorageIoAllocationOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfStorageIoAllocationOption(value))
                })
            } else { None }
        },
        0x6d5769746844656c => { // mWithDel
            if type_name == "ArrayOfCannotMoveVmWithDeltaDisk" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCannotMoveVmWithDeltaDisk(value))
                })
            } else { None }
        },
        0x6d61727951756963 => { // maryQuic
            if type_name == "ArrayOfHostListSummaryQuickStats" {
                Some(|raw| {
                    let value: Vec<HostListSummaryQuickStats> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostListSummaryQuickStats(value))
                })
            } else { None }
        },
        0x6e50726f67726573 => { // nProgres
            if type_name == "ArrayOfDvsUpgradeInProgressEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsUpgradeInProgressEvent(value))
                })
            } else { None }
        },
        0x6e63654e6f744c69 => { // nceNotLi
            if type_name == "ArrayOfFaultToleranceNotLicensed" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfFaultToleranceNotLicensed(value))
                })
            } else { None }
        },
        0x6e64656e63795275 => { // ndencyRu
            if type_name == "ArrayOfClusterDependencyRuleInfo" {
                Some(|raw| {
                    let value: Vec<ClusterDependencyRuleInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterDependencyRuleInfo(value))
                })
            } else { None }
        },
        0x6e654e6f74537570 => { // neNotSup
            if type_name == "ArrayOfSnapshotCloneNotSupported" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfSnapshotCloneNotSupported(value))
                })
            } else { None }
        },
        0x6e666f4261636b69 => { // nfoBacki
            if type_name == "ArrayOfBaseConfigInfoBackingInfo" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::BaseConfigInfoBackingInfoTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfBaseConfigInfoBackingInfo(value))
                })
            } else { None }
        },
        0x6e674e6f74537570 => { // ngNotSup
            if type_name == "ArrayOfDeviceBackingNotSupported" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDeviceBackingNotSupported(value))
                })
            } else { None }
        },
        0x6f676963436f6e74 => { // ogicCont
            match type_name {
                "ArrayOfVirtualBusLogicController" => {
                    Some(|raw| {
                        let value: Vec<VirtualBusLogicController> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualBusLogicController(value))
                    })
                }
                "ArrayOfVirtualLsiLogicController" => {
                    Some(|raw| {
                        let value: Vec<VirtualLsiLogicController> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualLsiLogicController(value))
                    })
                }
                _ => None
            }
        },
        0x6f6c6f6779496e74 => { // ologyInt
            match type_name {
                "ArrayOfHostNvmeTopologyInterface" => {
                    Some(|raw| {
                        let value: Vec<HostNvmeTopologyInterface> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostNvmeTopologyInterface(value))
                    })
                }
                "ArrayOfHostScsiTopologyInterface" => {
                    Some(|raw| {
                        let value: Vec<HostScsiTopologyInterface> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostScsiTopologyInterface(value))
                    })
                }
                _ => None
            }
        },
        0x6f6d706c69616e63 => { // omplianc
            if type_name == "ArrayOfLicenseNonComplianceEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfLicenseNonComplianceEvent(value))
                })
            } else { None }
        },
        0x6f6e4576656e7444 => { // onEventD
            if type_name == "ArrayOfHostTpmOptionEventDetails" {
                Some(|raw| {
                    let value: Vec<HostTpmOptionEventDetails> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostTpmOptionEventDetails(value))
                })
            } else { None }
        },
        0x6f6e4c696d697452 => { // onLimitR
            match type_name {
                "ArrayOfMksConnectionLimitReached" => {
                    Some(|raw| {
                        let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfMksConnectionLimitReached(value))
                    })
                }
                "ArrayOfNasConnectionLimitReached" => {
                    Some(|raw| {
                        let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfNasConnectionLimitReached(value))
                    })
                }
                _ => None
            }
        },
        0x6f6e4c696e75784f => { // onLinuxO
            if type_name == "ArrayOfCustomizationLinuxOptions" {
                Some(|raw| {
                    let value: Vec<CustomizationLinuxOptions> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCustomizationLinuxOptions(value))
                })
            } else { None }
        },
        0x6f6e4e6f74537570 => { // onNotSup
            if type_name == "ArrayOfRDMConversionNotSupported" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfRdmConversionNotSupported(value))
                })
            } else { None }
        },
        0x6f6e537461727465 => { // onStarte
            if type_name == "ArrayOfCustomizationStartedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCustomizationStartedEvent(value))
                })
            } else { None }
        },
        0x6f6e6e656374696f => { // onnectio
            if type_name == "ArrayOfHostSystemConnectionState" {
                Some(|raw| {
                    let value: Vec<super::enums::HostSystemConnectionStateEnum> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostSystemConnectionState(value))
                })
            } else { None }
        },
        0x6f726b436f6e6e65 => { // orkConne
            if type_name == "ArrayOfHostNewNetworkConnectInfo" {
                Some(|raw| {
                    let value: Vec<HostNewNetworkConnectInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostNewNetworkConnectInfo(value))
                })
            } else { None }
        },
        0x6f726d616e636553 => { // ormanceS
            if type_name == "ArrayOfStoragePerformanceSummary" {
                Some(|raw| {
                    let value: Vec<StoragePerformanceSummary> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfStoragePerformanceSummary(value))
                })
            } else { None }
        },
        0x705461736b536368 => { // pTaskSch
            if type_name == "ArrayOfAfterStartupTaskScheduler" {
                Some(|raw| {
                    let value: Vec<AfterStartupTaskScheduler> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfAfterStartupTaskScheduler(value))
                })
            } else { None }
        },
        0x7061636543726561 => { // paceCrea
            if type_name == "ArrayOfNvdimmNamespaceCreateSpec" {
                Some(|raw| {
                    let value: Vec<NvdimmNamespaceCreateSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNvdimmNamespaceCreateSpec(value))
                })
            } else { None }
        },
        0x7061636544656c65 => { // paceDele
            if type_name == "ArrayOfNvdimmNamespaceDeleteSpec" {
                Some(|raw| {
                    let value: Vec<NvdimmNamespaceDeleteSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNvdimmNamespaceDeleteSpec(value))
                })
            } else { None }
        },
        0x7065634261636b69 => { // pecBacki
            if type_name == "ArrayOfVslmCreateSpecBackingSpec" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::VslmCreateSpecBackingSpecTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVslmCreateSpecBackingSpec(value))
                })
            } else { None }
        },
        0x706f727453706563 => { // portSpec
            match type_name {
                "ArrayOfOvfCreateImportSpecParams" => {
                    Some(|raw| {
                        let value: Vec<OvfCreateImportSpecParams> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfOvfCreateImportSpecParams(value))
                    })
                }
                "ArrayOfOvfCreateImportSpecResult" => {
                    Some(|raw| {
                        let value: Vec<OvfCreateImportSpecResult> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfOvfCreateImportSpecResult(value))
                    })
                }
                _ => None
            }
        },
        0x70706f7274656442 => { // pportedB
            if type_name == "ArrayOfEVCModeUnsupportedByHosts" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfEvcModeUnsupportedByHosts(value))
                })
            } else { None }
        },
        0x7075436170616269 => { // puCapabi
            if type_name == "ArrayOfHostSharedGpuCapabilities" {
                Some(|raw| {
                    let value: Vec<HostSharedGpuCapabilities> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostSharedGpuCapabilities(value))
                })
            } else { None }
        },
        0x72436f6e7461696e => { // rContain
            if type_name == "ArrayOfVasaProviderContainerSpec" {
                Some(|raw| {
                    let value: Vec<VasaProviderContainerSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVasaProviderContainerSpec(value))
                })
            } else { None }
        },
        0x7254637050617261 => { // rTcpPara
            if type_name == "ArrayOfHostNvmeOverTcpParameters" {
                Some(|raw| {
                    let value: Vec<HostNvmeOverTcpParameters> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostNvmeOverTcpParameters(value))
                })
            } else { None }
        },
        0x7265437265617465 => { // reCreate
            if type_name == "ArrayOfVMFSDatastoreCreatedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmfsDatastoreCreatedEvent(value))
                })
            } else { None }
        },
        0x7265546f706f6c6f => { // reTopolo
            if type_name == "ArrayOfHostPlugStoreTopologyPath" {
                Some(|raw| {
                    let value: Vec<HostPlugStoreTopologyPath> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostPlugStoreTopologyPath(value))
                })
            } else { None }
        },
        0x72697074696f6e53 => { // riptionS
            if type_name == "ArrayOfProfileDescriptionSection" {
                Some(|raw| {
                    let value: Vec<ProfileDescriptionSection> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfProfileDescriptionSection(value))
                })
            } else { None }
        },
        0x726e657443617264 => { // rnetCard
            if type_name == "ArrayOfVirtualEthernetCardOption" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::VirtualEthernetCardOptionTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualEthernetCardOption(value))
                })
            } else { None }
        },
        0x7274437265617465 => { // rtCreate
            if type_name == "ArrayOfHostLocalPortCreatedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostLocalPortCreatedEvent(value))
                })
            } else { None }
        },
        0x72766572436f6e66 => { // rverConf
            if type_name == "ArrayOfNoLicenseServerConfigured" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNoLicenseServerConfigured(value))
                })
            } else { None }
        },
        0x73616c6c6f776564 => { // sallowed
            if type_name == "ArrayOfOperationDisallowedOnHost" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOperationDisallowedOnHost(value))
                })
            } else { None }
        },
        0x73616e456e61626c => { // sanEnabl
            if type_name == "ArrayOfCannotMoveVsanEnabledHost" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCannotMoveVsanEnabledHost(value))
                })
            } else { None }
        },
        0x7363726970746f72 => { // scriptor
            match type_name {
                "ArrayOfOvfCreateDescriptorParams" => {
                    Some(|raw| {
                        let value: Vec<OvfCreateDescriptorParams> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfOvfCreateDescriptorParams(value))
                    })
                }
                "ArrayOfOvfCreateDescriptorResult" => {
                    Some(|raw| {
                        let value: Vec<OvfCreateDescriptorResult> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfOvfCreateDescriptorResult(value))
                    })
                }
                _ => None
            }
        },
        0x7365457870697265 => { // seExpire
            if type_name == "ArrayOfServerLicenseExpiredEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfServerLicenseExpiredEvent(value))
                })
            } else { None }
        },
        0x736b437265617465 => { // skCreate
            if type_name == "ArrayOfScheduledTaskCreatedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfScheduledTaskCreatedEvent(value))
                })
            } else { None }
        },
        0x736b52656d6f7665 => { // skRemove
            if type_name == "ArrayOfScheduledTaskRemovedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfScheduledTaskRemovedEvent(value))
                })
            } else { None }
        },
        0x736b537461727465 => { // skStarte
            if type_name == "ArrayOfScheduledTaskStartedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfScheduledTaskStartedEvent(value))
                })
            } else { None }
        },
        0x7374436f6e6e6563 => { // stConnec
            if type_name == "ArrayOfGatewayToHostConnectFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGatewayToHostConnectFault(value))
                })
            } else { None }
        },
        0x7374517569657363 => { // stQuiesc
            if type_name == "GuestQuiesceEndGuestQuiesceError" {
                Some(|raw| {
                    let value: super::enums::GuestQuiesceEndGuestQuiesceErrorEnum = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::GuestQuiesceEndGuestQuiesceError(value))
                })
            } else { None }
        },
        0x73745761726e696e => { // stWarnin
            if type_name == "ArrayOfMigrationHostWarningEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfMigrationHostWarningEvent(value))
                })
            } else { None }
        },
        0x744461746173746f => { // tDatasto
            if type_name == "ArrayOfDasHeartbeatDatastoreInfo" {
                Some(|raw| {
                    let value: Vec<DasHeartbeatDatastoreInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDasHeartbeatDatastoreInfo(value))
                })
            } else { None }
        },
        0x74656d4167656e74 => { // temAgent
            if type_name == "ArrayOfHostSnmpSystemAgentLimits" {
                Some(|raw| {
                    let value: Vec<HostSnmpSystemAgentLimits> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostSnmpSystemAgentLimits(value))
                })
            } else { None }
        },
        0x7474656d70746564 => { // ttempted
            if type_name == "ArrayOfClusterNotAttemptedVmInfo" {
                Some(|raw| {
                    let value: Vec<ClusterNotAttemptedVmInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterNotAttemptedVmInfo(value))
                })
            } else { None }
        },
        0x7475537570706f72 => { // tuSuppor
            if type_name == "ArrayOfUplinkPortMtuSupportEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfUplinkPortMtuSupportEvent(value))
                })
            } else { None }
        },
        0x7563636573736675 => { // uccessfu
            if type_name == "ArrayOfVmRelayoutSuccessfulEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmRelayoutSuccessfulEvent(value))
                })
            } else { None }
        },
        0x75674e6f74537570 => { // ugNotSup
            match type_name {
                "ArrayOfDeviceHotPlugNotSupported" => {
                    Some(|raw| {
                        let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfDeviceHotPlugNotSupported(value))
                    })
                }
                "ArrayOfMemoryHotPlugNotSupported" => {
                    Some(|raw| {
                        let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfMemoryHotPlugNotSupported(value))
                    })
                }
                _ => None
            }
        },
        0x756d65486f737456 => { // umeHostV
            if type_name == "ArrayOfHostVvolVolumeHostVvolNQN" {
                Some(|raw| {
                    let value: Vec<HostVvolVolumeHostVvolNqn> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostVvolVolumeHostVvolNqn(value))
                })
            } else { None }
        },
        0x75726365436f6e66 => { // urceConf
            match type_name {
                "ArrayOfComputeResourceConfigInfo" => {
                    Some(|raw| {
                        let value: Vec<Box<dyn super::traits::ComputeResourceConfigInfoTrait>> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfComputeResourceConfigInfo(value))
                    })
                }
                "ArrayOfComputeResourceConfigSpec" => {
                    Some(|raw| {
                        let value: Vec<Box<dyn super::traits::ComputeResourceConfigSpecTrait>> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfComputeResourceConfigSpec(value))
                    })
                }
                _ => None
            }
        },
        0x75726365436f6e73 => { // urceCons
            if type_name == "ArrayOfOvfHostResourceConstraint" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfHostResourceConstraint(value))
                })
            } else { None }
        },
        0x75734368616e6765 => { // usChange
            if type_name == "ArrayOfClusterStatusChangedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterStatusChangedEvent(value))
                })
            } else { None }
        },
        0x7665436c6f6e6573 => { // veClones
            if type_name == "ArrayOfTooManyNativeClonesOnFile" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfTooManyNativeClonesOnFile(value))
                })
            } else { None }
        },
        0x7673436f6e666967 => { // vsConfig
            if type_name == "ArrayOfDVSManagerDvsConfigTarget" {
                Some(|raw| {
                    let value: Vec<DvsManagerDvsConfigTarget> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsManagerDvsConfigTarget(value))
                })
            } else { None }
        },
        0x7843757374526573 => { // xCustRes
            if type_name == "ArrayOfMissingLinuxCustResources" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfMissingLinuxCustResources(value))
                })
            } else { None }
        },
        0x7941646d696e6973 => { // yAdminis
            if type_name == "ArrayOfRestrictedByAdministrator" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfRestrictedByAdministrator(value))
                })
            } else { None }
        },
        0x795461736b536368 => { // yTaskSch
            if type_name == "ArrayOfMonthlyByDayTaskScheduler" {
                Some(|raw| {
                    let value: Vec<MonthlyByDayTaskScheduler> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfMonthlyByDayTaskScheduler(value))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_value_deserializer_33(type_name: &str) -> Option<fn(&serde_json::value::RawValue) -> Result<ValueElements, serde_json::Error>> {
    let s = &type_name[14..22];
    let Some(type_ord) = to_u64(s) else {
        return None;
    };
    match type_ord {
        0x4170706c7950726f => { // ApplyPro
            if type_name == "ArrayOfProfileApplyProfileElement" {
                Some(|raw| {
                    let value: Vec<ProfileApplyProfileElement> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfProfileApplyProfileElement(value))
                })
            } else { None }
        },
        0x4364726f6d49736f => { // CdromIso
            if type_name == "ArrayOfVirtualCdromIsoBackingInfo" {
                Some(|raw| {
                    let value: Vec<VirtualCdromIsoBackingInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualCdromIsoBackingInfo(value))
                })
            } else { None }
        },
        0x436c6f6e65644e6f => { // ClonedNo
            if type_name == "ArrayOfVmBeingClonedNoFolderEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmBeingClonedNoFolderEvent(value))
                })
            } else { None }
        },
        0x436f6d6d616e6445 => { // CommandE
            if type_name == "ArrayOfHostTpmCommandEventDetails" {
                Some(|raw| {
                    let value: Vec<HostTpmCommandEventDetails> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostTpmCommandEventDetails(value))
                })
            } else { None }
        },
        0x436f6d706f736974 => { // Composit
            if type_name == "ArrayOfProfileCompositeExpression" {
                Some(|raw| {
                    let value: Vec<ProfileCompositeExpression> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfProfileCompositeExpression(value))
                })
            } else { None }
        },
        0x4461746173746f72 => { // Datastor
            if type_name == "ArrayOfClusterDatastoreUpdateSpec" {
                Some(|raw| {
                    let value: Vec<ClusterDatastoreUpdateSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterDatastoreUpdateSpec(value))
                })
            } else { None }
        },
        0x4465766963654261 => { // DeviceBa
            if type_name == "ArrayOfVirtualDeviceBackingOption" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::VirtualDeviceBackingOptionTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualDeviceBackingOption(value))
                })
            } else { None }
        },
        0x4465766963654275 => { // DeviceBu
            if type_name == "ArrayOfVirtualDeviceBusSlotOption" {
                Some(|raw| {
                    let value: Vec<VirtualDeviceBusSlotOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualDeviceBusSlotOption(value))
                })
            } else { None }
        },
        0x446576696365436f => { // DeviceCo
            if type_name == "ArrayOfVirtualDeviceConnectOption" {
                Some(|raw| {
                    let value: Vec<VirtualDeviceConnectOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualDeviceConnectOption(value))
                })
            } else { None }
        },
        0x446f776e67726164 => { // Downgrad
            if type_name == "ArrayOfLicenseDowngradeDisallowed" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfLicenseDowngradeDisallowed(value))
                })
            } else { None }
        },
        0x4472734175746f6d => { // DrsAutom
            if type_name == "ArrayOfStorageDrsAutomationConfig" {
                Some(|raw| {
                    let value: Vec<StorageDrsAutomationConfig> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfStorageDrsAutomationConfig(value))
                })
            } else { None }
        },
        0x4472734661756c74 => { // DrsFault
            if type_name == "ArrayOfClusterDrsFaultsFaultsByVm" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::ClusterDrsFaultsFaultsByVmTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterDrsFaultsFaultsByVm(value))
                })
            } else { None }
        },
        0x447273506f645365 => { // DrsPodSe
            if type_name == "ArrayOfStorageDrsPodSelectionSpec" {
                Some(|raw| {
                    let value: Vec<StorageDrsPodSelectionSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfStorageDrsPodSelectionSpec(value))
                })
            } else { None }
        },
        0x44727352656c6f63 => { // DrsReloc
            if type_name == "ArrayOfStorageDrsRelocateDisabled" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfStorageDrsRelocateDisabled(value))
                })
            } else { None }
        },
        0x456e746974794576 => { // EntityEv
            if type_name == "ArrayOfManagedEntityEventArgument" {
                Some(|raw| {
                    let value: Vec<ManagedEntityEventArgument> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfManagedEntityEventArgument(value))
                })
            } else { None }
        },
        0x4578697465645061 => { // ExitedPa
            if type_name == "ArrayOfDvsPortExitedPassthruEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsPortExitedPassthruEvent(value))
                })
            } else { None }
        },
        0x4661696c65644e6f => { // FailedNo
            match type_name {
                "ArrayOfHostCnxFailedNoAccessEvent" => {
                    Some(|raw| {
                        let value: Vec<Event> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostCnxFailedNoAccessEvent(value))
                    })
                }
                "ArrayOfHostCnxFailedNotFoundEvent" => {
                    Some(|raw| {
                        let value: Vec<Event> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostCnxFailedNotFoundEvent(value))
                    })
                }
                _ => None
            }
        },
        0x4661756c74546f6c => { // FaultTol
            if type_name == "VirtualMachineFaultToleranceState" {
                Some(|raw| {
                    let value: super::enums::VirtualMachineFaultToleranceStateEnum = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::VirtualMachineFaultToleranceState(value))
                })
            } else { None }
        },
        0x466978656453697a => { // FixedSiz
            if type_name == "ArrayOfClusterFixedSizeSlotPolicy" {
                Some(|raw| {
                    let value: Vec<ClusterFixedSizeSlotPolicy> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterFixedSizeSlotPolicy(value))
                })
            } else { None }
        },
        0x46745365636f6e64 => { // FtSecond
            if type_name == "ArrayOfPowerOnFtSecondaryTimedout" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPowerOnFtSecondaryTimedout(value))
                })
            } else { None }
        },
        0x486f7374436f6e6e => { // HostConn
            if type_name == "ArrayOfInvalidHostConnectionState" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInvalidHostConnectionState(value))
                })
            } else { None }
        },
        0x494445436f6e7472 => { // IDEContr
            if type_name == "ArrayOfVirtualIDEControllerOption" {
                Some(|raw| {
                    let value: Vec<VirtualIdeControllerOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualIdeControllerOption(value))
                })
            } else { None }
        },
        0x496e746572666163 => { // Interfac
            if type_name == "ArrayOfVmotionInterfaceNotEnabled" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmotionInterfaceNotEnabled(value))
                })
            } else { None }
        },
        0x4c65617665506f72 => { // LeavePor
            if type_name == "ArrayOfDvsPortLeavePortgroupEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsPortLeavePortgroupEvent(value))
                })
            } else { None }
        },
        0x4c6963656e736545 => { // LicenseE
            if type_name == "ArrayOfVMotionLicenseExpiredEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVMotionLicenseExpiredEvent(value))
                })
            } else { None }
        },
        0x4c6f6361746f724e => { // LocatorN
            if type_name == "ArrayOfServiceLocatorNamePassword" {
                Some(|raw| {
                    let value: Vec<ServiceLocatorNamePassword> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfServiceLocatorNamePassword(value))
                })
            } else { None }
        },
        0x4d616368696e6541 => { // MachineA
            if type_name == "ArrayOfVirtualMachineAffinityInfo" {
                Some(|raw| {
                    let value: Vec<VirtualMachineAffinityInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineAffinityInfo(value))
                })
            } else { None }
        },
        0x4d616368696e6543 => { // MachineC
            if type_name == "ArrayOfVirtualMachineConfigOption" {
                Some(|raw| {
                    let value: Vec<VirtualMachineConfigOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineConfigOption(value))
                })
            } else { None }
        },
        0x4d616368696e6544 => { // MachineD
            if type_name == "ArrayOfVirtualMachineDvxClassInfo" {
                Some(|raw| {
                    let value: Vec<VirtualMachineDvxClassInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineDvxClassInfo(value))
                })
            } else { None }
        },
        0x4d616368696e6546 => { // MachineF
            if type_name == "ArrayOfVirtualMachineFileLayoutEx" {
                Some(|raw| {
                    let value: Vec<VirtualMachineFileLayoutEx> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineFileLayoutEx(value))
                })
            } else { None }
        },
        0x4d616368696e6547 => { // MachineG
            if type_name == "ArrayOfVirtualMachineGuestSummary" {
                Some(|raw| {
                    let value: Vec<VirtualMachineGuestSummary> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineGuestSummary(value))
                })
            } else { None }
        },
        0x4d616368696e654d => { // MachineM
            if type_name == "ArrayOfVirtualMachineMovePriority" {
                Some(|raw| {
                    let value: Vec<super::enums::VirtualMachineMovePriorityEnum> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineMovePriority(value))
                })
            } else { None }
        },
        0x4d616368696e6550 => { // MachineP
            if type_name == "ArrayOfVirtualMachineParallelInfo" {
                Some(|raw| {
                    let value: Vec<VirtualMachineParallelInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineParallelInfo(value))
                })
            } else { None }
        },
        0x4d616368696e6551 => { // MachineQ
            if type_name == "ArrayOfVirtualMachineQuestionInfo" {
                Some(|raw| {
                    let value: Vec<VirtualMachineQuestionInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineQuestionInfo(value))
                })
            } else { None }
        },
        0x4d616368696e6552 => { // MachineR
            if type_name == "ArrayOfVirtualMachineRelocateSpec" {
                Some(|raw| {
                    let value: Vec<VirtualMachineRelocateSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineRelocateSpec(value))
                })
            } else { None }
        },
        0x4d616368696e6553 => { // MachineS
            match type_name {
                "ArrayOfVirtualMachineSnapshotInfo" => {
                    Some(|raw| {
                        let value: Vec<VirtualMachineSnapshotInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualMachineSnapshotInfo(value))
                    })
                }
                "ArrayOfVirtualMachineSnapshotTree" => {
                    Some(|raw| {
                        let value: Vec<VirtualMachineSnapshotTree> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualMachineSnapshotTree(value))
                    })
                }
                _ => None
            }
        },
        0x4e69634d616e6167 => { // NicManag
            if type_name == "ArrayOfVirtualNicManagerNetConfig" {
                Some(|raw| {
                    let value: Vec<VirtualNicManagerNetConfig> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualNicManagerNetConfig(value))
                })
            } else { None }
        },
        0x4f66664f6e49736f => { // OffOnIso
            if type_name == "ArrayOfVmPowerOffOnIsolationEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmPowerOffOnIsolationEvent(value))
                })
            } else { None }
        },
        0x4f66666c6f616443 => { // OffloadC
            if type_name == "ArrayOfHostNetOffloadCapabilities" {
                Some(|raw| {
                    let value: Vec<HostNetOffloadCapabilities> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostNetOffloadCapabilities(value))
                })
            } else { None }
        },
        0x504349436f6e7472 => { // PCIContr
            if type_name == "ArrayOfVirtualPCIControllerOption" {
                Some(|raw| {
                    let value: Vec<VirtualPciControllerOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualPciControllerOption(value))
                })
            } else { None }
        },
        0x505332436f6e7472 => { // PS2Contr
            if type_name == "ArrayOfVirtualPS2ControllerOption" {
                Some(|raw| {
                    let value: Vec<VirtualPs2ControllerOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualPs2ControllerOption(value))
                })
            } else { None }
        },
        0x506f7765724d616e => { // PowerMan
            if type_name == "ArrayOfHostCpuPowerManagementInfo" {
                Some(|raw| {
                    let value: Vec<HostCpuPowerManagementInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostCpuPowerManagementInfo(value))
                })
            } else { None }
        },
        0x5265737461727443 => { // RestartC
            if type_name == "ArrayOfVmMaxFTRestartCountReached" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmMaxFtRestartCountReached(value))
                })
            } else { None }
        },
        0x53494f436f6e7472 => { // SIOContr
            if type_name == "ArrayOfVirtualSIOControllerOption" {
                Some(|raw| {
                    let value: Vec<VirtualSioControllerOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualSioControllerOption(value))
                })
            } else { None }
        },
        0x53797374656d564d => { // SystemVM
            match type_name {
                "ArrayOfClusterSystemVMsConfigInfo" => {
                    Some(|raw| {
                        let value: Vec<ClusterSystemVMsConfigInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfClusterSystemVMsConfigInfo(value))
                    })
                }
                "ArrayOfClusterSystemVMsConfigSpec" => {
                    Some(|raw| {
                        let value: Vec<ClusterSystemVMsConfigSpec> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfClusterSystemVMsConfigSpec(value))
                    })
                }
                _ => None
            }
        },
        0x555342436f6e7472 => { // USBContr
            if type_name == "ArrayOfVirtualUSBControllerOption" {
                Some(|raw| {
                    let value: Vec<VirtualUsbControllerOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualUsbControllerOption(value))
                })
            } else { None }
        },
        0x5553425553424261 => { // USBUSBBa
            if type_name == "ArrayOfVirtualUSBUSBBackingOption" {
                Some(|raw| {
                    let value: Vec<VirtualUsbusbBackingOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualUsbusbBackingOption(value))
                })
            } else { None }
        },
        0x564d6f74696f6e4e => { // VMotionN
            if type_name == "ArrayOfStorageVMotionNotSupported" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfStorageVMotionNotSupported(value))
                })
            } else { None }
        },
        0x5653466561747572 => { // VSFeatur
            if type_name == "ArrayOfVMwareDVSFeatureCapability" {
                Some(|raw| {
                    let value: Vec<VMwareDvsFeatureCapability> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVMwareDvsFeatureCapability(value))
                })
            } else { None }
        },
        0x56534865616c7468 => { // VSHealth
            if type_name == "ArrayOfVMwareDVSHealthCheckConfig" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::VMwareDvsHealthCheckConfigTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVMwareDvsHealthCheckConfig(value))
                })
            } else { None }
        },
        0x56657273696f6e45 => { // VersionE
            if type_name == "ArrayOfHostTpmVersionEventDetails" {
                Some(|raw| {
                    let value: Vec<HostTpmVersionEventDetails> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostTpmVersionEventDetails(value))
                })
            } else { None }
        },
        0x566d4f7263686573 => { // VmOrches
            match type_name {
                "ArrayOfClusterVmOrchestrationInfo" => {
                    Some(|raw| {
                        let value: Vec<ClusterVmOrchestrationInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfClusterVmOrchestrationInfo(value))
                    })
                }
                "ArrayOfClusterVmOrchestrationSpec" => {
                    Some(|raw| {
                        let value: Vec<ClusterVmOrchestrationSpec> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfClusterVmOrchestrationSpec(value))
                    })
                }
                _ => None
            }
        },
        0x566d6f74696f6e49 => { // VmotionI
            if type_name == "ArrayOfStorageVmotionIncompatible" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfStorageVmotionIncompatible(value))
                })
            } else { None }
        },
        0x616e61676572486f => { // anagerHo
            if type_name == "ArrayOfCryptoManagerHostKeyStatus" {
                Some(|raw| {
                    let value: Vec<CryptoManagerHostKeyStatus> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCryptoManagerHostKeyStatus(value))
                })
            } else { None }
        },
        0x6173746f72654578 => { // astoreEx
            match type_name {
                "ArrayOfVMFSDatastoreExpandedEvent" => {
                    Some(|raw| {
                        let value: Vec<Event> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVmfsDatastoreExpandedEvent(value))
                    })
                }
                "ArrayOfVMFSDatastoreExtendedEvent" => {
                    Some(|raw| {
                        let value: Vec<Event> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVmfsDatastoreExtendedEvent(value))
                    })
                }
                _ => None
            }
        },
        0x626c6541646d696e => { // bleAdmin
            if type_name == "ArrayOfHostEnableAdminFailedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostEnableAdminFailedEvent(value))
                })
            } else { None }
        },
        0x6369656e74506572 => { // cientPer
            if type_name == "ArrayOfInsufficientPerCpuCapacity" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInsufficientPerCpuCapacity(value))
                })
            } else { None }
        },
        0x6369656e74526573 => { // cientRes
            if type_name == "ArrayOfInsufficientResourcesFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInsufficientResourcesFault(value))
                })
            } else { None }
        },
        0x64456c656d656e74 => { // dElement
            if type_name == "ArrayOfExtendedElementDescription" {
                Some(|raw| {
                    let value: Vec<ExtendedElementDescription> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfExtendedElementDescription(value))
                })
            } else { None }
        },
        0x64486f73744f7065 => { // dHostOpe
            if type_name == "ArrayOfCanceledHostOperationEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCanceledHostOperationEvent(value))
                })
            } else { None }
        },
        0x64546f5265626f6f => { // dToReboo
            if type_name == "ArrayOfVmFailedToRebootGuestEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmFailedToRebootGuestEvent(value))
                })
            } else { None }
        },
        0x654265696e675570 => { // eBeingUp
            if type_name == "ArrayOfTemplateBeingUpgradedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfTemplateBeingUpgradedEvent(value))
                })
            } else { None }
        },
        0x654f626a65637441 => { // eObjectA
            if type_name == "ArrayOfVStorageObjectAssociations" {
                Some(|raw| {
                    let value: Vec<VStorageObjectAssociations> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVStorageObjectAssociations(value))
                })
            } else { None }
        },
        0x654f626a65637453 => { // eObjectS
            if type_name == "ArrayOfVStorageObjectSnapshotInfo" {
                Some(|raw| {
                    let value: Vec<VStorageObjectSnapshotInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVStorageObjectSnapshotInfo(value))
                })
            } else { None }
        },
        0x654f76657252646d => { // eOverRdm
            if type_name == "ArrayOfHostNvmeOverRdmaParameters" {
                Some(|raw| {
                    let value: Vec<HostNvmeOverRdmaParameters> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostNvmeOverRdmaParameters(value))
                })
            } else { None }
        },
        0x65506f6f6c446573 => { // ePoolDes
            if type_name == "ArrayOfResourcePoolDestroyedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfResourcePoolDestroyedEvent(value))
                })
            } else { None }
        },
        0x6554696d65537973 => { // eTimeSys
            if type_name == "ArrayOfHostDateTimeSystemTimeZone" {
                Some(|raw| {
                    let value: Vec<HostDateTimeSystemTimeZone> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostDateTimeSystemTimeZone(value))
                })
            } else { None }
        },
        0x6555706772616465 => { // eUpgrade
            if type_name == "ArrayOfTemplateUpgradeFailedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfTemplateUpgradeFailedEvent(value))
                })
            } else { None }
        },
        0x65645461736b4576 => { // edTaskEv
            if type_name == "ArrayOfScheduledTaskEventArgument" {
                Some(|raw| {
                    let value: Vec<ScheduledTaskEventArgument> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfScheduledTaskEventArgument(value))
                })
            } else { None }
        },
        0x656e7361626c6552 => { // ensableR
            if type_name == "ArrayOfHostLicensableResourceInfo" {
                Some(|raw| {
                    let value: Vec<HostLicensableResourceInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostLicensableResourceInfo(value))
                })
            } else { None }
        },
        0x65724d61696e7465 => { // erMainte
            if type_name == "ArrayOfHostEnterMaintenanceResult" {
                Some(|raw| {
                    let value: Vec<HostEnterMaintenanceResult> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostEnterMaintenanceResult(value))
                })
            } else { None }
        },
        0x6572526566757365 => { // erRefuse
            if type_name == "ArrayOfCAMServerRefusedConnection" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCamServerRefusedConnection(value))
                })
            } else { None }
        },
        0x65726174696f6e73 => { // erations
            if type_name == "ArrayOfGuestOperationsUnavailable" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGuestOperationsUnavailable(value))
                })
            } else { None }
        },
        0x6574536e61707368 => { // etSnapsh
            if type_name == "ArrayOfWillResetSnapshotDirectory" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfWillResetSnapshotDirectory(value))
                })
            } else { None }
        },
        0x6574776f726b5275 => { // etworkRu
            if type_name == "ArrayOfDvsMacNetworkRuleQualifier" {
                Some(|raw| {
                    let value: Vec<DvsMacNetworkRuleQualifier> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsMacNetworkRuleQualifier(value))
                })
            } else { None }
        },
        0x66696346696c7465 => { // ficFilte
            if type_name == "ArrayOfDvsTrafficFilterConfigSpec" {
                Some(|raw| {
                    let value: Vec<DvsTrafficFilterConfigSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsTrafficFilterConfigSpec(value))
                })
            } else { None }
        },
        0x66696746636f6543 => { // figFcoeC
            if type_name == "ArrayOfFcoeConfigFcoeCapabilities" {
                Some(|raw| {
                    let value: Vec<FcoeConfigFcoeCapabilities> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfFcoeConfigFcoeCapabilities(value))
                })
            } else { None }
        },
        0x666f437573746f6d => { // foCustom
            if type_name == "ArrayOfGuestInfoCustomizationInfo" {
                Some(|raw| {
                    let value: Vec<GuestInfoCustomizationInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGuestInfoCustomizationInfo(value))
                })
            } else { None }
        },
        0x6746696c65456e63 => { // gFileEnc
            if type_name == "ArrayOfVmConfigFileEncryptionInfo" {
                Some(|raw| {
                    let value: Vec<VmConfigFileEncryptionInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmConfigFileEncryptionInfo(value))
                })
            } else { None }
        },
        0x6765725068797369 => { // gerPhysi
            if type_name == "ArrayOfDVSManagerPhysicalNicsList" {
                Some(|raw| {
                    let value: Vec<DvsManagerPhysicalNicsList> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsManagerPhysicalNicsList(value))
                })
            } else { None }
        },
        0x6769737472794b65 => { // gistryKe
            if type_name == "ArrayOfGuestRegistryKeyHasSubkeys" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGuestRegistryKeyHasSubkeys(value))
                })
            } else { None }
        },
        0x6769737472795661 => { // gistryVa
            if type_name == "ArrayOfGuestRegistryValueNotFound" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGuestRegistryValueNotFound(value))
                })
            } else { None }
        },
        0x6865436f6e666967 => { // heConfig
            match type_name {
                "ArrayOfHostCacheConfigurationInfo" => {
                    Some(|raw| {
                        let value: Vec<HostCacheConfigurationInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostCacheConfigurationInfo(value))
                    })
                }
                "ArrayOfHostCacheConfigurationSpec" => {
                    Some(|raw| {
                        let value: Vec<HostCacheConfigurationSpec> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostCacheConfigurationSpec(value))
                    })
                }
                _ => None
            }
        },
        0x69656c6444656652 => { // ieldDefR
            match type_name {
                "ArrayOfCustomFieldDefRemovedEvent" => {
                    Some(|raw| {
                        let value: Vec<Event> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfCustomFieldDefRemovedEvent(value))
                    })
                }
                "ArrayOfCustomFieldDefRenamedEvent" => {
                    Some(|raw| {
                        let value: Vec<Event> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfCustomFieldDefRenamedEvent(value))
                    })
                }
                _ => None
            }
        },
        0x696d756d41646d69 => { // imumAdmi
            if type_name == "ArrayOfAuthMinimumAdminPermission" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfAuthMinimumAdminPermission(value))
                })
            } else { None }
        },
        0x696e675374616e64 => { // ingStand
            if type_name == "ArrayOfDrsExitingStandbyModeEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDrsExitingStandbyModeEvent(value))
                })
            } else { None }
        },
        0x6b6564506f72744e => { // kedPortN
            if type_name == "ArrayOfFileBackedPortNotSupported" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfFileBackedPortNotSupported(value))
                })
            } else { None }
        },
        0x6c556e737570706f => { // lUnsuppo
            if type_name == "ArrayOfOvfToXmlUnsupportedElement" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfToXmlUnsupportedElement(value))
                })
            } else { None }
        },
        0x6c6572616e63654e => { // leranceN
            if type_name == "ArrayOfFaultToleranceNotSameBuild" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfFaultToleranceNotSameBuild(value))
                })
            } else { None }
        },
        0x6c6572616e636556 => { // leranceV
            if type_name == "ArrayOfFaultToleranceVMConfigSpec" {
                Some(|raw| {
                    let value: Vec<FaultToleranceVmConfigSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfFaultToleranceVmConfigSpec(value))
                })
            } else { None }
        },
        0x6c72656164794469 => { // lreadyDi
            if type_name == "ArrayOfMethodAlreadyDisabledFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfMethodAlreadyDisabledFault(value))
                })
            } else { None }
        },
        0x6e61626c65566d63 => { // nableVmc
            if type_name == "ArrayOfCannotEnableVmcpForCluster" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCannotEnableVmcpForCluster(value))
                })
            } else { None }
        },
        0x6e63655575696443 => { // nceUuidC
            if type_name == "ArrayOfVmInstanceUuidChangedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmInstanceUuidChangedEvent(value))
                })
            } else { None }
        },
        0x6e6462794d6f6465 => { // ndbyMode
            if type_name == "ArrayOfExitStandbyModeFailedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfExitStandbyModeFailedEvent(value))
                })
            } else { None }
        },
        0x6e646f777346696c => { // ndowsFil
            if type_name == "ArrayOfGuestWindowsFileAttributes" {
                Some(|raw| {
                    let value: Vec<GuestWindowsFileAttributes> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGuestWindowsFileAttributes(value))
                })
            } else { None }
        },
        0x6e656374496e666f => { // nectInfo
            if type_name == "ArrayOfHostConnectInfoNetworkInfo" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::HostConnectInfoNetworkInfoTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostConnectInfoNetworkInfo(value))
                })
            } else { None }
        },
        0x6f53746172744d61 => { // oStartMa
            if type_name == "ArrayOfHostAutoStartManagerConfig" {
                Some(|raw| {
                    let value: Vec<HostAutoStartManagerConfig> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostAutoStartManagerConfig(value))
                })
            } else { None }
        },
        0x6f7274566c616e54 => { // ortVlanT
            if type_name == "ArrayOfUplinkPortVlanTrunkedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfUplinkPortVlanTrunkedEvent(value))
                })
            } else { None }
        },
        0x6f76654661756c74 => { // oveFault
            if type_name == "ArrayOfCannotMoveFaultToleranceVm" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCannotMoveFaultToleranceVm(value))
                })
            } else { None }
        },
        0x6f776e4f6e49736f => { // ownOnIso
            if type_name == "ArrayOfVmShutdownOnIsolationEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmShutdownOnIsolationEvent(value))
                })
            } else { None }
        },
        0x706c69616e636543 => { // plianceC
            if type_name == "ArrayOfHostComplianceCheckedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostComplianceCheckedEvent(value))
                })
            } else { None }
        },
        0x706f727465645374 => { // portedSt
            if type_name == "ArrayOfVmUnsupportedStartingEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmUnsupportedStartingEvent(value))
                })
            } else { None }
        },
        0x70706f7274656444 => { // pportedD
            if type_name == "ArrayOfOvfUnsupportedDeviceExport" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfUnsupportedDeviceExport(value))
                })
            } else { None }
        },
        0x70706f7274656445 => { // pportedE
            if type_name == "ArrayOfOvfUnsupportedElementValue" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfUnsupportedElementValue(value))
                })
            } else { None }
        },
        0x70744e6574776f72 => { // ptNetwor
            if type_name == "ArrayOfDvsAcceptNetworkRuleAction" {
                Some(|raw| {
                    let value: Vec<DvsAcceptNetworkRuleAction> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsAcceptNetworkRuleAction(value))
                })
            } else { None }
        },
        0x726167654f706572 => { // rageOper
            if type_name == "ArrayOfHostStorageOperationalInfo" {
                Some(|raw| {
                    let value: Vec<HostStorageOperationalInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostStorageOperationalInfo(value))
                })
            } else { None }
        },
        0x7263655265616c6c => { // rceReall
            if type_name == "ArrayOfVmResourceReallocatedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmResourceReallocatedEvent(value))
                })
            } else { None }
        },
        0x72654e6f74577269 => { // reNotWri
            if type_name == "ArrayOfDatastoreNotWritableOnHost" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDatastoreNotWritableOnHost(value))
                })
            } else { None }
        },
        0x7265645374616e64 => { // redStand
            if type_name == "ArrayOfDrsEnteredStandbyModeEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDrsEnteredStandbyModeEvent(value))
                })
            } else { None }
        },
        0x7279566d416c7265 => { // ryVmAlre
            if type_name == "ArrayOfSecondaryVmAlreadyDisabled" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfSecondaryVmAlreadyDisabled(value))
                })
            } else { None }
        },
        0x7373696f6e466169 => { // ssionFai
            match type_name {
                "ArrayOfEVCAdmissionFailedCPUModel" => {
                    Some(|raw| {
                        let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfEvcAdmissionFailedCpuModel(value))
                    })
                }
                "ArrayOfEVCAdmissionFailedVmActive" => {
                    Some(|raw| {
                        let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfEvcAdmissionFailedVmActive(value))
                    })
                }
                _ => None
            }
        },
        0x73776f7264417574 => { // swordAut
            if type_name == "ArrayOfNamePasswordAuthentication" {
                Some(|raw| {
                    let value: Vec<NamePasswordAuthentication> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNamePasswordAuthentication(value))
                })
            } else { None }
        },
        0x74436c7573746572 => { // tCluster
            if type_name == "ArrayOfVsanHostClusterStatusState" {
                Some(|raw| {
                    let value: Vec<VsanHostClusterStatusState> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVsanHostClusterStatusState(value))
                })
            } else { None }
        },
        0x74486f73744f7065 => { // tHostOpe
            if type_name == "ArrayOfTimedOutHostOperationEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfTimedOutHostOperationEvent(value))
                })
            } else { None }
        },
        0x746173746f726543 => { // tastoreC
            if type_name == "ArrayOfLocalDatastoreCreatedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfLocalDatastoreCreatedEvent(value))
                })
            } else { None }
        },
        0x74656d52656d6564 => { // temRemed
            if type_name == "ArrayOfHostSystemRemediationState" {
                Some(|raw| {
                    let value: Vec<HostSystemRemediationState> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostSystemRemediationState(value))
                })
            } else { None }
        },
        0x7465724261736963 => { // terBasic
            if type_name == "ArrayOfDatacenterBasicConnectInfo" {
                Some(|raw| {
                    let value: Vec<DatacenterBasicConnectInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDatacenterBasicConnectInfo(value))
                })
            } else { None }
        },
        0x7465724d69736d61 => { // terMisma
            if type_name == "ArrayOfDatacenterMismatchArgument" {
                Some(|raw| {
                    let value: Vec<DatacenterMismatchArgument> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDatacenterMismatchArgument(value))
                })
            } else { None }
        },
        0x7468537461747573 => { // thStatus
            if type_name == "ArrayOfDvsHealthStatusChangeEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsHealthStatusChangeEvent(value))
                })
            } else { None }
        },
        0x7469634d616e6167 => { // ticManag
            if type_name == "ArrayOfDiagnosticManagerLogHeader" {
                Some(|raw| {
                    let value: Vec<DiagnosticManagerLogHeader> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDiagnosticManagerLogHeader(value))
                })
            } else { None }
        },
        0x74696f6e4469736b => { // tionDisk
            if type_name == "ArrayOfReplicationDiskConfigFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfReplicationDiskConfigFault(value))
                })
            } else { None }
        },
        0x7469706174685374 => { // tipathSt
            if type_name == "ArrayOfHostMultipathStateInfoPath" {
                Some(|raw| {
                    let value: Vec<HostMultipathStateInfoPath> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostMultipathStateInfoPath(value))
                })
            } else { None }
        },
        0x75616c4370757345 => { // ualCpusE
            if type_name == "ArrayOfNumVirtualCpusExceedsLimit" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNumVirtualCpusExceedsLimit(value))
                })
            } else { None }
        },
        0x75616c4370757349 => { // ualCpusI
            if type_name == "ArrayOfNumVirtualCpusIncompatible" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNumVirtualCpusIncompatible(value))
                })
            } else { None }
        },
        0x75616c437075734e => { // ualCpusN
            if type_name == "ArrayOfNumVirtualCpusNotSupported" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNumVirtualCpusNotSupported(value))
                })
            } else { None }
        },
        0x756c74566e696341 => { // ultVnicA
            if type_name == "ArrayOfIscsiFaultVnicAlreadyBound" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfIscsiFaultVnicAlreadyBound(value))
                })
            } else { None }
        },
        0x756c74566e696348 => { // ultVnicH
            if type_name == "ArrayOfIscsiFaultVnicHasNoUplinks" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfIscsiFaultVnicHasNoUplinks(value))
                })
            } else { None }
        },
        0x756d6572556e6465 => { // umerUnde
            if type_name == "ArrayOfOvfConsumerUndefinedPrefix" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfConsumerUndefinedPrefix(value))
                })
            } else { None }
        },
        0x756d657256616c69 => { // umerVali
            if type_name == "ArrayOfOvfConsumerValidationFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfConsumerValidationFault(value))
                })
            } else { None }
        },
        0x7570526573746f72 => { // upRestor
            if type_name == "ArrayOfDVSBackupRestoreCapability" {
                Some(|raw| {
                    let value: Vec<DvsBackupRestoreCapability> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsBackupRestoreCapability(value))
                })
            } else { None }
        },
        0x7570706f72746564 => { // upported
            if type_name == "ArrayOfRDMNotSupportedOnDatastore" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfRdmNotSupportedOnDatastore(value))
                })
            } else { None }
        },
        0x776f726b5265736f => { // workReso
            if type_name == "ArrayOfHostNetworkResourceRuntime" {
                Some(|raw| {
                    let value: Vec<HostNetworkResourceRuntime> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostNetworkResourceRuntime(value))
                })
            } else { None }
        },
        0x7a6174696f6e436c => { // zationCl
            if type_name == "ArrayOfCustomizationCloudinitPrep" {
                Some(|raw| {
                    let value: Vec<CustomizationCloudinitPrep> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCustomizationCloudinitPrep(value))
                })
            } else { None }
        },
        0x7a6174696f6e4775 => { // zationGu
            if type_name == "ArrayOfCustomizationGuiUnattended" {
                Some(|raw| {
                    let value: Vec<CustomizationGuiUnattended> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCustomizationGuiUnattended(value))
                })
            } else { None }
        },
        0x7a6174696f6e4970 => { // zationIp
            if type_name == "ArrayOfCustomizationIpV6Generator" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::CustomizationIpV6GeneratorTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCustomizationIpV6Generator(value))
                })
            } else { None }
        },
        0x7a6174696f6e5379 => { // zationSy
            if type_name == "ArrayOfCustomizationSysprepFailed" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCustomizationSysprepFailed(value))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_value_deserializer_34(type_name: &str) -> Option<fn(&serde_json::value::RawValue) -> Result<ValueElements, serde_json::Error>> {
    let s = &type_name[14..22];
    let Some(type_ord) = to_u64(s) else {
        return None;
    };
    match type_ord {
        0x41484349436f6e74 => { // AHCICont
            if type_name == "ArrayOfVirtualAHCIControllerOption" {
                Some(|raw| {
                    let value: Vec<VirtualAhciControllerOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualAhciControllerOption(value))
                })
            } else { None }
        },
        0x416666696e697479 => { // Affinity
            if type_name == "ArrayOfInvalidAffinitySettingFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInvalidAffinitySettingFault(value))
                })
            } else { None }
        },
        0x416e746941666669 => { // AntiAffi
            if type_name == "ArrayOfClusterAntiAffinityRuleSpec" {
                Some(|raw| {
                    let value: Vec<ClusterAntiAffinityRuleSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterAntiAffinityRuleSpec(value))
                })
            } else { None }
        },
        0x4170706c7950726f => { // ApplyPro
            if type_name == "ArrayOfProfileApplyProfileProperty" {
                Some(|raw| {
                    let value: Vec<ProfileApplyProfileProperty> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfProfileApplyProfileProperty(value))
                })
            } else { None }
        },
        0x436f646553706563 => { // CodeSpec
            if type_name == "ArrayOfUsbScanCodeSpecModifierType" {
                Some(|raw| {
                    let value: Vec<UsbScanCodeSpecModifierType> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfUsbScanCodeSpecModifierType(value))
                })
            } else { None }
        },
        0x436f6e6669677572 => { // Configur
            if type_name == "ArrayOfNotUserConfigurableProperty" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNotUserConfigurableProperty(value))
                })
            } else { None }
        },
        0x436f6e7365637574 => { // Consecut
            if type_name == "ArrayOfTooManyConsecutiveOverrides" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfTooManyConsecutiveOverrides(value))
                })
            } else { None }
        },
        0x4465766963655063 => { // DevicePc
            if type_name == "ArrayOfVirtualDevicePciBusSlotInfo" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::VirtualDevicePciBusSlotInfoTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualDevicePciBusSlotInfo(value))
                })
            } else { None }
        },
        0x4465766963655552 => { // DeviceUR
            if type_name == "ArrayOfVirtualDeviceURIBackingInfo" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::VirtualDeviceUriBackingInfoTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualDeviceUriBackingInfo(value))
                })
            } else { None }
        },
        0x4469736b4d6f6465 => { // DiskMode
            if type_name == "ArrayOfVirtualDiskModeNotSupported" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualDiskModeNotSupported(value))
                })
            } else { None }
        },
        0x4472734862724469 => { // DrsHbrDi
            if type_name == "ArrayOfStorageDrsHbrDiskNotMovable" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfStorageDrsHbrDiskNotMovable(value))
                })
            } else { None }
        },
        0x447273486d734d6f => { // DrsHmsMo
            if type_name == "ArrayOfStorageDrsHmsMoveInProgress" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfStorageDrsHmsMoveInProgress(value))
                })
            } else { None }
        },
        0x447273556e61626c => { // DrsUnabl
            if type_name == "ArrayOfStorageDrsUnableToMoveFiles" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfStorageDrsUnableToMoveFiles(value))
                })
            } else { None }
        },
        0x456e746572656450 => { // EnteredP
            if type_name == "ArrayOfDvsPortEnteredPassthruEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsPortEnteredPassthruEvent(value))
                })
            } else { None }
        },
        0x4661696c65644e6f => { // FailedNo
            if type_name == "ArrayOfHostCnxFailedNoLicenseEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostCnxFailedNoLicenseEvent(value))
                })
            } else { None }
        },
        0x4d616368696e6543 => { // MachineC
            match type_name {
                "ArrayOfVirtualMachineConfigSummary" => {
                    Some(|raw| {
                        let value: Vec<VirtualMachineConfigSummary> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualMachineConfigSummary(value))
                    })
                }
                "ArrayOfVirtualMachineCpuIdInfoSpec" => {
                    Some(|raw| {
                        let value: Vec<VirtualMachineCpuIdInfoSpec> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualMachineCpuIdInfoSpec(value))
                    })
                }
                _ => None
            }
        },
        0x4d616368696e6544 => { // MachineD
            if type_name == "ArrayOfVirtualMachineDatastoreInfo" {
                Some(|raw| {
                    let value: Vec<VirtualMachineDatastoreInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineDatastoreInfo(value))
                })
            } else { None }
        },
        0x4d616368696e654d => { // MachineM
            if type_name == "ArrayOfVirtualMachineMksConnection" {
                Some(|raw| {
                    let value: Vec<VirtualMachineMksConnection> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineMksConnection(value))
                })
            } else { None }
        },
        0x4d616368696e6553 => { // MachineS
            if type_name == "ArrayOfVirtualMachineSgxTargetInfo" {
                Some(|raw| {
                    let value: Vec<VirtualMachineSgxTargetInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineSgxTargetInfo(value))
                })
            } else { None }
        },
        0x4d61696e74656e61 => { // Maintena
            if type_name == "ArrayOfEnteredMaintenanceModeEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfEnteredMaintenanceModeEvent(value))
                })
            } else { None }
        },
        0x4e564d45436f6e74 => { // NVMECont
            if type_name == "ArrayOfVirtualNVMEControllerOption" {
                Some(|raw| {
                    let value: Vec<VirtualNvmeControllerOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualNvmeControllerOption(value))
                })
            } else { None }
        },
        0x5043495061737374 => { // PCIPasst
            if type_name == "ArrayOfVirtualPCIPassthroughOption" {
                Some(|raw| {
                    let value: Vec<VirtualPciPassthroughOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualPciPassthroughOption(value))
                })
            } else { None }
        },
        0x506f696e74696e67 => { // Pointing
            if type_name == "ArrayOfVirtualPointingDeviceOption" {
                Some(|raw| {
                    let value: Vec<VirtualPointingDeviceOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualPointingDeviceOption(value))
                })
            } else { None }
        },
        0x506f6c6963794f70 => { // PolicyOp
            if type_name == "ArrayOfProfilePolicyOptionMetadata" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::ProfilePolicyOptionMetadataTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfProfilePolicyOptionMetadata(value))
                })
            } else { None }
        },
        0x506f7765724f6e43 => { // PowerOnC
            if type_name == "ArrayOfMissingPowerOnConfiguration" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfMissingPowerOnConfiguration(value))
                })
            } else { None }
        },
        0x507265636973696f => { // Precisio
            if type_name == "ArrayOfVirtualPrecisionClockOption" {
                Some(|raw| {
                    let value: Vec<VirtualPrecisionClockOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualPrecisionClockOption(value))
                })
            } else { None }
        },
        0x50726f66696c6552 => { // ProfileR
            if type_name == "ArrayOfInvalidProfileReferenceHost" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInvalidProfileReferenceHost(value))
                })
            } else { None }
        },
        0x50726f746f636f6c => { // Protocol
            if type_name == "ArrayOfVMotionProtocolIncompatible" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVMotionProtocolIncompatible(value))
                })
            } else { None }
        },
        0x5265736572766174 => { // Reservat
            if type_name == "ArrayOfLicenseReservationInfoState" {
                Some(|raw| {
                    let value: Vec<super::enums::LicenseReservationInfoStateEnum> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfLicenseReservationInfoState(value))
                })
            } else { None }
        },
        0x5265736f75726365 => { // Resource
            if type_name == "ArrayOfClusterResourceUsageSummary" {
                Some(|raw| {
                    let value: Vec<ClusterResourceUsageSummary> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterResourceUsageSummary(value))
                })
            } else { None }
        },
        0x53415441436f6e74 => { // SATACont
            if type_name == "ArrayOfVirtualSATAControllerOption" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::VirtualSataControllerOptionTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualSataControllerOption(value))
                })
            } else { None }
        },
        0x53435349436f6e74 => { // SCSICont
            if type_name == "ArrayOfVirtualSCSIControllerOption" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::VirtualScsiControllerOptionTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualScsiControllerOption(value))
                })
            } else { None }
        },
        0x53657269616c697a => { // Serializ
            if type_name == "ArrayOfProfileSerializedCreateSpec" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::ProfileSerializedCreateSpecTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfProfileSerializedCreateSpec(value))
                })
            } else { None }
        },
        0x5365727665724176 => { // ServerAv
            if type_name == "ArrayOfLicenseServerAvailableEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfLicenseServerAvailableEvent(value))
                })
            } else { None }
        },
        0x53686f72744e616d => { // ShortNam
            if type_name == "ArrayOfHostGetShortNameFailedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostGetShortNameFailedEvent(value))
                })
            } else { None }
        },
        0x536f756e64426c61 => { // SoundBla
            if type_name == "ArrayOfVirtualSoundBlaster16Option" {
                Some(|raw| {
                    let value: Vec<VirtualSoundBlaster16Option> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualSoundBlaster16Option(value))
                })
            } else { None }
        },
        0x546f6c6572616e63 => { // Toleranc
            if type_name == "ArrayOfVmFaultToleranceConfigIssue" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmFaultToleranceConfigIssue(value))
                })
            } else { None }
        },
        0x556e696e7374616c => { // Uninstal
            if type_name == "ArrayOfVcAgentUninstallFailedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVcAgentUninstallFailedEvent(value))
                })
            } else { None }
        },
        0x57696e646f777343 => { // WindowsC
            if type_name == "ArrayOfMissingWindowsCustResources" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfMissingWindowsCustResources(value))
                })
            } else { None }
        },
        0x61636b496e666f44 => { // ackInfoD
            if type_name == "ArrayOfNetIpStackInfoDefaultRouter" {
                Some(|raw| {
                    let value: Vec<NetIpStackInfoDefaultRouter> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNetIpStackInfoDefaultRouter(value))
                })
            } else { None }
        },
        0x61636b6564566972 => { // ackedVir
            if type_name == "ArrayOfDeviceBackedVirtualDiskSpec" {
                Some(|raw| {
                    let value: Vec<DeviceBackedVirtualDiskSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDeviceBackedVirtualDiskSpec(value))
                })
            } else { None }
        },
        0x616c41757468656e => { // alAuthen
            if type_name == "ArrayOfHostLocalAuthenticationInfo" {
                Some(|raw| {
                    let value: Vec<HostLocalAuthenticationInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostLocalAuthenticationInfo(value))
                })
            } else { None }
        },
        0x6265724865616c74 => { // berHealt
            if type_name == "ArrayOfHostMemberHealthCheckResult" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::HostMemberHealthCheckResultTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostMemberHealthCheckResult(value))
                })
            } else { None }
        },
        0x634e6574776f726b => { // cNetwork
            if type_name == "ArrayOfHostPnicNetworkResourceInfo" {
                Some(|raw| {
                    let value: Vec<HostPnicNetworkResourceInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostPnicNetworkResourceInfo(value))
                })
            } else { None }
        },
        0x6369656e744e6574 => { // cientNet
            if type_name == "ArrayOfInsufficientNetworkCapacity" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInsufficientNetworkCapacity(value))
                })
            } else { None }
        },
        0x6369656e74537461 => { // cientSta
            if type_name == "ArrayOfInsufficientStandbyResource" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInsufficientStandbyResource(value))
                })
            } else { None }
        },
        0x636f766572795072 => { // coveryPr
            if type_name == "ArrayOfLinkDiscoveryProtocolConfig" {
                Some(|raw| {
                    let value: Vec<LinkDiscoveryProtocolConfig> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfLinkDiscoveryProtocolConfig(value))
                })
            } else { None }
        },
        0x6446726f6d506174 => { // dFromPat
            if type_name == "ArrayOfVmReloadFromPathFailedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmReloadFromPathFailedEvent(value))
                })
            } else { None }
        },
        0x64546f5374616e64 => { // dToStand
            if type_name == "ArrayOfVmFailedToStandbyGuestEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmFailedToStandbyGuestEvent(value))
                })
            } else { None }
        },
        0x6479457869737473 => { // dyExists
            if type_name == "ArrayOfVmAlreadyExistsInDatacenter" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmAlreadyExistsInDatacenter(value))
                })
            } else { None }
        },
        0x655472616e73706f => { // eTranspo
            if type_name == "ArrayOfHostNvmeTransportParameters" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::HostNvmeTransportParametersTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostNvmeTransportParameters(value))
                })
            } else { None }
        },
        0x6556696f436f7272 => { // eVioCorr
            if type_name == "ArrayOfSoftRuleVioCorrectionImpact" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfSoftRuleVioCorrectionImpact(value))
                })
            } else { None }
        },
        0x65645461736b436f => { // edTaskCo
            if type_name == "ArrayOfScheduledTaskCompletedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfScheduledTaskCompletedEvent(value))
                })
            } else { None }
        },
        0x6572546872656164 => { // erThread
            if type_name == "ArrayOfHostHyperThreadScheduleInfo" {
                Some(|raw| {
                    let value: Vec<HostHyperThreadScheduleInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostHyperThreadScheduleInfo(value))
                })
            } else { None }
        },
        0x657274795175616c => { // ertyQual
            if type_name == "ArrayOfOvfPropertyQualifierIgnored" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfPropertyQualifierIgnored(value))
                })
            } else { None }
        },
        0x6574776f726b496e => { // etworkIn
            if type_name == "ArrayOfLegacyNetworkInterfaceInUse" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfLegacyNetworkInterfaceInUse(value))
                })
            } else { None }
        },
        0x6666696e69747952 => { // ffinityR
            if type_name == "ArrayOfVmHostAffinityRuleViolation" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmHostAffinityRuleViolation(value))
                })
            } else { None }
        },
        0x66696746636f6553 => { // figFcoeS
            if type_name == "ArrayOfFcoeConfigFcoeSpecification" {
                Some(|raw| {
                    let value: Vec<FcoeConfigFcoeSpecification> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfFcoeConfigFcoeSpecification(value))
                })
            } else { None }
        },
        0x666f566972747561 => { // foVirtua
            if type_name == "ArrayOfGuestInfoVirtualDiskMapping" {
                Some(|raw| {
                    let value: Vec<GuestInfoVirtualDiskMapping> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGuestInfoVirtualDiskMapping(value))
                })
            } else { None }
        },
        0x6753746f7265546f => { // gStoreTo
            match type_name {
                "ArrayOfHostPlugStoreTopologyDevice" => {
                    Some(|raw| {
                        let value: Vec<HostPlugStoreTopologyDevice> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostPlugStoreTopologyDevice(value))
                    })
                }
                "ArrayOfHostPlugStoreTopologyPlugin" => {
                    Some(|raw| {
                        let value: Vec<HostPlugStoreTopologyPlugin> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostPlugStoreTopologyPlugin(value))
                    })
                }
                "ArrayOfHostPlugStoreTopologyTarget" => {
                    Some(|raw| {
                        let value: Vec<HostPlugStoreTopologyTarget> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostPlugStoreTopologyTarget(value))
                    })
                }
                _ => None
            }
        },
        0x6765725265706c69 => { // gerRepli
            if type_name == "ArrayOfHbrManagerReplicationVmInfo" {
                Some(|raw| {
                    let value: Vec<HbrManagerReplicationVmInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHbrManagerReplicationVmInfo(value))
                })
            } else { None }
        },
        0x68616e6765567361 => { // hangeVsa
            if type_name == "ArrayOfCannotChangeVsanClusterUuid" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCannotChangeVsanClusterUuid(value))
                })
            } else { None }
        },
        0x68656e7469636174 => { // henticat
            if type_name == "ArrayOfHostAuthenticationStoreInfo" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::HostAuthenticationStoreInfoTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostAuthenticationStoreInfo(value))
                })
            } else { None }
        },
        0x69635265736f7572 => { // icResour
            if type_name == "ArrayOfDvsVmVnicResourceAllocation" {
                Some(|raw| {
                    let value: Vec<DvsVmVnicResourceAllocation> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsVmVnicResourceAllocation(value))
                })
            } else { None }
        },
        0x69676e6174757265 => { // ignature
            if type_name == "ArrayOfHostResignatureRescanResult" {
                Some(|raw| {
                    let value: Vec<HostResignatureRescanResult> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostResignatureRescanResult(value))
                })
            } else { None }
        },
        0x696c654f7074696f => { // ileOptio
            if type_name == "ArrayOfAnswerFileOptionsCreateSpec" {
                Some(|raw| {
                    let value: Vec<AnswerFileOptionsCreateSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfAnswerFileOptionsCreateSpec(value))
                })
            } else { None }
        },
        0x696f6e496e636f6d => { // ionIncom
            if type_name == "ArrayOfDrsVmotionIncompatibleFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDrsVmotionIncompatibleFault(value))
                })
            } else { None }
        },
        0x6b436f6e66696775 => { // kConfigu
            if type_name == "ArrayOfHostDiskConfigurationResult" {
                Some(|raw| {
                    let value: Vec<HostDiskConfigurationResult> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostDiskConfigurationResult(value))
                })
            } else { None }
        },
        0x6b50617274697469 => { // kPartiti
            match type_name {
                "ArrayOfHostDiskPartitionAttributes" => {
                    Some(|raw| {
                        let value: Vec<HostDiskPartitionAttributes> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostDiskPartitionAttributes(value))
                    })
                }
                "ArrayOfHostDiskPartitionBlockRange" => {
                    Some(|raw| {
                        let value: Vec<HostDiskPartitionBlockRange> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostDiskPartitionBlockRange(value))
                    })
                }
                _ => None
            }
        },
        0x6c566f6c756d6553 => { // lVolumeS
            if type_name == "ArrayOfHostVvolVolumeSpecification" {
                Some(|raw| {
                    let value: Vec<HostVvolVolumeSpecification> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostVvolVolumeSpecification(value))
                })
            } else { None }
        },
        0x6c6572616e636543 => { // leranceC
            if type_name == "ArrayOfFaultToleranceCannotEditMem" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfFaultToleranceCannotEditMem(value))
                })
            } else { None }
        },
        0x6e63655575696441 => { // nceUuidA
            if type_name == "ArrayOfVmInstanceUuidAssignedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmInstanceUuidAssignedEvent(value))
                })
            } else { None }
        },
        0x6e63655575696443 => { // nceUuidC
            if type_name == "ArrayOfVmInstanceUuidConflictEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmInstanceUuidConflictEvent(value))
                })
            } else { None }
        },
        0x6f636b4661756c74 => { // ockFault
            if type_name == "ArrayOfFailToLockFaultToleranceVMs" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfFailToLockFaultToleranceVMs(value))
                })
            } else { None }
        },
        0x6f6d70617469626c => { // ompatibl
            if type_name == "ArrayOfVsanIncompatibleDiskMapping" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVsanIncompatibleDiskMapping(value))
                })
            } else { None }
        },
        0x6f6e5265736f7572 => { // onResour
            if type_name == "ArrayOfMigrationResourceErrorEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfMigrationResourceErrorEvent(value))
                })
            } else { None }
        },
        0x6f6e6e656374696f => { // onnectio
            if type_name == "ArrayOfHostReconnectionFailedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostReconnectionFailedEvent(value))
                })
            } else { None }
        },
        0x6f72746564486f73 => { // ortedHos
            match type_name {
                "ArrayOfNotSupportedHostForChecksum" => {
                    Some(|raw| {
                        let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfNotSupportedHostForChecksum(value))
                    })
                }
                "ArrayOfNotSupportedHostForVmemFile" => {
                    Some(|raw| {
                        let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfNotSupportedHostForVmemFile(value))
                    })
                }
                "ArrayOfNotSupportedHostInHACluster" => {
                    Some(|raw| {
                        let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfNotSupportedHostInHaCluster(value))
                    })
                }
                _ => None
            }
        },
        0x706c696e6b506f72 => { // plinkPor
            if type_name == "ArrayOfVMwareUplinkPortOrderPolicy" {
                Some(|raw| {
                    let value: Vec<VMwareUplinkPortOrderPolicy> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVMwareUplinkPortOrderPolicy(value))
                })
            } else { None }
        },
        0x726552656d6f7665 => { // reRemove
            if type_name == "ArrayOfDatastoreRemovedOnHostEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDatastoreRemovedOnHostEvent(value))
                })
            } else { None }
        },
        0x726552656e616d65 => { // reRename
            if type_name == "ArrayOfDatastoreRenamedOnHostEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDatastoreRenamedOnHostEvent(value))
                })
            } else { None }
        },
        0x72696e675374616e => { // ringStan
            if type_name == "ArrayOfDrsEnteringStandbyModeEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDrsEnteringStandbyModeEvent(value))
                })
            } else { None }
        },
        0x727450726f6d6973 => { // rtPromis
            if type_name == "ArrayOfVspanPortPromiscChangeFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVspanPortPromiscChangeFault(value))
                })
            } else { None }
        },
        0x736372697074696f => { // scriptio
            if type_name == "ArrayOfEventDescriptionEventDetail" {
                Some(|raw| {
                    let value: Vec<EventDescriptionEventDetail> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfEventDescriptionEventDetail(value))
                })
            } else { None }
        },
        0x73686f744d6f7665 => { // shotMove
            if type_name == "ArrayOfHotSnapshotMoveNotSupported" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHotSnapshotMoveNotSupported(value))
                })
            } else { None }
        },
        0x736b466f726d6174 => { // skFormat
            if type_name == "ArrayOfDeltaDiskFormatNotSupported" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDeltaDiskFormatNotSupported(value))
                })
            } else { None }
        },
        0x7373696f6e466169 => { // ssionFai
            if type_name == "ArrayOfEVCAdmissionFailedCPUVendor" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfEvcAdmissionFailedCpuVendor(value))
                })
            } else { None }
        },
        0x7374616c6c617469 => { // stallati
            if type_name == "ArrayOfToolsInstallationInProgress" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfToolsInstallationInProgress(value))
                })
            } else { None }
        },
        0x74656d5377617043 => { // temSwapC
            if type_name == "ArrayOfHostSystemSwapConfiguration" {
                Some(|raw| {
                    let value: Vec<HostSystemSwapConfiguration> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostSystemSwapConfiguration(value))
                })
            } else { None }
        },
        0x7469634d616e6167 => { // ticManag
            if type_name == "ArrayOfDiagnosticManagerBundleInfo" {
                Some(|raw| {
                    let value: Vec<DiagnosticManagerBundleInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDiagnosticManagerBundleInfo(value))
                })
            } else { None }
        },
        0x74696f6e496e666f => { // tionInfo
            if type_name == "ArrayOfReplicationInfoDiskSettings" {
                Some(|raw| {
                    let value: Vec<ReplicationInfoDiskSettings> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfReplicationInfoDiskSettings(value))
                })
            } else { None }
        },
        0x746f726573436f6e => { // toresCon
            if type_name == "ArrayOfNoDatastoresConfiguredEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNoDatastoresConfiguredEvent(value))
                })
            } else { None }
        },
        0x7473546f496e6163 => { // tsToInac
            if type_name == "ArrayOfRDMPointsToInaccessibleDisk" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfRdmPointsToInaccessibleDisk(value))
                })
            } else { None }
        },
        0x7475616c53776974 => { // tualSwit
            match type_name {
                "ArrayOfHostVirtualSwitchAutoBridge" => {
                    Some(|raw| {
                        let value: Vec<HostVirtualSwitchAutoBridge> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostVirtualSwitchAutoBridge(value))
                    })
                }
                "ArrayOfHostVirtualSwitchBondBridge" => {
                    Some(|raw| {
                        let value: Vec<HostVirtualSwitchBondBridge> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostVirtualSwitchBondBridge(value))
                    })
                }
                _ => None
            }
        },
        0x757465436f6e6669 => { // uteConfi
            match type_name {
                "ArrayOfNetIpRouteConfigInfoGateway" => {
                    Some(|raw| {
                        let value: Vec<NetIpRouteConfigInfoGateway> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfNetIpRouteConfigInfoGateway(value))
                    })
                }
                "ArrayOfNetIpRouteConfigInfoIpRoute" => {
                    Some(|raw| {
                        let value: Vec<NetIpRouteConfigInfoIpRoute> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfNetIpRouteConfigInfoIpRoute(value))
                    })
                }
                _ => None
            }
        },
        0x7669747953656e73 => { // vitySens
            if type_name == "LatencySensitivitySensitivityLevel" {
                Some(|raw| {
                    let value: super::enums::LatencySensitivitySensitivityLevelEnum = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::LatencySensitivitySensitivityLevel(value))
                })
            } else { None }
        },
        0x7a6174696f6e4164 => { // zationAd
            if type_name == "ArrayOfCustomizationAdapterMapping" {
                Some(|raw| {
                    let value: Vec<CustomizationAdapterMapping> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCustomizationAdapterMapping(value))
                })
            } else { None }
        },
        0x7a6174696f6e4964 => { // zationId
            if type_name == "ArrayOfCustomizationIdentification" {
                Some(|raw| {
                    let value: Vec<CustomizationIdentification> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCustomizationIdentification(value))
                })
            } else { None }
        },
        0x7a6174696f6e556e => { // zationUn
            if type_name == "ArrayOfCustomizationUnknownFailure" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCustomizationUnknownFailure(value))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_value_deserializer_35(type_name: &str) -> Option<fn(&serde_json::value::RawValue) -> Result<ValueElements, serde_json::Error>> {
    let s = &type_name[18..22];
    let Some(type_ord) = to_u32(s) else {
        return None;
    };
    match type_ord {
        0x416c7265 => { // Alre
            if type_name == "ArrayOfSecondaryVmAlreadyRegistered" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfSecondaryVmAlreadyRegistered(value))
                })
            } else { None }
        },
        0x4e657477 => { // Netw
            if type_name == "ArrayOfDvsGreEncapNetworkRuleAction" {
                Some(|raw| {
                    let value: Vec<DvsGreEncapNetworkRuleAction> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsGreEncapNetworkRuleAction(value))
                })
            } else { None }
        },
        0x50617373 => { // Pass
            if type_name == "ArrayOfVirtualSCSIPassthroughOption" {
                Some(|raw| {
                    let value: Vec<VirtualScsiPassthroughOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualScsiPassthroughOption(value))
                })
            } else { None }
        },
        0x5265636f => { // Reco
            if type_name == "ArrayOfDVPortgroupReconfiguredEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvPortgroupReconfiguredEvent(value))
                })
            } else { None }
        },
        0x53706563 => { // Spec
            if type_name == "ArrayOfNetIpConfigSpecIpAddressSpec" {
                Some(|raw| {
                    let value: Vec<NetIpConfigSpecIpAddressSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNetIpConfigSpecIpAddressSpec(value))
                })
            } else { None }
        },
        0x556e6465 => { // Unde
            if type_name == "ArrayOfOvfConsumerUndeclaredSection" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfConsumerUndeclaredSection(value))
                })
            } else { None }
        },
        0x56616c75 => { // Valu
            if type_name == "ArrayOfCustomFieldValueChangedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCustomFieldValueChangedEvent(value))
                })
            } else { None }
        },
        0x56697274 => { // Virt
            if type_name == "ArrayOfDistributedVirtualSwitchInfo" {
                Some(|raw| {
                    let value: Vec<DistributedVirtualSwitchInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDistributedVirtualSwitchInfo(value))
                })
            } else { None }
        },
        0x566d496e => { // VmIn
            if type_name == "ArrayOfReplicationVmInProgressFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfReplicationVmInProgressFault(value))
                })
            } else { None }
        },
        0x61626c65 => { // able
            if type_name == "ArrayOfHostNoAvailableNetworksEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostNoAvailableNetworksEvent(value))
                })
            } else { None }
        },
        0x616c7565 => { // alue
            if type_name == "ArrayOfOvfInvalidValueConfiguration" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfInvalidValueConfiguration(value))
                })
            } else { None }
        },
        0x616e6167 => { // anag
            if type_name == "ArrayOfClusterEVCManagerCheckResult" {
                Some(|raw| {
                    let value: Vec<ClusterEvcManagerCheckResult> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterEvcManagerCheckResult(value))
                })
            } else { None }
        },
        0x616e6e6f => { // anno
            if type_name == "ArrayOfStorageDrsCannotMoveTemplate" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfStorageDrsCannotMoveTemplate(value))
                })
            } else { None }
        },
        0x61746567 => { // ateg
            if type_name == "ArrayOfClusterTagCategoryUpdateSpec" {
                Some(|raw| {
                    let value: Vec<ClusterTagCategoryUpdateSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterTagCategoryUpdateSpec(value))
                })
            } else { None }
        },
        0x61747572 => { // atur
            if type_name == "ArrayOfMigrationFeatureNotSupported" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfMigrationFeatureNotSupported(value))
                })
            } else { None }
        },
        0x626c6546 => { // bleF
            if type_name == "ArrayOfNoHostSuitableForFtSecondary" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNoHostSuitableForFtSecondary(value))
                })
            } else { None }
        },
        0x626c6548 => { // bleH
            if type_name == "ArrayOfHostAssignableHardwareConfig" {
                Some(|raw| {
                    let value: Vec<HostAssignableHardwareConfig> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostAssignableHardwareConfig(value))
                })
            } else { None }
        },
        0x63617469 => { // cati
            if type_name == "ArrayOfHostSpecificationUpdateEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostSpecificationUpdateEvent(value))
                })
            } else { None }
        },
        0x63654465 => { // ceDe
            if type_name == "ArrayOfVirtualDeviceDeviceGroupInfo" {
                Some(|raw| {
                    let value: Vec<VirtualDeviceDeviceGroupInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualDeviceDeviceGroupInfo(value))
                })
            } else { None }
        },
        0x63654669 => { // ceFi
            if type_name == "ArrayOfVirtualDeviceFileBackingInfo" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::VirtualDeviceFileBackingInfoTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualDeviceFileBackingInfo(value))
                })
            } else { None }
        },
        0x63655069 => { // cePi
            if type_name == "ArrayOfVirtualDevicePipeBackingInfo" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::VirtualDevicePipeBackingInfoTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualDevicePipeBackingInfo(value))
                })
            } else { None }
        },
        0x64436f72 => { // dCor
            if type_name == "DrsInjectorWorkloadCorrelationState" {
                Some(|raw| {
                    let value: super::enums::DrsInjectorWorkloadCorrelationStateEnum = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::DrsInjectorWorkloadCorrelationState(value))
                })
            } else { None }
        },
        0x6446726f => { // dFro
            if type_name == "ArrayOfDrsRecoveredFromFailureEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDrsRecoveredFromFailureEvent(value))
                })
            } else { None }
        },
        0x64486f73 => { // dHos
            if type_name == "ArrayOfDisconnectedHostsBlockingEVC" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDisconnectedHostsBlockingEvc(value))
                })
            } else { None }
        },
        0x64656e74 => { // dent
            if type_name == "ArrayOfHostSystemIdentificationInfo" {
                Some(|raw| {
                    let value: Vec<HostSystemIdentificationInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostSystemIdentificationInfo(value))
                })
            } else { None }
        },
        0x65486172 => { // eHar
            if type_name == "ArrayOfNoCompatibleHardAffinityHost" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNoCompatibleHardAffinityHost(value))
                })
            } else { None }
        },
        0x65536f66 => { // eSof
            if type_name == "ArrayOfNoCompatibleSoftAffinityHost" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNoCompatibleSoftAffinityHost(value))
                })
            } else { None }
        },
        0x65644261 => { // edBa
            match type_name {
                "ArrayOfHostCnxFailedBadCcagentEvent" => {
                    Some(|raw| {
                        let value: Vec<Event> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostCnxFailedBadCcagentEvent(value))
                    })
                }
                "ArrayOfHostCnxFailedBadVersionEvent" => {
                    Some(|raw| {
                        let value: Vec<Event> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostCnxFailedBadVersionEvent(value))
                    })
                }
                _ => None
            }
        },
        0x6564456c => { // edEl
            if type_name == "ArrayOfOvfDuplicatedElementBoundary" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfDuplicatedElementBoundary(value))
                })
            } else { None }
        },
        0x666f4f70 => { // foOp
            if type_name == "ArrayOfDpuStatusInfoOperationalInfo" {
                Some(|raw| {
                    let value: Vec<DpuStatusInfoOperationalInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDpuStatusInfoOperationalInfo(value))
                })
            } else { None }
        },
        0x6746696c => { // gFil
            if type_name == "ArrayOfVVolVmConfigFileUpdateResult" {
                Some(|raw| {
                    let value: Vec<VVolVmConfigFileUpdateResult> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVVolVmConfigFileUpdateResult(value))
                })
            } else { None }
        },
        0x67657245 => { // gerE
            if type_name == "ArrayOfLicenseManagerEvaluationInfo" {
                Some(|raw| {
                    let value: Vec<LicenseManagerEvaluationInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfLicenseManagerEvaluationInfo(value))
                })
            } else { None }
        },
        0x67726164 => { // grad
            if type_name == "ArrayOfToolsAutoUpgradeNotSupported" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfToolsAutoUpgradeNotSupported(value))
                })
            } else { None }
        },
        0x68757464 => { // hutd
            if type_name == "ArrayOfVmFailedToShutdownGuestEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmFailedToShutdownGuestEvent(value))
                })
            } else { None }
        },
        0x69636543 => { // iceC
            if type_name == "ArrayOfHostRdmaDeviceConnectionInfo" {
                Some(|raw| {
                    let value: Vec<HostRdmaDeviceConnectionInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostRdmaDeviceConnectionInfo(value))
                })
            } else { None }
        },
        0x69646572 => { // ider
            if type_name == "ArrayOfVimVasaProviderStatePerArray" {
                Some(|raw| {
                    let value: Vec<VimVasaProviderStatePerArray> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVimVasaProviderStatePerArray(value))
                })
            } else { None }
        },
        0x6967496e => { // igIn
            match type_name {
                "ArrayOfNetDhcpConfigInfoDhcpOptions" => {
                    Some(|raw| {
                        let value: Vec<NetDhcpConfigInfoDhcpOptions> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfNetDhcpConfigInfoDhcpOptions(value))
                    })
                }
                "VirtualMachineConfigInfoNpivWwnType" => {
                    Some(|raw| {
                        let value: super::enums::VirtualMachineConfigInfoNpivWwnTypeEnum = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::VirtualMachineConfigInfoNpivWwnType(value))
                    })
                }
                _ => None
            }
        },
        0x696e6369 => { // inci
            if type_name == "ArrayOfDatastorePrincipalConfigured" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDatastorePrincipalConfigured(value))
                })
            } else { None }
        },
        0x696e6543 => { // ineC
            if type_name == "ArrayOfVirtualMachineCertThumbprint" {
                Some(|raw| {
                    let value: Vec<VirtualMachineCertThumbprint> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineCertThumbprint(value))
                })
            } else { None }
        },
        0x696e6544 => { // ineD
            if type_name == "ArrayOfVirtualMachineDiskDeviceInfo" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::VirtualMachineDiskDeviceInfoTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineDiskDeviceInfo(value))
                })
            } else { None }
        },
        0x696e6546 => { // ineF
            if type_name == "ArrayOfVirtualMachineForkConfigInfo" {
                Some(|raw| {
                    let value: Vec<VirtualMachineForkConfigInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineForkConfigInfo(value))
                })
            } else { None }
        },
        0x696e6550 => { // ineP
            match type_name {
                "ArrayOfVirtualMachineProfileDetails" => {
                    Some(|raw| {
                        let value: Vec<VirtualMachineProfileDetails> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualMachineProfileDetails(value))
                    })
                }
                "ArrayOfVirtualMachineProfileRawData" => {
                    Some(|raw| {
                        let value: Vec<VirtualMachineProfileRawData> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualMachineProfileRawData(value))
                    })
                }
                _ => None
            }
        },
        0x696e6553 => { // ineS
            if type_name == "ArrayOfVirtualMachineStorageSummary" {
                Some(|raw| {
                    let value: Vec<VirtualMachineStorageSummary> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineStorageSummary(value))
                })
            } else { None }
        },
        0x696e6556 => { // ineV
            if type_name == "ArrayOfVirtualMachineVgpuDeviceInfo" {
                Some(|raw| {
                    let value: Vec<VirtualMachineVgpuDeviceInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineVgpuDeviceInfo(value))
                })
            } else { None }
        },
        0x69746368 => { // itch
            if type_name == "ArrayOfHostProxySwitchHostLagConfig" {
                Some(|raw| {
                    let value: Vec<HostProxySwitchHostLagConfig> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostProxySwitchHostLagConfig(value))
                })
            } else { None }
        },
        0x6c52756c => { // lRul
            if type_name == "ArrayOfHostFirewallRulesetIpNetwork" {
                Some(|raw| {
                    let value: Vec<HostFirewallRulesetIpNetwork> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostFirewallRulesetIpNetwork(value))
                })
            } else { None }
        },
        0x6c616e55 => { // lanU
            if type_name == "ArrayOfUplinkPortVlanUntrunkedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfUplinkPortVlanUntrunkedEvent(value))
                })
            } else { None }
        },
        0x6d417461 => { // mAta
            if type_name == "ArrayOfVirtualCdromAtapiBackingInfo" {
                Some(|raw| {
                    let value: Vec<VirtualCdromAtapiBackingInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualCdromAtapiBackingInfo(value))
                })
            } else { None }
        },
        0x6d49736f => { // mIso
            if type_name == "ArrayOfVirtualCdromIsoBackingOption" {
                Some(|raw| {
                    let value: Vec<VirtualCdromIsoBackingOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualCdromIsoBackingOption(value))
                })
            } else { None }
        },
        0x6d65546f => { // meTo
            if type_name == "ArrayOfHostShortNameToIpFailedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostShortNameToIpFailedEvent(value))
                })
            } else { None }
        },
        0x6d707469 => { // mpti
            match type_name {
                "ArrayOfClusterPreemptibleVmPairInfo" => {
                    Some(|raw| {
                        let value: Vec<ClusterPreemptibleVmPairInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfClusterPreemptibleVmPairInfo(value))
                    })
                }
                "ArrayOfClusterPreemptibleVmPairSpec" => {
                    Some(|raw| {
                        let value: Vec<ClusterPreemptibleVmPairSpec> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfClusterPreemptibleVmPairSpec(value))
                    })
                }
                _ => None
            }
        },
        0x6e456e74 => { // nEnt
            if type_name == "ArrayOfNoPermissionEntityPrivileges" {
                Some(|raw| {
                    let value: Vec<NoPermissionEntityPrivileges> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNoPermissionEntityPrivileges(value))
                })
            } else { None }
        },
        0x6e63654e => { // nceN
            if type_name == "ArrayOfFaultToleranceNeedsThickDisk" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfFaultToleranceNeedsThickDisk(value))
                })
            } else { None }
        },
        0x6e696348 => { // nicH
            match type_name {
                "ArrayOfIscsiFaultVnicHasActivePaths" => {
                    Some(|raw| {
                        let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfIscsiFaultVnicHasActivePaths(value))
                    })
                }
                "ArrayOfIscsiFaultVnicHasWrongUplink" => {
                    Some(|raw| {
                        let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfIscsiFaultVnicHasWrongUplink(value))
                    })
                }
                _ => None
            }
        },
        0x6e74656e => { // nten
            if type_name == "ArrayOfEnteringMaintenanceModeEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfEnteringMaintenanceModeEvent(value))
                })
            } else { None }
        },
        0x6f676963 => { // ogic
            if type_name == "ArrayOfVirtualLsiLogicSASController" {
                Some(|raw| {
                    let value: Vec<VirtualLsiLogicSasController> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualLsiLogicSasController(value))
                })
            } else { None }
        },
        0x6f6c6c65 => { // olle
            if type_name == "ArrayOfDeviceControllerNotSupported" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDeviceControllerNotSupported(value))
                })
            } else { None }
        },
        0x6f6e4468 => { // onDh
            if type_name == "ArrayOfCustomizationDhcpIpGenerator" {
                Some(|raw| {
                    let value: Vec<CustomizationDhcpIpGenerator> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCustomizationDhcpIpGenerator(value))
                })
            } else { None }
        },
        0x6f6e4c69 => { // onLi
            if type_name == "ArrayOfCustomizationLicenseDataMode" {
                Some(|raw| {
                    let value: Vec<super::enums::CustomizationLicenseDataModeEnum> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCustomizationLicenseDataMode(value))
                })
            } else { None }
        },
        0x6f6e736f => { // onso
            if type_name == "ArrayOfDvsServiceConsoleVNicProfile" {
                Some(|raw| {
                    let value: Vec<DvsServiceConsoleVNicProfile> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsServiceConsoleVNicProfile(value))
                })
            } else { None }
        },
        0x6f737452 => { // ostR
            if type_name == "ArrayOfClusterDasHostRecommendation" {
                Some(|raw| {
                    let value: Vec<ClusterDasHostRecommendation> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterDasHostRecommendation(value))
                })
            } else { None }
        },
        0x70696e67 => { // ping
            if type_name == "ArrayOfHostDiskMappingPartitionInfo" {
                Some(|raw| {
                    let value: Vec<HostDiskMappingPartitionInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostDiskMappingPartitionInfo(value))
                })
            } else { None }
        },
        0x724f6666 => { // rOff
            if type_name == "ArrayOfMissingPowerOffConfiguration" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfMissingPowerOffConfiguration(value))
                })
            } else { None }
        },
        0x72616e63 => { // ranc
            if type_name == "ArrayOfVmFaultToleranceOpIssuesList" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmFaultToleranceOpIssuesList(value))
                })
            } else { None }
        },
        0x72644e6f => { // rdNo
            if type_name == "ArrayOfAdminPasswordNotChangedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfAdminPasswordNotChangedEvent(value))
                })
            } else { None }
        },
        0x72647761 => { // rdwa
            if type_name == "ArrayOfScheduledHardwareUpgradeInfo" {
                Some(|raw| {
                    let value: Vec<ScheduledHardwareUpgradeInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfScheduledHardwareUpgradeInfo(value))
                })
            } else { None }
        },
        0x7265416c => { // reAl
            if type_name == "ArrayOfVmfsDatastoreAllExtentOption" {
                Some(|raw| {
                    let value: Vec<VmfsDatastoreAllExtentOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmfsDatastoreAllExtentOption(value))
                })
            } else { None }
        },
        0x7265546f => { // reTo
            if type_name == "ArrayOfHostPlugStoreTopologyAdapter" {
                Some(|raw| {
                    let value: Vec<HostPlugStoreTopologyAdapter> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostPlugStoreTopologyAdapter(value))
                })
            } else { None }
        },
        0x72656465 => { // rede
            if type_name == "ArrayOfNasSessionCredentialConflict" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNasSessionCredentialConflict(value))
                })
            } else { None }
        },
        0x72744e61 => { // rtNa
            if type_name == "ArrayOfHostIpToShortNameFailedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostIpToShortNameFailedEvent(value))
                })
            } else { None }
        },
        0x7279556e => { // ryUn
            if type_name == "ArrayOfHostInventoryUnreadableEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostInventoryUnreadableEvent(value))
                })
            } else { None }
        },
        0x73436f6e => { // sCon
            if type_name == "ArrayOfHostGraphicsConfigDeviceType" {
                Some(|raw| {
                    let value: Vec<HostGraphicsConfigDeviceType> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostGraphicsConfigDeviceType(value))
                })
            } else { None }
        },
        0x73486f73 => { // sHos
            if type_name == "ArrayOfHeterogenousHostsBlockingEVC" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHeterogenousHostsBlockingEvc(value))
                })
            } else { None }
        },
        0x7373696f => { // ssio
            if type_name == "ArrayOfVspanSameSessionPortConflict" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVspanSameSessionPortConflict(value))
                })
            } else { None }
        },
        0x74416765 => { // tAge
            if type_name == "ArrayOfInsufficientAgentVmsDeployed" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInsufficientAgentVmsDeployed(value))
                })
            } else { None }
        },
        0x74536373 => { // tScs
            if type_name == "ArrayOfHostInternetScsiHbaTargetSet" {
                Some(|raw| {
                    let value: Vec<HostInternetScsiHbaTargetSet> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostInternetScsiHbaTargetSet(value))
                })
            } else { None }
        },
        0x74537570 => { // tSup
            if type_name == "ArrayOfOperationNotSupportedByGuest" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOperationNotSupportedByGuest(value))
                })
            } else { None }
        },
        0x74616c65 => { // tale
            if type_name == "ArrayOfStorageDrsStaleHmsCollection" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfStorageDrsStaleHmsCollection(value))
                })
            } else { None }
        },
        0x74656441 => { // tedA
            if type_name == "ArrayOfOvfUnsupportedAttributeValue" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfUnsupportedAttributeValue(value))
                })
            } else { None }
        },
        0x74656442 => { // tedB
            match type_name {
                "ArrayOfEVCUnsupportedByHostHardware" => {
                    Some(|raw| {
                        let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfEvcUnsupportedByHostHardware(value))
                    })
                }
                "ArrayOfEVCUnsupportedByHostSoftware" => {
                    Some(|raw| {
                        let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfEvcUnsupportedByHostSoftware(value))
                    })
                }
                _ => None
            }
        },
        0x74656448 => { // tedH
            if type_name == "ArrayOfOvfNoSupportedHardwareFamily" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfNoSupportedHardwareFamily(value))
                })
            } else { None }
        },
        0x7468496e => { // thIn
            if type_name == "ArrayOfHostMultipathInfoLogicalUnit" {
                Some(|raw| {
                    let value: Vec<HostMultipathInfoLogicalUnit> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostMultipathInfoLogicalUnit(value))
                })
            } else { None }
        },
        0x74696361 => { // tica
            if type_name == "ArrayOfGuestAuthenticationChallenge" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGuestAuthenticationChallenge(value))
                })
            } else { None }
        },
        0x74696d65 => { // time
            if type_name == "ArrayOfVsanHostRuntimeInfoDiskIssue" {
                Some(|raw| {
                    let value: Vec<VsanHostRuntimeInfoDiskIssue> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVsanHostRuntimeInfoDiskIssue(value))
                })
            } else { None }
        },
        0x746f7253 => { // torS
            if type_name == "ArrayOfServiceLocatorSAMLCredential" {
                Some(|raw| {
                    let value: Vec<ServiceLocatorSamlCredential> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfServiceLocatorSamlCredential(value))
                })
            } else { None }
        },
        0x74754e6f => { // tuNo
            if type_name == "ArrayOfUplinkPortMtuNotSupportEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfUplinkPortMtuNotSupportEvent(value))
                })
            } else { None }
        },
        0x74776f72 => { // twor
            if type_name == "ArrayOfDVSVmVnicNetworkResourcePool" {
                Some(|raw| {
                    let value: Vec<DvsVmVnicNetworkResourcePool> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsVmVnicNetworkResourcePool(value))
                })
            } else { None }
        },
        0x75654d75 => { // ueMu
            if type_name == "ArrayOfGuestRegValueMultiStringSpec" {
                Some(|raw| {
                    let value: Vec<GuestRegValueMultiStringSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGuestRegValueMultiStringSpec(value))
                })
            } else { None }
        },
        0x75726365 => { // urce
            if type_name == "ArrayOfComputeResourceEventArgument" {
                Some(|raw| {
                    let value: Vec<ComputeResourceEventArgument> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfComputeResourceEventArgument(value))
                })
            } else { None }
        },
        0x7573746f => { // usto
            if type_name == "ArrayOfUnexpectedCustomizationFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfUnexpectedCustomizationFault(value))
                })
            } else { None }
        },
        0x7955706c => { // yUpl
            if type_name == "ArrayOfDVSNameArrayUplinkPortPolicy" {
                Some(|raw| {
                    let value: Vec<DvsNameArrayUplinkPortPolicy> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsNameArrayUplinkPortPolicy(value))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_value_deserializer_36(type_name: &str) -> Option<fn(&serde_json::value::RawValue) -> Result<ValueElements, serde_json::Error>> {
    let s = &type_name[22..26];
    let Some(type_ord) = to_u32(s) else {
        return None;
    };
    match type_ord {
        0x41757468 => { // Auth
            if type_name == "ArrayOfTicketedSessionAuthentication" {
                Some(|raw| {
                    let value: Vec<TicketedSessionAuthentication> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfTicketedSessionAuthentication(value))
                })
            } else { None }
        },
        0x436f6e6e => { // Conn
            if type_name == "ArrayOfVmRemoteConsoleConnectedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmRemoteConsoleConnectedEvent(value))
                })
            } else { None }
        },
        0x47617465 => { // Gate
            if type_name == "ArrayOfHostListSummaryGatewaySummary" {
                Some(|raw| {
                    let value: Vec<HostListSummaryGatewaySummary> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostListSummaryGatewaySummary(value))
                })
            } else { None }
        },
        0x49426163 => { // IBac
            if type_name == "ArrayOfVirtualDeviceURIBackingOption" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::VirtualDeviceUriBackingOptionTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualDeviceUriBackingOption(value))
                })
            } else { None }
        },
        0x5265736f => { // Reso
            if type_name == "ArrayOfInsufficientCpuResourcesFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInsufficientCpuResourcesFault(value))
                })
            } else { None }
        },
        0x52756c65 => { // Rule
            if type_name == "ArrayOfFirewallProfileRulesetProfile" {
                Some(|raw| {
                    let value: Vec<FirewallProfileRulesetProfile> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfFirewallProfileRulesetProfile(value))
                })
            } else { None }
        },
        0x5472616e => { // Tran
            if type_name == "VirtualMachineRelocateTransformation" {
                Some(|raw| {
                    let value: super::enums::VirtualMachineRelocateTransformationEnum = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::VirtualMachineRelocateTransformation(value))
                })
            } else { None }
        },
        0x61676542 => { // ageB
            if type_name == "ArrayOfVirtualFloppyImageBackingInfo" {
                Some(|raw| {
                    let value: Vec<VirtualFloppyImageBackingInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualFloppyImageBackingInfo(value))
                })
            } else { None }
        },
        0x61696c46 => { // ailF
            if type_name == "ArrayOfScheduledTaskEmailFailedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfScheduledTaskEmailFailedEvent(value))
                })
            } else { None }
        },
        0x616d6553 => { // ameS
            if type_name == "ArrayOfHostNatServiceNameServiceSpec" {
                Some(|raw| {
                    let value: Vec<HostNatServiceNameServiceSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostNatServiceNameServiceSpec(value))
                })
            } else { None }
        },
        0x61726477 => { // ardw
            if type_name == "ArrayOfHostAssignableHardwareBinding" {
                Some(|raw| {
                    let value: Vec<HostAssignableHardwareBinding> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostAssignableHardwareBinding(value))
                })
            } else { None }
        },
        0x61727462 => { // artb
            if type_name == "ArrayOfAutoStartWaitHeartbeatSetting" {
                Some(|raw| {
                    let value: Vec<super::enums::AutoStartWaitHeartbeatSettingEnum> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfAutoStartWaitHeartbeatSetting(value))
                })
            } else { None }
        },
        0x61766169 => { // avai
            if type_name == "ArrayOfLicenseServerUnavailableEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfLicenseServerUnavailableEvent(value))
                })
            } else { None }
        },
        0x6346696c => { // cFil
            if type_name == "VirtualDeviceConfigSpecFileOperation" {
                Some(|raw| {
                    let value: super::enums::VirtualDeviceConfigSpecFileOperationEnum = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::VirtualDeviceConfigSpecFileOperation(value))
                })
            } else { None }
        },
        0x63654368 => { // ceCh
            if type_name == "ArrayOfClusterComplianceCheckedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterComplianceCheckedEvent(value))
                })
            } else { None }
        },
        0x63655761 => { // ceWa
            if type_name == "ArrayOfMigrationResourceWarningEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfMigrationResourceWarningEvent(value))
                })
            } else { None }
        },
        0x63656452 => { // cedR
            if type_name == "ArrayOfClusterDasAdvancedRuntimeInfo" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::ClusterDasAdvancedRuntimeInfoTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterDasAdvancedRuntimeInfo(value))
                })
            } else { None }
        },
        0x63684265 => { // chBe
            if type_name == "ArrayOfHostVirtualSwitchBeaconConfig" {
                Some(|raw| {
                    let value: Vec<HostVirtualSwitchBeaconConfig> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostVirtualSwitchBeaconConfig(value))
                })
            } else { None }
        },
        0x63685369 => { // chSi
            if type_name == "ArrayOfHostVirtualSwitchSimpleBridge" {
                Some(|raw| {
                    let value: Vec<HostVirtualSwitchSimpleBridge> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostVirtualSwitchSimpleBridge(value))
                })
            } else { None }
        },
        0x6442616c => { // dBal
            if type_name == "ArrayOfStorageDrsIoLoadBalanceConfig" {
                Some(|raw| {
                    let value: Vec<StorageDrsIoLoadBalanceConfig> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfStorageDrsIoLoadBalanceConfig(value))
                })
            } else { None }
        },
        0x64557365 => { // dUse
            if type_name == "ArrayOfHostCnxFailedBadUsernameEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostCnxFailedBadUsernameEvent(value))
                })
            } else { None }
        },
        0x65447273 => { // eDrs
            if type_name == "ArrayOfClusterProactiveDrsConfigInfo" {
                Some(|raw| {
                    let value: Vec<ClusterProactiveDrsConfigInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterProactiveDrsConfigInfo(value))
                })
            } else { None }
        },
        0x65494f46 => { // eIOF
            if type_name == "ArrayOfQuiesceDatastoreIOForHAFailed" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfQuiesceDatastoreIoForHaFailed(value))
                })
            } else { None }
        },
        0x65637572 => { // ecur
            if type_name == "ArrayOfTaskFilterSpecRecursionOption" {
                Some(|raw| {
                    let value: Vec<super::enums::TaskFilterSpecRecursionOptionEnum> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfTaskFilterSpecRecursionOption(value))
                })
            } else { None }
        },
        0x6564466f => { // edFo
            if type_name == "ArrayOfDeviceUnsupportedForVmVersion" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDeviceUnsupportedForVmVersion(value))
                })
            } else { None }
        },
        0x656e7469 => { // enti
            if type_name == "ArrayOfCustomizationIdentitySettings" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::CustomizationIdentitySettingsTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCustomizationIdentitySettings(value))
                })
            } else { None }
        },
        0x65736572 => { // eser
            if type_name == "ArrayOfServiceConsoleReservationInfo" {
                Some(|raw| {
                    let value: Vec<ServiceConsoleReservationInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfServiceConsoleReservationInfo(value))
                })
            } else { None }
        },
        0x65736f75 => { // esou
            if type_name == "ArrayOfClusterComputeResourceSummary" {
                Some(|raw| {
                    let value: Vec<ClusterComputeResourceSummary> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterComputeResourceSummary(value))
                })
            } else { None }
        },
        0x666f726d => { // form
            if type_name == "ArrayOfIncorrectHostInformationEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfIncorrectHostInformationEvent(value))
                })
            } else { None }
        },
        0x67657249 => { // gerI
            if type_name == "ArrayOfExtSolutionManagerInfoTabInfo" {
                Some(|raw| {
                    let value: Vec<ExtSolutionManagerInfoTabInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfExtSolutionManagerInfoTabInfo(value))
                })
            } else { None }
        },
        0x67707550 => { // gpuP
            if type_name == "ArrayOfVirtualMachineVgpuProfileInfo" {
                Some(|raw| {
                    let value: Vec<VirtualMachineVgpuProfileInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineVgpuProfileInfo(value))
                })
            } else { None }
        },
        0x69486261 => { // iHba
            match type_name {
                "ArrayOfHostInternetScsiHbaParamValue" => {
                    Some(|raw| {
                        let value: Vec<HostInternetScsiHbaParamValue> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostInternetScsiHbaParamValue(value))
                    })
                }
                "ArrayOfHostInternetScsiHbaSendTarget" => {
                    Some(|raw| {
                        let value: Vec<HostInternetScsiHbaSendTarget> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostInternetScsiHbaSendTarget(value))
                    })
                }
                _ => None
            }
        },
        0x69666965 => { // ifie
            if type_name == "ArrayOfOvfPropertyQualifierDuplicate" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfPropertyQualifierDuplicate(value))
                })
            } else { None }
        },
        0x69674e65 => { // igNe
            if type_name == "ArrayOfHostNetworkConfigNetStackSpec" {
                Some(|raw| {
                    let value: Vec<HostNetworkConfigNetStackSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostNetworkConfigNetStackSpec(value))
                })
            } else { None }
        },
        0x696c6542 => { // ileB
            if type_name == "ArrayOfBaseConfigInfoFileBackingInfo" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::BaseConfigInfoFileBackingInfoTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfBaseConfigInfoFileBackingInfo(value))
                })
            } else { None }
        },
        0x696f6e4d => { // ionM
            if type_name == "ArrayOfHostAuthenticationManagerInfo" {
                Some(|raw| {
                    let value: Vec<HostAuthenticationManagerInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostAuthenticationManagerInfo(value))
                })
            } else { None }
        },
        0x69705365 => { // ipSe
            if type_name == "ArrayOfCryptoManagerKmipServerStatus" {
                Some(|raw| {
                    let value: Vec<CryptoManagerKmipServerStatus> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCryptoManagerKmipServerStatus(value))
                })
            } else { None }
        },
        0x69727475 => { // irtu
            if type_name == "ArrayOfVirtualMachineVirtualNumaInfo" {
                Some(|raw| {
                    let value: Vec<VirtualMachineVirtualNumaInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineVirtualNumaInfo(value))
                })
            } else { None }
        },
        0x6973706c => { // ispl
            if type_name == "ArrayOfVirtualMachineDisplayTopology" {
                Some(|raw| {
                    let value: Vec<VirtualMachineDisplayTopology> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineDisplayTopology(value))
                })
            } else { None }
        },
        0x6c616365 => { // lace
            if type_name == "ArrayOfClusterInitialPlacementAction" {
                Some(|raw| {
                    let value: Vec<ClusterInitialPlacementAction> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterInitialPlacementAction(value))
                })
            } else { None }
        },
        0x6c656374 => { // lect
            if type_name == "ArrayOfVirtualSwitchSelectionProfile" {
                Some(|raw| {
                    let value: Vec<VirtualSwitchSelectionProfile> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualSwitchSelectionProfile(value))
                })
            } else { None }
        },
        0x6c657465 => { // lete
            if type_name == "ArrayOfHostProfileCompleteConfigSpec" {
                Some(|raw| {
                    let value: Vec<HostProfileCompleteConfigSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostProfileCompleteConfigSpec(value))
                })
            } else { None }
        },
        0x6c746843 => { // lthC
            if type_name == "ArrayOfVMwareDVSMtuHealthCheckResult" {
                Some(|raw| {
                    let value: Vec<VMwareDvsMtuHealthCheckResult> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVMwareDvsMtuHealthCheckResult(value))
                })
            } else { None }
        },
        0x6d656e74 => { // ment
            if type_name == "ArrayOfStorageDrsPlacementRankVmSpec" {
                Some(|raw| {
                    let value: Vec<StorageDrsPlacementRankVmSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfStorageDrsPlacementRankVmSpec(value))
                })
            } else { None }
        },
        0x6d706174 => { // mpat
            if type_name == "ArrayOfReplicationIncompatibleWithFT" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfReplicationIncompatibleWithFt(value))
                })
            } else { None }
        },
        0x6e4f6e53 => { // nOnS
            if type_name == "ArrayOfInvalidOperationOnSecondaryVm" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInvalidOperationOnSecondaryVm(value))
                })
            } else { None }
        },
        0x6e617073 => { // naps
            if type_name == "ArrayOfVStorageObjectSnapshotDetails" {
                Some(|raw| {
                    let value: Vec<VStorageObjectSnapshotDetails> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVStorageObjectSnapshotDetails(value))
                })
            } else { None }
        },
        0x6e666f43 => { // nfoC
            if type_name == "ArrayOfVsanHostConfigInfoClusterInfo" {
                Some(|raw| {
                    let value: Vec<VsanHostConfigInfoClusterInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVsanHostConfigInfoClusterInfo(value))
                })
            } else { None }
        },
        0x6e666f4e => { // nfoN
            if type_name == "ArrayOfVsanHostConfigInfoNetworkInfo" {
                Some(|raw| {
                    let value: Vec<VsanHostConfigInfoNetworkInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVsanHostConfigInfoNetworkInfo(value))
                })
            } else { None }
        },
        0x6e666f53 => { // nfoS
            if type_name == "ArrayOfVsanHostConfigInfoStorageInfo" {
                Some(|raw| {
                    let value: Vec<VsanHostConfigInfoStorageInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVsanHostConfigInfoStorageInfo(value))
                })
            } else { None }
        },
        0x6e674e6f => { // ngNo
            if type_name == "ArrayOfOvfNetworkMappingNotSupported" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfNetworkMappingNotSupported(value))
                })
            } else { None }
        },
        0x6e744e61 => { // ntNa
            if type_name == "ArrayOfTooManyConcurrentNativeClones" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfTooManyConcurrentNativeClones(value))
                })
            } else { None }
        },
        0x6e74656e => { // nten
            if type_name == "ArrayOfClusterEnterMaintenanceResult" {
                Some(|raw| {
                    let value: Vec<ClusterEnterMaintenanceResult> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterEnterMaintenanceResult(value))
                })
            } else { None }
        },
        0x6e74726f => { // ntro
            if type_name == "ArrayOfVirtualNVDIMMControllerOption" {
                Some(|raw| {
                    let value: Vec<VirtualNvdimmControllerOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualNvdimmControllerOption(value))
                })
            } else { None }
        },
        0x6f62616c => { // obal
            if type_name == "ArrayOfCustomizationGlobalIPSettings" {
                Some(|raw| {
                    let value: Vec<CustomizationGlobalIpSettings> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCustomizationGlobalIpSettings(value))
                })
            } else { None }
        },
        0x6f646546 => { // odeF
            if type_name == "ArrayOfDrsExitStandbyModeFailedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDrsExitStandbyModeFailedEvent(value))
                })
            } else { None }
        },
        0x6f6e4368 => { // onCh
            if type_name == "ArrayOfHostSpecificationChangedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostSpecificationChangedEvent(value))
                })
            } else { None }
        },
        0x6f6e4e65 => { // onNe
            if type_name == "ArrayOfMismatchedVMotionNetworkNames" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfMismatchedVMotionNetworkNames(value))
                })
            } else { None }
        },
        0x6f6e4e6f => { // onNo
            if type_name == "ArrayOfNonHomeRDMVMotionNotSupported" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNonHomeRdmvMotionNotSupported(value))
                })
            } else { None }
        },
        0x6f6e506f => { // onPo
            if type_name == "ArrayOfHostPathSelectionPolicyOption" {
                Some(|raw| {
                    let value: Vec<HostPathSelectionPolicyOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostPathSelectionPolicyOption(value))
                })
            } else { None }
        },
        0x6f6e5265 => { // onRe
            if type_name == "ArrayOfHostSpecificationRequireEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostSpecificationRequireEvent(value))
                })
            } else { None }
        },
        0x6f6e6669 => { // onfi
            if type_name == "ArrayOfResourcePoolReconfiguredEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfResourcePoolReconfiguredEvent(value))
                })
            } else { None }
        },
        0x6f6e6e65 => { // onne
            if type_name == "ArrayOfVirtualMachineConnectionState" {
                Some(|raw| {
                    let value: Vec<super::enums::VirtualMachineConnectionStateEnum> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineConnectionState(value))
                })
            } else { None }
        },
        0x6f706572 => { // oper
            match type_name {
                "ArrayOfOvfDuplicatedPropertyIdExport" => {
                    Some(|raw| {
                        let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfOvfDuplicatedPropertyIdExport(value))
                    })
                }
                "ArrayOfOvfDuplicatedPropertyIdImport" => {
                    Some(|raw| {
                        let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfOvfDuplicatedPropertyIdImport(value))
                    })
                }
                _ => None
            }
        },
        0x6f727446 => { // ortF
            if type_name == "ArrayOfHostNatServicePortForwardSpec" {
                Some(|raw| {
                    let value: Vec<HostNatServicePortForwardSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostNatServicePortForwardSpec(value))
                })
            } else { None }
        },
        0x6f744e6f => { // otNo
            if type_name == "ArrayOfCloneFromSnapshotNotSupported" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCloneFromSnapshotNotSupported(value))
                })
            } else { None }
        },
        0x70616365 => { // pace
            if type_name == "ArrayOfNvdimmPMemNamespaceCreateSpec" {
                Some(|raw| {
                    let value: Vec<NvdimmPMemNamespaceCreateSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNvdimmPMemNamespaceCreateSpec(value))
                })
            } else { None }
        },
        0x70616e64 => { // pand
            if type_name == "ArrayOfGuestRegValueExpandStringSpec" {
                Some(|raw| {
                    let value: Vec<GuestRegValueExpandStringSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGuestRegValueExpandStringSpec(value))
                })
            } else { None }
        },
        0x7075496e => { // puIn
            if type_name == "ArrayOfFaultToleranceCpuIncompatible" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfFaultToleranceCpuIncompatible(value))
                })
            } else { None }
        },
        0x7374656d => { // stem
            if type_name == "ArrayOfHostLocalFileSystemVolumeSpec" {
                Some(|raw| {
                    let value: Vec<HostLocalFileSystemVolumeSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostLocalFileSystemVolumeSpec(value))
                })
            } else { None }
        },
        0x73746f72 => { // stor
            if type_name == "ArrayOfUnSupportedDatastoreForVFlash" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfUnSupportedDatastoreForVFlash(value))
                })
            } else { None }
        },
        0x74436170 => { // tCap
            if type_name == "ArrayOfInsufficientHostCapacityFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInsufficientHostCapacityFault(value))
                })
            } else { None }
        },
        0x74546561 => { // tTea
            if type_name == "ArrayOfVmwareUplinkPortTeamingPolicy" {
                Some(|raw| {
                    let value: Vec<VmwareUplinkPortTeamingPolicy> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmwareUplinkPortTeamingPolicy(value))
                })
            } else { None }
        },
        0x74654e6f => { // teNo
            if type_name == "ArrayOfSuspendedRelocateNotSupported" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfSuspendedRelocateNotSupported(value))
                })
            } else { None }
        },
        0x74734e6f => { // tsNo
            if type_name == "ArrayOfMultipleSnapshotsNotSupported" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfMultipleSnapshotsNotSupported(value))
                })
            } else { None }
        },
        0x74776f72 => { // twor
            if type_name == "ArrayOfDuplicateVsanNetworkInterface" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDuplicateVsanNetworkInterface(value))
                })
            } else { None }
        },
        0x756e6963 => { // unic
            if type_name == "ArrayOfOvfConsumerCommunicationError" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfConsumerCommunicationError(value))
                })
            } else { None }
        },
        0x7570706f => { // uppo
            if type_name == "ArrayOfReplicationNotSupportedOnHost" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfReplicationNotSupportedOnHost(value))
                })
            } else { None }
        },
        0x75737456 => { // ustV
            if type_name == "ArrayOfGatewayToHostTrustVerifyFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGatewayToHostTrustVerifyFault(value))
                })
            } else { None }
        },
        0x776f726b => { // work
            match type_name {
                "ArrayOfDvsRateLimitNetworkRuleAction" => {
                    Some(|raw| {
                        let value: Vec<DvsRateLimitNetworkRuleAction> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfDvsRateLimitNetworkRuleAction(value))
                    })
                }
                "ArrayOfDvsUpdateTagNetworkRuleAction" => {
                    Some(|raw| {
                        let value: Vec<DvsUpdateTagNetworkRuleAction> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfDvsUpdateTagNetworkRuleAction(value))
                    })
                }
                _ => None
            }
        },
        0x79416c72 => { // yAlr
            if type_name == "ArrayOfGuestRegistryKeyAlreadyExists" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGuestRegistryKeyAlreadyExists(value))
                })
            } else { None }
        },
        0x79546173 => { // yTas
            if type_name == "ArrayOfMonthlyByWeekdayTaskScheduler" {
                Some(|raw| {
                    let value: Vec<MonthlyByWeekdayTaskScheduler> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfMonthlyByWeekdayTaskScheduler(value))
                })
            } else { None }
        },
        0x79706543 => { // ypeC
            if type_name == "ArrayOfVspanPortgroupTypeChangeFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVspanPortgroupTypeChangeFault(value))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_value_deserializer_37(type_name: &str) -> Option<fn(&serde_json::value::RawValue) -> Result<ValueElements, serde_json::Error>> {
    let s = &type_name[18..26];
    let Some(type_ord) = to_u64(s) else {
        return None;
    };
    match type_ord {
        0x4364704465766963 => { // CdpDevic
            if type_name == "ArrayOfPhysicalNicCdpDeviceCapability" {
                Some(|raw| {
                    let value: Vec<PhysicalNicCdpDeviceCapability> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPhysicalNicCdpDeviceCapability(value))
                })
            } else { None }
        },
        0x436f6e6669677572 => { // Configur
            if type_name == "ArrayOfConflictingConfigurationConfig" {
                Some(|raw| {
                    let value: Vec<ConflictingConfigurationConfig> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfConflictingConfigurationConfig(value))
                })
            } else { None }
        },
        0x466c617456657231 => { // FlatVer1
            if type_name == "ArrayOfVirtualDiskFlatVer1BackingInfo" {
                Some(|raw| {
                    let value: Vec<VirtualDiskFlatVer1BackingInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualDiskFlatVer1BackingInfo(value))
                })
            } else { None }
        },
        0x466c617456657232 => { // FlatVer2
            if type_name == "ArrayOfVirtualDiskFlatVer2BackingInfo" {
                Some(|raw| {
                    let value: Vec<VirtualDiskFlatVer2BackingInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualDiskFlatVer2BackingInfo(value))
                })
            } else { None }
        },
        0x484349436f6e7472 => { // HCIContr
            if type_name == "ArrayOfVirtualUSBXHCIControllerOption" {
                Some(|raw| {
                    let value: Vec<VirtualUsbxhciControllerOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualUsbxhciControllerOption(value))
                })
            } else { None }
        },
        0x486f737442617365 => { // HostBase
            if type_name == "ArrayOfHostProfileHostBasedConfigSpec" {
                Some(|raw| {
                    let value: Vec<HostProfileHostBasedConfigSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostProfileHostBasedConfigSpec(value))
                })
            } else { None }
        },
        0x524d5265636f6e66 => { // RMReconf
            if type_name == "ArrayOfDatastoreIORMReconfiguredEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDatastoreIormReconfiguredEvent(value))
                })
            } else { None }
        },
        0x5365537061727365 => { // SeSparse
            if type_name == "ArrayOfVirtualDiskSeSparseBackingInfo" {
                Some(|raw| {
                    let value: Vec<VirtualDiskSeSparseBackingInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualDiskSeSparseBackingInfo(value))
                })
            } else { None }
        },
        0x5370656352656375 => { // SpecRecu
            if type_name == "ArrayOfEventFilterSpecRecursionOption" {
                Some(|raw| {
                    let value: Vec<super::enums::EventFilterSpecRecursionOptionEnum> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfEventFilterSpecRecursionOption(value))
                })
            } else { None }
        },
        0x53797374656d5363 => { // SystemSc
            if type_name == "ArrayOfHostStorageSystemScsiLunResult" {
                Some(|raw| {
                    let value: Vec<HostStorageSystemScsiLunResult> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostStorageSystemScsiLunResult(value))
                })
            } else { None }
        },
        0x53797374656d5570 => { // SystemUp
            if type_name == "ArrayOfVsanUpgradeSystemUpgradeStatus" {
                Some(|raw| {
                    let value: Vec<VsanUpgradeSystemUpgradeStatus> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVsanUpgradeSystemUpgradeStatus(value))
                })
            } else { None }
        },
        0x564d6f74696f6e4e => { // VMotionN
            if type_name == "ArrayOfFullStorageVMotionNotSupported" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfFullStorageVMotionNotSupported(value))
                })
            } else { None }
        },
        0x6155706461746548 => { // aUpdateH
            if type_name == "ArrayOfClusterInfraUpdateHaConfigInfo" {
                Some(|raw| {
                    let value: Vec<ClusterInfraUpdateHaConfigInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterInfraUpdateHaConfigInfo(value))
                })
            } else { None }
        },
        0x616c746843686563 => { // althChec
            if type_name == "ArrayOfVMwareDVSHealthCheckCapability" {
                Some(|raw| {
                    let value: Vec<VMwareDvsHealthCheckCapability> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVMwareDvsHealthCheckCapability(value))
                })
            } else { None }
        },
        0x616c7565466f726d => { // alueForm
            if type_name == "ArrayOfOvfInvalidValueFormatMalformed" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfInvalidValueFormatMalformed(value))
                })
            } else { None }
        },
        0x616e4865616c7468 => { // anHealth
            if type_name == "ArrayOfVMwareDVSVlanHealthCheckResult" {
                Some(|raw| {
                    let value: Vec<VMwareDvsVlanHealthCheckResult> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVMwareDvsVlanHealthCheckResult(value))
                })
            } else { None }
        },
        0x616e616765724c6f => { // anagerLo
            if type_name == "ArrayOfDiagnosticManagerLogDescriptor" {
                Some(|raw| {
                    let value: Vec<DiagnosticManagerLogDescriptor> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDiagnosticManagerLogDescriptor(value))
                })
            } else { None }
        },
        0x616e6e6f744d6f76 => { // annotMov
            if type_name == "ArrayOfStorageDrsCannotMoveSharedDisk" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfStorageDrsCannotMoveSharedDisk(value))
                })
            } else { None }
        },
        0x617373776f726443 => { // asswordC
            if type_name == "ArrayOfVimAccountPasswordChangedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVimAccountPasswordChangedEvent(value))
                })
            } else { None }
        },
        0x626c6564506f7274 => { // bledPort
            if type_name == "ArrayOfHostNoHAEnabledPortGroupsEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostNoHaEnabledPortGroupsEvent(value))
                })
            } else { None }
        },
        0x6365446576696365 => { // ceDevice
            if type_name == "ArrayOfVirtualDeviceDeviceBackingInfo" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::VirtualDeviceDeviceBackingInfoTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualDeviceDeviceBackingInfo(value))
                })
            } else { None }
        },
        0x636546696c654261 => { // ceFileBa
            if type_name == "ArrayOfVirtualDeviceFileBackingOption" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::VirtualDeviceFileBackingOptionTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualDeviceFileBackingOption(value))
                })
            } else { None }
        },
        0x6365506970654261 => { // cePipeBa
            if type_name == "ArrayOfVirtualDevicePipeBackingOption" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::VirtualDevicePipeBackingOptionTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualDevicePipeBackingOption(value))
                })
            } else { None }
        },
        0x6461746150726f66 => { // dataProf
            if type_name == "ArrayOfProfileMetadataProfileSortSpec" {
                Some(|raw| {
                    let value: Vec<ProfileMetadataProfileSortSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfProfileMetadataProfileSortSpec(value))
                })
            } else { None }
        },
        0x646d697373696f6e => { // dmission
            if type_name == "ArrayOfClusterDasAdmissionControlInfo" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::ClusterDasAdmissionControlInfoTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterDasAdmissionControlInfo(value))
                })
            } else { None }
        },
        0x654461746173746f => { // eDatasto
            if type_name == "ArrayOfHttpNfcLeaseDatastoreLeaseInfo" {
                Some(|raw| {
                    let value: Vec<HttpNfcLeaseDatastoreLeaseInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHttpNfcLeaseDatastoreLeaseInfo(value))
                })
            } else { None }
        },
        0x65486f7374466f72 => { // eHostFor
            if type_name == "ArrayOfIncompatibleHostForFtSecondary" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfIncompatibleHostForFtSecondary(value))
                })
            } else { None }
        },
        0x65644e6574776f72 => { // edNetwor
            if type_name == "ArrayOfHostCnxFailedNetworkErrorEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostCnxFailedNetworkErrorEvent(value))
                })
            } else { None }
        },
        0x65644e6f436f6e6e => { // edNoConn
            if type_name == "ArrayOfHostCnxFailedNoConnectionEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostCnxFailedNoConnectionEvent(value))
                })
            } else { None }
        },
        0x65724b6d6970436c => { // erKmipCl
            if type_name == "ArrayOfCryptoManagerKmipClusterStatus" {
                Some(|raw| {
                    let value: Vec<CryptoManagerKmipClusterStatus> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCryptoManagerKmipClusterStatus(value))
                })
            } else { None }
        },
        0x657269616c697a65 => { // erialize
            if type_name == "ArrayOfAnswerFileSerializedCreateSpec" {
                Some(|raw| {
                    let value: Vec<AnswerFileSerializedCreateSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfAnswerFileSerializedCreateSpec(value))
                })
            } else { None }
        },
        0x69676e6174757265 => { // ignature
            if type_name == "ArrayOfToolsImageSignatureCheckFailed" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfToolsImageSignatureCheckFailed(value))
                })
            } else { None }
        },
        0x696c65446e73436f => { // ileDnsCo
            if type_name == "ArrayOfNetworkProfileDnsConfigProfile" {
                Some(|raw| {
                    let value: Vec<NetworkProfileDnsConfigProfile> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNetworkProfileDnsConfigProfile(value))
                })
            } else { None }
        },
        0x696e65456d707479 => { // ineEmpty
            if type_name == "ArrayOfVirtualMachineEmptyProfileSpec" {
                Some(|raw| {
                    let value: Vec<VirtualMachineEmptyProfileSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineEmptyProfileSpec(value))
                })
            } else { None }
        },
        0x696e654775657374 => { // ineGuest
            if type_name == "ArrayOfVirtualMachineGuestQuiesceSpec" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::VirtualMachineGuestQuiesceSpecTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineGuestQuiesceSpec(value))
                })
            } else { None }
        },
        0x696e65496e737461 => { // ineInsta
            if type_name == "ArrayOfVirtualMachineInstantCloneSpec" {
                Some(|raw| {
                    let value: Vec<VirtualMachineInstantCloneSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineInstantCloneSpec(value))
                })
            } else { None }
        },
        0x696e6550726f7065 => { // inePrope
            if type_name == "ArrayOfVirtualMachinePropertyRelation" {
                Some(|raw| {
                    let value: Vec<VirtualMachinePropertyRelation> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachinePropertyRelation(value))
                })
            } else { None }
        },
        0x696e655573616765 => { // ineUsage
            if type_name == "ArrayOfVirtualMachineUsageOnDatastore" {
                Some(|raw| {
                    let value: Vec<VirtualMachineUsageOnDatastore> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineUsageOnDatastore(value))
                })
            } else { None }
        },
        0x696e6556466c6173 => { // ineVFlas
            if type_name == "ArrayOfVirtualMachineVFlashModuleInfo" {
                Some(|raw| {
                    let value: Vec<VirtualMachineVFlashModuleInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineVFlashModuleInfo(value))
                })
            } else { None }
        },
        0x696e65564d434944 => { // ineVMCID
            if type_name == "ArrayOfVirtualMachineVMCIDeviceOption" {
                Some(|raw| {
                    let value: Vec<VirtualMachineVmciDeviceOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineVmciDeviceOption(value))
                })
            } else { None }
        },
        0x69727475616c4d61 => { // irtualMa
            if type_name == "ArrayOfUnlicensedVirtualMachinesEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfUnlicensedVirtualMachinesEvent(value))
                })
            } else { None }
        },
        0x69727475616c4e69 => { // irtualNi
            if type_name == "ArrayOfHostPlacedVirtualNicIdentifier" {
                Some(|raw| {
                    let value: Vec<HostPlacedVirtualNicIdentifier> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostPlacedVirtualNicIdentifier(value))
                })
            } else { None }
        },
        0x6c52756c65736574 => { // lRuleset
            if type_name == "ArrayOfHostFirewallRulesetRulesetSpec" {
                Some(|raw| {
                    let value: Vec<HostFirewallRulesetRulesetSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostFirewallRulesetRulesetSpec(value))
                })
            } else { None }
        },
        0x6d41746170694261 => { // mAtapiBa
            if type_name == "ArrayOfVirtualCdromAtapiBackingOption" {
                Some(|raw| {
                    let value: Vec<VirtualCdromAtapiBackingOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualCdromAtapiBackingOption(value))
                })
            } else { None }
        },
        0x6d65496e636f6e73 => { // meIncons
            if type_name == "ArrayOfHostShortNameInconsistentEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostShortNameInconsistentEvent(value))
                })
            } else { None }
        },
        0x6e4661696c656448 => { // nFailedH
            if type_name == "ArrayOfEVCAdmissionFailedHostSoftware" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfEvcAdmissionFailedHostSoftware(value))
                })
            } else { None }
        },
        0x6e744469736b734e => { // ntDisksN
            if type_name == "ArrayOfNonPersistentDisksNotSupported" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNonPersistentDisksNotSupported(value))
                })
            } else { None }
        },
        0x6f6c65506f727447 => { // olePortG
            if type_name == "ArrayOfServiceConsolePortGroupProfile" {
                Some(|raw| {
                    let value: Vec<ServiceConsolePortGroupProfile> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfServiceConsolePortGroupProfile(value))
                })
            } else { None }
        },
        0x6f6d70617469626c => { // ompatibl
            if type_name == "ArrayOfSnapshotIncompatibleDeviceInVm" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfSnapshotIncompatibleDeviceInVm(value))
                })
            } else { None }
        },
        0x6f6d706c69616e63 => { // omplianc
            if type_name == "ArrayOfHostSystemComplianceCheckState" {
                Some(|raw| {
                    let value: Vec<HostSystemComplianceCheckState> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostSystemComplianceCheckState(value))
                })
            } else { None }
        },
        0x6f6e4175746f4970 => { // onAutoIp
            if type_name == "ArrayOfCustomizationAutoIpV6Generator" {
                Some(|raw| {
                    let value: Vec<CustomizationAutoIpV6Generator> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCustomizationAutoIpV6Generator(value))
                })
            } else { None }
        },
        0x6f6e437573746f6d => { // onCustom
            if type_name == "ArrayOfCustomizationCustomIpGenerator" {
                Some(|raw| {
                    let value: Vec<CustomizationCustomIpGenerator> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCustomizationCustomIpGenerator(value))
                })
            } else { None }
        },
        0x6f6e446863704970 => { // onDhcpIp
            if type_name == "ArrayOfCustomizationDhcpIpV6Generator" {
                Some(|raw| {
                    let value: Vec<CustomizationDhcpIpV6Generator> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCustomizationDhcpIpV6Generator(value))
                })
            } else { None }
        },
        0x6f6e497050696e67 => { // onIpPing
            if type_name == "ArrayOfHostIsolationIpPingFailedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostIsolationIpPingFailedEvent(value))
                })
            } else { None }
        },
        0x6f75726365506f6f => { // ourcePoo
            if type_name == "ArrayOfReadHostResourcePoolTreeFailed" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfReadHostResourcePoolTreeFailed(value))
                })
            } else { None }
        },
        0x70696e6750617274 => { // pingPart
            if type_name == "ArrayOfHostDiskMappingPartitionOption" {
                Some(|raw| {
                    let value: Vec<HostDiskMappingPartitionOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostDiskMappingPartitionOption(value))
                })
            } else { None }
        },
        0x706f72746564466f => { // portedFo
            if type_name == "ArrayOfDeviceUnsupportedForVmPlatform" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDeviceUnsupportedForVmPlatform(value))
                })
            } else { None }
        },
        0x7079446576696365 => { // pyDevice
            if type_name == "ArrayOfVirtualFloppyDeviceBackingInfo" {
                Some(|raw| {
                    let value: Vec<VirtualFloppyDeviceBackingInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualFloppyDeviceBackingInfo(value))
                })
            } else { None }
        },
        0x72616e6365547572 => { // ranceTur
            if type_name == "ArrayOfVmFaultToleranceTurnedOffEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmFaultToleranceTurnedOffEvent(value))
                })
            } else { None }
        },
        0x726542726f777365 => { // reBrowse
            if type_name == "ArrayOfHostDatastoreBrowserSearchSpec" {
                Some(|raw| {
                    let value: Vec<HostDatastoreBrowserSearchSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostDatastoreBrowserSearchSpec(value))
                })
            } else { None }
        },
        0x7265457869737473 => { // reExists
            if type_name == "ArrayOfHostDatastoreExistsConnectInfo" {
                Some(|raw| {
                    let value: Vec<HostDatastoreExistsConnectInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostDatastoreExistsConnectInfo(value))
                })
            } else { None }
        },
        0x72654e6f74577269 => { // reNotWri
            if type_name == "ArrayOfSwapDatastoreNotWritableOnHost" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfSwapDatastoreNotWritableOnHost(value))
                })
            } else { None }
        },
        0x7274696e67536563 => { // rtingSec
            if type_name == "ArrayOfVmFailedStartingSecondaryEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmFailedStartingSecondaryEvent(value))
                })
            } else { None }
        },
        0x727563747572654f => { // ructureO
            if type_name == "ArrayOfvslmInfrastructureObjectPolicy" {
                Some(|raw| {
                    let value: Vec<VslmInfrastructureObjectPolicy> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfvslmInfrastructureObjectPolicy(value))
                })
            } else { None }
        },
        0x72794b6579506172 => { // ryKeyPar
            if type_name == "ArrayOfGuestRegistryKeyParentVolatile" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGuestRegistryKeyParentVolatile(value))
                })
            } else { None }
        },
        0x735374616e646172 => { // sStandar
            if type_name == "ArrayOfInventoryHasStandardAloneHosts" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInventoryHasStandardAloneHosts(value))
                })
            } else { None }
        },
        0x73636f7665727950 => { // scoveryP
            if type_name == "ArrayOfLinkLayerDiscoveryProtocolInfo" {
                Some(|raw| {
                    let value: Vec<LinkLayerDiscoveryProtocolInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfLinkLayerDiscoveryProtocolInfo(value))
                })
            } else { None }
        },
        0x736b5265636f6e66 => { // skReconf
            if type_name == "ArrayOfScheduledTaskReconfiguredEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfScheduledTaskReconfiguredEvent(value))
                })
            } else { None }
        },
        0x745374616e646279 => { // tStandby
            if type_name == "ArrayOfInsufficientStandbyCpuResource" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInsufficientStandbyCpuResource(value))
                })
            } else { None }
        },
        0x74654654436f6d70 => { // teFTComp
            if type_name == "ArrayOfCannotComputeFTCompatibleHosts" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCannotComputeFtCompatibleHosts(value))
                })
            } else { None }
        },
        0x74654e6574776f72 => { // teNetwor
            if type_name == "ArrayOfDvsMacRewriteNetworkRuleAction" {
                Some(|raw| {
                    let value: Vec<DvsMacRewriteNetworkRuleAction> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsMacRewriteNetworkRuleAction(value))
                })
            } else { None }
        },
        0x7465644469736b50 => { // tedDiskP
            if type_name == "ArrayOfOvfUnsupportedDiskProvisioning" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfUnsupportedDiskProvisioning(value))
                })
            } else { None }
        },
        0x74776f726b446576 => { // tworkDev
            if type_name == "ArrayOfHostSriovNetworkDevicePoolInfo" {
                Some(|raw| {
                    let value: Vec<HostSriovNetworkDevicePoolInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostSriovNetworkDevicePoolInfo(value))
                })
            } else { None }
        },
        0x7574655265736f75 => { // uteResou
            if type_name == "ArrayOfClusterComputeResourceVcsSlots" {
                Some(|raw| {
                    let value: Vec<ClusterComputeResourceVcsSlots> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterComputeResourceVcsSlots(value))
                })
            } else { None }
        },
        0x7645746865726e65 => { // vEtherne
            if type_name == "ArrayOfVirtualSriovEthernetCardOption" {
                Some(|raw| {
                    let value: Vec<VirtualSriovEthernetCardOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualSriovEthernetCardOption(value))
                })
            } else { None }
        },
        0x76657273696f6e4e => { // versionN
            if type_name == "ArrayOfLargeRDMConversionNotSupported" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfLargeRdmConversionNotSupported(value))
                })
            } else { None }
        },
        0x787072657373696f => { // xpressio
            if type_name == "ArrayOfEventAlarmExpressionComparison" {
                Some(|raw| {
                    let value: Vec<EventAlarmExpressionComparison> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfEventAlarmExpressionComparison(value))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_value_deserializer_38(type_name: &str) -> Option<fn(&serde_json::value::RawValue) -> Result<ValueElements, serde_json::Error>> {
    let s = &type_name[20..24];
    let Some(type_ord) = to_u32(s) else {
        return None;
    };
    match type_ord {
        0x4163636f => { // Acco
            if type_name == "ArrayOfHostCnxFailedAccountFailedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostCnxFailedAccountFailedEvent(value))
                })
            } else { None }
        },
        0x416c7465 => { // Alte
            if type_name == "ArrayOfVmRestartedOnAlternateHostEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmRestartedOnAlternateHostEvent(value))
                })
            } else { None }
        },
        0x496d6167 => { // Imag
            if type_name == "ArrayOfVirtualFloppyImageBackingOption" {
                Some(|raw| {
                    let value: Vec<VirtualFloppyImageBackingOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualFloppyImageBackingOption(value))
                })
            } else { None }
        },
        0x4b6d6970 => { // Kmip
            if type_name == "ArrayOfCryptoManagerKmipServerCertInfo" {
                Some(|raw| {
                    let value: Vec<CryptoManagerKmipServerCertInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCryptoManagerKmipServerCertInfo(value))
                })
            } else { None }
        },
        0x4d616368 => { // Mach
            if type_name == "ArrayOfUpdateVirtualMachineFilesResult" {
                Some(|raw| {
                    let value: Vec<UpdateVirtualMachineFilesResult> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfUpdateVirtualMachineFilesResult(value))
                })
            } else { None }
        },
        0x4d6f7469 => { // Moti
            if type_name == "ArrayOfUnsharedSwapVMotionNotSupported" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfUnsharedSwapVMotionNotSupported(value))
                })
            } else { None }
        },
        0x4e657477 => { // Netw
            match type_name {
                "ArrayOfVAppCloneSpecNetworkMappingPair" => {
                    Some(|raw| {
                        let value: Vec<VAppCloneSpecNetworkMappingPair> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVAppCloneSpecNetworkMappingPair(value))
                    })
                }
                "ArrayOfCustomizationNetworkSetupFailed" => {
                    Some(|raw| {
                        let value: Vec<Event> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfCustomizationNetworkSetupFailed(value))
                    })
                }
                _ => None
            }
        },
        0x506f7274 => { // Port
            if type_name == "ArrayOfVirtualSerialPortURIBackingInfo" {
                Some(|raw| {
                    let value: Vec<VirtualSerialPortUriBackingInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualSerialPortUriBackingInfo(value))
                })
            } else { None }
        },
        0x5349436f => { // SICo
            if type_name == "ArrayOfParaVirtualSCSIControllerOption" {
                Some(|raw| {
                    let value: Vec<ParaVirtualScsiControllerOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfParaVirtualScsiControllerOption(value))
                })
            } else { None }
        },
        0x53696e67 => { // Sing
            if type_name == "ArrayOfVmfsDatastoreSingleExtentOption" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::VmfsDatastoreSingleExtentOptionTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmfsDatastoreSingleExtentOption(value))
                })
            } else { None }
        },
        0x53776974 => { // Swit
            if type_name == "ArrayOfGhostDvsProxySwitchRemovedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGhostDvsProxySwitchRemovedEvent(value))
                })
            } else { None }
        },
        0x53797374 => { // Syst
            if type_name == "ArrayOfHostDatastoreSystemCapabilities" {
                Some(|raw| {
                    let value: Vec<HostDatastoreSystemCapabilities> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostDatastoreSystemCapabilities(value))
                })
            } else { None }
        },
        0x544d6574 => { // TMet
            if type_name == "ArrayOfInaccessibleFTMetadataDatastore" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInaccessibleFtMetadataDatastore(value))
                })
            } else { None }
        },
        0x556e6b6e => { // Unkn
            if type_name == "ArrayOfCustomizationUnknownIpGenerator" {
                Some(|raw| {
                    let value: Vec<CustomizationUnknownIpGenerator> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCustomizationUnknownIpGenerator(value))
                })
            } else { None }
        },
        0x56697274 => { // Virt
            if type_name == "ArrayOfCustomizationVirtualMachineName" {
                Some(|raw| {
                    let value: Vec<CustomizationVirtualMachineName> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCustomizationVirtualMachineName(value))
                })
            } else { None }
        },
        0x61634e6f => { // acNo
            if type_name == "ArrayOfNonVmwareOuiMacNotSupportedHost" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNonVmwareOuiMacNotSupportedHost(value))
                })
            } else { None }
        },
        0x61666669 => { // affi
            if type_name == "ArrayOfHostNetworkTrafficShapingPolicy" {
                Some(|raw| {
                    let value: Vec<HostNetworkTrafficShapingPolicy> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostNetworkTrafficShapingPolicy(value))
                })
            } else { None }
        },
        0x626c6546 => { // bleF
            if type_name == "ArrayOfHostIncompatibleForRecordReplay" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostIncompatibleForRecordReplay(value))
                })
            } else { None }
        },
        0x634f7061 => { // cOpa
            if type_name == "ArrayOfHostVirtualNicOpaqueNetworkSpec" {
                Some(|raw| {
                    let value: Vec<HostVirtualNicOpaqueNetworkSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostVirtualNicOpaqueNetworkSpec(value))
                })
            } else { None }
        },
        0x63616c50 => { // calP
            if type_name == "ArrayOfVirtualDiskLocalPMemBackingInfo" {
                Some(|raw| {
                    let value: Vec<VirtualDiskLocalPMemBackingInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualDiskLocalPMemBackingInfo(value))
                })
            } else { None }
        },
        0x63697479 => { // city
            if type_name == "ArrayOfDatastoreCapacityIncreasedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDatastoreCapacityIncreasedEvent(value))
                })
            } else { None }
        },
        0x63736948 => { // csiH
            match type_name {
                "ArrayOfHostInternetScsiHbaIPProperties" => {
                    Some(|raw| {
                        let value: Vec<HostInternetScsiHbaIpProperties> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostInternetScsiHbaIpProperties(value))
                    })
                }
                "ArrayOfHostInternetScsiHbaStaticTarget" => {
                    Some(|raw| {
                        let value: Vec<HostInternetScsiHbaStaticTarget> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostInternetScsiHbaStaticTarget(value))
                    })
                }
                _ => None
            }
        },
        0x63736954 => { // csiT
            match type_name {
                "ArrayOfHostInternetScsiTargetTransport" => {
                    Some(|raw| {
                        let value: Vec<HostInternetScsiTargetTransport> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostInternetScsiTargetTransport(value))
                    })
                }
                "ArrayOfHostParallelScsiTargetTransport" => {
                    Some(|raw| {
                        let value: Vec<HostParallelScsiTargetTransport> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostParallelScsiTargetTransport(value))
                    })
                }
                _ => None
            }
        },
        0x64446576 => { // dDev
            if type_name == "ArrayOfOvfUnsupportedDeviceBackingInfo" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfUnsupportedDeviceBackingInfo(value))
                })
            } else { None }
        },
        0x65446576 => { // eDev
            if type_name == "ArrayOfVirtualMachineDeviceRuntimeInfo" {
                Some(|raw| {
                    let value: Vec<VirtualMachineDeviceRuntimeInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineDeviceRuntimeInfo(value))
                })
            } else { None }
        },
        0x65496465 => { // eIde
            if type_name == "ArrayOfVirtualMachineIdeDiskDeviceInfo" {
                Some(|raw| {
                    let value: Vec<VirtualMachineIdeDiskDeviceInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineIdeDiskDeviceInfo(value))
                })
            } else { None }
        },
        0x654e6574 => { // eNet
            if type_name == "ArrayOfVirtualMachineNetworkShaperInfo" {
                Some(|raw| {
                    let value: Vec<VirtualMachineNetworkShaperInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineNetworkShaperInfo(value))
                })
            } else { None }
        },
        0x65507269 => { // ePri
            if type_name == "ArrayOfFaultTolerancePrimaryConfigInfo" {
                Some(|raw| {
                    let value: Vec<FaultTolerancePrimaryConfigInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfFaultTolerancePrimaryConfigInfo(value))
                })
            } else { None }
        },
        0x65526563 => { // eRec
            if type_name == "ArrayOfVirtualMachineRecordReplayState" {
                Some(|raw| {
                    let value: Vec<super::enums::VirtualMachineRecordReplayStateEnum> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineRecordReplayState(value))
                })
            } else { None }
        },
        0x65526573 => { // eRes
            if type_name == "ArrayOfClusterComputeResourceVCProfile" {
                Some(|raw| {
                    let value: Vec<ClusterComputeResourceVcProfile> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterComputeResourceVcProfile(value))
                })
            } else { None }
        },
        0x65536563 => { // eSec
            if type_name == "ArrayOfFaultToleranceSecondaryOpResult" {
                Some(|raw| {
                    let value: Vec<FaultToleranceSecondaryOpResult> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfFaultToleranceSecondaryOpResult(value))
                })
            } else { None }
        },
        0x65537472 => { // eStr
            if type_name == "ArrayOfProfileProfileStructureProperty" {
                Some(|raw| {
                    let value: Vec<ProfileProfileStructureProperty> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfProfileProfileStructureProperty(value))
                })
            } else { None }
        },
        0x65566972 => { // eVir
            if type_name == "ArrayOfVirtualMachineVirtualDeviceSwap" {
                Some(|raw| {
                    let value: Vec<VirtualMachineVirtualDeviceSwap> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineVirtualDeviceSwap(value))
                })
            } else { None }
        },
        0x65566d4e => { // eVmN
            if type_name == "ArrayOfFaultToleranceVmNotDasProtected" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfFaultToleranceVmNotDasProtected(value))
                })
            } else { None }
        },
        0x65696e67 => { // eing
            if type_name == "ArrayOfUpdatedAgentBeingRestartedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfUpdatedAgentBeingRestartedEvent(value))
                })
            } else { None }
        },
        0x65727369 => { // ersi
            if type_name == "ArrayOfVFlashModuleVersionIncompatible" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVFlashModuleVersionIncompatible(value))
                })
            } else { None }
        },
        0x65744361 => { // etCa
            if type_name == "ArrayOfVirtualEthernetCardNotSupported" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualEthernetCardNotSupported(value))
                })
            } else { None }
        },
        0x66696361 => { // fica
            if type_name == "ArrayOfMultipleCertificatesVerifyFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfMultipleCertificatesVerifyFault(value))
                })
            } else { None }
        },
        0x66696743 => { // figC
            if type_name == "ArrayOfWillModifyConfigCpuRequirements" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfWillModifyConfigCpuRequirements(value))
                })
            } else { None }
        },
        0x66696753 => { // figS
            match type_name {
                "ArrayOfNetIpRouteConfigSpecGatewaySpec" => {
                    Some(|raw| {
                        let value: Vec<NetIpRouteConfigSpecGatewaySpec> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfNetIpRouteConfigSpecGatewaySpec(value))
                    })
                }
                "ArrayOfNetIpRouteConfigSpecIpRouteSpec" => {
                    Some(|raw| {
                        let value: Vec<NetIpRouteConfigSpecIpRouteSpec> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfNetIpRouteConfigSpecIpRouteSpec(value))
                    })
                }
                _ => None
            }
        },
        0x666f4163 => { // foAc
            if type_name == "HostTpmAttestationInfoAcceptanceStatus" {
                Some(|raw| {
                    let value: super::enums::HostTpmAttestationInfoAcceptanceStatusEnum = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::HostTpmAttestationInfoAcceptanceStatus(value))
                })
            } else { None }
        },
        0x67537461 => { // gSta
            if type_name == "ArrayOfHostMonitoringStateChangedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostMonitoringStateChangedEvent(value))
                })
            } else { None }
        },
        0x68696e65 => { // hine
            if type_name == "ArrayOfAllVirtualMachinesLicensedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfAllVirtualMachinesLicensedEvent(value))
                })
            } else { None }
        },
        0x6963436f => { // icCo
            match type_name {
                "ArrayOfVirtualBusLogicControllerOption" => {
                    Some(|raw| {
                        let value: Vec<VirtualBusLogicControllerOption> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualBusLogicControllerOption(value))
                    })
                }
                "ArrayOfVirtualLsiLogicControllerOption" => {
                    Some(|raw| {
                        let value: Vec<VirtualLsiLogicControllerOption> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualLsiLogicControllerOption(value))
                    })
                }
                _ => None
            }
        },
        0x69636174 => { // icat
            match type_name {
                "ArrayOfHostSubSpecificationDeleteEvent" => {
                    Some(|raw| {
                        let value: Vec<Event> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostSubSpecificationDeleteEvent(value))
                    })
                }
                "ArrayOfHostSubSpecificationUpdateEvent" => {
                    Some(|raw| {
                        let value: Vec<Event> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostSubSpecificationUpdateEvent(value))
                    })
                }
                _ => None
            }
        },
        0x696e6753 => { // ingS
            if type_name == "ArrayOfVmFailedUpdatingSecondaryConfig" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmFailedUpdatingSecondaryConfig(value))
                })
            } else { None }
        },
        0x6974684e => { // ithN
            if type_name == "ArrayOfCannotMoveVmWithNativeDeltaDisk" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCannotMoveVmWithNativeDeltaDisk(value))
                })
            } else { None }
        },
        0x6d656e74 => { // ment
            if type_name == "ArrayOfOvfMissingElementNormalBoundary" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfMissingElementNormalBoundary(value))
                })
            } else { None }
        },
        0x6d706c65 => { // mple
            if type_name == "ArrayOfHostTpmBootCompleteEventDetails" {
                Some(|raw| {
                    let value: Vec<HostTpmBootCompleteEventDetails> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostTpmBootCompleteEventDetails(value))
                })
            } else { None }
        },
        0x6e656c4f => { // nelO
            if type_name == "ArrayOfHostFibreChannelOverEthernetHba" {
                Some(|raw| {
                    let value: Vec<HostFibreChannelOverEthernetHba> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostFibreChannelOverEthernetHba(value))
                })
            } else { None }
        },
        0x6e656c54 => { // nelT
            if type_name == "ArrayOfHostFibreChannelTargetTransport" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::HostFibreChannelTargetTransportTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostFibreChannelTargetTransport(value))
                })
            } else { None }
        },
        0x6e666967 => { // nfig
            match type_name {
                "ArrayOfDrsResourceConfigureFailedEvent" => {
                    Some(|raw| {
                        let value: Vec<Event> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfDrsResourceConfigureFailedEvent(value))
                    })
                }
                "ArrayOfDrsResourceConfigureSyncedEvent" => {
                    Some(|raw| {
                        let value: Vec<Event> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfDrsResourceConfigureSyncedEvent(value))
                    })
                }
                _ => None
            }
        },
        0x6f6e6669 => { // onfi
            if type_name == "ArrayOfHostFirewallConfigRuleSetConfig" {
                Some(|raw| {
                    let value: Vec<HostFirewallConfigRuleSetConfig> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostFirewallConfigRuleSetConfig(value))
                })
            } else { None }
        },
        0x6f6e7472 => { // ontr
            if type_name == "ArrayOfDasAdmissionControlEnabledEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDasAdmissionControlEnabledEvent(value))
                })
            } else { None }
        },
        0x6f746548 => { // oteH
            if type_name == "ArrayOfVirtualUSBRemoteHostBackingInfo" {
                Some(|raw| {
                    let value: Vec<VirtualUsbRemoteHostBackingInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualUsbRemoteHostBackingInfo(value))
                })
            } else { None }
        },
        0x706f7274 => { // port
            if type_name == "ArrayOfHostDataTransportConnectionInfo" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::HostDataTransportConnectionInfoTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostDataTransportConnectionInfo(value))
                })
            } else { None }
        },
        0x70706f72 => { // ppor
            if type_name == "ArrayOfLargeRDMNotSupportedOnDatastore" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfLargeRdmNotSupportedOnDatastore(value))
                })
            } else { None }
        },
        0x726f6c6c => { // roll
            if type_name == "ArrayOfSharedBusControllerNotSupported" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfSharedBusControllerNotSupported(value))
                })
            } else { None }
        },
        0x72726563 => { // rrec
            if type_name == "ArrayOfSoftRuleVioCorrectionDisallowed" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfSoftRuleVioCorrectionDisallowed(value))
                })
            } else { None }
        },
        0x72747561 => { // rtua
            if type_name == "ArrayOfDistributedVirtualPortgroupInfo" {
                Some(|raw| {
                    let value: Vec<DistributedVirtualPortgroupInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDistributedVirtualPortgroupInfo(value))
                })
            } else { None }
        },
        0x734d616e => { // sMan
            if type_name == "ArrayOfHostVmciAccessManagerAccessSpec" {
                Some(|raw| {
                    let value: Vec<HostVmciAccessManagerAccessSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostVmciAccessManagerAccessSpec(value))
                })
            } else { None }
        },
        0x7374656d => { // stem
            if type_name == "ArrayOfVsanUpgradeSystemAPIBrokenIssue" {
                Some(|raw| {
                    let value: Vec<VsanUpgradeSystemApiBrokenIssue> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVsanUpgradeSystemApiBrokenIssue(value))
                })
            } else { None }
        },
        0x74486f73 => { // tHos
            if type_name == "ArrayOfFtIssuesOnHostHostSelectionType" {
                Some(|raw| {
                    let value: Vec<super::enums::FtIssuesOnHostHostSelectionTypeEnum> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfFtIssuesOnHostHostSelectionType(value))
                })
            } else { None }
        },
        0x744f6e49 => { // tOnI
            if type_name == "ArrayOfMemorySnapshotOnIndependentDisk" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfMemorySnapshotOnIndependentDisk(value))
                })
            } else { None }
        },
        0x74506174 => { // tPat
            if type_name == "ArrayOfDatastoreMountPathDatastorePair" {
                Some(|raw| {
                    let value: Vec<DatastoreMountPathDatastorePair> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDatastoreMountPathDatastorePair(value))
                })
            } else { None }
        },
        0x74636850 => { // tchP
            if type_name == "ArrayOfHostOpaqueSwitchPhysicalNicZone" {
                Some(|raw| {
                    let value: Vec<HostOpaqueSwitchPhysicalNicZone> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostOpaqueSwitchPhysicalNicZone(value))
                })
            } else { None }
        },
        0x74656448 => { // tedH
            if type_name == "ArrayOfIORMNotSupportedHostOnDatastore" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfIormNotSupportedHostOnDatastore(value))
                })
            } else { None }
        },
        0x74657254 => { // terT
            if type_name == "ArrayOfHostBlockAdapterTargetTransport" {
                Some(|raw| {
                    let value: Vec<HostBlockAdapterTargetTransport> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostBlockAdapterTargetTransport(value))
                })
            } else { None }
        },
        0x74694166 => { // tiAf
            if type_name == "ArrayOfVirtualDiskAntiAffinityRuleSpec" {
                Some(|raw| {
                    let value: Vec<VirtualDiskAntiAffinityRuleSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualDiskAntiAffinityRuleSpec(value))
                })
            } else { None }
        },
        0x75726365 => { // urce
            if type_name == "ArrayOfDvsVmVnicResourcePoolConfigSpec" {
                Some(|raw| {
                    let value: Vec<DvsVmVnicResourcePoolConfigSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsVmVnicResourcePoolConfigSpec(value))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_value_deserializer_39(type_name: &str) -> Option<fn(&serde_json::value::RawValue) -> Result<ValueElements, serde_json::Error>> {
    let s = &type_name[22..26];
    let Some(type_ord) = to_u32(s) else {
        return None;
    };
    match type_ord {
        0x44697363 => { // Disc
            if type_name == "ArrayOfVmRemoteConsoleDisconnectedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmRemoteConsoleDisconnectedEvent(value))
                })
            } else { None }
        },
        0x47756573 => { // Gues
            if type_name == "ArrayOfGuestQuiesceEndGuestQuiesceError" {
                Some(|raw| {
                    let value: Vec<super::enums::GuestQuiesceEndGuestQuiesceErrorEnum> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGuestQuiesceEndGuestQuiesceError(value))
                })
            } else { None }
        },
        0x4c6f6164 => { // Load
            if type_name == "ArrayOfStorageDrsSpaceLoadBalanceConfig" {
                Some(|raw| {
                    let value: Vec<StorageDrsSpaceLoadBalanceConfig> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfStorageDrsSpaceLoadBalanceConfig(value))
                })
            } else { None }
        },
        0x53706563 => { // Spec
            match type_name {
                "ArrayOfDesiredSoftwareSpecBaseImageSpec" => {
                    Some(|raw| {
                        let value: Vec<DesiredSoftwareSpecBaseImageSpec> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfDesiredSoftwareSpecBaseImageSpec(value))
                    })
                }
                "ArrayOfDesiredSoftwareSpecComponentSpec" => {
                    Some(|raw| {
                        let value: Vec<DesiredSoftwareSpecComponentSpec> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfDesiredSoftwareSpecComponentSpec(value))
                    })
                }
                _ => None
            }
        },
        0x56657231 => { // Ver1
            if type_name == "ArrayOfVirtualDiskFlatVer1BackingOption" {
                Some(|raw| {
                    let value: Vec<VirtualDiskFlatVer1BackingOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualDiskFlatVer1BackingOption(value))
                })
            } else { None }
        },
        0x56657232 => { // Ver2
            if type_name == "ArrayOfVirtualDiskFlatVer2BackingOption" {
                Some(|raw| {
                    let value: Vec<VirtualDiskFlatVer2BackingOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualDiskFlatVer2BackingOption(value))
                })
            } else { None }
        },
        0x56697274 => { // Virt
            if type_name == "ArrayOfVimVasaProviderVirtualHostConfig" {
                Some(|raw| {
                    let value: Vec<VimVasaProviderVirtualHostConfig> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVimVasaProviderVirtualHostConfig(value))
                })
            } else { None }
        },
        0x61636547 => { // aceG
            if type_name == "ArrayOfGuestInfoNamespaceGenerationInfo" {
                Some(|raw| {
                    let value: Vec<GuestInfoNamespaceGenerationInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGuestInfoNamespaceGenerationInfo(value))
                })
            } else { None }
        },
        0x6167656e => { // agen
            if type_name == "ArrayOfHostCnxFailedCcagentUpgradeEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostCnxFailedCcagentUpgradeEvent(value))
                })
            } else { None }
        },
        0x61696c43 => { // ailC
            if type_name == "ArrayOfScheduledTaskEmailCompletedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfScheduledTaskEmailCompletedEvent(value))
                })
            } else { None }
        },
        0x61704e6f => { // apNo
            if type_name == "ArrayOfHostUserWorldSwapNotEnabledEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostUserWorldSwapNotEnabledEvent(value))
                })
            } else { None }
        },
        0x61727365 => { // arse
            if type_name == "ArrayOfVirtualDiskSeSparseBackingOption" {
                Some(|raw| {
                    let value: Vec<VirtualDiskSeSparseBackingOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualDiskSeSparseBackingOption(value))
                })
            } else { None }
        },
        0x61734d75 => { // asMu
            if type_name == "ArrayOfIscsiFaultVnicHasMultipleUplinks" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfIscsiFaultVnicHasMultipleUplinks(value))
                })
            } else { None }
        },
        0x61736852 => { // ashR
            if type_name == "ArrayOfInsufficientVFlashResourcesFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInsufficientVFlashResourcesFault(value))
                })
            } else { None }
        },
        0x626c6564 => { // bled
            if type_name == "ArrayOfVmSecondaryDisabledBySystemEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmSecondaryDisabledBySystemEvent(value))
                })
            } else { None }
        },
        0x63617465 => { // cate
            if type_name == "ArrayOfAlreadyAuthenticatedSessionEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfAlreadyAuthenticatedSessionEvent(value))
                })
            } else { None }
        },
        0x63657354 => { // cesT
            if type_name == "ArrayOfNotEnoughResourcesToStartVmEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNotEnoughResourcesToStartVmEvent(value))
                })
            } else { None }
        },
        0x63695061 => { // ciPa
            if type_name == "ArrayOfVirtualMachinePciPassthroughInfo" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::VirtualMachinePciPassthroughInfoTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachinePciPassthroughInfo(value))
                })
            } else { None }
        },
        0x63736944 => { // csiD
            if type_name == "ArrayOfVirtualMachineScsiDiskDeviceInfo" {
                Some(|raw| {
                    let value: Vec<VirtualMachineScsiDiskDeviceInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineScsiDiskDeviceInfo(value))
                })
            } else { None }
        },
        0x64617469 => { // dati
            if type_name == "ArrayOfHostProfileValidationFailureInfo" {
                Some(|raw| {
                    let value: Vec<HostProfileValidationFailureInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostProfileValidationFailureInfo(value))
                })
            } else { None }
        },
        0x65486f73 => { // eHos
            if type_name == "ArrayOfProfileReferenceHostChangedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfProfileReferenceHostChangedEvent(value))
                })
            } else { None }
        },
        0x65546f6f => { // eToo
            if type_name == "ArrayOfVmFaultToleranceTooManyVMsOnHost" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmFaultToleranceTooManyVMsOnHost(value))
                })
            } else { None }
        },
        0x65617475 => { // eatu
            if type_name == "ArrayOfVirtualMachineFeatureRequirement" {
                Some(|raw| {
                    let value: Vec<VirtualMachineFeatureRequirement> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineFeatureRequirement(value))
                })
            } else { None }
        },
        0x65634468 => { // ecDh
            if type_name == "ArrayOfNetDhcpConfigSpecDhcpOptionsSpec" {
                Some(|raw| {
                    let value: Vec<NetDhcpConfigSpecDhcpOptionsSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNetDhcpConfigSpecDhcpOptionsSpec(value))
                })
            } else { None }
        },
        0x65666175 => { // efau
            match type_name {
                "ArrayOfVirtualMachineDefaultPowerOpInfo" => {
                    Some(|raw| {
                        let value: Vec<VirtualMachineDefaultPowerOpInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualMachineDefaultPowerOpInfo(value))
                    })
                }
                "ArrayOfVirtualMachineDefaultProfileSpec" => {
                    Some(|raw| {
                        let value: Vec<VirtualMachineDefaultProfileSpec> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualMachineDefaultProfileSpec(value))
                    })
                }
                _ => None
            }
        },
        0x6566696e => { // efin
            if type_name == "ArrayOfVirtualMachineDefinedProfileSpec" {
                Some(|raw| {
                    let value: Vec<VirtualMachineDefinedProfileSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineDefinedProfileSpec(value))
                })
            } else { None }
        },
        0x65727669 => { // ervi
            if type_name == "ArrayOfSessionManagerServiceRequestSpec" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::SessionManagerServiceRequestSpecTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfSessionManagerServiceRequestSpec(value))
                })
            } else { None }
        },
        0x65736f75 => { // esou
            match type_name {
                "ArrayOfClusterComputeResourceDVSSetting" => {
                    Some(|raw| {
                        let value: Vec<ClusterComputeResourceDvsSetting> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfClusterComputeResourceDvsSetting(value))
                    })
                }
                "ArrayOfClusterComputeResourceDvsProfile" => {
                    Some(|raw| {
                        let value: Vec<ClusterComputeResourceDvsProfile> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfClusterComputeResourceDvsProfile(value))
                    })
                }
                _ => None
            }
        },
        0x67657243 => { // gerC
            if type_name == "ArrayOfHostProfileManagerConfigTaskList" {
                Some(|raw| {
                    let value: Vec<HostProfileManagerConfigTaskList> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostProfileManagerConfigTaskList(value))
                })
            } else { None }
        },
        0x696c6564 => { // iled
            if type_name == "ArrayOfProfileUpdateFailedUpdateFailure" {
                Some(|raw| {
                    let value: Vec<ProfileUpdateFailedUpdateFailure> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfProfileUpdateFailedUpdateFailure(value))
                })
            } else { None }
        },
        0x696e646f => { // indo
            if type_name == "ArrayOfVirtualMachineWindowsQuiesceSpec" {
                Some(|raw| {
                    let value: Vec<VirtualMachineWindowsQuiesceSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineWindowsQuiesceSpec(value))
                })
            } else { None }
        },
        0x696e6753 => { // ingS
            if type_name == "ArrayOfVmTimedoutStartingSecondaryEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmTimedoutStartingSecondaryEvent(value))
                })
            } else { None }
        },
        0x69704365 => { // ipCe
            match type_name {
                "ArrayOfCryptoManagerKmipCertSignRequest" => {
                    Some(|raw| {
                        let value: Vec<CryptoManagerKmipCertSignRequest> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfCryptoManagerKmipCertSignRequest(value))
                    })
                }
                "ArrayOfCryptoManagerKmipCertificateInfo" => {
                    Some(|raw| {
                        let value: Vec<CryptoManagerKmipCertificateInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfCryptoManagerKmipCertificateInfo(value))
                    })
                }
                _ => None
            }
        },
        0x69704372 => { // ipCr
            if type_name == "ArrayOfCryptoManagerKmipCryptoKeyStatus" {
                Some(|raw| {
                    let value: Vec<CryptoManagerKmipCryptoKeyStatus> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCryptoManagerKmipCryptoKeyStatus(value))
                })
            } else { None }
        },
        0x69736162 => { // isab
            if type_name == "ArrayOfStorageDrsIolbDisabledInternally" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfStorageDrsIolbDisabledInternally(value))
                })
            } else { None }
        },
        0x69737469 => { // isti
            if type_name == "ArrayOfPerformanceStatisticsDescription" {
                Some(|raw| {
                    let value: Vec<PerformanceStatisticsDescription> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfPerformanceStatisticsDescription(value))
                })
            } else { None }
        },
        0x69746368 => { // itch
            if type_name == "ArrayOfGhostDvsProxySwitchDetectedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfGhostDvsProxySwitchDetectedEvent(value))
                })
            } else { None }
        },
        0x69747943 => { // ityC
            if type_name == "ArrayOfHostProfilesEntityCustomizations" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::HostProfilesEntityCustomizationsTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostProfilesEntityCustomizations(value))
                })
            } else { None }
        },
        0x6b466175 => { // kFau
            if type_name == "ArrayOfDvsOperationBulkFaultFaultOnHost" {
                Some(|raw| {
                    let value: Vec<DvsOperationBulkFaultFaultOnHost> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsOperationBulkFaultFaultOnHost(value))
                })
            } else { None }
        },
        0x6c537973 => { // lSys
            if type_name == "ArrayOfHostVsanInternalSystemCmmdsQuery" {
                Some(|raw| {
                    let value: Vec<HostVsanInternalSystemCmmdsQuery> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostVsanInternalSystemCmmdsQuery(value))
                })
            } else { None }
        },
        0x6d667352 => { // mfsR
            if type_name == "ArrayOfHostUnresolvedVmfsResolutionSpec" {
                Some(|raw| {
                    let value: Vec<HostUnresolvedVmfsResolutionSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostUnresolvedVmfsResolutionSpec(value))
                })
            } else { None }
        },
        0x6e666967 => { // nfig
            if type_name == "ArrayOfVirtualDeviceConfigSpecOperation" {
                Some(|raw| {
                    let value: Vec<super::enums::VirtualDeviceConfigSpecOperationEnum> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualDeviceConfigSpecOperation(value))
                })
            } else { None }
        },
        0x6e757849 => { // nuxI
            if type_name == "ArrayOfCustomizationLinuxIdentityFailed" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCustomizationLinuxIdentityFailed(value))
                })
            } else { None }
        },
        0x6f6d6d65 => { // omme
            if type_name == "ArrayOfApplyStorageRecommendationResult" {
                Some(|raw| {
                    let value: Vec<ApplyStorageRecommendationResult> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfApplyStorageRecommendationResult(value))
                })
            } else { None }
        },
        0x6f6d706c => { // ompl
            if type_name == "ArrayOfClusterProfileCompleteConfigSpec" {
                Some(|raw| {
                    let value: Vec<ClusterProfileCompleteConfigSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterProfileCompleteConfigSpec(value))
                })
            } else { None }
        },
        0x6f6e4f70 => { // onOp
            if type_name == "ArrayOfHostSpecificationOperationFailed" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostSpecificationOperationFailed(value))
                })
            } else { None }
        },
        0x6f6e6669 => { // onfi
            if type_name == "ArrayOfVFlashCacheHotConfigNotSupported" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVFlashCacheHotConfigNotSupported(value))
                })
            } else { None }
        },
        0x6f6e6974 => { // onit
            if type_name == "ArrayOfClusterVmToolsMonitoringSettings" {
                Some(|raw| {
                    let value: Vec<ClusterVmToolsMonitoringSettings> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterVmToolsMonitoringSettings(value))
                })
            } else { None }
        },
        0x6f6e736f => { // onso
            if type_name == "ArrayOfVirtualMachineConsolePreferences" {
                Some(|raw| {
                    let value: Vec<VirtualMachineConsolePreferences> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineConsolePreferences(value))
                })
            } else { None }
        },
        0x6f727952 => { // oryR
            if type_name == "ArrayOfInsufficientMemoryResourcesFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInsufficientMemoryResourcesFault(value))
                })
            } else { None }
        },
        0x72636550 => { // rceP
            if type_name == "ArrayOfDVSNetworkResourcePoolConfigSpec" {
                Some(|raw| {
                    let value: Vec<DvsNetworkResourcePoolConfigSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsNetworkResourcePoolConfigSpec(value))
                })
            } else { None }
        },
        0x72656164 => { // read
            if type_name == "ArrayOfHostCnxFailedAlreadyManagedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostCnxFailedAlreadyManagedEvent(value))
                })
            } else { None }
        },
        0x72656369 => { // reci
            if type_name == "ArrayOfVirtualMachinePrecisionClockInfo" {
                Some(|raw| {
                    let value: Vec<VirtualMachinePrecisionClockInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachinePrecisionClockInfo(value))
                })
            } else { None }
        },
        0x726f6d69 => { // romi
            if type_name == "ArrayOfVspanPortgroupPromiscChangeFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVspanPortgroupPromiscChangeFault(value))
                })
            } else { None }
        },
        0x72744669 => { // rtFi
            if type_name == "ArrayOfVirtualSerialPortFileBackingInfo" {
                Some(|raw| {
                    let value: Vec<VirtualSerialPortFileBackingInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualSerialPortFileBackingInfo(value))
                })
            } else { None }
        },
        0x72745069 => { // rtPi
            if type_name == "ArrayOfVirtualSerialPortPipeBackingInfo" {
                Some(|raw| {
                    let value: Vec<VirtualSerialPortPipeBackingInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualSerialPortPipeBackingInfo(value))
                })
            } else { None }
        },
        0x72745072 => { // rtPr
            if type_name == "ArrayOfInvalidDasRestartPriorityForFtVm" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInvalidDasRestartPriorityForFtVm(value))
                })
            } else { None }
        },
        0x73506f72 => { // sPor
            if type_name == "ArrayOfVspanPromiscuousPortNotSupported" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVspanPromiscuousPortNotSupported(value))
                })
            } else { None }
        },
        0x73655665 => { // seVe
            match type_name {
                "ArrayOfVirtualDiskSparseVer1BackingInfo" => {
                    Some(|raw| {
                        let value: Vec<VirtualDiskSparseVer1BackingInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualDiskSparseVer1BackingInfo(value))
                    })
                }
                "ArrayOfVirtualDiskSparseVer2BackingInfo" => {
                    Some(|raw| {
                        let value: Vec<VirtualDiskSparseVer2BackingInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualDiskSparseVer2BackingInfo(value))
                    })
                }
                _ => None
            }
        },
        0x73684361 => { // shCa
            if type_name == "ArrayOfVirtualDiskVFlashCacheConfigInfo" {
                Some(|raw| {
                    let value: Vec<VirtualDiskVFlashCacheConfigInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualDiskVFlashCacheConfigInfo(value))
                })
            } else { None }
        },
        0x73696f6e => { // sion
            if type_name == "ArrayOfClusterDasAdmissionControlPolicy" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::ClusterDasAdmissionControlPolicyTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterDasAdmissionControlPolicy(value))
                })
            } else { None }
        },
        0x73707265 => { // spre
            if type_name == "ArrayOfCustomizationSysprepRebootOption" {
                Some(|raw| {
                    let value: Vec<super::enums::CustomizationSysprepRebootOptionEnum> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCustomizationSysprepRebootOption(value))
                })
            } else { None }
        },
        0x73746f6d => { // stom
            if type_name == "ArrayOfCustomizationCustomIpV6Generator" {
                Some(|raw| {
                    let value: Vec<CustomizationCustomIpV6Generator> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCustomizationCustomIpV6Generator(value))
                })
            } else { None }
        },
        0x74437075 => { // tCpu
            if type_name == "ArrayOfInsufficientHostCpuCapacityFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInsufficientHostCpuCapacityFault(value))
                })
            } else { None }
        },
        0x74466f72 => { // tFor
            if type_name == "ArrayOfIncompatibleHostForVmReplication" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfIncompatibleHostForVmReplication(value))
                })
            } else { None }
        },
        0x74726f6c => { // trol
            if type_name == "ArrayOfDasAdmissionControlDisabledEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDasAdmissionControlDisabledEvent(value))
                })
            } else { None }
        },
        0x74776f72 => { // twor
            if type_name == "ArrayOfVMotionAcrossNetworkNotSupported" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVMotionAcrossNetworkNotSupported(value))
                })
            } else { None }
        },
        0x75657374 => { // uest
            if type_name == "ArrayOfVirtualMachineGuestIntegrityInfo" {
                Some(|raw| {
                    let value: Vec<VirtualMachineGuestIntegrityInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineGuestIntegrityInfo(value))
                })
            } else { None }
        },
        0x76696365 => { // vice
            match type_name {
                "ArrayOfVirtualDeviceDeviceBackingOption" => {
                    Some(|raw| {
                        let value: Vec<Box<dyn super::traits::VirtualDeviceDeviceBackingOptionTrait>> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualDeviceDeviceBackingOption(value))
                    })
                }
                "ArrayOfVirtualFloppyDeviceBackingOption" => {
                    Some(|raw| {
                        let value: Vec<VirtualFloppyDeviceBackingOption> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualFloppyDeviceBackingOption(value))
                    })
                }
                _ => None
            }
        },
        0x79446973 => { // yDis
            if type_name == "ArrayOfVASAStorageArrayDiscoverySvcInfo" {
                Some(|raw| {
                    let value: Vec<VasaStorageArrayDiscoverySvcInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVasaStorageArrayDiscoverySvcInfo(value))
                })
            } else { None }
        },
        0x79547970 => { // yTyp
            if type_name == "ArrayOfHostStorageArrayTypePolicyOption" {
                Some(|raw| {
                    let value: Vec<HostStorageArrayTypePolicyOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostStorageArrayTypePolicyOption(value))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_value_deserializer_40(type_name: &str) -> Option<fn(&serde_json::value::RawValue) -> Result<ValueElements, serde_json::Error>> {
    let s = &type_name[18..22];
    let Some(type_ord) = to_u32(s) else {
        return None;
    };
    match type_ord {
        0x4167656e => { // Agen
            if type_name == "ArrayOfHostPrimaryAgentNotShortNameEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostPrimaryAgentNotShortNameEvent(value))
                })
            } else { None }
        },
        0x496e666f => { // Info
            if type_name == "ArrayOfHostRuntimeInfoNetworkRuntimeInfo" {
                Some(|raw| {
                    let value: Vec<HostRuntimeInfoNetworkRuntimeInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostRuntimeInfoNetworkRuntimeInfo(value))
                })
            } else { None }
        },
        0x4c6f6361 => { // Loca
            if type_name == "ArrayOfVirtualDiskLocalPMemBackingOption" {
                Some(|raw| {
                    let value: Vec<VirtualDiskLocalPMemBackingOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualDiskLocalPMemBackingOption(value))
                })
            } else { None }
        },
        0x52617744 => { // RawD
            if type_name == "ArrayOfVirtualDiskRawDiskVer2BackingInfo" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::VirtualDiskRawDiskVer2BackingInfoTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualDiskRawDiskVer2BackingInfo(value))
                })
            } else { None }
        },
        0x53797374 => { // Syst
            if type_name == "ArrayOfHostStorageSystemVmfsVolumeResult" {
                Some(|raw| {
                    let value: Vec<HostStorageSystemVmfsVolumeResult> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostStorageSystemVmfsVolumeResult(value))
                })
            } else { None }
        },
        0x616c506f => { // alPo
            if type_name == "ArrayOfVirtualSerialPortURIBackingOption" {
                Some(|raw| {
                    let value: Vec<VirtualSerialPortUriBackingOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualSerialPortUriBackingOption(value))
                })
            } else { None }
        },
        0x616d696e => { // amin
            match type_name {
                "ArrayOfVMwareDVSTeamingHealthCheckConfig" => {
                    Some(|raw| {
                        let value: Vec<VMwareDvsTeamingHealthCheckConfig> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVMwareDvsTeamingHealthCheckConfig(value))
                    })
                }
                "ArrayOfVMwareDVSTeamingHealthCheckResult" => {
                    Some(|raw| {
                        let value: Vec<VMwareDvsTeamingHealthCheckResult> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVMwareDvsTeamingHealthCheckResult(value))
                    })
                }
                _ => None
            }
        },
        0x616e4d74 => { // anMt
            if type_name == "ArrayOfVMwareDVSVlanMtuHealthCheckConfig" {
                Some(|raw| {
                    let value: Vec<VMwareDvsVlanMtuHealthCheckConfig> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVMwareDvsVlanMtuHealthCheckConfig(value))
                })
            } else { None }
        },
        0x616e6167 => { // anag
            if type_name == "ArrayOfHostVFlashManagerVFlashConfigInfo" {
                Some(|raw| {
                    let value: Vec<HostVFlashManagerVFlashConfigInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostVFlashManagerVFlashConfigInfo(value))
                })
            } else { None }
        },
        0x64436172 => { // dCar
            if type_name == "ArrayOfVirtualSoundCardDeviceBackingInfo" {
                Some(|raw| {
                    let value: Vec<VirtualSoundCardDeviceBackingInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualSoundCardDeviceBackingInfo(value))
                })
            } else { None }
        },
        0x65546f4e => { // eToN
            if type_name == "ArrayOfSnapshotMoveToNonHomeNotSupported" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfSnapshotMoveToNonHomeNotSupported(value))
                })
            } else { None }
        },
        0x656d6f74 => { // emot
            match type_name {
                "ArrayOfVirtualUSBRemoteClientBackingInfo" => {
                    Some(|raw| {
                        let value: Vec<VirtualUsbRemoteClientBackingInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualUsbRemoteClientBackingInfo(value))
                    })
                }
                "ArrayOfVirtualUSBRemoteHostBackingOption" => {
                    Some(|raw| {
                        let value: Vec<VirtualUsbRemoteHostBackingOption> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualUsbRemoteHostBackingOption(value))
                    })
                }
                _ => None
            }
        },
        0x6963656e => { // icen
            if type_name == "ArrayOfThirdPartyLicenseAssignmentFailed" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfThirdPartyLicenseAssignmentFailed(value))
                })
            } else { None }
        },
        0x69677261 => { // igra
            if type_name == "ArrayOfDisallowedMigrationDeviceAttached" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDisallowedMigrationDeviceAttached(value))
                })
            } else { None }
        },
        0x696e6546 => { // ineF
            if type_name == "ArrayOfVirtualMachineFaultToleranceState" {
                Some(|raw| {
                    let value: Vec<super::enums::VirtualMachineFaultToleranceStateEnum> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineFaultToleranceState(value))
                })
            } else { None }
        },
        0x696e6553 => { // ineS
            match type_name {
                "ArrayOfVirtualMachineScsiPassthroughInfo" => {
                    Some(|raw| {
                        let value: Vec<VirtualMachineScsiPassthroughInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualMachineScsiPassthroughInfo(value))
                    })
                }
                "ArrayOfVirtualMachineSriovDevicePoolInfo" => {
                    Some(|raw| {
                        let value: Vec<Box<dyn super::traits::VirtualMachineSriovDevicePoolInfoTrait>> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualMachineSriovDevicePoolInfo(value))
                    })
                }
                _ => None
            }
        },
        0x696e6556 => { // ineV
            match type_name {
                "ArrayOfVirtualMachineVMotionStunTimeInfo" => {
                    Some(|raw| {
                        let value: Vec<VirtualMachineVMotionStunTimeInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualMachineVMotionStunTimeInfo(value))
                    })
                }
                "ArrayOfVirtualMachineVirtualDeviceGroups" => {
                    Some(|raw| {
                        let value: Vec<VirtualMachineVirtualDeviceGroups> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualMachineVirtualDeviceGroups(value))
                    })
                }
                _ => None
            }
        },
        0x6d526570 => { // mRep
            if type_name == "ArrayOfHbrManagerVmReplicationCapability" {
                Some(|raw| {
                    let value: Vec<HbrManagerVmReplicationCapability> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHbrManagerVmReplicationCapability(value))
                })
            } else { None }
        },
        0x6e466169 => { // nFai
            if type_name == "ArrayOfEVCAdmissionFailedCPUModelForMode" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfEvcAdmissionFailedCpuModelForMode(value))
                })
            } else { None }
        },
        0x6e4d616e => { // nMan
            if type_name == "ArrayOfLocalizationManagerMessageCatalog" {
                Some(|raw| {
                    let value: Vec<LocalizationManagerMessageCatalog> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfLocalizationManagerMessageCatalog(value))
                })
            } else { None }
        },
        0x6e616765 => { // nage
            if type_name == "ArrayOfExtensionManagerIpAllocationUsage" {
                Some(|raw| {
                    let value: Vec<ExtensionManagerIpAllocationUsage> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfExtensionManagerIpAllocationUsage(value))
                })
            } else { None }
        },
        0x6e636553 => { // nceS
            if type_name == "ArrayOfFaultToleranceSecondaryConfigInfo" {
                Some(|raw| {
                    let value: Vec<FaultToleranceSecondaryConfigInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfFaultToleranceSecondaryConfigInfo(value))
                })
            } else { None }
        },
        0x6e666f44 => { // nfoD
            if type_name == "ArrayOfBaseConfigInfoDiskFileBackingInfo" {
                Some(|raw| {
                    let value: Vec<BaseConfigInfoDiskFileBackingInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfBaseConfigInfoDiskFileBackingInfo(value))
                })
            } else { None }
        },
        0x6e744f76 => { // ntOv
            if type_name == "ArrayOfSwapPlacementOverrideNotSupported" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfSwapPlacementOverrideNotSupported(value))
                })
            } else { None }
        },
        0x6f66696c => { // ofil
            if type_name == "ArrayOfApplyHostProfileConfigurationSpec" {
                Some(|raw| {
                    let value: Vec<ApplyHostProfileConfigurationSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfApplyHostProfileConfigurationSpec(value))
                })
            } else { None }
        },
        0x6f6e4c69 => { // onLi
            if type_name == "ArrayOfCustomizationLicenseFilePrintData" {
                Some(|raw| {
                    let value: Vec<CustomizationLicenseFilePrintData> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCustomizationLicenseFilePrintData(value))
                })
            } else { None }
        },
        0x6f6e556e => { // onUn
            if type_name == "ArrayOfCustomizationUnknownIpV6Generator" {
                Some(|raw| {
                    let value: Vec<CustomizationUnknownIpV6Generator> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCustomizationUnknownIpV6Generator(value))
                })
            } else { None }
        },
        0x6f745375 => { // otSu
            if type_name == "ArrayOfMemorySizeNotSupportedByDatastore" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfMemorySizeNotSupportedByDatastore(value))
                })
            } else { None }
        },
        0x70656344 => { // pecD
            if type_name == "ArrayOfVslmCreateSpecDiskFileBackingSpec" {
                Some(|raw| {
                    let value: Vec<VslmCreateSpecDiskFileBackingSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVslmCreateSpecDiskFileBackingSpec(value))
                })
            } else { None }
        },
        0x70657261 => { // pera
            if type_name == "ArrayOfDisallowedOperationOnFailoverHost" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDisallowedOperationOnFailoverHost(value))
                })
            } else { None }
        },
        0x706c696e => { // plin
            if type_name == "ArrayOfHostMemberUplinkHealthCheckResult" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::HostMemberUplinkHealthCheckResultTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostMemberUplinkHealthCheckResult(value))
                })
            } else { None }
        },
        0x71756554 => { // queT
            if type_name == "ArrayOfHostNvmeOpaqueTransportParameters" {
                Some(|raw| {
                    let value: Vec<HostNvmeOpaqueTransportParameters> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostNvmeOpaqueTransportParameters(value))
                })
            } else { None }
        },
        0x72616e63 => { // ranc
            match type_name {
                "ArrayOfVmFaultToleranceStateChangedEvent" => {
                    Some(|raw| {
                        let value: Vec<Event> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVmFaultToleranceStateChangedEvent(value))
                    })
                }
                "ArrayOfVmFaultToleranceVmTerminatedEvent" => {
                    Some(|raw| {
                        let value: Vec<Event> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVmFaultToleranceVmTerminatedEvent(value))
                    })
                }
                _ => None
            }
        },
        0x72654272 => { // reBr
            if type_name == "ArrayOfHostDatastoreBrowserSearchResults" {
                Some(|raw| {
                    let value: Vec<HostDatastoreBrowserSearchResults> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostDatastoreBrowserSearchResults(value))
                })
            } else { None }
        },
        0x72654d75 => { // reMu
            if type_name == "ArrayOfVmfsDatastoreMultipleExtentOption" {
                Some(|raw| {
                    let value: Vec<VmfsDatastoreMultipleExtentOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmfsDatastoreMultipleExtentOption(value))
                })
            } else { None }
        },
        0x73745769 => { // stWi
            if type_name == "ArrayOfCannotAddHostWithFTVmAsStandalone" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCannotAddHostWithFtVmAsStandalone(value))
                })
            } else { None }
        },
        0x74486f73 => { // tHos
            if type_name == "ArrayOfHostEsxAgentHostManagerConfigInfo" {
                Some(|raw| {
                    let value: Vec<HostEsxAgentHostManagerConfigInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostEsxAgentHostManagerConfigInfo(value))
                })
            } else { None }
        },
        0x74536373 => { // tScs
            match type_name {
                "ArrayOfHostInternetScsiHbaIPCapabilities" => {
                    Some(|raw| {
                        let value: Vec<HostInternetScsiHbaIpCapabilities> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostInternetScsiHbaIpCapabilities(value))
                    })
                }
                "ArrayOfHostInternetScsiHbaIPv6Properties" => {
                    Some(|raw| {
                        let value: Vec<HostInternetScsiHbaIPv6Properties> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostInternetScsiHbaIPv6Properties(value))
                    })
                }
                _ => None
            }
        },
        0x74537461 => { // tSta
            if type_name == "ArrayOfInsufficientStandbyMemoryResource" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInsufficientStandbyMemoryResource(value))
                })
            } else { None }
        },
        0x74537570 => { // tSup
            if type_name == "ArrayOfWakeOnLanNotSupportedByVmotionNIC" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfWakeOnLanNotSupportedByVmotionNic(value))
                })
            } else { None }
        },
        0x74656444 => { // tedD
            if type_name == "ArrayOfOvfUnsupportedDeviceBackingOption" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfUnsupportedDeviceBackingOption(value))
                })
            } else { None }
        },
        0x74686f72 => { // thor
            if type_name == "ArrayOfHostTrustAuthorityAttestationInfo" {
                Some(|raw| {
                    let value: Vec<HostTrustAuthorityAttestationInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostTrustAuthorityAttestationInfo(value))
                })
            } else { None }
        },
        0x7469626c => { // tibl
            if type_name == "ArrayOfHostIncompatibleForFaultTolerance" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostIncompatibleForFaultTolerance(value))
                })
            } else { None }
        },
        0x74696350 => { // ticP
            if type_name == "ArrayOfHostDiagnosticPartitionCreateSpec" {
                Some(|raw| {
                    let value: Vec<HostDiagnosticPartitionCreateSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostDiagnosticPartitionCreateSpec(value))
                })
            } else { None }
        },
        0x74746163 => { // ttac
            if type_name == "ArrayOfHostSerialAttachedTargetTransport" {
                Some(|raw| {
                    let value: Vec<HostSerialAttachedTargetTransport> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostSerialAttachedTargetTransport(value))
                })
            } else { None }
        },
        0x75726365 => { // urce
            if type_name == "ArrayOfInvalidResourcePoolStructureFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInvalidResourcePoolStructureFault(value))
                })
            } else { None }
        },
        0x76656456 => { // vedV
            if type_name == "ArrayOfHostUnresolvedVmfsResignatureSpec" {
                Some(|raw| {
                    let value: Vec<HostUnresolvedVmfsResignatureSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostUnresolvedVmfsResignatureSpec(value))
                })
            } else { None }
        },
        0x77617265 => { // ware
            if type_name == "ArrayOfVirtualHardwareCompatibilityIssue" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualHardwareCompatibilityIssue(value))
                })
            } else { None }
        },
        0x79436f6e => { // yCon
            if type_name == "ArrayOfCannotModifyConfigCpuRequirements" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCannotModifyConfigCpuRequirements(value))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_value_deserializer_41(type_name: &str) -> Option<fn(&serde_json::value::RawValue) -> Result<ValueElements, serde_json::Error>> {
    let s = &type_name[24..32];
    let Some(type_ord) = to_u64(s) else {
        return None;
    };
    match type_ord {
        0x4175646974526563 => { // AuditRec
            if type_name == "ArrayOfDiagnosticManagerAuditRecordResult" {
                Some(|raw| {
                    let value: Vec<DiagnosticManagerAuditRecordResult> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDiagnosticManagerAuditRecordResult(value))
                })
            } else { None }
        },
        0x426c6f636b734e6f => { // BlocksNo
            if type_name == "ArrayOfUnusedVirtualDiskBlocksNotScrubbed" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfUnusedVirtualDiskBlocksNotScrubbed(value))
                })
            } else { None }
        },
        0x4368616e6e656c50 => { // ChannelP
            if type_name == "ArrayOfHostNvmeOverFibreChannelParameters" {
                Some(|raw| {
                    let value: Vec<HostNvmeOverFibreChannelParameters> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostNvmeOverFibreChannelParameters(value))
                })
            } else { None }
        },
        0x4465766963654261 => { // DeviceBa
            if type_name == "ArrayOfVirtualSerialPortDeviceBackingInfo" {
                Some(|raw| {
                    let value: Vec<VirtualSerialPortDeviceBackingInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualSerialPortDeviceBackingInfo(value))
                })
            } else { None }
        },
        0x46696c654261636b => { // FileBack
            if type_name == "ArrayOfVirtualSerialPortFileBackingOption" {
                Some(|raw| {
                    let value: Vec<VirtualSerialPortFileBackingOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualSerialPortFileBackingOption(value))
                })
            } else { None }
        },
        0x4944657669636546 => { // IDeviceF
            match type_name {
                "ArrayOfVirtualMachineVMCIDeviceFilterInfo" => {
                    Some(|raw| {
                        let value: Vec<VirtualMachineVmciDeviceFilterInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualMachineVmciDeviceFilterInfo(value))
                    })
                }
                "ArrayOfVirtualMachineVMCIDeviceFilterSpec" => {
                    Some(|raw| {
                        let value: Vec<VirtualMachineVmciDeviceFilterSpec> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualMachineVmciDeviceFilterSpec(value))
                    })
                }
                _ => None
            }
        },
        0x4c65676163794465 => { // LegacyDe
            if type_name == "ArrayOfReadOnlyDisksWithLegacyDestination" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfReadOnlyDisksWithLegacyDestination(value))
                })
            } else { None }
        },
        0x4c6f676963616c55 => { // LogicalU
            if type_name == "ArrayOfHostMultipathInfoLogicalUnitPolicy" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::HostMultipathInfoLogicalUnitPolicyTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostMultipathInfoLogicalUnitPolicy(value))
                })
            } else { None }
        },
        0x506172616d657465 => { // Paramete
            if type_name == "ArrayOfUserInputRequiredParameterMetadata" {
                Some(|raw| {
                    let value: Vec<UserInputRequiredParameterMetadata> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfUserInputRequiredParameterMetadata(value))
                })
            } else { None }
        },
        0x506970654261636b => { // PipeBack
            if type_name == "ArrayOfVirtualSerialPortPipeBackingOption" {
                Some(|raw| {
                    let value: Vec<VirtualSerialPortPipeBackingOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualSerialPortPipeBackingOption(value))
                })
            } else { None }
        },
        0x53436f6e74726f6c => { // SControl
            if type_name == "ArrayOfVirtualLsiLogicSASControllerOption" {
                Some(|raw| {
                    let value: Vec<VirtualLsiLogicSasControllerOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualLsiLogicSasControllerOption(value))
                })
            } else { None }
        },
        0x566572314261636b => { // Ver1Back
            if type_name == "ArrayOfVirtualDiskSparseVer1BackingOption" {
                Some(|raw| {
                    let value: Vec<VirtualDiskSparseVer1BackingOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualDiskSparseVer1BackingOption(value))
                })
            } else { None }
        },
        0x566572324261636b => { // Ver2Back
            if type_name == "ArrayOfVirtualDiskSparseVer2BackingOption" {
                Some(|raw| {
                    let value: Vec<VirtualDiskSparseVer2BackingOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualDiskSparseVer2BackingOption(value))
                })
            } else { None }
        },
        0x5673616e5768656e => { // VsanWhen
            if type_name == "ArrayOfCannotReconfigureVsanWhenHaEnabled" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCannotReconfigureVsanWhenHaEnabled(value))
                })
            } else { None }
        },
        0x61696e6572466169 => { // ainerFai
            if type_name == "ArrayOfDatastoreVVolContainerFailoverPair" {
                Some(|raw| {
                    let value: Vec<DatastoreVVolContainerFailoverPair> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDatastoreVVolContainerFailoverPair(value))
                })
            } else { None }
        },
        0x617465456e637279 => { // ateEncry
            if type_name == "ArrayOfHostRuntimeInfoStateEncryptionInfo" {
                Some(|raw| {
                    let value: Vec<HostRuntimeInfoStateEncryptionInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostRuntimeInfoStateEncryptionInfo(value))
                })
            } else { None }
        },
        0x6443505556656e64 => { // dCPUVend
            if type_name == "ArrayOfEVCAdmissionFailedCPUVendorUnknown" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfEvcAdmissionFailedCpuVendorUnknown(value))
                })
            } else { None }
        },
        0x64486f7374446973 => { // dHostDis
            if type_name == "ArrayOfEVCAdmissionFailedHostDisconnected" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfEvcAdmissionFailedHostDisconnected(value))
                })
            } else { None }
        },
        0x6541746170694261 => { // eAtapiBa
            if type_name == "ArrayOfVirtualCdromRemoteAtapiBackingInfo" {
                Some(|raw| {
                    let value: Vec<VirtualCdromRemoteAtapiBackingInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualCdromRemoteAtapiBackingInfo(value))
                })
            } else { None }
        },
        0x654c61796f757444 => { // eLayoutD
            if type_name == "ArrayOfVirtualMachineFileLayoutDiskLayout" {
                Some(|raw| {
                    let value: Vec<VirtualMachineFileLayoutDiskLayout> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineFileLayoutDiskLayout(value))
                })
            } else { None }
        },
        0x654c61796f757445 => { // eLayoutE
            match type_name {
                "ArrayOfVirtualMachineFileLayoutExDiskUnit" => {
                    Some(|raw| {
                        let value: Vec<VirtualMachineFileLayoutExDiskUnit> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualMachineFileLayoutExDiskUnit(value))
                    })
                }
                "ArrayOfVirtualMachineFileLayoutExFileInfo" => {
                    Some(|raw| {
                        let value: Vec<VirtualMachineFileLayoutExFileInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualMachineFileLayoutExFileInfo(value))
                    })
                }
                _ => None
            }
        },
        0x654f626a65637450 => { // eObjectP
            if type_name == "ArrayOfvslmInfrastructureObjectPolicySpec" {
                Some(|raw| {
                    let value: Vec<VslmInfrastructureObjectPolicySpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfvslmInfrastructureObjectPolicySpec(value))
                })
            } else { None }
        },
        0x656356656e646f72 => { // ecVendor
            if type_name == "ArrayOfDesiredSoftwareSpecVendorAddOnSpec" {
                Some(|raw| {
                    let value: Vec<DesiredSoftwareSpecVendorAddOnSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDesiredSoftwareSpecVendorAddOnSpec(value))
                })
            } else { None }
        },
        0x656d446174617374 => { // emDatast
            if type_name == "ArrayOfHostDatastoreSystemDatastoreResult" {
                Some(|raw| {
                    let value: Vec<HostDatastoreSystemDatastoreResult> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostDatastoreSystemDatastoreResult(value))
                })
            } else { None }
        },
        0x6572696353657276 => { // ericServ
            if type_name == "ArrayOfSessionManagerGenericServiceTicket" {
                Some(|raw| {
                    let value: Vec<SessionManagerGenericServiceTicket> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfSessionManagerGenericServiceTicket(value))
                })
            } else { None }
        },
        0x684661756c74546f => { // hFaultTo
            if type_name == "ArrayOfCannotMoveHostWithFaultToleranceVm" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCannotMoveHostWithFaultToleranceVm(value))
                })
            } else { None }
        },
        0x68726f7567684261 => { // hroughBa
            if type_name == "ArrayOfVirtualCdromPassthroughBackingInfo" {
                Some(|raw| {
                    let value: Vec<VirtualCdromPassthroughBackingInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualCdromPassthroughBackingInfo(value))
                })
            } else { None }
        },
        0x69416666696e6974 => { // iAffinit
            if type_name == "ArrayOfFaultToleranceAntiAffinityViolated" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfFaultToleranceAntiAffinityViolated(value))
                })
            } else { None }
        },
        0x6963735265736f75 => { // icsResou
            if type_name == "ArrayOfInsufficientGraphicsResourcesFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInsufficientGraphicsResourcesFault(value))
                })
            } else { None }
        },
        0x6967537065634261 => { // igSpecBa
            if type_name == "ArrayOfVirtualDeviceConfigSpecBackingSpec" {
                Some(|raw| {
                    let value: Vec<VirtualDeviceConfigSpecBackingSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualDeviceConfigSpecBackingSpec(value))
                })
            } else { None }
        },
        0x6974684163636573 => { // ithAcces
            if type_name == "ArrayOfNoCompatibleHostWithAccessToDevice" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNoCompatibleHostWithAccessToDevice(value))
                })
            } else { None }
        },
        0x6c506f727467726f => { // lPortgro
            if type_name == "ArrayOfDistributedVirtualPortgroupProblem" {
                Some(|raw| {
                    let value: Vec<DistributedVirtualPortgroupProblem> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDistributedVirtualPortgroupProblem(value))
                })
            } else { None }
        },
        0x6c53776974636848 => { // lSwitchH
            if type_name == "ArrayOfDistributedVirtualSwitchHostMember" {
                Some(|raw| {
                    let value: Vec<DistributedVirtualSwitchHostMember> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDistributedVirtualSwitchHostMember(value))
                })
            } else { None }
        },
        0x6c65725063694275 => { // lerPciBu
            if type_name == "ArrayOfVirtualUSBControllerPciBusSlotInfo" {
                Some(|raw| {
                    let value: Vec<VirtualUsbControllerPciBusSlotInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualUsbControllerPciBusSlotInfo(value))
                })
            } else { None }
        },
        0x6e61676572566d4d => { // nagerVmM
            if type_name == "VirtualMachineMetadataManagerVmMetadataOp" {
                Some(|raw| {
                    let value: super::enums::VirtualMachineMetadataManagerVmMetadataOpEnum = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::VirtualMachineMetadataManagerVmMetadataOp(value))
                })
            } else { None }
        },
        0x6e76616c69644669 => { // nvalidFi
            if type_name == "ArrayOfVmFaultToleranceInvalidFileBacking" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmFaultToleranceInvalidFileBacking(value))
                })
            } else { None }
        },
        0x6f6e666967497373 => { // onfigIss
            if type_name == "ArrayOfVmFaultToleranceConfigIssueWrapper" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmFaultToleranceConfigIssueWrapper(value))
                })
            } else { None }
        },
        0x6f74696f6e4e6f74 => { // otionNot
            if type_name == "ArrayOfIndependentDiskVMotionNotSupported" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfIndependentDiskVMotionNotSupported(value))
                })
            } else { None }
        },
        0x6f756768416c6c6f => { // oughAllo
            if type_name == "ArrayOfVirtualPCIPassthroughAllowedDevice" {
                Some(|raw| {
                    let value: Vec<VirtualPciPassthroughAllowedDevice> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualPciPassthroughAllowedDevice(value))
                })
            } else { None }
        },
        0x6f7665566d496e55 => { // oveVmInU
            if type_name == "ArrayOfStorageDrsCannotMoveVmInUserFolder" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfStorageDrsCannotMoveVmInUserFolder(value))
                })
            } else { None }
        },
        0x706461746548614d => { // pdateHaM
            if type_name == "ArrayOfClusterHostInfraUpdateHaModeAction" {
                Some(|raw| {
                    let value: Vec<ClusterHostInfraUpdateHaModeAction> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterHostInfraUpdateHaModeAction(value))
                })
            } else { None }
        },
        0x706d50726f766973 => { // pmProvis
            if type_name == "VirtualMachineCloneSpecTpmProvisionPolicy" {
                Some(|raw| {
                    let value: super::enums::VirtualMachineCloneSpecTpmProvisionPolicyEnum = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::VirtualMachineCloneSpecTpmProvisionPolicy(value))
                })
            } else { None }
        },
        0x7273696f6e4e6f74 => { // rsionNot
            if type_name == "ArrayOfVirtualHardwareVersionNotSupported" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualHardwareVersionNotSupported(value))
                })
            } else { None }
        },
        0x727446696c654261 => { // rtFileBa
            if type_name == "ArrayOfVirtualParallelPortFileBackingInfo" {
                Some(|raw| {
                    let value: Vec<VirtualParallelPortFileBackingInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualParallelPortFileBackingInfo(value))
                })
            } else { None }
        },
        0x735265736f6c7574 => { // sResolut
            if type_name == "ArrayOfHostUnresolvedVmfsResolutionResult" {
                Some(|raw| {
                    let value: Vec<HostUnresolvedVmfsResolutionResult> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostUnresolvedVmfsResolutionResult(value))
                })
            } else { None }
        },
        0x73745350424d4c69 => { // stSPBMLi
            if type_name == "ArrayOfComputeResourceHostSPBMLicenseInfo" {
                Some(|raw| {
                    let value: Vec<ComputeResourceHostSpbmLicenseInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfComputeResourceHostSpbmLicenseInfo(value))
                })
            } else { None }
        },
        0x746853637265656e => { // thScreen
            if type_name == "ArrayOfVmDasBeingResetWithScreenshotEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmDasBeingResetWithScreenshotEvent(value))
                })
            } else { None }
        },
        0x7473546f436c7573 => { // tsToClus
            if type_name == "ArrayOfFolderBatchAddHostsToClusterResult" {
                Some(|raw| {
                    let value: Vec<FolderBatchAddHostsToClusterResult> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfFolderBatchAddHostsToClusterResult(value))
                })
            } else { None }
        },
        0x756c6174696f6e44 => { // ulationD
            if type_name == "ArrayOfInUseFeatureManipulationDisallowed" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInUseFeatureManipulationDisallowed(value))
                })
            } else { None }
        },
        0x7665725265736f75 => { // verResou
            match type_name {
                "ArrayOfInsufficientFailoverResourcesEvent" => {
                    Some(|raw| {
                        let value: Vec<Event> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfInsufficientFailoverResourcesEvent(value))
                    })
                }
                "ArrayOfInsufficientFailoverResourcesFault" => {
                    Some(|raw| {
                        let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfInsufficientFailoverResourcesFault(value))
                    })
                }
                _ => None
            }
        },
        0x766963654261636b => { // viceBack
            if type_name == "ArrayOfVirtualPointingDeviceBackingOption" {
                Some(|raw| {
                    let value: Vec<VirtualPointingDeviceBackingOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualPointingDeviceBackingOption(value))
                })
            } else { None }
        },
        0x7953656e73697469 => { // ySensiti
            if type_name == "ArrayOfLatencySensitivitySensitivityLevel" {
                Some(|raw| {
                    let value: Vec<super::enums::LatencySensitivitySensitivityLevelEnum> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfLatencySensitivitySensitivityLevel(value))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_value_deserializer_42(type_name: &str) -> Option<fn(&serde_json::value::RawValue) -> Result<ValueElements, serde_json::Error>> {
    let s = &type_name[18..22];
    let Some(type_ord) = to_u32(s) else {
        return None;
    };
    match type_ord {
        0x41646453 => { // AddS
            if type_name == "ArrayOfFolderBatchAddStandaloneHostsResult" {
                Some(|raw| {
                    let value: Vec<FolderBatchAddStandaloneHostsResult> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfFolderBatchAddStandaloneHostsResult(value))
                })
            } else { None }
        },
        0x496e666f => { // Info
            if type_name == "ArrayOfToolsConfigInfoToolsLastInstallInfo" {
                Some(|raw| {
                    let value: Vec<ToolsConfigInfoToolsLastInstallInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfToolsConfigInfoToolsLastInstallInfo(value))
                })
            } else { None }
        },
        0x4d616e61 => { // Mana
            if type_name == "ArrayOfHostProfileManagerCompositionResult" {
                Some(|raw| {
                    let value: Vec<HostProfileManagerCompositionResult> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostProfileManagerCompositionResult(value))
                })
            } else { None }
        },
        0x52617744 => { // RawD
            if type_name == "ArrayOfVirtualDiskRawDiskVer2BackingOption" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::VirtualDiskRawDiskVer2BackingOptionTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualDiskRawDiskVer2BackingOption(value))
                })
            } else { None }
        },
        0x53797374 => { // Syst
            if type_name == "ArrayOfVsanUpgradeSystemUpgradeHistoryItem" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::VsanUpgradeSystemUpgradeHistoryItemTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVsanUpgradeSystemUpgradeHistoryItem(value))
                })
            } else { None }
        },
        0x56697274 => { // Virt
            if type_name == "ArrayOfDistributedVirtualSwitchProductSpec" {
                Some(|raw| {
                    let value: Vec<DistributedVirtualSwitchProductSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDistributedVirtualSwitchProductSpec(value))
                })
            } else { None }
        },
        0x57697468 => { // With
            if type_name == "ArrayOfCannotPlaceWithoutPrerequisiteMoves" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCannotPlaceWithoutPrerequisiteMoves(value))
                })
            } else { None }
        },
        0x576f726b => { // Work
            if type_name == "ArrayOfDrsInjectorWorkloadCorrelationState" {
                Some(|raw| {
                    let value: Vec<super::enums::DrsInjectorWorkloadCorrelationStateEnum> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDrsInjectorWorkloadCorrelationState(value))
                })
            } else { None }
        },
        0x616e6e6f => { // anno
            if type_name == "ArrayOfStorageDrsCannotMoveIndependentDisk" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfStorageDrsCannotMoveIndependentDisk(value))
                })
            } else { None }
        },
        0x61737374 => { // asst
            if type_name == "ArrayOfVirtualPCIPassthroughDvxBackingInfo" {
                Some(|raw| {
                    let value: Vec<VirtualPciPassthroughDvxBackingInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualPciPassthroughDvxBackingInfo(value))
                })
            } else { None }
        },
        0x61756c74 => { // ault
            if type_name == "ArrayOfClusterDrsFaultsFaultsByVirtualDisk" {
                Some(|raw| {
                    let value: Vec<ClusterDrsFaultsFaultsByVirtualDisk> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterDrsFaultsFaultsByVirtualDisk(value))
                })
            } else { None }
        },
        0x626c6548 => { // bleH
            if type_name == "ArrayOfVmNoCompatibleHostForSecondaryEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmNoCompatibleHostForSecondaryEvent(value))
                })
            } else { None }
        },
        0x64436172 => { // dCar
            if type_name == "ArrayOfVirtualSoundCardDeviceBackingOption" {
                Some(|raw| {
                    let value: Vec<VirtualSoundCardDeviceBackingOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualSoundCardDeviceBackingOption(value))
                })
            } else { None }
        },
        0x6546726f => { // eFro
            if type_name == "ArrayOfSnapshotMoveFromNonHomeNotSupported" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfSnapshotMoveFromNonHomeNotSupported(value))
                })
            } else { None }
        },
        0x65537973 => { // eSys
            if type_name == "ArrayOfHostDateTimeSystemServiceTestResult" {
                Some(|raw| {
                    let value: Vec<HostDateTimeSystemServiceTestResult> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostDateTimeSystemServiceTestResult(value))
                })
            } else { None }
        },
        0x656d6f74 => { // emot
            if type_name == "ArrayOfVirtualUSBRemoteClientBackingOption" {
                Some(|raw| {
                    let value: Vec<VirtualUsbRemoteClientBackingOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualUsbRemoteClientBackingOption(value))
                })
            } else { None }
        },
        0x696e6543 => { // ineC
            if type_name == "ArrayOfVirtualMachineConfigInfoNpivWwnType" {
                Some(|raw| {
                    let value: Vec<super::enums::VirtualMachineConfigInfoNpivWwnTypeEnum> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineConfigInfoNpivWwnType(value))
                })
            } else { None }
        },
        0x696e6544 => { // ineD
            if type_name == "ArrayOfVirtualMachineDatastoreVolumeOption" {
                Some(|raw| {
                    let value: Vec<VirtualMachineDatastoreVolumeOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineDatastoreVolumeOption(value))
                })
            } else { None }
        },
        0x696e6549 => { // ineI
            if type_name == "ArrayOfVirtualMachineIndependentFilterSpec" {
                Some(|raw| {
                    let value: Vec<VirtualMachineIndependentFilterSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineIndependentFilterSpec(value))
                })
            } else { None }
        },
        0x696e654d => { // ineM
            match type_name {
                "ArrayOfVirtualMachineMemoryReservationInfo" => {
                    Some(|raw| {
                        let value: Vec<VirtualMachineMemoryReservationInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualMachineMemoryReservationInfo(value))
                    })
                }
                "ArrayOfVirtualMachineMemoryReservationSpec" => {
                    Some(|raw| {
                        let value: Vec<VirtualMachineMemoryReservationSpec> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualMachineMemoryReservationSpec(value))
                    })
                }
                _ => None
            }
        },
        0x696e6556 => { // ineV
            if type_name == "ArrayOfVirtualMachineVendorDeviceGroupInfo" {
                Some(|raw| {
                    let value: Vec<VirtualMachineVendorDeviceGroupInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineVendorDeviceGroupInfo(value))
                })
            } else { None }
        },
        0x69727475 => { // irtu
            if type_name == "ArrayOfUnlicensedVirtualMachinesFoundEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfUnlicensedVirtualMachinesFoundEvent(value))
                })
            } else { None }
        },
        0x69746f72 => { // itor
            if type_name == "ArrayOfVmHealthMonitoringStateChangedEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmHealthMonitoringStateChangedEvent(value))
                })
            } else { None }
        },
        0x6c654472 => { // leDr
            if type_name == "ArrayOfCannotDisableDrsOnClustersWithVApps" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCannotDisableDrsOnClustersWithVApps(value))
                })
            } else { None }
        },
        0x6f66696c => { // ofil
            if type_name == "ArrayOfApplyHostProfileConfigurationResult" {
                Some(|raw| {
                    let value: Vec<ApplyHostProfileConfigurationResult> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfApplyHostProfileConfigurationResult(value))
                })
            } else { None }
        },
        0x6f6c6572 => { // oler
            if type_name == "ArrayOfVmSmpFaultToleranceTooManyVMsOnHost" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmSmpFaultToleranceTooManyVMsOnHost(value))
                })
            } else { None }
        },
        0x6f6d7061 => { // ompa
            if type_name == "ArrayOfVmConfigIncompatibleForRecordReplay" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmConfigIncompatibleForRecordReplay(value))
                })
            } else { None }
        },
        0x6f6e5374 => { // onSt
            if type_name == "ArrayOfCustomizationStatelessIpV6Generator" {
                Some(|raw| {
                    let value: Vec<CustomizationStatelessIpV6Generator> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCustomizationStatelessIpV6Generator(value))
                })
            } else { None }
        },
        0x72617469 => { // rati
            if type_name == "ArrayOfDvsApplyOperationFaultFaultOnObject" {
                Some(|raw| {
                    let value: Vec<DvsApplyOperationFaultFaultOnObject> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsApplyOperationFaultFaultOnObject(value))
                })
            } else { None }
        },
        0x72696e67 => { // ring
            if type_name == "ArrayOfAlarmTriggeringActionTransitionSpec" {
                Some(|raw| {
                    let value: Vec<AlarmTriggeringActionTransitionSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfAlarmTriggeringActionTransitionSpec(value))
                })
            } else { None }
        },
        0x73745769 => { // stWi
            if type_name == "ArrayOfCannotAddHostWithFTVmToNonHACluster" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCannotAddHostWithFtVmToNonHaCluster(value))
                })
            } else { None }
        },
        0x74486f73 => { // tHos
            if type_name == "ArrayOfInsufficientHostMemoryCapacityFault" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInsufficientHostMemoryCapacityFault(value))
                })
            } else { None }
        },
        0x74536373 => { // tScs
            match type_name {
                "ArrayOfHostInternetScsiHbaDigestProperties" => {
                    Some(|raw| {
                        let value: Vec<HostInternetScsiHbaDigestProperties> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostInternetScsiHbaDigestProperties(value))
                    })
                }
                "ArrayOfHostInternetScsiHbaIscsiIpv6Address" => {
                    Some(|raw| {
                        let value: Vec<HostInternetScsiHbaIscsiIpv6Address> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostInternetScsiHbaIscsiIpv6Address(value))
                    })
                }
                _ => None
            }
        },
        0x74696350 => { // ticP
            if type_name == "ArrayOfHostDiagnosticPartitionCreateOption" {
                Some(|raw| {
                    let value: Vec<HostDiagnosticPartitionCreateOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostDiagnosticPartitionCreateOption(value))
                })
            } else { None }
        },
        0x75707465 => { // upte
            if type_name == "ArrayOfNetworkDisruptedAndConfigRolledBack" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNetworkDisruptedAndConfigRolledBack(value))
                })
            } else { None }
        },
        0x75746552 => { // uteR
            match type_name {
                "ArrayOfClusterComputeResourceHCIConfigInfo" => {
                    Some(|raw| {
                        let value: Vec<ClusterComputeResourceHciConfigInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfClusterComputeResourceHciConfigInfo(value))
                    })
                }
                "ArrayOfClusterComputeResourceHCIConfigSpec" => {
                    Some(|raw| {
                        let value: Vec<ClusterComputeResourceHciConfigSpec> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfClusterComputeResourceHciConfigSpec(value))
                    })
                }
                _ => None
            }
        },
        _ => None
    }
}
fn get_value_deserializer_43(type_name: &str) -> Option<fn(&serde_json::value::RawValue) -> Result<ValueElements, serde_json::Error>> {
    let s = &type_name[21..25];
    let Some(type_ord) = to_u32(s) else {
        return None;
    };
    match type_ord {
        0x436f6e66 => { // Conf
            match type_name {
                "ArrayOfVirtualMachineConfigInfoOverheadInfo" => {
                    Some(|raw| {
                        let value: Vec<VirtualMachineConfigInfoOverheadInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualMachineConfigInfoOverheadInfo(value))
                    })
                }
                "ArrayOfVirtualMachineConfigOptionDescriptor" => {
                    Some(|raw| {
                        let value: Vec<VirtualMachineConfigOptionDescriptor> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualMachineConfigOptionDescriptor(value))
                    })
                }
                _ => None
            }
        },
        0x436f6e74 => { // Cont
            if type_name == "ArrayOfVirtualMachineContentLibraryItemInfo" {
                Some(|raw| {
                    let value: Vec<VirtualMachineContentLibraryItemInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineContentLibraryItemInfo(value))
                })
            } else { None }
        },
        0x44796e61 => { // Dyna
            if type_name == "ArrayOfVirtualMachineDynamicPassthroughInfo" {
                Some(|raw| {
                    let value: Vec<VirtualMachineDynamicPassthroughInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineDynamicPassthroughInfo(value))
                })
            } else { None }
        },
        0x46696c65 => { // File
            if type_name == "ArrayOfVirtualMachineFileLayoutExDiskLayout" {
                Some(|raw| {
                    let value: Vec<VirtualMachineFileLayoutExDiskLayout> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineFileLayoutExDiskLayout(value))
                })
            } else { None }
        },
        0x48747470 => { // Http
            if type_name == "ArrayOfSessionManagerHttpServiceRequestSpec" {
                Some(|raw| {
                    let value: Vec<SessionManagerHttpServiceRequestSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfSessionManagerHttpServiceRequestSpec(value))
                })
            } else { None }
        },
        0x496e6974 => { // Init
            if type_name == "ArrayOfClusterClusterInitialPlacementAction" {
                Some(|raw| {
                    let value: Vec<ClusterClusterInitialPlacementAction> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterClusterInitialPlacementAction(value))
                })
            } else { None }
        },
        0x52656c6f => { // Relo
            if type_name == "ArrayOfVirtualMachineRelocateTransformation" {
                Some(|raw| {
                    let value: Vec<super::enums::VirtualMachineRelocateTransformationEnum> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineRelocateTransformation(value))
                })
            } else { None }
        },
        0x5265736f => { // Reso
            if type_name == "ArrayOfClusterComputeResourceHostVmkNicInfo" {
                Some(|raw| {
                    let value: Vec<ClusterComputeResourceHostVmkNicInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterComputeResourceHostVmkNicInfo(value))
                })
            } else { None }
        },
        0x53657474 => { // Sett
            if type_name == "ArrayOfCannotChangeHaSettingsForFtSecondary" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCannotChangeHaSettingsForFtSecondary(value))
                })
            } else { None }
        },
        0x56364164 => { // V6Ad
            if type_name == "ArrayOfHostIpConfigIpV6AddressConfiguration" {
                Some(|raw| {
                    let value: Vec<HostIpConfigIpV6AddressConfiguration> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostIpConfigIpV6AddressConfiguration(value))
                })
            } else { None }
        },
        0x616d6543 => { // ameC
            if type_name == "ArrayOfHostDatastoreNameConflictConnectInfo" {
                Some(|raw| {
                    let value: Vec<HostDatastoreNameConflictConnectInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostDatastoreNameConflictConnectInfo(value))
                })
            } else { None }
        },
        0x61794469 => { // ayDi
            match type_name {
                "ArrayOfVASAStorageArrayDiscoveryFcTransport" => {
                    Some(|raw| {
                        let value: Vec<VasaStorageArrayDiscoveryFcTransport> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVasaStorageArrayDiscoveryFcTransport(value))
                    })
                }
                "ArrayOfVASAStorageArrayDiscoveryIpTransport" => {
                    Some(|raw| {
                        let value: Vec<VasaStorageArrayDiscoveryIpTransport> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVasaStorageArrayDiscoveryIpTransport(value))
                    })
                }
                _ => None
            }
        },
        0x6365546f => { // ceTo
            if type_name == "ArrayOfVmFaultToleranceTooManyFtVcpusOnHost" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmFaultToleranceTooManyFtVcpusOnHost(value))
                })
            } else { None }
        },
        0x636b734e => { // cksN
            if type_name == "ArrayOfVirtualDiskBlocksNotFullyProvisioned" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualDiskBlocksNotFullyProvisioned(value))
                })
            } else { None }
        },
        0x64506f6c => { // dPol
            if type_name == "ArrayOfProfileDeferredPolicyOptionParameter" {
                Some(|raw| {
                    let value: Vec<ProfileDeferredPolicyOptionParameter> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfProfileDeferredPolicyOptionParameter(value))
                })
            } else { None }
        },
        0x65436f6d => { // eCom
            if type_name == "ArrayOfHostTpmSoftwareComponentEventDetails" {
                Some(|raw| {
                    let value: Vec<HostTpmSoftwareComponentEventDetails> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostTpmSoftwareComponentEventDetails(value))
                })
            } else { None }
        },
        0x656d6f74 => { // emot
            match type_name {
                "ArrayOfVirtualDeviceRemoteDeviceBackingInfo" => {
                    Some(|raw| {
                        let value: Vec<Box<dyn super::traits::VirtualDeviceRemoteDeviceBackingInfoTrait>> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualDeviceRemoteDeviceBackingInfo(value))
                    })
                }
                "ArrayOfVirtualFloppyRemoteDeviceBackingInfo" => {
                    Some(|raw| {
                        let value: Vec<VirtualFloppyRemoteDeviceBackingInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualFloppyRemoteDeviceBackingInfo(value))
                    })
                }
                _ => None
            }
        },
        0x66696749 => { // figI
            if type_name == "ArrayOfVsanClusterConfigInfoHostDefaultInfo" {
                Some(|raw| {
                    let value: Vec<VsanClusterConfigInfoHostDefaultInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVsanClusterConfigInfoHostDefaultInfo(value))
                })
            } else { None }
        },
        0x69616c69 => { // iali
            if type_name == "ArrayOfHostProfileSerializedHostProfileSpec" {
                Some(|raw| {
                    let value: Vec<HostProfileSerializedHostProfileSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostProfileSerializedHostProfileSpec(value))
                })
            } else { None }
        },
        0x69634e65 => { // icNe
            if type_name == "ArrayOfDvsSystemTrafficNetworkRuleQualifier" {
                Some(|raw| {
                    let value: Vec<DvsSystemTrafficNetworkRuleQualifier> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsSystemTrafficNetworkRuleQualifier(value))
                })
            } else { None }
        },
        0x696c6564 => { // iled
            if type_name == "ArrayOfEVCAdmissionFailedCPUFeaturesForMode" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfEvcAdmissionFailedCpuFeaturesForMode(value))
                })
            } else { None }
        },
        0x696c6974 => { // ilit
            if type_name == "ArrayOfOvfCpuCompatibilityCheckNotSupported" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfOvfCpuCompatibilityCheckNotSupported(value))
                })
            } else { None }
        },
        0x6c506f72 => { // lPor
            match type_name {
                "ArrayOfVirtualParallelPortDeviceBackingInfo" => {
                    Some(|raw| {
                        let value: Vec<VirtualParallelPortDeviceBackingInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualParallelPortDeviceBackingInfo(value))
                    })
                }
                "ArrayOfVirtualParallelPortFileBackingOption" => {
                    Some(|raw| {
                        let value: Vec<VirtualParallelPortFileBackingOption> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualParallelPortFileBackingOption(value))
                    })
                }
                _ => None
            }
        },
        0x6d697043 => { // mipC
            if type_name == "ArrayOfCryptoManagerKmipCustomAttributeSpec" {
                Some(|raw| {
                    let value: Vec<CryptoManagerKmipCustomAttributeSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCryptoManagerKmipCustomAttributeSpec(value))
                })
            } else { None }
        },
        0x6d6f7465 => { // mote
            if type_name == "ArrayOfVirtualCdromRemoteAtapiBackingOption" {
                Some(|raw| {
                    let value: Vec<VirtualCdromRemoteAtapiBackingOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualCdromRemoteAtapiBackingOption(value))
                })
            } else { None }
        },
        0x6e656e74 => { // nent
            if type_name == "ArrayOfClusterVmComponentProtectionSettings" {
                Some(|raw| {
                    let value: Vec<ClusterVmComponentProtectionSettings> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterVmComponentProtectionSettings(value))
                })
            } else { None }
        },
        0x6f6e6669 => { // onfi
            if type_name == "ArrayOfVirtualDeviceConfigSpecFileOperation" {
                Some(|raw| {
                    let value: Vec<super::enums::VirtualDeviceConfigSpecFileOperationEnum> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualDeviceConfigSpecFileOperation(value))
                })
            } else { None }
        },
        0x6f727444 => { // ortD
            if type_name == "ArrayOfVirtualSerialPortDeviceBackingOption" {
                Some(|raw| {
                    let value: Vec<VirtualSerialPortDeviceBackingOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualSerialPortDeviceBackingOption(value))
                })
            } else { None }
        },
        0x6f744d6f => { // otMo
            if type_name == "ArrayOfStorageDrsCannotMoveManuallyPlacedVm" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfStorageDrsCannotMoveManuallyPlacedVm(value))
                })
            } else { None }
        },
        0x72756374 => { // ruct
            if type_name == "ArrayOfDvsHostInfrastructureTrafficResource" {
                Some(|raw| {
                    let value: Vec<DvsHostInfrastructureTrafficResource> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsHostInfrastructureTrafficResource(value))
                })
            } else { None }
        },
        0x73506572 => { // sPer
            if type_name == "ArrayOfNumVirtualCoresPerSocketNotSupported" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNumVirtualCoresPerSocketNotSupported(value))
                })
            } else { None }
        },
        0x73737468 => { // ssth
            if type_name == "ArrayOfVirtualCdromPassthroughBackingOption" {
                Some(|raw| {
                    let value: Vec<VirtualCdromPassthroughBackingOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualCdromPassthroughBackingOption(value))
                })
            } else { None }
        },
        0x74614469 => { // taDi
            if type_name == "ArrayOfVirtualDiskDeltaDiskFormatsSupported" {
                Some(|raw| {
                    let value: Vec<VirtualDiskDeltaDiskFormatsSupported> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualDiskDeltaDiskFormatsSupported(value))
                })
            } else { None }
        },
        0x7465506f => { // tePo
            if type_name == "ArrayOfProfileCompositePolicyOptionMetadata" {
                Some(|raw| {
                    let value: Vec<ProfileCompositePolicyOptionMetadata> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfProfileCompositePolicyOptionMetadata(value))
                })
            } else { None }
        },
        0x74656d50 => { // temP
            if type_name == "ArrayOfVsanUpgradeSystemPreflightCheckIssue" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::VsanUpgradeSystemPreflightCheckIssueTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVsanUpgradeSystemPreflightCheckIssue(value))
                })
            } else { None }
        },
        0x7475616c => { // tual
            if type_name == "ArrayOfDistributedVirtualSwitchPortCriteria" {
                Some(|raw| {
                    let value: Vec<DistributedVirtualSwitchPortCriteria> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDistributedVirtualSwitchPortCriteria(value))
                })
            } else { None }
        },
        0x75726365 => { // urce
            if type_name == "ArrayOfDVSNetworkResourcePoolAllocationInfo" {
                Some(|raw| {
                    let value: Vec<DvsNetworkResourcePoolAllocationInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsNetworkResourcePoolAllocationInfo(value))
                })
            } else { None }
        },
        0x79737465 => { // yste
            if type_name == "ArrayOfHostDatastoreSystemVvolDatastoreSpec" {
                Some(|raw| {
                    let value: Vec<HostDatastoreSystemVvolDatastoreSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostDatastoreSystemVvolDatastoreSpec(value))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_value_deserializer_44(type_name: &str) -> Option<fn(&serde_json::value::RawValue) -> Result<ValueElements, serde_json::Error>> {
    let s = &type_name[21..25];
    let Some(type_ord) = to_u32(s) else {
        return None;
    };
    match type_ord {
        0x436f6e66 => { // Conf
            if type_name == "ArrayOfClusterProfileConfigServiceCreateSpec" {
                Some(|raw| {
                    let value: Vec<ClusterProfileConfigServiceCreateSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterProfileConfigServiceCreateSpec(value))
                })
            } else { None }
        },
        0x47756573 => { // Gues
            if type_name == "ArrayOfVirtualMachineGuestMonitoringModeInfo" {
                Some(|raw| {
                    let value: Vec<VirtualMachineGuestMonitoringModeInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineGuestMonitoringModeInfo(value))
                })
            } else { None }
        },
        0x4c656761 => { // Lega
            if type_name == "ArrayOfVirtualMachineLegacyNetworkSwitchInfo" {
                Some(|raw| {
                    let value: Vec<VirtualMachineLegacyNetworkSwitchInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineLegacyNetworkSwitchInfo(value))
                })
            } else { None }
        },
        0x4d616e61 => { // Mana
            if type_name == "ArrayOfHostVirtualNicManagerNicTypeSelection" {
                Some(|raw| {
                    let value: Vec<HostVirtualNicManagerNicTypeSelection> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostVirtualNicManagerNicTypeSelection(value))
                })
            } else { None }
        },
        0x52656c6f => { // Relo
            if type_name == "ArrayOfVirtualMachineRelocateSpecDiskLocator" {
                Some(|raw| {
                    let value: Vec<VirtualMachineRelocateSpecDiskLocator> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineRelocateSpecDiskLocator(value))
                })
            } else { None }
        },
        0x566d6673 => { // Vmfs
            if type_name == "ArrayOfHostUnresolvedVmfsVolumeResolveStatus" {
                Some(|raw| {
                    let value: Vec<HostUnresolvedVmfsVolumeResolveStatus> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostUnresolvedVmfsVolumeResolveStatus(value))
                })
            } else { None }
        },
        0x566d6f6d => { // Vmom
            if type_name == "ArrayOfSessionManagerVmomiServiceRequestSpec" {
                Some(|raw| {
                    let value: Vec<SessionManagerVmomiServiceRequestSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfSessionManagerVmomiServiceRequestSpec(value))
                })
            } else { None }
        },
        0x61676572 => { // ager
            match type_name {
                "ArrayOfPerformanceManagerCounterLevelMapping" => {
                    Some(|raw| {
                        let value: Vec<PerformanceManagerCounterLevelMapping> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfPerformanceManagerCounterLevelMapping(value))
                    })
                }
                "ArrayOfHostProfileManagerHostToConfigSpecMap" => {
                    Some(|raw| {
                        let value: Vec<HostProfileManagerHostToConfigSpecMap> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostProfileManagerHostToConfigSpecMap(value))
                    })
                }
                _ => None
            }
        },
        0x61746962 => { // atib
            if type_name == "ArrayOfVmConfigIncompatibleForFaultTolerance" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmConfigIncompatibleForFaultTolerance(value))
                })
            } else { None }
        },
        0x654d616e => { // eMan
            match type_name {
                "ArrayOfHostCertificateManagerCertificateInfo" => {
                    Some(|raw| {
                        let value: Vec<HostCertificateManagerCertificateInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostCertificateManagerCertificateInfo(value))
                    })
                }
                "ArrayOfHostCertificateManagerCertificateSpec" => {
                    Some(|raw| {
                        let value: Vec<HostCertificateManagerCertificateSpec> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostCertificateManagerCertificateSpec(value))
                    })
                }
                _ => None
            }
        },
        0x65746563 => { // etec
            if type_name == "ArrayOfNonVIWorkloadDetectedOnDatastoreEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNonViWorkloadDetectedOnDatastoreEvent(value))
                })
            } else { None }
        },
        0x696c6564 => { // iled
            if type_name == "ArrayOfEVCAdmissionFailedHostSoftwareForMode" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfEvcAdmissionFailedHostSoftwareForMode(value))
                })
            } else { None }
        },
        0x6e42756c => { // nBul
            if type_name == "ArrayOfImportOperationBulkFaultFaultOnImport" {
                Some(|raw| {
                    let value: Vec<ImportOperationBulkFaultFaultOnImport> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfImportOperationBulkFaultFaultOnImport(value))
                })
            } else { None }
        },
        0x6e666f48 => { // nfoH
            if type_name == "ArrayOfHostMultipathInfoHppLogicalUnitPolicy" {
                Some(|raw| {
                    let value: Vec<HostMultipathInfoHppLogicalUnitPolicy> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostMultipathInfoHppLogicalUnitPolicy(value))
                })
            } else { None }
        },
        0x6f727454 => { // ortT
            if type_name == "ArrayOfVirtualSerialPortThinPrintBackingInfo" {
                Some(|raw| {
                    let value: Vec<VirtualSerialPortThinPrintBackingInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualSerialPortThinPrintBackingInfo(value))
                })
            } else { None }
        },
        0x70656369 => { // peci
            if type_name == "ArrayOfDvsPortVendorSpecificStateChangeEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsPortVendorSpecificStateChangeEvent(value))
                })
            } else { None }
        },
        0x73426568 => { // sBeh
            if type_name == "ArrayOfCannotChangeDrsBehaviorForFtSecondary" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCannotChangeDrsBehaviorForFtSecondary(value))
                })
            } else { None }
        },
        0x73694862 => { // siHb
            if type_name == "ArrayOfHostInternetScsiHbaDigestCapabilities" {
                Some(|raw| {
                    let value: Vec<HostInternetScsiHbaDigestCapabilities> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostInternetScsiHbaDigestCapabilities(value))
                })
            } else { None }
        },
        0x74436172 => { // tCar
            match type_name {
                "ArrayOfVirtualEthernetCardNetworkBackingInfo" => {
                    Some(|raw| {
                        let value: Vec<VirtualEthernetCardNetworkBackingInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualEthernetCardNetworkBackingInfo(value))
                    })
                }
                "ArrayOfVirtualEthernetCardResourceAllocation" => {
                    Some(|raw| {
                        let value: Vec<VirtualEthernetCardResourceAllocation> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualEthernetCardResourceAllocation(value))
                    })
                }
                _ => None
            }
        },
        0x744d616e => { // tMan
            if type_name == "ArrayOfHostNoRedundantManagementNetworkEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostNoRedundantManagementNetworkEvent(value))
                })
            } else { None }
        },
        0x74656d44 => { // temD
            if type_name == "ArrayOfHostStorageSystemDiskLocatorLedResult" {
                Some(|raw| {
                    let value: Vec<HostStorageSystemDiskLocatorLedResult> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostStorageSystemDiskLocatorLedResult(value))
                })
            } else { None }
        },
        0x74656d4e => { // temN
            if type_name == "ArrayOfVsanUpgradeSystemNetworkPartitionInfo" {
                Some(|raw| {
                    let value: Vec<VsanUpgradeSystemNetworkPartitionInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVsanUpgradeSystemNetworkPartitionInfo(value))
                })
            } else { None }
        },
        0x74656d50 => { // temP
            if type_name == "ArrayOfVsanUpgradeSystemPreflightCheckResult" {
                Some(|raw| {
                    let value: Vec<VsanUpgradeSystemPreflightCheckResult> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVsanUpgradeSystemPreflightCheckResult(value))
                })
            } else { None }
        },
        0x74656d57 => { // temW
            if type_name == "ArrayOfVsanUpgradeSystemWrongEsxVersionIssue" {
                Some(|raw| {
                    let value: Vec<VsanUpgradeSystemWrongEsxVersionIssue> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVsanUpgradeSystemWrongEsxVersionIssue(value))
                })
            } else { None }
        },
        0x74684375 => { // thCu
            if type_name == "ArrayOfVmPoweringOnWithCustomizedDVPortEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmPoweringOnWithCustomizedDvPortEvent(value))
                })
            } else { None }
        },
        0x7468726f => { // thro
            match type_name {
                "ArrayOfVirtualPCIPassthroughDvxBackingOption" => {
                    Some(|raw| {
                        let value: Vec<VirtualPciPassthroughDvxBackingOption> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualPciPassthroughDvxBackingOption(value))
                    })
                }
                "ArrayOfVirtualPCIPassthroughVmiopBackingInfo" => {
                    Some(|raw| {
                        let value: Vec<VirtualPciPassthroughVmiopBackingInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualPciPassthroughVmiopBackingInfo(value))
                    })
                }
                _ => None
            }
        },
        0x7475616c => { // tual
            if type_name == "ArrayOfDistributedVirtualSwitchPortConnectee" {
                Some(|raw| {
                    let value: Vec<DistributedVirtualSwitchPortConnectee> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDistributedVirtualSwitchPortConnectee(value))
                })
            } else { None }
        },
        0x74776f72 => { // twor
            if type_name == "HostInternetScsiHbaNetworkBindingSupportType" {
                Some(|raw| {
                    let value: super::enums::HostInternetScsiHbaNetworkBindingSupportTypeEnum = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::HostInternetScsiHbaNetworkBindingSupportType(value))
                })
            } else { None }
        },
        0x75726365 => { // urce
            if type_name == "ArrayOfHostVFlashResourceConfigurationResult" {
                Some(|raw| {
                    let value: Vec<HostVFlashResourceConfigurationResult> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostVFlashResourceConfigurationResult(value))
                })
            } else { None }
        },
        0x75726974 => { // urit
            if type_name == "ArrayOfHostTpmBootSecurityOptionEventDetails" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::HostTpmBootSecurityOptionEventDetailsTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostTpmBootSecurityOptionEventDetails(value))
                })
            } else { None }
        },
        0x75744f6e => { // utOn
            if type_name == "ArrayOfVmFailedRelayoutOnVmfs2DatastoreEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmFailedRelayoutOnVmfs2DatastoreEvent(value))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_value_deserializer_45(type_name: &str) -> Option<fn(&serde_json::value::RawValue) -> Result<ValueElements, serde_json::Error>> {
    let s = &type_name[12..16];
    let Some(type_ord) = to_u32(s) else {
        return None;
    };
    match type_ord {
        0x466c6173 => { // Flas
            match type_name {
                "ArrayOfHostVFlashManagerVFlashCacheConfigInfo" => {
                    Some(|raw| {
                        let value: Vec<HostVFlashManagerVFlashCacheConfigInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostVFlashManagerVFlashCacheConfigInfo(value))
                    })
                }
                "ArrayOfHostVFlashManagerVFlashCacheConfigSpec" => {
                    Some(|raw| {
                        let value: Vec<HostVFlashManagerVFlashCacheConfigSpec> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostVFlashManagerVFlashCacheConfigSpec(value))
                    })
                }
                _ => None
            }
        },
        0x616c4465 => { // alDe
            if type_name == "ArrayOfVirtualDeviceRemoteDeviceBackingOption" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::VirtualDeviceRemoteDeviceBackingOptionTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualDeviceRemoteDeviceBackingOption(value))
                })
            } else { None }
        },
        0x616c4574 => { // alEt
            if type_name == "ArrayOfVirtualEthernetCardDVPortBackingOption" {
                Some(|raw| {
                    let value: Vec<VirtualEthernetCardDvPortBackingOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualEthernetCardDvPortBackingOption(value))
                })
            } else { None }
        },
        0x616c466c => { // alFl
            if type_name == "ArrayOfVirtualFloppyRemoteDeviceBackingOption" {
                Some(|raw| {
                    let value: Vec<VirtualFloppyRemoteDeviceBackingOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualFloppyRemoteDeviceBackingOption(value))
                })
            } else { None }
        },
        0x616c4d61 => { // alMa
            if type_name == "ArrayOfVirtualMachineFileLayoutSnapshotLayout" {
                Some(|raw| {
                    let value: Vec<VirtualMachineFileLayoutSnapshotLayout> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineFileLayoutSnapshotLayout(value))
                })
            } else { None }
        },
        0x616c5043 => { // alPC
            match type_name {
                "ArrayOfVirtualPCIPassthroughDeviceBackingInfo" => {
                    Some(|raw| {
                        let value: Vec<VirtualPciPassthroughDeviceBackingInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualPciPassthroughDeviceBackingInfo(value))
                    })
                }
                "ArrayOfVirtualPCIPassthroughPluginBackingInfo" => {
                    Some(|raw| {
                        let value: Vec<Box<dyn super::traits::VirtualPciPassthroughPluginBackingInfoTrait>> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualPciPassthroughPluginBackingInfo(value))
                    })
                }
                _ => None
            }
        },
        0x616c5061 => { // alPa
            if type_name == "ArrayOfVirtualParallelPortDeviceBackingOption" {
                Some(|raw| {
                    let value: Vec<VirtualParallelPortDeviceBackingOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualParallelPortDeviceBackingOption(value))
                })
            } else { None }
        },
        0x616c506f => { // alPo
            if type_name == "ArrayOfVirtualPointingDeviceDeviceBackingInfo" {
                Some(|raw| {
                    let value: Vec<VirtualPointingDeviceDeviceBackingInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualPointingDeviceDeviceBackingInfo(value))
                })
            } else { None }
        },
        0x63636573 => { // cces
            if type_name == "ArrayOfHostAccessRestrictedToManagementServer" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostAccessRestrictedToManagementServer(value))
                })
            } else { None }
        },
        0x65446973 => { // eDis
            if type_name == "ArrayOfVmwareDistributedVirtualSwitchVlanSpec" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::VmwareDistributedVirtualSwitchVlanSpecTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmwareDistributedVirtualSwitchVlanSpec(value))
                })
            } else { None }
        },
        0x67654472 => { // geDr
            if type_name == "ArrayOfStorageDrsCannotMoveVmWithMountedCDROM" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfStorageDrsCannotMoveVmWithMountedCdrom(value))
                })
            } else { None }
        },
        0x69627574 => { // ibut
            match type_name {
                "ArrayOfDistributedVirtualSwitchPortConnection" => {
                    Some(|raw| {
                        let value: Vec<DistributedVirtualSwitchPortConnection> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfDistributedVirtualSwitchPortConnection(value))
                    })
                }
                "ArrayOfDistributedVirtualSwitchPortStatistics" => {
                    Some(|raw| {
                        let value: Vec<DistributedVirtualSwitchPortStatistics> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfDistributedVirtualSwitchPortStatistics(value))
                    })
                }
                _ => None
            }
        },
        0x69746f72 => { // itor
            if type_name == "ArrayOfVmMonitorIncompatibleForFaultTolerance" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmMonitorIncompatibleForFaultTolerance(value))
                })
            } else { None }
        },
        0x6c654d65 => { // leMe
            if type_name == "ArrayOfProfileMetadataProfileOperationMessage" {
                Some(|raw| {
                    let value: Vec<ProfileMetadataProfileOperationMessage> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfProfileMetadataProfileOperationMessage(value))
                })
            } else { None }
        },
        0x6d697a61 => { // miza
            if type_name == "ArrayOfCustomizationIPSettingsIpV6AddressSpec" {
                Some(|raw| {
                    let value: Vec<CustomizationIpSettingsIpV6AddressSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCustomizationIpSettingsIpV6AddressSpec(value))
                })
            } else { None }
        },
        0x6e746572 => { // nter
            if type_name == "ArrayOfHostInternetScsiHbaDiscoveryProperties" {
                Some(|raw| {
                    let value: Vec<HostInternetScsiHbaDiscoveryProperties> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostInternetScsiHbaDiscoveryProperties(value))
                })
            } else { None }
        },
        0x70677261 => { // pgra
            if type_name == "ArrayOfVsanUpgradeSystemNetworkPartitionIssue" {
                Some(|raw| {
                    let value: Vec<VsanUpgradeSystemNetworkPartitionIssue> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVsanUpgradeSystemNetworkPartitionIssue(value))
                })
            } else { None }
        },
        0x706d4174 => { // pmAt
            if type_name == "ArrayOfHostTpmAttestationInfoAcceptanceStatus" {
                Some(|raw| {
                    let value: Vec<super::enums::HostTpmAttestationInfoAcceptanceStatusEnum> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostTpmAttestationInfoAcceptanceStatus(value))
                })
            } else { None }
        },
        0x746f7265 => { // tore
            if type_name == "ArrayOfDatastoreNamespaceManagerDirectoryInfo" {
                Some(|raw| {
                    let value: Vec<DatastoreNamespaceManagerDirectoryInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDatastoreNamespaceManagerDirectoryInfo(value))
                })
            } else { None }
        },
        0x74776f72 => { // twor
            if type_name == "ArrayOfDVSNetworkResourceManagementCapability" {
                Some(|raw| {
                    let value: Vec<DvsNetworkResourceManagementCapability> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsNetworkResourceManagementCapability(value))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_value_deserializer_46(type_name: &str) -> Option<fn(&serde_json::value::RawValue) -> Result<ValueElements, serde_json::Error>> {
    let s = &type_name[18..22];
    let Some(type_ord) = to_u32(s) else {
        return None;
    };
    match type_ord {
        0x42726f77 => { // Brow
            if type_name == "ArrayOfEnvironmentBrowserConfigOptionQuerySpec" {
                Some(|raw| {
                    let value: Vec<EnvironmentBrowserConfigOptionQuerySpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfEnvironmentBrowserConfigOptionQuerySpec(value))
                })
            } else { None }
        },
        0x4d616e61 => { // Mana
            match type_name {
                "ArrayOfHostVMotionManagerDstInstantCloneResult" => {
                    Some(|raw| {
                        let value: Vec<HostVMotionManagerDstInstantCloneResult> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostVMotionManagerDstInstantCloneResult(value))
                    })
                }
                "ArrayOfHostVMotionManagerSrcInstantCloneResult" => {
                    Some(|raw| {
                        let value: Vec<HostVMotionManagerSrcInstantCloneResult> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostVMotionManagerSrcInstantCloneResult(value))
                    })
                }
                _ => None
            }
        },
        0x50617373 => { // Pass
            if type_name == "ArrayOfVirtualSCSIPassthroughDeviceBackingInfo" {
                Some(|raw| {
                    let value: Vec<VirtualScsiPassthroughDeviceBackingInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualScsiPassthroughDeviceBackingInfo(value))
                })
            } else { None }
        },
        0x53797374 => { // Syst
            if type_name == "ArrayOfVsanUpgradeSystemHostsDisconnectedIssue" {
                Some(|raw| {
                    let value: Vec<VsanUpgradeSystemHostsDisconnectedIssue> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVsanUpgradeSystemHostsDisconnectedIssue(value))
                })
            } else { None }
        },
        0x56697274 => { // Virt
            match type_name {
                "ArrayOfDistributedVirtualSwitchHostProductSpec" => {
                    Some(|raw| {
                        let value: Vec<DistributedVirtualSwitchHostProductSpec> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfDistributedVirtualSwitchHostProductSpec(value))
                    })
                }
                "ArrayOfDistributedVirtualSwitchKeyedOpaqueBlob" => {
                    Some(|raw| {
                        let value: Vec<DistributedVirtualSwitchKeyedOpaqueBlob> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfDistributedVirtualSwitchKeyedOpaqueBlob(value))
                    })
                }
                _ => None
            }
        },
        0x616c506f => { // alPo
            if type_name == "ArrayOfVirtualSerialPortThinPrintBackingOption" {
                Some(|raw| {
                    let value: Vec<VirtualSerialPortThinPrintBackingOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualSerialPortThinPrintBackingOption(value))
                })
            } else { None }
        },
        0x616e6e65 => { // anne
            if type_name == "ArrayOfHostFibreChannelOverEthernetHbaLinkInfo" {
                Some(|raw| {
                    let value: Vec<HostFibreChannelOverEthernetHbaLinkInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostFibreChannelOverEthernetHbaLinkInfo(value))
                })
            } else { None }
        },
        0x61737374 => { // asst
            match type_name {
                "ArrayOfVirtualPCIPassthroughDynamicBackingInfo" => {
                    Some(|raw| {
                        let value: Vec<VirtualPciPassthroughDynamicBackingInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualPciPassthroughDynamicBackingInfo(value))
                    })
                }
                "ArrayOfVirtualPCIPassthroughVmiopBackingOption" => {
                    Some(|raw| {
                        let value: Vec<VirtualPciPassthroughVmiopBackingOption> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualPciPassthroughVmiopBackingOption(value))
                    })
                }
                _ => None
            }
        },
        0x63654d6f => { // ceMo
            if type_name == "ArrayOfNoMaintenanceModeDrsRecommendationForVM" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfNoMaintenanceModeDrsRecommendationForVm(value))
                })
            } else { None }
        },
        0x66696749 => { // figI
            if type_name == "ArrayOfVsanHostConfigInfoNetworkInfoPortConfig" {
                Some(|raw| {
                    let value: Vec<VsanHostConfigInfoNetworkInfoPortConfig> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVsanHostConfigInfoNetworkInfoPortConfig(value))
                })
            } else { None }
        },
        0x69627574 => { // ibut
            if type_name == "ArrayOfVmwareDistributedVirtualSwitchPvlanSpec" {
                Some(|raw| {
                    let value: Vec<VmwareDistributedVirtualSwitchPvlanSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmwareDistributedVirtualSwitchPvlanSpec(value))
                })
            } else { None }
        },
        0x696e6542 => { // ineB
            match type_name {
                "ArrayOfVirtualMachineBaseIndependentFilterSpec" => {
                    Some(|raw| {
                        let value: Vec<Box<dyn super::traits::VirtualMachineBaseIndependentFilterSpecTrait>> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualMachineBaseIndependentFilterSpec(value))
                    })
                }
                "ArrayOfVirtualMachineBootOptionsBootableDevice" => {
                    Some(|raw| {
                        let value: Vec<Box<dyn super::traits::VirtualMachineBootOptionsBootableDeviceTrait>> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualMachineBootOptionsBootableDevice(value))
                    })
                }
                _ => None
            }
        },
        0x696e654d => { // ineM
            if type_name == "ArrayOfVirtualMachineMetadataManagerVmMetadata" {
                Some(|raw| {
                    let value: Vec<VirtualMachineMetadataManagerVmMetadata> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineMetadataManagerVmMetadata(value))
                })
            } else { None }
        },
        0x696e6551 => { // ineQ
            if type_name == "ArrayOfVirtualMachineQuickStatsMemoryTierStats" {
                Some(|raw| {
                    let value: Vec<VirtualMachineQuickStatsMemoryTierStats> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineQuickStatsMemoryTierStats(value))
                })
            } else { None }
        },
        0x6e616765 => { // nage
            if type_name == "ArrayOfHostPatchManagerStatusPrerequisitePatch" {
                Some(|raw| {
                    let value: Vec<HostPatchManagerStatusPrerequisitePatch> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostPatchManagerStatusPrerequisitePatch(value))
                })
            } else { None }
        },
        0x6e666f52 => { // nfoR
            if type_name == "ArrayOfBaseConfigInfoRawDiskMappingBackingInfo" {
                Some(|raw| {
                    let value: Vec<BaseConfigInfoRawDiskMappingBackingInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfBaseConfigInfoRawDiskMappingBackingInfo(value))
                })
            } else { None }
        },
        0x6e747345 => { // ntsE
            if type_name == "ArrayOfVmRequirementsExceedCurrentEVCModeEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmRequirementsExceedCurrentEvcModeEvent(value))
                })
            } else { None }
        },
        0x6f726d61 => { // orma
            if type_name == "ArrayOfMemoryFileFormatNotSupportedByDatastore" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfMemoryFileFormatNotSupportedByDatastore(value))
                })
            } else { None }
        },
        0x6f766572 => { // over
            if type_name == "ArrayOfClusterFailoverHostAdmissionControlInfo" {
                Some(|raw| {
                    let value: Vec<ClusterFailoverHostAdmissionControlInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterFailoverHostAdmissionControlInfo(value))
                })
            } else { None }
        },
        0x70656352 => { // pecR
            if type_name == "ArrayOfVslmCreateSpecRawDiskMappingBackingSpec" {
                Some(|raw| {
                    let value: Vec<VslmCreateSpecRawDiskMappingBackingSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVslmCreateSpecRawDiskMappingBackingSpec(value))
                })
            } else { None }
        },
        0x70677261 => { // pgra
            if type_name == "VsanUpgradeSystemUpgradeHistoryDiskGroupOpType" {
                Some(|raw| {
                    let value: super::enums::VsanUpgradeSystemUpgradeHistoryDiskGroupOpTypeEnum = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::VsanUpgradeSystemUpgradeHistoryDiskGroupOpType(value))
                })
            } else { None }
        },
        0x726e6574 => { // rnet
            if type_name == "ArrayOfVirtualEthernetCardNetworkBackingOption" {
                Some(|raw| {
                    let value: Vec<VirtualEthernetCardNetworkBackingOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualEthernetCardNetworkBackingOption(value))
                })
            } else { None }
        },
        0x73745769 => { // stWi
            if type_name == "ArrayOfCannotAddHostWithFTVmToDifferentCluster" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCannotAddHostWithFtVmToDifferentCluster(value))
                })
            } else { None }
        },
        0x744e6574 => { // tNet
            if type_name == "ArrayOfInsufficientNetworkResourcePoolCapacity" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfInsufficientNetworkResourcePoolCapacity(value))
                })
            } else { None }
        },
        0x7468496e => { // thIn
            if type_name == "ArrayOfHostMultipathInfoFixedLogicalUnitPolicy" {
                Some(|raw| {
                    let value: Vec<HostMultipathInfoFixedLogicalUnitPolicy> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostMultipathInfoFixedLogicalUnitPolicy(value))
                })
            } else { None }
        },
        0x74776f72 => { // twor
            if type_name == "ArrayOfDvsVmVnicNetworkResourcePoolRuntimeInfo" {
                Some(|raw| {
                    let value: Vec<DvsVmVnicNetworkResourcePoolRuntimeInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsVmVnicNetworkResourcePoolRuntimeInfo(value))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_value_deserializer_47(type_name: &str) -> Option<fn(&serde_json::value::RawValue) -> Result<ValueElements, serde_json::Error>> {
    let s = &type_name[30..38];
    let Some(type_ord) = to_u64(s) else {
        return None;
    };
    match type_ord {
        0x4361636865436f6e => { // CacheCon
            if type_name == "ArrayOfVirtualDiskOptionVFlashCacheConfigOption" {
                Some(|raw| {
                    let value: Vec<VirtualDiskOptionVFlashCacheConfigOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualDiskOptionVFlashCacheConfigOption(value))
                })
            } else { None }
        },
        0x4372656174654465 => { // CreateDe
            if type_name == "ArrayOfHostDiagnosticPartitionCreateDescription" {
                Some(|raw| {
                    let value: Vec<HostDiagnosticPartitionCreateDescription> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostDiagnosticPartitionCreateDescription(value))
                })
            } else { None }
        },
        0x616e63654661696c => { // anceFail
            if type_name == "ArrayOfComplianceFailureComplianceFailureValues" {
                Some(|raw| {
                    let value: Vec<ComplianceFailureComplianceFailureValues> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfComplianceFailureComplianceFailureValues(value))
                })
            } else { None }
        },
        0x645372696f764261 => { // dSriovBa
            if type_name == "ArrayOfVirtualSriovEthernetCardSriovBackingInfo" {
                Some(|raw| {
                    let value: Vec<VirtualSriovEthernetCardSriovBackingInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualSriovEthernetCardSriovBackingInfo(value))
                })
            } else { None }
        },
        0x684661756c74546f => { // hFaultTo
            if type_name == "ArrayOfCannotDisconnectHostWithFaultToleranceVm" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfCannotDisconnectHostWithFaultToleranceVm(value))
                })
            } else { None }
        },
        0x68726f7567684261 => { // hroughBa
            if type_name == "ArrayOfVirtualCdromRemotePassthroughBackingInfo" {
                Some(|raw| {
                    let value: Vec<VirtualCdromRemotePassthroughBackingInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualCdromRemotePassthroughBackingInfo(value))
                })
            } else { None }
        },
        0x697373696f6e436f => { // issionCo
            if type_name == "ArrayOfClusterFailoverLevelAdmissionControlInfo" {
                Some(|raw| {
                    let value: Vec<ClusterFailoverLevelAdmissionControlInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterFailoverLevelAdmissionControlInfo(value))
                })
            } else { None }
        },
        0x6c53776974636856 => { // lSwitchV
            if type_name == "ArrayOfVmwareDistributedVirtualSwitchVlanIdSpec" {
                Some(|raw| {
                    let value: Vec<VmwareDistributedVirtualSwitchVlanIdSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmwareDistributedVirtualSwitchVlanIdSpec(value))
                })
            } else { None }
        },
        0x6e67566572314261 => { // ngVer1Ba
            if type_name == "ArrayOfVirtualDiskRawDiskMappingVer1BackingInfo" {
                Some(|raw| {
                    let value: Vec<VirtualDiskRawDiskMappingVer1BackingInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualDiskRawDiskMappingVer1BackingInfo(value))
                })
            } else { None }
        },
        0x6f4461746173746f => { // oDatasto
            if type_name == "ArrayOfVirtualMachineConfigInfoDatastoreUrlPair" {
                Some(|raw| {
                    let value: Vec<VirtualMachineConfigInfoDatastoreUrlPair> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineConfigInfoDatastoreUrlPair(value))
                })
            } else { None }
        },
        0x6f6c6174696f6e43 => { // olationC
            if type_name == "ArrayOfVmVnicPoolReservationViolationClearEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmVnicPoolReservationViolationClearEvent(value))
                })
            } else { None }
        },
        0x6f6c6174696f6e52 => { // olationR
            if type_name == "ArrayOfVmVnicPoolReservationViolationRaiseEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmVnicPoolReservationViolationRaiseEvent(value))
                })
            } else { None }
        },
        0x6f6d697a65644456 => { // omizedDV
            if type_name == "ArrayOfHostVnicConnectedToCustomizedDVPortEvent" {
                Some(|raw| {
                    let value: Vec<Event> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostVnicConnectedToCustomizedDvPortEvent(value))
                })
            } else { None }
        },
        0x6f726b4465766963 => { // orkDevic
            if type_name == "ArrayOfVirtualMachineSriovNetworkDevicePoolInfo" {
                Some(|raw| {
                    let value: Vec<VirtualMachineSriovNetworkDevicePoolInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineSriovNetworkDevicePoolInfo(value))
                })
            } else { None }
        },
        0x6f76657279436170 => { // overyCap
            if type_name == "ArrayOfHostInternetScsiHbaDiscoveryCapabilities" {
                Some(|raw| {
                    let value: Vec<HostInternetScsiHbaDiscoveryCapabilities> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostInternetScsiHbaDiscoveryCapabilities(value))
                })
            } else { None }
        },
        0x70656e64656e7446 => { // pendentF
            if type_name == "ArrayOfVirtualMachineEmptyIndependentFilterSpec" {
                Some(|raw| {
                    let value: Vec<VirtualMachineEmptyIndependentFilterSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineEmptyIndependentFilterSpec(value))
                })
            } else { None }
        },
        0x744578536e617073 => { // tExSnaps
            if type_name == "ArrayOfVirtualMachineFileLayoutExSnapshotLayout" {
                Some(|raw| {
                    let value: Vec<VirtualMachineFileLayoutExSnapshotLayout> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineFileLayoutExSnapshotLayout(value))
                })
            } else { None }
        },
        0x7567696e4261636b => { // uginBack
            if type_name == "ArrayOfVirtualPCIPassthroughPluginBackingOption" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::VirtualPciPassthroughPluginBackingOptionTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualPciPassthroughPluginBackingOption(value))
                })
            } else { None }
        },
        0x766963654261636b => { // viceBack
            if type_name == "ArrayOfVirtualPCIPassthroughDeviceBackingOption" {
                Some(|raw| {
                    let value: Vec<VirtualPciPassthroughDeviceBackingOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualPciPassthroughDeviceBackingOption(value))
                })
            } else { None }
        },
        0x7669636550617274 => { // vicePart
            if type_name == "ArrayOfVirtualMachineIdeDiskDevicePartitionInfo" {
                Some(|raw| {
                    let value: Vec<VirtualMachineIdeDiskDevicePartitionInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineIdeDiskDevicePartitionInfo(value))
                })
            } else { None }
        },
        0x7765724f6e4e6f74 => { // werOnNot
            if type_name == "ArrayOfFaultTolerancePrimaryPowerOnNotAttempted" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfFaultTolerancePrimaryPowerOnNotAttempted(value))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_value_deserializer_48(type_name: &str) -> Option<fn(&serde_json::value::RawValue) -> Result<ValueElements, serde_json::Error>> {
    let s = &type_name[18..22];
    let Some(type_ord) = to_u32(s) else {
        return None;
    };
    match type_ord {
        0x50617373 => { // Pass
            if type_name == "ArrayOfVirtualSCSIPassthroughDeviceBackingOption" {
                Some(|raw| {
                    let value: Vec<VirtualScsiPassthroughDeviceBackingOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualScsiPassthroughDeviceBackingOption(value))
                })
            } else { None }
        },
        0x53797374 => { // Syst
            if type_name == "ArrayOfVsanUpgradeSystemRogueHostsInClusterIssue" {
                Some(|raw| {
                    let value: Vec<VsanUpgradeSystemRogueHostsInClusterIssue> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVsanUpgradeSystemRogueHostsInClusterIssue(value))
                })
            } else { None }
        },
        0x56697274 => { // Virt
            if type_name == "ArrayOfDistributedVirtualSwitchHostMemberBacking" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::DistributedVirtualSwitchHostMemberBackingTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDistributedVirtualSwitchHostMemberBacking(value))
                })
            } else { None }
        },
        0x616e6167 => { // anag
            match type_name {
                "ArrayOfHostVFlashManagerVFlashResourceConfigInfo" => {
                    Some(|raw| {
                        let value: Vec<HostVFlashManagerVFlashResourceConfigInfo> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostVFlashManagerVFlashResourceConfigInfo(value))
                    })
                }
                "ArrayOfHostVFlashManagerVFlashResourceConfigSpec" => {
                    Some(|raw| {
                        let value: Vec<HostVFlashManagerVFlashResourceConfigSpec> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostVFlashManagerVFlashResourceConfigSpec(value))
                    })
                }
                _ => None
            }
        },
        0x616e6e6f => { // anno
            match type_name {
                "ArrayOfStorageDrsCannotMoveDiskInMultiWriterMode" => {
                    Some(|raw| {
                        let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfStorageDrsCannotMoveDiskInMultiWriterMode(value))
                    })
                }
                "ArrayOfStorageDrsCannotMoveVmWithNoFilesInLayout" => {
                    Some(|raw| {
                        let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfStorageDrsCannotMoveVmWithNoFilesInLayout(value))
                    })
                }
                _ => None
            }
        },
        0x61737374 => { // asst
            if type_name == "ArrayOfVirtualPCIPassthroughDynamicBackingOption" {
                Some(|raw| {
                    let value: Vec<VirtualPciPassthroughDynamicBackingOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualPciPassthroughDynamicBackingOption(value))
                })
            } else { None }
        },
        0x61746163 => { // atac
            if type_name == "ArrayOfStorageDrsDatacentersCannotShareDatastore" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfStorageDrsDatacentersCannotShareDatastore(value))
                })
            } else { None }
        },
        0x676e6d65 => { // gnme
            if type_name == "ArrayOfLicenseAssignmentManagerLicenseAssignment" {
                Some(|raw| {
                    let value: Vec<LicenseAssignmentManagerLicenseAssignment> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfLicenseAssignmentManagerLicenseAssignment(value))
                })
            } else { None }
        },
        0x696e6543 => { // ineC
            if type_name == "ArrayOfVirtualMachineCloneSpecTpmProvisionPolicy" {
                Some(|raw| {
                    let value: Vec<super::enums::VirtualMachineCloneSpecTpmProvisionPolicyEnum> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineCloneSpecTpmProvisionPolicy(value))
                })
            } else { None }
        },
        0x696e654d => { // ineM
            if type_name == "ArrayOfVirtualMachineMetadataManagerVmMetadataOp" {
                Some(|raw| {
                    let value: Vec<super::enums::VirtualMachineMetadataManagerVmMetadataOpEnum> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineMetadataManagerVmMetadataOp(value))
                })
            } else { None }
        },
        0x696e6550 => { // ineP
            if type_name == "ArrayOfVirtualMachinePciSharedGpuPassthroughInfo" {
                Some(|raw| {
                    let value: Vec<VirtualMachinePciSharedGpuPassthroughInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachinePciSharedGpuPassthroughInfo(value))
                })
            } else { None }
        },
        0x6e616765 => { // nage
            if type_name == "ArrayOfHostPatchManagerPatchManagerOperationSpec" {
                Some(|raw| {
                    let value: Vec<HostPatchManagerPatchManagerOperationSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostPatchManagerPatchManagerOperationSpec(value))
                })
            } else { None }
        },
        0x6f766572 => { // over
            if type_name == "ArrayOfClusterFailoverHostAdmissionControlPolicy" {
                Some(|raw| {
                    let value: Vec<ClusterFailoverHostAdmissionControlPolicy> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterFailoverHostAdmissionControlPolicy(value))
                })
            } else { None }
        },
        0x75746552 => { // uteR
            if type_name == "ArrayOfClusterComputeResourceClusterConfigResult" {
                Some(|raw| {
                    let value: Vec<ClusterComputeResourceClusterConfigResult> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterComputeResourceClusterConfigResult(value))
                })
            } else { None }
        },
        0x77617043 => { // wapC
            if type_name == "ArrayOfHostSystemSwapConfigurationDisabledOption" {
                Some(|raw| {
                    let value: Vec<HostSystemSwapConfigurationDisabledOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostSystemSwapConfigurationDisabledOption(value))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_value_deserializer_49(type_name: &str) -> Option<fn(&serde_json::value::RawValue) -> Result<ValueElements, serde_json::Error>> {
    let s = &type_name[31..35];
    let Some(type_ord) = to_u32(s) else {
        return None;
    };
    match type_ord {
        0x48697374 => { // Hist
            if type_name == "ArrayOfVsanUpgradeSystemUpgradeHistoryDiskGroupOp" {
                Some(|raw| {
                    let value: Vec<VsanUpgradeSystemUpgradeHistoryDiskGroupOp> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVsanUpgradeSystemUpgradeHistoryDiskGroupOp(value))
                })
            } else { None }
        },
        0x486f7374 => { // Host
            if type_name == "ArrayOfDistributedVirtualSwitchHostMemberPnicSpec" {
                Some(|raw| {
                    let value: Vec<DistributedVirtualSwitchHostMemberPnicSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDistributedVirtualSwitchHostMemberPnicSpec(value))
                })
            } else { None }
        },
        0x4e657477 => { // Netw
            if type_name == "ArrayOfDistributedVirtualSwitchNetworkOffloadSpec" {
                Some(|raw| {
                    let value: Vec<DistributedVirtualSwitchNetworkOffloadSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDistributedVirtualSwitchNetworkOffloadSpec(value))
                })
            } else { None }
        },
        0x5372696f => { // Srio
            if type_name == "ArrayOfVirtualSriovEthernetCardSriovBackingOption" {
                Some(|raw| {
                    let value: Vec<VirtualSriovEthernetCardSriovBackingOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualSriovEthernetCardSriovBackingOption(value))
                })
            } else { None }
        },
        0x616c6c79 => { // ally
            if type_name == "ArrayOfStorageDrsCannotMoveManuallyPlacedSwapFile" {
                Some(|raw| {
                    let value: Vec<MethodFault> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfStorageDrsCannotMoveManuallyPlacedSwapFile(value))
                })
            } else { None }
        },
        0x6476616e => { // dvan
            if type_name == "ArrayOfClusterDasFailoverLevelAdvancedRuntimeInfo" {
                Some(|raw| {
                    let value: Vec<ClusterDasFailoverLevelAdvancedRuntimeInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterDasFailoverLevelAdvancedRuntimeInfo(value))
                })
            } else { None }
        },
        0x65736f75 => { // esou
            if type_name == "ArrayOfHostVFlashManagerVFlashResourceRunTimeInfo" {
                Some(|raw| {
                    let value: Vec<HostVFlashManagerVFlashResourceRunTimeInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostVFlashManagerVFlashResourceRunTimeInfo(value))
                })
            } else { None }
        },
        0x67566572 => { // gVer
            if type_name == "ArrayOfVirtualDiskRawDiskMappingVer1BackingOption" {
                Some(|raw| {
                    let value: Vec<VirtualDiskRawDiskMappingVer1BackingOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualDiskRawDiskMappingVer1BackingOption(value))
                })
            } else { None }
        },
        0x696f6e44 => { // ionD
            if type_name == "ArrayOfHostSystemSwapConfigurationDatastoreOption" {
                Some(|raw| {
                    let value: Vec<HostSystemSwapConfigurationDatastoreOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostSystemSwapConfigurationDatastoreOption(value))
                })
            } else { None }
        },
        0x696f6e48 => { // ionH
            if type_name == "ArrayOfHostSystemSwapConfigurationHostCacheOption" {
                Some(|raw| {
                    let value: Vec<HostSystemSwapConfigurationHostCacheOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostSystemSwapConfigurationHostCacheOption(value))
                })
            } else { None }
        },
        0x6c696461 => { // lida
            if type_name == "ArrayOfClusterComputeResourceValidationResultBase" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::ClusterComputeResourceValidationResultBaseTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterComputeResourceValidationResultBase(value))
                })
            } else { None }
        },
        0x6e737461 => { // nsta
            if type_name == "ArrayOfHostRuntimeInfoNetStackInstanceRuntimeInfo" {
                Some(|raw| {
                    let value: Vec<HostRuntimeInfoNetStackInstanceRuntimeInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostRuntimeInfoNetStackInstanceRuntimeInfo(value))
                })
            } else { None }
        },
        0x726f7567 => { // roug
            if type_name == "ArrayOfVirtualCdromRemotePassthroughBackingOption" {
                Some(|raw| {
                    let value: Vec<VirtualCdromRemotePassthroughBackingOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualCdromRemotePassthroughBackingOption(value))
                })
            } else { None }
        },
        0x7373696f => { // ssio
            if type_name == "ArrayOfClusterFailoverLevelAdmissionControlPolicy" {
                Some(|raw| {
                    let value: Vec<ClusterFailoverLevelAdmissionControlPolicy> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterFailoverLevelAdmissionControlPolicy(value))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_value_deserializer_50(type_name: &str) -> Option<fn(&serde_json::value::RawValue) -> Result<ValueElements, serde_json::Error>> {
    let s = &type_name[23..27];
    let Some(type_ord) = to_u32(s) else {
        return None;
    };
    match type_ord {
        0x436c6f63 => { // Cloc
            if type_name == "ArrayOfVirtualPrecisionClockSystemClockBackingInfo" {
                Some(|raw| {
                    let value: Vec<VirtualPrecisionClockSystemClockBackingInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualPrecisionClockSystemClockBackingInfo(value))
                })
            } else { None }
        },
        0x48626141 => { // HbaA
            if type_name == "ArrayOfHostInternetScsiHbaAuthenticationProperties" {
                Some(|raw| {
                    let value: Vec<HostInternetScsiHbaAuthenticationProperties> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostInternetScsiHbaAuthenticationProperties(value))
                })
            } else { None }
        },
        0x4f766572 => { // Over
            if type_name == "ArrayOfHostFibreChannelOverEthernetTargetTransport" {
                Some(|raw| {
                    let value: Vec<HostFibreChannelOverEthernetTargetTransport> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostFibreChannelOverEthernetTargetTransport(value))
                })
            } else { None }
        },
        0x616c5377 => { // alSw
            if type_name == "ArrayOfDistributedVirtualSwitchManagerImportResult" {
                Some(|raw| {
                    let value: Vec<DistributedVirtualSwitchManagerImportResult> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDistributedVirtualSwitchManagerImportResult(value))
                })
            } else { None }
        },
        0x6172644c => { // ardL
            if type_name == "ArrayOfVirtualEthernetCardLegacyNetworkBackingInfo" {
                Some(|raw| {
                    let value: Vec<VirtualEthernetCardLegacyNetworkBackingInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualEthernetCardLegacyNetworkBackingInfo(value))
                })
            } else { None }
        },
        0x6172644f => { // ardO
            if type_name == "ArrayOfVirtualEthernetCardOpaqueNetworkBackingInfo" {
                Some(|raw| {
                    let value: Vec<VirtualEthernetCardOpaqueNetworkBackingInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualEthernetCardOpaqueNetworkBackingInfo(value))
                })
            } else { None }
        },
        0x64566972 => { // dVir
            if type_name == "ArrayOfVmwareDistributedVirtualSwitchTrunkVlanSpec" {
                Some(|raw| {
                    let value: Vec<VmwareDistributedVirtualSwitchTrunkVlanSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVmwareDistributedVirtualSwitchTrunkVlanSpec(value))
                })
            } else { None }
        },
        0x6d4d6973 => { // mMis
            if type_name == "ArrayOfVsanUpgradeSystemMissingHostsInClusterIssue" {
                Some(|raw| {
                    let value: Vec<VsanUpgradeSystemMissingHostsInClusterIssue> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVsanUpgradeSystemMissingHostsInClusterIssue(value))
                })
            } else { None }
        },
        0x6d4e6f74 => { // mNot
            if type_name == "ArrayOfVsanUpgradeSystemNotEnoughFreeCapacityIssue" {
                Some(|raw| {
                    let value: Vec<VsanUpgradeSystemNotEnoughFreeCapacityIssue> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVsanUpgradeSystemNotEnoughFreeCapacityIssue(value))
                })
            } else { None }
        },
        0x6e666967 => { // nfig
            if type_name == "ArrayOfHostSystemSwapConfigurationSystemSwapOption" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::HostSystemSwapConfigurationSystemSwapOptionTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostSystemSwapConfigurationSystemSwapOption(value))
                })
            } else { None }
        },
        0x6e74696d => { // ntim
            if type_name == "ArrayOfVirtualMachineRuntimeInfoDasProtectionState" {
                Some(|raw| {
                    let value: Vec<VirtualMachineRuntimeInfoDasProtectionState> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineRuntimeInfoDasProtectionState(value))
                })
            } else { None }
        },
        0x6f744f70 => { // otOp
            if type_name == "ArrayOfVirtualMachineBootOptionsBootableDiskDevice" {
                Some(|raw| {
                    let value: Vec<VirtualMachineBootOptionsBootableDiskDevice> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineBootOptionsBootableDiskDevice(value))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_value_deserializer_51(type_name: &str) -> Option<fn(&serde_json::value::RawValue) -> Result<ValueElements, serde_json::Error>> {
    let s = &type_name[44..48];
    let Some(type_ord) = to_u32(s) else {
        return None;
    };
    match type_ord {
        0x63654772 => { // ceGr
            if type_name == "ArrayOfVirtualMachineVirtualDeviceGroupsDeviceGroup" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::VirtualMachineVirtualDeviceGroupsDeviceGroupTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineVirtualDeviceGroupsDeviceGroup(value))
                })
            } else { None }
        },
        0x66696749 => { // figI
            if type_name == "ArrayOfDistributedVirtualSwitchHostMemberConfigInfo" {
                Some(|raw| {
                    let value: Vec<DistributedVirtualSwitchHostMemberConfigInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDistributedVirtualSwitchHostMemberConfigInfo(value))
                })
            } else { None }
        },
        0x66696753 => { // figS
            if type_name == "ArrayOfDistributedVirtualSwitchHostMemberConfigSpec" {
                Some(|raw| {
                    let value: Vec<DistributedVirtualSwitchHostMemberConfigSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDistributedVirtualSwitchHostMemberConfigSpec(value))
                })
            } else { None }
        },
        0x67687446 => { // ghtF
            if type_name == "ArrayOfVsanUpgradeSystemUpgradeHistoryPreflightFail" {
                Some(|raw| {
                    let value: Vec<VsanUpgradeSystemUpgradeHistoryPreflightFail> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVsanUpgradeSystemUpgradeHistoryPreflightFail(value))
                })
            } else { None }
        },
        0x69617469 => { // iati
            if type_name == "ArrayOfVStorageObjectAssociationsVmDiskAssociations" {
                Some(|raw| {
                    let value: Vec<VStorageObjectAssociationsVmDiskAssociations> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVStorageObjectAssociationsVmDiskAssociations(value))
                })
            } else { None }
        },
        0x696e6749 => { // ingI
            if type_name == "ArrayOfVirtualDiskPartitionedRawDiskVer2BackingInfo" {
                Some(|raw| {
                    let value: Vec<VirtualDiskPartitionedRawDiskVer2BackingInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualDiskPartitionedRawDiskVer2BackingInfo(value))
                })
            } else { None }
        },
        0x6c746849 => { // lthI
            if type_name == "ArrayOfHostFaultToleranceManagerComponentHealthInfo" {
                Some(|raw| {
                    let value: Vec<HostFaultToleranceManagerComponentHealthInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostFaultToleranceManagerComponentHealthInfo(value))
                })
            } else { None }
        },
        0x6d446576 => { // mDev
            if type_name == "ArrayOfVirtualMachineBootOptionsBootableCdromDevice" {
                Some(|raw| {
                    let value: Vec<VirtualMachineBootOptionsBootableCdromDevice> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineBootOptionsBootableCdromDevice(value))
                })
            } else { None }
        },
        0x6e746169 => { // ntai
            if type_name == "ArrayOfDistributedVirtualSwitchManagerHostContainer" {
                Some(|raw| {
                    let value: Vec<DistributedVirtualSwitchManagerHostContainer> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDistributedVirtualSwitchManagerHostContainer(value))
                })
            } else { None }
        },
        0x6f6e496e => { // onIn
            if type_name == "ArrayOfClusterComputeResourceHostConfigurationInput" {
                Some(|raw| {
                    let value: Vec<ClusterComputeResourceHostConfigurationInput> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterComputeResourceHostConfigurationInput(value))
                })
            } else { None }
        },
        0x6f727454 => { // ortT
            if type_name == "ArrayOfHostInternetScsiHbaNetworkBindingSupportType" {
                Some(|raw| {
                    let value: Vec<super::enums::HostInternetScsiHbaNetworkBindingSupportTypeEnum> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostInternetScsiHbaNetworkBindingSupportType(value))
                })
            } else { None }
        },
        0x726f6c49 => { // rolI
            if type_name == "ArrayOfClusterFailoverResourcesAdmissionControlInfo" {
                Some(|raw| {
                    let value: Vec<ClusterFailoverResourcesAdmissionControlInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterFailoverResourcesAdmissionControlInfo(value))
                })
            } else { None }
        },
        0x7374696d => { // stim
            if type_name == "ArrayOfVsanHostClusterStatusStateCompletionEstimate" {
                Some(|raw| {
                    let value: Vec<VsanHostClusterStatusStateCompletionEstimate> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVsanHostClusterStatusStateCompletionEstimate(value))
                })
            } else { None }
        },
        0x7461496e => { // taIn
            if type_name == "ArrayOfVirtualMachineMetadataManagerVmMetadataInput" {
                Some(|raw| {
                    let value: Vec<VirtualMachineMetadataManagerVmMetadataInput> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineMetadataManagerVmMetadataInput(value))
                })
            } else { None }
        },
        0x74614f77 => { // taOw
            if type_name == "ArrayOfVirtualMachineMetadataManagerVmMetadataOwner" {
                Some(|raw| {
                    let value: Vec<VirtualMachineMetadataManagerVmMetadataOwner> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineMetadataManagerVmMetadataOwner(value))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_value_deserializer_52(type_name: &str) -> Option<fn(&serde_json::value::RawValue) -> Result<ValueElements, serde_json::Error>> {
    let s = &type_name[35..39];
    let Some(type_ord) = to_u32(s) else {
        return None;
    };
    match type_ord {
        0x41747472 => { // Attr
            if type_name == "ArrayOfHostAssignableHardwareConfigAttributeOverride" {
                Some(|raw| {
                    let value: Vec<HostAssignableHardwareConfigAttributeOverride> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostAssignableHardwareConfigAttributeOverride(value))
                })
            } else { None }
        },
        0x4d656d62 => { // Memb
            if type_name == "ArrayOfDistributedVirtualSwitchHostMemberPnicBacking" {
                Some(|raw| {
                    let value: Vec<DistributedVirtualSwitchHostMemberPnicBacking> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDistributedVirtualSwitchHostMemberPnicBacking(value))
                })
            } else { None }
        },
        0x5673616e => { // Vsan
            if type_name == "ArrayOfHostVsanInternalSystemDeleteVsanObjectsResult" {
                Some(|raw| {
                    let value: Vec<HostVsanInternalSystemDeleteVsanObjectsResult> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostVsanInternalSystemDeleteVsanObjectsResult(value))
                })
            } else { None }
        },
        0x61626c65 => { // able
            if type_name == "ArrayOfVsanUpgradeSystemAutoClaimEnabledOnHostsIssue" {
                Some(|raw| {
                    let value: Vec<VsanUpgradeSystemAutoClaimEnabledOnHostsIssue> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVsanUpgradeSystemAutoClaimEnabledOnHostsIssue(value))
                })
            } else { None }
        },
        0x6174696f => { // atio
            if type_name == "ArrayOfHostInternetScsiHbaAuthenticationCapabilities" {
                Some(|raw| {
                    let value: Vec<HostInternetScsiHbaAuthenticationCapabilities> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostInternetScsiHbaAuthenticationCapabilities(value))
                })
            } else { None }
        },
        0x67657244 => { // gerD
            match type_name {
                "ArrayOfHostLowLevelProvisioningManagerDiskLayoutSpec" => {
                    Some(|raw| {
                        let value: Vec<HostLowLevelProvisioningManagerDiskLayoutSpec> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfHostLowLevelProvisioningManagerDiskLayoutSpec(value))
                    })
                }
                "ArrayOfDistributedVirtualSwitchManagerDvsProductSpec" => {
                    Some(|raw| {
                        let value: Vec<DistributedVirtualSwitchManagerDvsProductSpec> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfDistributedVirtualSwitchManagerDvsProductSpec(value))
                    })
                }
                _ => None
            }
        },
        0x67657246 => { // gerF
            if type_name == "ArrayOfHostLowLevelProvisioningManagerFileDeleteSpec" {
                Some(|raw| {
                    let value: Vec<HostLowLevelProvisioningManagerFileDeleteSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostLowLevelProvisioningManagerFileDeleteSpec(value))
                })
            } else { None }
        },
        0x67657256 => { // gerV
            if type_name == "ArrayOfHostLowLevelProvisioningManagerVmRecoveryInfo" {
                Some(|raw| {
                    let value: Vec<HostLowLevelProvisioningManagerVmRecoveryInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostLowLevelProvisioningManagerVmRecoveryInfo(value))
                })
            } else { None }
        },
        0x6c6f636b => { // lock
            if type_name == "ArrayOfVirtualPrecisionClockSystemClockBackingOption" {
                Some(|raw| {
                    let value: Vec<VirtualPrecisionClockSystemClockBackingOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualPrecisionClockSystemClockBackingOption(value))
                })
            } else { None }
        },
        0x6e56616c => { // nVal
            if type_name == "ArrayOfHostProfileManagerCompositionValidationResult" {
                Some(|raw| {
                    let value: Vec<HostProfileManagerCompositionValidationResult> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostProfileManagerCompositionValidationResult(value))
                })
            } else { None }
        },
        0x72566d4d => { // rVmM
            if type_name == "ArrayOfVirtualMachineMetadataManagerVmMetadataResult" {
                Some(|raw| {
                    let value: Vec<VirtualMachineMetadataManagerVmMetadataResult> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineMetadataManagerVmMetadataResult(value))
                })
            } else { None }
        },
        0x7461626c => { // tabl
            if type_name == "ArrayOfVirtualMachineBootOptionsBootableFloppyDevice" {
                Some(|raw| {
                    let value: Vec<VirtualMachineBootOptionsBootableFloppyDevice> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineBootOptionsBootableFloppyDevice(value))
                })
            } else { None }
        },
        0x756c7454 => { // ultT
            if type_name == "ArrayOfMultipleCertificatesVerifyFaultThumbprintData" {
                Some(|raw| {
                    let value: Vec<MultipleCertificatesVerifyFaultThumbprintData> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfMultipleCertificatesVerifyFaultThumbprintData(value))
                })
            } else { None }
        },
        0x77617044 => { // wapD
            if type_name == "ArrayOfVirtualMachineVirtualDeviceSwapDeviceSwapInfo" {
                Some(|raw| {
                    let value: Vec<VirtualMachineVirtualDeviceSwapDeviceSwapInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineVirtualDeviceSwapDeviceSwapInfo(value))
                })
            } else { None }
        },
        0x776f726b => { // work
            match type_name {
                "ArrayOfVirtualEthernetCardLegacyNetworkBackingOption" => {
                    Some(|raw| {
                        let value: Vec<VirtualEthernetCardLegacyNetworkBackingOption> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualEthernetCardLegacyNetworkBackingOption(value))
                    })
                }
                "ArrayOfVirtualEthernetCardOpaqueNetworkBackingOption" => {
                    Some(|raw| {
                        let value: Vec<VirtualEthernetCardOpaqueNetworkBackingOption> = serde_json::from_str(raw.get())?;
                        Ok(ValueElements::ArrayOfVirtualEthernetCardOpaqueNetworkBackingOption(value))
                    })
                }
                _ => None
            }
        },
        _ => None
    }
}
fn get_value_deserializer_53(type_name: &str) -> Option<fn(&serde_json::value::RawValue) -> Result<ValueElements, serde_json::Error>> {
    let s = &type_name[28..32];
    let Some(type_ord) = to_u32(s) else {
        return None;
    };
    match type_ord {
        0x44657461 => { // Deta
            if type_name == "ArrayOfVirtualMachineProfileDetailsDiskProfileDetails" {
                Some(|raw| {
                    let value: Vec<VirtualMachineProfileDetailsDiskProfileDetails> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineProfileDetailsDiskProfileDetails(value))
                })
            } else { None }
        },
        0x54726166 => { // Traf
            if type_name == "ArrayOfDvsHostInfrastructureTrafficResourceAllocation" {
                Some(|raw| {
                    let value: Vec<DvsHostInfrastructureTrafficResourceAllocation> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDvsHostInfrastructureTrafficResourceAllocation(value))
                })
            } else { None }
        },
        0x61646548 => { // adeH
            if type_name == "ArrayOfVsanUpgradeSystemUpgradeHistoryDiskGroupOpType" {
                Some(|raw| {
                    let value: Vec<super::enums::VsanUpgradeSystemUpgradeHistoryDiskGroupOpTypeEnum> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVsanUpgradeSystemUpgradeHistoryDiskGroupOpType(value))
                })
            } else { None }
        },
        0x63657341 => { // cesA
            if type_name == "ArrayOfClusterFailoverResourcesAdmissionControlPolicy" {
                Some(|raw| {
                    let value: Vec<ClusterFailoverResourcesAdmissionControlPolicy> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterFailoverResourcesAdmissionControlPolicy(value))
                })
            } else { None }
        },
        0x64526177 => { // dRaw
            if type_name == "ArrayOfVirtualDiskPartitionedRawDiskVer2BackingOption" {
                Some(|raw| {
                    let value: Vec<VirtualDiskPartitionedRawDiskVer2BackingOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualDiskPartitionedRawDiskVer2BackingOption(value))
                })
            } else { None }
        },
        0x65486f73 => { // eHos
            if type_name == "ArrayOfClusterComputeResourceHostConfigurationProfile" {
                Some(|raw| {
                    let value: Vec<ClusterComputeResourceHostConfigurationProfile> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterComputeResourceHostConfigurationProfile(value))
                })
            } else { None }
        },
        0x6963654f => { // iceO
            if type_name == "ArrayOfVirtualMachineVMCIDeviceOptionFilterSpecOption" {
                Some(|raw| {
                    let value: Vec<VirtualMachineVmciDeviceOptionFilterSpecOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineVmciDeviceOptionFilterSpecOption(value))
                })
            } else { None }
        },
        0x696e674d => { // ingM
            if type_name == "ArrayOfHostLowLevelProvisioningManagerFileReserveSpec" {
                Some(|raw| {
                    let value: Vec<HostLowLevelProvisioningManagerFileReserveSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostLowLevelProvisioningManagerFileReserveSpec(value))
                })
            } else { None }
        },
        0x7253746f => { // rSto
            if type_name == "ArrayOfStorageResourceManagerStorageProfileStatistics" {
                Some(|raw| {
                    let value: Vec<StorageResourceManagerStorageProfileStatistics> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfStorageResourceManagerStorageProfileStatistics(value))
                })
            } else { None }
        },
        0x72617469 => { // rati
            if type_name == "ArrayOfHostSystemSwapConfigurationHostLocalSwapOption" {
                Some(|raw| {
                    let value: Vec<HostSystemSwapConfigurationHostLocalSwapOption> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostSystemSwapConfigurationHostLocalSwapOption(value))
                })
            } else { None }
        },
        0x74636848 => { // tchH
            if type_name == "ArrayOfDistributedVirtualSwitchHostMemberRuntimeState" {
                Some(|raw| {
                    let value: Vec<DistributedVirtualSwitchHostMemberRuntimeState> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDistributedVirtualSwitchHostMemberRuntimeState(value))
                })
            } else { None }
        },
        0x7463684d => { // tchM
            if type_name == "ArrayOfDistributedVirtualSwitchManagerHostArrayFilter" {
                Some(|raw| {
                    let value: Vec<DistributedVirtualSwitchManagerHostArrayFilter> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDistributedVirtualSwitchManagerHostArrayFilter(value))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_value_deserializer_54(type_name: &str) -> Option<fn(&serde_json::value::RawValue) -> Result<ValueElements, serde_json::Error>> {
    let s = &type_name[8..12];
    let Some(type_ord) = to_u32(s) else {
        return None;
    };
    match type_ord {
        0x65736f75 => { // esou
            if type_name == "ComputeResourceHostSPBMLicenseInfoHostSPBMLicenseState" {
                Some(|raw| {
                    let value: super::enums::ComputeResourceHostSpbmLicenseInfoHostSpbmLicenseStateEnum = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ComputeResourceHostSpbmLicenseInfoHostSpbmLicenseState(value))
                })
            } else { None }
        },
        0x69727475 => { // irtu
            if type_name == "ArrayOfVirtualMachineBootOptionsBootableEthernetDevice" {
                Some(|raw| {
                    let value: Vec<VirtualMachineBootOptionsBootableEthernetDevice> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineBootOptionsBootableEthernetDevice(value))
                })
            } else { None }
        },
        0x6c757374 => { // lust
            if type_name == "ArrayOfClusterDasAdvancedRuntimeInfoVmcpCapabilityInfo" {
                Some(|raw| {
                    let value: Vec<ClusterDasAdvancedRuntimeInfoVmcpCapabilityInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterDasAdvancedRuntimeInfoVmcpCapabilityInfo(value))
                })
            } else { None }
        },
        0x6f73744c => { // ostL
            if type_name == "ArrayOfHostLowLevelProvisioningManagerFileDeleteResult" {
                Some(|raw| {
                    let value: Vec<HostLowLevelProvisioningManagerFileDeleteResult> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostLowLevelProvisioningManagerFileDeleteResult(value))
                })
            } else { None }
        },
        0x6f737456 => { // ostV
            if type_name == "ArrayOfHostVsanInternalSystemVsanObjectOperationResult" {
                Some(|raw| {
                    let value: Vec<HostVsanInternalSystemVsanObjectOperationResult> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostVsanInternalSystemVsanObjectOperationResult(value))
                })
            } else { None }
        },
        0x70646174 => { // pdat
            if type_name == "ArrayOfUpdateVirtualMachineFilesResultFailedVmFileInfo" {
                Some(|raw| {
                    let value: Vec<UpdateVirtualMachineFilesResultFailedVmFileInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfUpdateVirtualMachineFilesResultFailedVmFileInfo(value))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_value_deserializer_55(type_name: &str) -> Option<fn(&serde_json::value::RawValue) -> Result<ValueElements, serde_json::Error>> {
    let s = &type_name[35..39];
    let Some(type_ord) = to_u32(s) else {
        return None;
    };
    match type_ord {
        0x49507636 => { // IPv6
            if type_name == "HostInternetScsiHbaIscsiIpv6AddressIPv6AddressOperation" {
                Some(|raw| {
                    let value: super::enums::HostInternetScsiHbaIscsiIpv6AddressIPv6AddressOperationEnum = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::HostInternetScsiHbaIscsiIpv6AddressIPv6AddressOperation(value))
                })
            } else { None }
        },
        0x66696775 => { // figu
            if type_name == "ArrayOfClusterComputeResourceDVSConfigurationValidation" {
                Some(|raw| {
                    let value: Vec<ClusterComputeResourceDvsConfigurationValidation> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterComputeResourceDvsConfigurationValidation(value))
                })
            } else { None }
        },
        0x67657246 => { // gerF
            if type_name == "ArrayOfHostLowLevelProvisioningManagerFileReserveResult" {
                Some(|raw| {
                    let value: Vec<HostLowLevelProvisioningManagerFileReserveResult> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostLowLevelProvisioningManagerFileReserveResult(value))
                })
            } else { None }
        },
        0x67657248 => { // gerH
            if type_name == "ArrayOfDistributedVirtualSwitchManagerHostDvsFilterSpec" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::DistributedVirtualSwitchManagerHostDvsFilterSpecTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDistributedVirtualSwitchManagerHostDvsFilterSpec(value))
                })
            } else { None }
        },
        0x67657256 => { // gerV
            if type_name == "ArrayOfHostLowLevelProvisioningManagerVmMigrationStatus" {
                Some(|raw| {
                    let value: Vec<HostLowLevelProvisioningManagerVmMigrationStatus> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostLowLevelProvisioningManagerVmMigrationStatus(value))
                })
            } else { None }
        },
        0x6e526573 => { // nRes
            if type_name == "ArrayOfHostProfileManagerCompositionResultResultElement" {
                Some(|raw| {
                    let value: Vec<HostProfileManagerCompositionResultResultElement> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostProfileManagerCompositionResultResultElement(value))
                })
            } else { None }
        },
        0x736b4c6f => { // skLo
            if type_name == "ArrayOfVirtualMachineRelocateSpecDiskLocatorBackingSpec" {
                Some(|raw| {
                    let value: Vec<VirtualMachineRelocateSpecDiskLocatorBackingSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineRelocateSpecDiskLocatorBackingSpec(value))
                })
            } else { None }
        },
        0x746f7261 => { // tora
            if type_name == "ArrayOfVStorageObjectSnapshotInfoVStorageObjectSnapshot" {
                Some(|raw| {
                    let value: Vec<VStorageObjectSnapshotInfoVStorageObjectSnapshot> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVStorageObjectSnapshotInfoVStorageObjectSnapshot(value))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_value_deserializer_56(type_name: &str) -> Option<fn(&serde_json::value::RawValue) -> Result<ValueElements, serde_json::Error>> {
    let s = &type_name[11..15];
    let Some(type_ord) = to_u32(s) else {
        return None;
    };
    match type_ord {
        0x4c6f774c => { // LowL
            if type_name == "ArrayOfHostLowLevelProvisioningManagerSnapshotLayoutSpec" {
                Some(|raw| {
                    let value: Vec<HostLowLevelProvisioningManagerSnapshotLayoutSpec> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostLowLevelProvisioningManagerSnapshotLayoutSpec(value))
                })
            } else { None }
        },
        0x696c6550 => { // ileP
            if type_name == "ArrayOfProfileParameterMetadataParameterRelationMetadata" {
                Some(|raw| {
                    let value: Vec<ProfileParameterMetadataParameterRelationMetadata> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfProfileParameterMetadataParameterRelationMetadata(value))
                })
            } else { None }
        },
        0x74657243 => { // terC
            if type_name == "ArrayOfClusterComputeResourceHostConfigurationValidation" {
                Some(|raw| {
                    let value: Vec<ClusterComputeResourceHostConfigurationValidation> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterComputeResourceHostConfigurationValidation(value))
                })
            } else { None }
        },
        0x74657244 => { // terD
            if type_name == "ArrayOfClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots" {
                Some(|raw| {
                    let value: Vec<ClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots(value))
                })
            } else { None }
        },
        0x74657246 => { // terF
            if type_name == "ArrayOfClusterFailoverHostAdmissionControlInfoHostStatus" {
                Some(|raw| {
                    let value: Vec<ClusterFailoverHostAdmissionControlInfoHostStatus> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterFailoverHostAdmissionControlInfoHostStatus(value))
                })
            } else { None }
        },
        0x75616c4d => { // ualM
            if type_name == "ArrayOfVirtualMachineDeviceRuntimeInfoDeviceRuntimeState" {
                Some(|raw| {
                    let value: Vec<Box<dyn super::traits::VirtualMachineDeviceRuntimeInfoDeviceRuntimeStateTrait>> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineDeviceRuntimeInfoDeviceRuntimeState(value))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_value_deserializer_57(type_name: &str) -> Option<fn(&serde_json::value::RawValue) -> Result<ValueElements, serde_json::Error>> {
    let s = &type_name[35..39];
    let Some(type_ord) = to_u32(s) else {
        return None;
    };
    match type_ord {
        0x4661696c => { // Fail
            if type_name == "ArrayOfVVolVmConfigFileUpdateResultFailedVmConfigFileInfo" {
                Some(|raw| {
                    let value: Vec<VVolVmConfigFileUpdateResultFailedVmConfigFileInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVVolVmConfigFileUpdateResultFailedVmConfigFileInfo(value))
                })
            } else { None }
        },
        0x53746f72 => { // Stor
            if type_name == "ArrayOfHostMultipathInfoLogicalUnitStorageArrayTypePolicy" {
                Some(|raw| {
                    let value: Vec<HostMultipathInfoLogicalUnitStorageArrayTypePolicy> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfHostMultipathInfoLogicalUnitStorageArrayTypePolicy(value))
                })
            } else { None }
        },
        0x63656452 => { // cedR
            if type_name == "ArrayOfClusterDasFailoverLevelAdvancedRuntimeInfoSlotInfo" {
                Some(|raw| {
                    let value: Vec<ClusterDasFailoverLevelAdvancedRuntimeInfoSlotInfo> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfClusterDasFailoverLevelAdvancedRuntimeInfoSlotInfo(value))
                })
            } else { None }
        },
        0x67657243 => { // gerC
            if type_name == "ArrayOfDistributedVirtualSwitchManagerCompatibilityResult" {
                Some(|raw| {
                    let value: Vec<DistributedVirtualSwitchManagerCompatibilityResult> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDistributedVirtualSwitchManagerCompatibilityResult(value))
                })
            } else { None }
        },
        0x67657248 => { // gerH
            if type_name == "ArrayOfDistributedVirtualSwitchManagerHostContainerFilter" {
                Some(|raw| {
                    let value: Vec<DistributedVirtualSwitchManagerHostContainerFilter> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfDistributedVirtualSwitchManagerHostContainerFilter(value))
                })
            } else { None }
        },
        0x726f7570 => { // roup
            if type_name == "ArrayOfVirtualMachineVirtualDeviceGroupsVendorDeviceGroup" {
                Some(|raw| {
                    let value: Vec<VirtualMachineVirtualDeviceGroupsVendorDeviceGroup> = serde_json::from_str(raw.get())?;
                    Ok(ValueElements::ArrayOfVirtualMachineVirtualDeviceGroupsVendorDeviceGroup(value))
                })
            } else { None }
        },
        _ => None
    }
}
fn get_value_deserializer_58(type_name: &str) -> Option<fn(&serde_json::value::RawValue) -> Result<ValueElements, serde_json::Error>> {
    match type_name {
        "ArrayOfClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots" => {
            Some(|raw| {
                let value: Vec<ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots> = serde_json::from_str(raw.get())?;
                Ok(ValueElements::ArrayOfClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots(value))
            })
        }
        "ArrayOfDistributedVirtualSwitchHostMemberTransportZoneInfo" => {
            Some(|raw| {
                let value: Vec<DistributedVirtualSwitchHostMemberTransportZoneInfo> = serde_json::from_str(raw.get())?;
                Ok(ValueElements::ArrayOfDistributedVirtualSwitchHostMemberTransportZoneInfo(value))
            })
        }
        _ => None
    }
}
fn get_value_deserializer_59(type_name: &str) -> Option<fn(&serde_json::value::RawValue) -> Result<ValueElements, serde_json::Error>> {
    match type_name {
        "ArrayOfVirtualEthernetCardDistributedVirtualPortBackingInfo" => {
            Some(|raw| {
                let value: Vec<VirtualEthernetCardDistributedVirtualPortBackingInfo> = serde_json::from_str(raw.get())?;
                Ok(ValueElements::ArrayOfVirtualEthernetCardDistributedVirtualPortBackingInfo(value))
            })
        }
        "HostInternetScsiHbaIscsiIpv6AddressAddressConfigurationType" => {
            Some(|raw| {
                let value: super::enums::HostInternetScsiHbaIscsiIpv6AddressAddressConfigurationTypeEnum = serde_json::from_str(raw.get())?;
                Ok(ValueElements::HostInternetScsiHbaIscsiIpv6AddressAddressConfigurationType(value))
            })
        }
        _ => None
    }
}
fn get_value_deserializer_61(type_name: &str) -> Option<fn(&serde_json::value::RawValue) -> Result<ValueElements, serde_json::Error>> {
    match type_name {
        "ArrayOfDistributedVirtualPortgroupNsxPortgroupOperationResult" => {
            Some(|raw| {
                let value: Vec<DistributedVirtualPortgroupNsxPortgroupOperationResult> = serde_json::from_str(raw.get())?;
                Ok(ValueElements::ArrayOfDistributedVirtualPortgroupNsxPortgroupOperationResult(value))
            })
        }
        "ArrayOfDistributedVirtualSwitchManagerHostDvsMembershipFilter" => {
            Some(|raw| {
                let value: Vec<DistributedVirtualSwitchManagerHostDvsMembershipFilter> = serde_json::from_str(raw.get())?;
                Ok(ValueElements::ArrayOfDistributedVirtualSwitchManagerHostDvsMembershipFilter(value))
            })
        }
        "ArrayOfVirtualMachineVendorDeviceGroupInfoComponentDeviceInfo" => {
            Some(|raw| {
                let value: Vec<VirtualMachineVendorDeviceGroupInfoComponentDeviceInfo> = serde_json::from_str(raw.get())?;
                Ok(ValueElements::ArrayOfVirtualMachineVendorDeviceGroupInfoComponentDeviceInfo(value))
            })
        }
        "ArrayOfComputeResourceHostSPBMLicenseInfoHostSPBMLicenseState" => {
            Some(|raw| {
                let value: Vec<super::enums::ComputeResourceHostSpbmLicenseInfoHostSpbmLicenseStateEnum> = serde_json::from_str(raw.get())?;
                Ok(ValueElements::ArrayOfComputeResourceHostSpbmLicenseInfoHostSpbmLicenseState(value))
            })
        }
        _ => None
    }
}
fn get_value_deserializer_62(type_name: &str) -> Option<fn(&serde_json::value::RawValue) -> Result<ValueElements, serde_json::Error>> {
    match type_name {
        "ArrayOfHostVsanInternalSystemVsanPhysicalDiskDiagnosticsResult" => {
            Some(|raw| {
                let value: Vec<HostVsanInternalSystemVsanPhysicalDiskDiagnosticsResult> = serde_json::from_str(raw.get())?;
                Ok(ValueElements::ArrayOfHostVsanInternalSystemVsanPhysicalDiskDiagnosticsResult(value))
            })
        }
        "ArrayOfHostInternetScsiHbaIscsiIpv6AddressIPv6AddressOperation" => {
            Some(|raw| {
                let value: Vec<super::enums::HostInternetScsiHbaIscsiIpv6AddressIPv6AddressOperationEnum> = serde_json::from_str(raw.get())?;
                Ok(ValueElements::ArrayOfHostInternetScsiHbaIscsiIpv6AddressIPv6AddressOperation(value))
            })
        }
        _ => None
    }
}
fn get_value_deserializer_66(type_name: &str) -> Option<fn(&serde_json::value::RawValue) -> Result<ValueElements, serde_json::Error>> {
    match type_name {
        "ArrayOfClusterComputeResourceDVSSettingDVPortgroupToServiceMapping" => {
            Some(|raw| {
                let value: Vec<ClusterComputeResourceDvsSettingDvPortgroupToServiceMapping> = serde_json::from_str(raw.get())?;
                Ok(ValueElements::ArrayOfClusterComputeResourceDvsSettingDvPortgroupToServiceMapping(value))
            })
        }
        "ArrayOfHostInternetScsiHbaIscsiIpv6AddressAddressConfigurationType" => {
            Some(|raw| {
                let value: Vec<super::enums::HostInternetScsiHbaIscsiIpv6AddressAddressConfigurationTypeEnum> = serde_json::from_str(raw.get())?;
                Ok(ValueElements::ArrayOfHostInternetScsiHbaIscsiIpv6AddressAddressConfigurationType(value))
            })
        }
        _ => None
    }
}
fn get_value_deserializer_69(type_name: &str) -> Option<fn(&serde_json::value::RawValue) -> Result<ValueElements, serde_json::Error>> {
    match type_name {
        "ArrayOfHostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption" => {
            Some(|raw| {
                let value: Vec<HostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption> = serde_json::from_str(raw.get())?;
                Ok(ValueElements::ArrayOfHostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption(value))
            })
        }
        "ArrayOfVirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeState" => {
            Some(|raw| {
                let value: Vec<VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeState> = serde_json::from_str(raw.get())?;
                Ok(ValueElements::ArrayOfVirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeState(value))
            })
        }
        _ => None
    }
}
